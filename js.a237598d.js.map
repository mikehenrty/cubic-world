{"version":3,"sources":["js/index.js","js/game/Engine.js","node_modules/three/build/three.js","js/game/controllers/Time.js","js/game/controllers/Input.js","js/game/objects/Cube/index.js","js/game/constants.js","js/game/objects/Cube/static-helpers.js","js/game/objects/Board/index.js","js/game/objects/Board/Squares.js","js/game/objects/Board/Grid.js","js/game/Model/index.js","js/game/Model/BoardModel.js","js/game/Model/CubeModel.js","js/Text/index.js"],"names":["require","Engine","start","THREE","_interopRequireWildcard","_Time","_interopRequireDefault","_Input","_Cube","_Board","_Model","_Text","_constants","CAMERA_LOOK_DISTANCE","BOX_SIZE","constructor","this","v","Vector3","time","Time","scene","Scene","camera","getCamera","model","Model","onScoreUpdate","bind","cube","Cube","onMoveFinish","input","Input","onUp","initiateMove","DIR_AHEAD","onDown","DIR_BACK","onLeft","DIR_LEFT","onRight","DIR_RIGHT","onRelease","cancelNextMove","renderer","WebGLRenderer","setPixelRatio","window","devicePixelRatio","setSize","SCREEN_WIDTH","SCREEN_HEIGHT","autoClear","sceneHUD","getSceneHUD","HUDCamera","getHUDCamera","nextMove","update","[object Object]","add","getObject3D","board","Board","getLighting","updateNextMoveDebug","nextMoveText","remove","moveText","textSize","score","getScore","x","y","textScore","Text","DEBUG","fpsSize","fpsX","fpsY","fpsText","moveX","moveY","setInterval","Math","round","getAverageFPS","OrthographicCamera","ORTHO_DEPTH","PerspectiveCamera","ASPECT_RATIO","position","set","cameraOffset","cameraLookAt","lookAt","AmbientLight","direction","moveSucceeded","move","attemptPickup","cubePosition","getCubePosition","resetSquare","isHolding","setTimeout","requestAnimationFrame","delta","tick","mesh","getWorldPosition","setZ","z","addVectors","clear","render","initWorld","scale","max","innerWidth","innerHeight","document","body","appendChild","domElement","style","transform","global","factory","exports","module","self","undefined","Number","EPSILON","pow","isInteger","value","isFinite","floor","sign","Function","prototype","Object","defineProperty","get","toString","match","assign","target","TypeError","output","index","arguments","length","source","nextKey","hasOwnProperty","call","EventDispatcher","addEventListener","type","listener","_listeners","listeners","indexOf","push","hasEventListener","removeEventListener","listenerArray","splice","dispatchEvent","event","array","slice","i","l","_lut","_canvas","MathUtils","DEG2RAD","PI","RAD2DEG","generateUUID","d0","random","d1","d2","d3","toUpperCase","clamp","min","euclideanModulo","n","m","mapLinear","a1","a2","b1","b2","lerp","t","smoothstep","smootherstep","randInt","low","high","randFloat","randFloatSpread","range","degToRad","degrees","radToDeg","radians","isPowerOfTwo","ceilPowerOfTwo","ceil","log","LN2","floorPowerOfTwo","setQuaternionFromProperEuler","q","a","b","c","order","cos","sin","c2","s2","c13","s13","c1_3","s1_3","c3_1","s3_1","console","warn","Vector2","Matrix3","elements","error","defineProperties","width","height","isVector2","setScalar","scalar","setX","setY","setComponent","Error","getComponent","clone","copy","w","addScalar","s","addScaledVector","sub","subVectors","subScalar","multiply","multiplyScalar","divide","divideScalar","applyMatrix3","e","clampScalar","minVal","maxVal","clampLength","roundToZero","negate","dot","cross","lengthSq","sqrt","manhattanLength","abs","normalize","angle","atan2","distanceTo","distanceToSquared","dx","dy","manhattanDistanceTo","setLength","alpha","lerpVectors","v1","v2","equals","fromArray","offset","toArray","fromBufferAttribute","attribute","getX","getY","rotateAround","center","isMatrix3","n11","n12","n13","n21","n22","n23","n31","n32","n33","te","identity","me","setFromMatrix4","multiplyMatrices","premultiply","ae","be","a11","a12","a13","a21","a22","a23","a31","a32","a33","b11","b12","b13","b21","b22","b23","b31","b32","b33","determinant","d","f","g","h","getInverse","matrix","throwOnDegenerate","isMatrix4","t11","t12","t13","det","msg","detInv","transpose","tmp","getNormalMatrix","matrix4","transposeIntoArray","r","setUvTransform","tx","ty","sx","sy","rotation","cx","cy","rotate","theta","translate","ImageUtils","getDataURL","image","canvas","HTMLCanvasElement","src","createElementNS","context","getContext","ImageData","putImageData","drawImage","toDataURL","textureId","Texture","mapping","wrapS","wrapT","magFilter","minFilter","format","anisotropy","encoding","uuid","name","DEFAULT_IMAGE","mipmaps","DEFAULT_MAPPING","internalFormat","repeat","matrixAutoUpdate","generateMipmaps","premultiplyAlpha","flipY","unpackAlignment","version","onUpdate","Vector4","WebGLRenderTarget","options","scissor","scissorTest","viewport","texture","depthBuffer","stencilBuffer","depthTexture","WebGLMultisampleRenderTarget","samples","Quaternion","_x","_y","_z","_w","create","isTexture","updateMatrix","toJSON","meta","isRootObject","textures","metadata","generator","wrap","images","url","Array","isArray","dispose","transformUv","uv","isVector4","setW","applyMatrix4","setAxisAngleFromQuaternion","acos","setAxisAngleFromRotationMatrix","m11","m12","m13","m21","m22","m23","m31","m32","m33","xx","yy","zz","xy","xz","yz","getZ","getW","isWebGLRenderTarget","isWebGLMultisampleRenderTarget","slerp","qa","qb","qm","slerpFlat","dst","dstOffset","src0","srcOffset0","src1","srcOffset1","x0","y0","z0","w0","x1","y1","z1","w1","dir","sqrSin","len","tDir","_onChangeCallback","isQuaternion","quaternion","setFromEuler","euler","isEuler","c1","c3","s1","s3","setFromAxisAngle","axis","halfAngle","setFromRotationMatrix","trace","setFromUnitVectors","vFrom","vTo","angleTo","rotateTowards","step","inverse","conjugate","p","multiplyQuaternions","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","cosHalfTheta","sqrSinHalfTheta","sinHalfTheta","halfTheta","ratioA","ratioB","_onChange","callback","_vector","_quaternion","isVector3","multiplyVectors","applyEuler","applyQuaternion","applyAxisAngle","applyNormalMatrix","qx","qy","qz","qw","ix","iy","iz","iw","project","matrixWorldInverse","projectionMatrix","unproject","projectionMatrixInverse","matrixWorld","transformDirection","crossVectors","ax","ay","az","bx","by","bz","projectOnVector","denominator","projectOnPlane","planeNormal","reflect","normal","dz","setFromSpherical","setFromSphericalCoords","radius","phi","sinPhiRadius","setFromCylindrical","setFromCylindricalCoords","setFromMatrixPosition","setFromMatrixScale","setFromMatrixColumn","sz","setFromMatrix3Column","_v1","_m1","Matrix4","_zero","_one","n14","n24","n34","n41","n42","n43","n44","copyPosition","extractBasis","xAxis","yAxis","zAxis","makeBasis","extractRotation","scaleX","scaleY","scaleZ","makeRotationFromEuler","af","bf","ce","cf","de","df","ac","ad","bc","bd","makeRotationFromQuaternion","compose","eye","up","a14","a24","a34","a41","a42","a43","a44","b14","b24","b34","b41","b42","b43","b44","setPosition","t14","getMaxScaleOnAxis","scaleXSq","scaleYSq","scaleZSq","makeTranslation","makeRotationX","makeRotationY","makeRotationZ","makeRotationAxis","makeScale","makeShear","x2","y2","z2","wx","wy","wz","decompose","invSX","invSY","invSZ","makePerspective","left","right","top","bottom","near","far","makeOrthographic","_matrix","_quaternion$1","Euler","_order","DefaultOrder","Layers","mask","RotationOrders","asin","setFromQuaternion","setFromVector3","reorder","newOrder","toVector3","optionalResult","channel","enable","enableAll","toggle","disable","disableAll","test","layers","_object3DId","_v1$1","_q1","_m1$1","_target","_position","_scale","_quaternion$2","_xAxis","_yAxis","_zAxis","_addedEvent","_removedEvent","Object3D","parent","children","DefaultUp","configurable","enumerable","modelViewMatrix","normalMatrix","DefaultMatrixAutoUpdate","matrixWorldNeedsUpdate","visible","castShadow","receiveShadow","frustumCulled","renderOrder","userData","background","environment","fog","overrideMaterial","autoUpdate","__THREE_DEVTOOLS__","CustomEvent","detail","isObject3D","onBeforeRender","onAfterRender","setRotationFromAxisAngle","setRotationFromEuler","setRotationFromMatrix","setRotationFromQuaternion","rotateOnAxis","rotateOnWorldAxis","rotateX","rotateY","rotateZ","translateOnAxis","distance","translateX","translateY","translateZ","localToWorld","vector","worldToLocal","updateWorldMatrix","isCamera","isLight","object","attach","getObjectById","id","getObjectByProperty","getObjectByName","updateMatrixWorld","getWorldQuaternion","getWorldScale","getWorldDirection","raycast","traverse","traverseVisible","traverseAncestors","force","updateParents","updateChildren","geometries","materials","shapes","serialize","library","element","JSON","stringify","isInstancedMesh","count","instanceMatrix","isMesh","isLine","isPoints","geometry","parameters","shape","material","uuids","extractFromCache","cache","values","key","data","recursive","parse","child","isScene","_points","_vector$1","_box","Box3","_v0","_v1$2","_v2","_f0","_f1","_f2","_center","_extents","_triangleNormal","_testAxis","Infinity","satForAxes","axes","v0","extents","j","p0","p1","p2","isBox3","setFromArray","minX","minY","minZ","maxX","maxY","maxZ","setFromBufferAttribute","setFromPoints","points","makeEmpty","il","expandByPoint","setFromCenterAndSize","size","halfSize","setFromObject","expandByObject","box","isEmpty","getCenter","getSize","point","expandByVector","expandByScalar","boundingBox","computeBoundingBox","containsPoint","containsBox","getParameter","intersectsBox","intersectsSphere","sphere","clampPoint","intersectsPlane","plane","constant","intersectsTriangle","triangle","distanceToPoint","getBoundingSphere","intersect","union","_box$1","Sphere","optionalCenter","maxRadiusSq","empty","radiusSum","deltaLengthSq","getBoundingBox","_vector$2","_segCenter","_segDir","_diff","_edge1","_edge2","_normal","Ray","origin","ray","at","recast","closestPointToPoint","directionDistance","distanceSqToPoint","distanceSqToSegment","optionalPointOnRay","optionalPointOnSegment","s0","sqrDist","extDet","segExtent","a01","b0","invDet","intersectSphere","tca","radius2","thc","t0","t1","distanceToPlane","intersectPlane","distToPoint","intersectBox","tmin","tmax","tymin","tymax","tzmin","tzmax","invdirx","invdiry","invdirz","intersectTriangle","backfaceCulling","DdN","DdQxE2","DdE1xQ","QdN","_vector1","_vector2","_normalMatrix","Plane","isPlane","setComponents","setFromNormalAndCoplanarPoint","setFromCoplanarPoints","inverseNormalLength","distanceToSphere","projectPoint","intersectLine","line","intersectsLine","startSign","endSign","end","coplanarPoint","optionalNormalMatrix","referencePoint","_v0$1","_v1$3","_v2$1","_v3","_vab","_vac","_vbc","_vap","_vbp","_vcp","Triangle","getNormal","targetLengthSq","getBarycoord","dot00","dot01","dot02","dot11","dot12","denom","invDenom","u","getUV","p3","uv1","uv2","uv3","isFrontFacing","setFromPointsAndIndices","i0","i1","i2","getArea","getMidpoint","getPlane","d4","vc","d5","d6","vb","va","_colorKeywords","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","_hslA","_hslB","Color","setRGB","hue2rgb","SRGBToLinear","LinearToSRGB","Face3","color","materialIndex","vertexNormals","isColor","vertexColors","setHex","setStyle","hex","setHSL","handleAlpha","string","parseFloat","exec","components","parseInt","charAt","setColorName","copyGammaToLinear","gammaFactor","copyLinearToGamma","safeInverse","convertGammaToLinear","convertLinearToGamma","copySRGBToLinear","copyLinearToSRGB","convertSRGBToLinear","convertLinearToSRGB","getHex","getHexString","getHSL","hue","saturation","lightness","getStyle","offsetHSL","addColors","color1","color2","lerpHSL","NAMES","materialId","Material","blending","side","flatShading","vertexTangents","opacity","transparent","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","depthFunc","depthTest","depthWrite","stencilWriteMask","stencilFunc","stencilRef","stencilFuncMask","stencilFail","stencilZFail","stencilZPass","stencilWrite","clippingPlanes","clipIntersection","clipShadows","shadowSide","colorWrite","precision","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","dithering","alphaTest","premultipliedAlpha","toneMapped","MeshBasicMaterial","map","lightMap","lightMapIntensity","aoMap","aoMapIntensity","specularMap","alphaMap","envMap","combine","reflectivity","refractionRatio","wireframe","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","skinning","morphTargets","setValues","isMaterial","onBeforeCompile","newValue","currentValue","isRoot","roughness","metalness","sheen","emissive","emissiveIntensity","specular","shininess","clearcoat","clearcoatRoughness","clearcoatNormalMap","clearcoatNormalScale","matcap","bumpMap","bumpScale","normalMap","normalMapType","normalScale","displacementMap","displacementScale","displacementBias","roughnessMap","metalnessMap","emissiveMap","envMapIntensity","gradientMap","sizeAttenuation","linewidth","dashSize","gapSize","morphNormals","srcPlanes","dstPlanes","isMeshBasicMaterial","_vector$3","BufferAttribute","itemSize","normalized","usage","updateRange","Int8BufferAttribute","Int8Array","Uint8BufferAttribute","Uint8Array","Uint8ClampedBufferAttribute","Uint8ClampedArray","Int16BufferAttribute","Int16Array","Uint16BufferAttribute","Uint16Array","Int32BufferAttribute","Int32Array","Uint32BufferAttribute","Uint32Array","Float32BufferAttribute","Float32Array","Float64BufferAttribute","Float64Array","DirectGeometry","vertices","normals","colors","uvs","uvs2","groups","skinWeights","skinIndices","boundingSphere","verticesNeedUpdate","normalsNeedUpdate","colorsNeedUpdate","uvsNeedUpdate","groupsNeedUpdate","arrayMax","isBufferAttribute","onUploadCallback","setUsage","copyAt","index1","index2","copyArray","copyColorsArray","copyVector2sArray","vectors","copyVector3sArray","copyVector4sArray","setXYZ","setXY","setXYZW","onUpload","computeGroups","group","faces","face","fromGeometry","morphTargetsPosition","faceVertexUvs","hasFaceVertexUv","hasFaceVertexUv2","morphTargetsLength","morphTargetsNormal","morphNormalsLength","hasSkinIndices","hasSkinWeights","vertexUvs","morphTarget","morphNormal","_bufferGeometryId","_m1$2","_obj","_offset","_box$2","_boxMorphTargets","_vector$4","BufferGeometry","attributes","morphAttributes","morphTargetsRelative","drawRange","isBufferGeometry","getIndex","setIndex","getAttribute","setAttribute","deleteAttribute","addGroup","clearGroups","setDrawRange","needsUpdate","tangent","computeBoundingSphere","positions","lineDistances","isGeometry","updateFromObject","direct","__directGeometry","elementsNeedUpdate","lineDistancesNeedUpdate","lineDistance","fromDirectGeometry","morphAttributesPosition","morphAttribute","isNaN","jl","computeFaceNormals","computeVertexNormals","vA","vB","vC","pA","pB","pC","cb","ab","indices","normalizeNormals","merge","attributeArray1","attribute2","attributeArray2","attributeOffset","toNonIndexed","convertBufferAttribute","array2","geometry2","newAttribute","morphArray","keys","attributeData","hasMorphAttributes","attributeArray","_inverseMatrix","_ray","_sphere","_vA","_vB","_vC","_tempA","_tempB","_tempC","_morphA","_morphB","_morphC","_uvA","_uvB","_uvC","_intersectionPoint","_intersectionPointWorld","Mesh","updateMorphTargets","checkIntersection","raycaster","checkBufferGeometryIntersection","morphPosition","morphInfluences","morphTargetInfluences","influence","intersection","morphTargetDictionary","ml","String","intersects","groupMaterial","faceIndex","fvA","fvB","fvC","isMultiMaterial","fl","faceMaterial","uvs_f","_geometryId","_m1$3","_obj$1","_offset$1","Geometry","fromBufferGeometry","scope","addFace","areaWeighted","vl","computeFlatVertexNormals","computeMorphNormals","__originalFaceNormal","__originalVertexNormals","tmpGeo","faceNormals","dstNormalsFace","dstNormalsVertex","faceNormal","materialIndexOffset","vertexOffset","vertices1","vertices2","faces1","faces2","colors1","colors2","vertexCopy","faceCopy","faceVertexNormals","faceVertexColors","faceVertexUvs2","uvsCopy","k","kl","mergeMesh","mergeVertices","verticesMap","unique","changes","faceIndicesToRemove","idx","diff","sortFacesByMaterialIndex","_id","sort","newUvs1","newUvs2","uvs1","vertex","normalsHash","colorsHash","uvsHash","hasFaceNormal","hasFaceVertexNormal","hasFaceColor","hasFaceVertexColor","faceType","setBit","getUvIndex","getNormalIndex","getColorIndex","enabled","hash","srcVertexNormal","destVertexNormal","BoxGeometry","depth","widthSegments","heightSegments","depthSegments","BoxBufferGeometry","__proto__","numberOfVertices","groupStart","buildPlane","udir","vdir","gridX","gridY","segmentWidth","segmentHeight","widthHalf","heightHalf","depthHalf","gridX1","gridY1","vertexCounter","groupCount","cloneUniforms","property","mergeUniforms","uniforms","merged","UniformsUtils","ShaderMaterial","defines","vertexShader","fragmentShader","lights","clipping","extensions","derivatives","fragDepth","drawBuffers","shaderTextureLOD","defaultAttributeValues","index0AttributeName","uniformsNeedUpdate","Camera","fov","aspect","zoom","focus","view","filmGauge","filmOffset","updateProjectionMatrix","isShaderMaterial","isPerspectiveCamera","setFocalLength","focalLength","vExtentSlope","getFilmHeight","atan","getFocalLength","getEffectiveFOV","getFilmWidth","setViewOffset","fullWidth","fullHeight","offsetX","offsetY","clearViewOffset","skew","CubeCamera","cubeResolution","cameraPX","cameraNX","cameraPY","cameraNY","cameraPZ","cameraNZ","renderTarget","WebGLCubeRenderTarget","currentRenderTarget","getRenderTarget","setRenderTarget","stencil","dummy","DataTexture","isWebGLCubeRenderTarget","fromEquirectangularTexture","shader","tEquirect","join","isDataTexture","_sphere$1","_vector$5","Frustum","p4","p5","planes","frustum","setFromProjectionMatrix","me0","me1","me2","me3","me4","me5","me6","me7","me8","me9","me10","me11","me12","me13","me14","me15","intersectsObject","intersectsSprite","sprite","negRadius","UniformsLib","common","diffuse","uvTransform","uv2Transform","specularmap","envmap","flipEnvMap","maxMipLevel","aomap","lightmap","emissivemap","bumpmap","normalmap","displacementmap","roughnessmap","metalnessmap","gradientmap","fogDensity","fogNear","fogFar","fogColor","ambientLightColor","lightProbe","directionalLights","properties","shadow","shadowBias","shadowRadius","shadowMapSize","directionalShadowMap","directionalShadowMatrix","spotLights","coneCos","penumbraCos","decay","spotShadowMap","spotShadowMatrix","pointLights","shadowCameraNear","shadowCameraFar","pointShadowMap","pointShadowMatrix","hemisphereLights","skyColor","groundColor","rectAreaLights","WebGLAnimation","isAnimating","animationLoop","onAnimationFrame","frame","stop","setAnimationLoop","setContext","WebGLAttributes","gl","capabilities","isWebGL2","buffers","WeakMap","isInterleavedBufferAttribute","deleteBuffer","buffer","delete","bufferType","createBuffer","bindBuffer","bufferData","bytesPerElement","BYTES_PER_ELEMENT","bufferSubData","subarray","updateBuffer","PlaneGeometry","PlaneBufferGeometry","width_half","height_half","segment_width","segment_height","ShaderChunk","alphamap_fragment","alphamap_pars_fragment","alphatest_fragment","aomap_fragment","aomap_pars_fragment","begin_vertex","beginnormal_vertex","bsdfs","bumpmap_pars_fragment","clipping_planes_fragment","clipping_planes_pars_fragment","clipping_planes_pars_vertex","clipping_planes_vertex","color_fragment","color_pars_fragment","color_pars_vertex","color_vertex","cube_uv_reflection_fragment","defaultnormal_vertex","displacementmap_pars_vertex","displacementmap_vertex","emissivemap_fragment","emissivemap_pars_fragment","encodings_fragment","encodings_pars_fragment","envmap_fragment","envmap_common_pars_fragment","envmap_pars_fragment","envmap_pars_vertex","envmap_physical_pars_fragment","envmap_vertex","fog_vertex","fog_pars_vertex","fog_fragment","fog_pars_fragment","gradientmap_pars_fragment","lightmap_fragment","lightmap_pars_fragment","lights_lambert_vertex","lights_pars_begin","lights_toon_fragment","lights_toon_pars_fragment","lights_phong_fragment","lights_phong_pars_fragment","lights_physical_fragment","lights_physical_pars_fragment","lights_fragment_begin","lights_fragment_maps","lights_fragment_end","logdepthbuf_fragment","logdepthbuf_pars_fragment","logdepthbuf_pars_vertex","logdepthbuf_vertex","map_fragment","map_pars_fragment","map_particle_fragment","map_particle_pars_fragment","metalnessmap_fragment","metalnessmap_pars_fragment","morphnormal_vertex","morphtarget_pars_vertex","morphtarget_vertex","normal_fragment_begin","normal_fragment_maps","normalmap_pars_fragment","clearcoat_normal_fragment_begin","clearcoat_normal_fragment_maps","clearcoat_normalmap_pars_fragment","packing","premultiplied_alpha_fragment","project_vertex","dithering_fragment","dithering_pars_fragment","roughnessmap_fragment","roughnessmap_pars_fragment","shadowmap_pars_fragment","shadowmap_pars_vertex","shadowmap_vertex","shadowmask_pars_fragment","skinbase_vertex","skinning_pars_vertex","skinning_vertex","skinnormal_vertex","specularmap_fragment","specularmap_pars_fragment","tonemapping_fragment","tonemapping_pars_fragment","uv_pars_fragment","uv_pars_vertex","uv_vertex","uv2_pars_fragment","uv2_pars_vertex","uv2_vertex","worldpos_vertex","background_frag","background_vert","cube_frag","cube_vert","depth_frag","depth_vert","distanceRGBA_frag","distanceRGBA_vert","equirect_frag","equirect_vert","linedashed_frag","linedashed_vert","meshbasic_frag","meshbasic_vert","meshlambert_frag","meshlambert_vert","meshmatcap_frag","meshmatcap_vert","meshtoon_frag","meshtoon_vert","meshphong_frag","meshphong_vert","meshphysical_frag","meshphysical_vert","normal_frag","normal_vert","points_frag","points_vert","shadow_frag","shadow_vert","sprite_frag","sprite_vert","ShaderLib","basic","lambert","phong","standard","toon","dashed","totalSize","t2D","equirect","distanceRGBA","referencePosition","nearDistance","farDistance","WebGLBackground","state","objects","planeMesh","boxMesh","clearColor","clearAlpha","currentBackground","currentBackgroundVersion","currentTonemapping","setClear","getClearColor","setClearColor","getClearAlpha","setClearAlpha","renderList","forceClear","xr","session","getSession","environmentBlendMode","autoClearColor","autoClearDepth","autoClearStencil","isCubeTexture","toneMapping","unshift","WebGLBufferRenderer","info","mode","setMode","drawArrays","renderInstances","primcount","extension","methodName","WebGLCapabilities","maxAnisotropy","getMaxPrecision","getShaderPrecisionFormat","WebGL2RenderingContext","WebGL2ComputeRenderingContext","maxPrecision","logarithmicDepthBuffer","maxTextures","maxVertexTextures","maxTextureSize","maxCubemapSize","maxAttributes","maxVertexUniforms","maxVaryings","maxFragmentUniforms","vertexTextures","floatFragmentTextures","getMaxAnisotropy","MAX_TEXTURE_MAX_ANISOTROPY_EXT","floatVertexTextures","maxSamples","WebGLClipping","globalState","numGlobalPlanes","localClippingEnabled","renderingShadows","viewNormalMatrix","uniform","resetGlobalState","numPlanes","numIntersection","projectPlanes","skipTransform","nPlanes","dstArray","flatSize","viewMatrix","i4","init","enableLocalClipping","beginShadows","endShadows","setState","fromCache","nGlobal","lGlobal","clippingState","WebGLExtensions","getExtension","WebGLGeometries","wireframeAttributes","onGeometryDispose","buffergeometry","memory","updateWireframeAttribute","geometryIndex","geometryPosition","previousAttribute","_bufferGeometry","geometryAttributes","getWireframeAttribute","currentAttribute","WebGLIndexedBufferRenderer","drawElements","WebGLInfo","calls","triangles","lines","programs","autoReset","reset","instanceCount","absNumericalSort","WebGLMorphtargets","influencesList","program","objectInfluences","influences","morphInfluencesSum","morphBaseInfluence","getUniforms","setValue","WebGLObjects","updateList","CubeTexture","DataTexture2DArray","wrapR","DataTexture3D","physical","transparency","isDataTexture2DArray","isDataTexture3D","emptyTexture","emptyTexture2dArray","emptyTexture3d","emptyCubeTexture","arrayCacheF32","arrayCacheI32","mat4array","mat3array","mat2array","flatten","nBlocks","blockSize","firstElem","arraysEqual","allocTexUnits","allocateTextureUnit","setValueV1f","uniform1f","addr","setValueV2f","uniform2f","uniform2fv","setValueV3f","uniform3f","uniform3fv","setValueV4f","uniform4f","uniform4fv","setValueM2","uniformMatrix2fv","setValueM3","uniformMatrix3fv","setValueM4","uniformMatrix4fv","setValueT1","unit","uniform1i","safeSetTexture2D","setValueT2DArray1","setTexture2DArray","setValueT3D1","setTexture3D","setValueT6","safeSetTextureCube","setValueV1i","setValueV2i","uniform2iv","setValueV3i","uniform3iv","setValueV4i","uniform4iv","setValueV1ui","uniform1ui","setValueV1fArray","uniform1fv","setValueV1iArray","uniform1iv","setValueV2iArray","setValueV3iArray","setValueV4iArray","setValueV2fArray","setValueV3fArray","setValueV4fArray","setValueM2Array","setValueM3Array","setValueM4Array","setValueT1Array","units","setValueT6Array","SingleUniform","activeInfo","getSingularSetter","PureArrayUniform","getPureArraySetter","StructuredUniform","seq","updateCache","RePathPart","addUniform","container","uniformObject","parseUniform","path","pathLength","lastIndex","matchEnd","idIsIndex","subscript","next","WebGLUniforms","getProgramParameter","getActiveUniform","getUniformLocation","WebGLShader","createShader","shaderSource","compileShader","setOptional","upload","seqWithValue","programIdCount","getEncodingComponents","getShaderErrors","status","getShaderParameter","getShaderInfoLog","trim","split","addLineNumbers","getShaderSource","getTexelDecodingFunction","functionName","getToneMappingFunction","toneMappingName","filterEmptyLine","replaceLightNums","replace","numDirLights","numSpotLights","numRectAreaLights","numPointLights","numHemiLights","numDirLightShadows","numSpotLightShadows","numPointLightShadows","replaceClippingPlaneNums","numClippingPlanes","numClipIntersection","includePattern","resolveIncludes","includeReplacer","include","loopPattern","unrollLoops","loopReplacer","snippet","generatePrecision","precisionstring","WebGLProgram","cacheKey","prefixVertex","prefixFragment","shadowMapTypeDefine","shadowMapType","generateShadowMapTypeDefine","envMapTypeDefine","envMapMode","generateEnvMapTypeDefine","envMapModeDefine","generateEnvMapModeDefine","envMapBlendingDefine","generateEnvMapBlendingDefine","gammaFactorDefine","customExtensions","extensionDerivatives","envMapCubeUV","tangentSpaceNormalMap","shaderID","extensionFragDepth","rendererExtensionFragDepth","extensionDrawBuffers","rendererExtensionDrawBuffers","extensionShaderTextureLOD","rendererExtensionShaderTextureLod","filter","generateExtensions","customDefines","chunks","generateDefines","createProgram","numMultiviewViews","isRawShaderMaterial","shaderName","instancing","supportsVertexTextures","maxBones","useFog","fogExp2","objectSpaceNormalMap","uvsVertexOnly","useVertexTexture","doubleSided","flipSided","shadowMapEnabled","physicallyCorrectLights","outputEncoding","mapEncoding","matcapEncoding","envMapEncoding","emissiveMapEncoding","lightMapEncoding","depthPacking","isGLSL3ShaderMaterial","versionRegex","cachedUniforms","cachedAttributes","fragmentGlsl","glVertexShader","glFragmentShader","attachShader","bindAttribLocation","linkProgram","debug","checkShaderErrors","programLog","getProgramInfoLog","vertexLog","fragmentLog","runnable","haveDiagnostics","vertexErrors","fragmentErrors","getError","diagnostics","prefix","deleteShader","getAttributes","getActiveAttrib","getAttribLocation","fetchAttributeLocations","destroy","deleteProgram","usedTimes","WebGLPrograms","shaderIDs","MeshDepthMaterial","MeshDistanceMaterial","MeshNormalMaterial","MeshLambertMaterial","MeshPhongMaterial","MeshToonMaterial","MeshStandardMaterial","MeshPhysicalMaterial","MeshMatcapMaterial","LineBasicMaterial","LineDashedMaterial","PointsMaterial","ShadowMaterial","SpriteMaterial","parameterNames","getTextureEncodingFromMap","getParameters","shadows","nClipPlanes","nClipIntersection","isMeshStandardMaterial","isSkinnedMesh","bones","skeleton","nVertexUniforms","nVertexMatrices","allocateBones","shaderobject","getShaderObject","isWebGLMultiviewRenderTarget","numViews","isFogExp2","maxMorphTargets","maxMorphNormals","directional","spot","rectArea","hemi","shadowMap","frawbuffers","extensionDrawbuffers","drawbuffers","getProgramCacheKey","acquireProgram","pl","preexistingProgram","releaseProgram","pop","WebGLProperties","painterSortStable","groupOrder","reversePainterSortStable","WebGLRenderList","renderItems","renderItemsIndex","opaque","defaultProgram","getNextRenderItem","renderItem","customOpaqueSort","customTransparentSort","WebGLRenderLists","lists","onSceneDispose","list","cameras","UniformsCache","light","halfWidth","halfHeight","nextVersion","shadowCastingLightsFirst","lightA","lightB","WebGLLights","directionalLength","pointLength","spotLength","rectAreaLength","hemiLength","numDirectionalShadows","numPointShadows","numSpotShadows","ambient","probe","vector3","matrix42","setup","intensity","isAmbientLight","isLightProbe","sh","coefficients","isDirectionalLight","bias","mapSize","isSpotLight","penumbra","isRectAreaLight","isPointLight","isHemisphereLight","WebGLRenderState","lightsArray","shadowsArray","setupLights","pushLight","pushShadow","shadowLight","WebGLRenderStates","renderStates","renderState","has","isMeshDepthMaterial","isMeshDistanceMaterial","WebGLShadowMap","_renderer","_objects","_frustum","_shadowMapSize","_viewportSize","_viewport","_depthMaterials","_distanceMaterials","_materialCache","0","1","2","shadowMaterialVertical","SAMPLE_RATE","HALF_SAMPLE_RATE","shadow_pass","resolution","shadowMaterialHorizonal","HORIZONAL_PASS","fullScreenTri","fullScreenMesh","VSMPass","mapPass","renderBufferDirect","getDepthMaterialVariant","useMorphing","useSkinning","useInstancing","getDistanceMaterialVariant","getDepthMaterial","result","getMaterialVariant","customMaterial","customDepthMaterial","customDistanceMaterial","keyA","keyB","materialsForVariant","cachedMaterial","renderObject","shadowCamera","depthMaterial","activeCubeFace","getActiveCubeFace","activeMipmapLevel","getActiveMipmapLevel","_state","setBlending","setTest","setScissorTest","shadowFrameExtents","getFrameExtents","isPointLightShadow","pars","viewportCount","getViewportCount","vp","getViewport","updateMatrices","getFrustum","WebGLState","colorBuffer","locked","currentColorMask","currentColorClear","setMask","colorMask","setLocked","lock","currentDepthMask","currentDepthFunc","currentDepthClear","depthMask","setFunc","clearDepth","currentStencilMask","currentStencilFunc","currentStencilRef","currentStencilFuncMask","currentStencilFail","currentStencilZFail","currentStencilZPass","currentStencilClear","stencilTest","stencilMask","setOp","stencilOp","clearStencil","maxVertexAttributes","newAttributes","enabledAttributes","attributeDivisors","enabledCapabilities","currentProgram","currentBlendingEnabled","currentBlending","currentBlendEquation","currentBlendSrc","currentBlendDst","currentBlendEquationAlpha","currentBlendSrcAlpha","currentBlendDstAlpha","currentPremultipledAlpha","currentFlipSided","currentCullFace","currentLineWidth","currentPolygonOffsetFactor","currentPolygonOffsetUnits","lineWidthAvailable","glVersion","currentTextureSlot","currentBoundTextures","currentScissor","currentViewport","createTexture","bindTexture","texParameteri","texImage2D","emptyTextures","enableAttributeAndDivisor","meshPerAttribute","enableVertexAttribArray","setFlipSided","setCullFace","equationToGL","100","101","102","MIN_EXT","MAX_EXT","factorToGL","blendEquationSeparate","blendFuncSeparate","blendFunc","frontFace","cullFace","setPolygonOffset","factor","activeTexture","webglSlot","initAttributes","enableAttribute","disableUnusedAttributes","disableVertexAttribArray","useProgram","setMaterial","frontFaceCW","setLineWidth","lineWidth","webglType","webglTexture","boundTexture","unbindTexture","compressedTexImage2D","apply","texImage3D","WebGLTextures","_gl","utils","_videoTextures","useOffscreenCanvas","OffscreenCanvas","err","createCanvas","resizeImage","needsPowerOfTwo","needsNewCanvas","maxSize","HTMLImageElement","ImageBitmap","textureNeedsGenerateMipmaps","supportsMips","generateMipmap","__maxMipLevel","LOG2E","getInternalFormat","internalFormatName","glFormat","glType","filterFallback","onTextureDispose","textureProperties","__webglInit","deleteTexture","__webglTexture","deallocateTexture","isVideoTexture","onRenderTargetDispose","renderTargetProperties","deleteFramebuffer","__webglFramebuffer","__webglDepthbuffer","deleteRenderbuffer","__webglColorTexture","__webglDepthStencilTexture","__webglViewFramebuffers","deallocateRenderTarget","textureUnits","setTexture2D","slot","updateVideoTexture","__version","complete","uploadTexture","setTextureCube","initTexture","pixelStorei","isCompressed","isCompressedTexture","cubeImage","convert","glInternalFormat","setTextureParameters","mipmap","mipmapImage","setTextureCubeDynamic","wrappingToGL","1000","1001","1002","filterToGL","textureType","__currentAnisotropy","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","textureNeedsPowerOfTwo","isDepthTexture","setupFrameBufferTexture","framebuffer","attachment","textureTarget","bindFramebuffer","framebufferTexture2D","setupRenderBufferStorage","renderbuffer","isMultisample","bindRenderbuffer","getRenderTargetSamples","renderbufferStorageMultisample","renderbufferStorage","framebufferRenderbuffer","setupDepthRenderbuffer","isCube","webglDepthTexture","setupDepthTexture","createRenderbuffer","warnedTexture2D","warnedTextureCube","textureUnit","resetTextureUnits","setupRenderTarget","isMultiview","createFramebuffer","__webglMultisampledFramebuffer","__webglColorRenderbuffer","__webglDepthRenderbuffer","ext","colorTexture","framebufferTextureMultiviewOVR","depthStencilTexture","viewFramebuffers","framebufferTextureLayer","updateRenderTargetMipmap","updateMultisampleRenderTarget","blitFramebuffer","WebGLUtils","HALF_FLOAT_OES","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","COMPRESSED_RGB_ETC1_WEBGL","UNSIGNED_INT_24_8_WEBGL","WebGLMultiviewRenderTarget","WebGLMultiview","mat3","mat4","cameraArray","renderSize","available","maxNumViews","getCameraArray","isArrayCamera","isAvailable","getContextAttributes","antialias","MAX_VIEWS_OVR","attachCamera","isMultiviewCompatible","getDrawingBufferSize","setNumViews","resizeRenderTarget","detachCamera","srcRenderTarget","srcFramebuffers","viewWidth","viewHeight","flush","updateCameraProjectionMatricesUniform","updateCameraViewMatricesUniform","updateObjectMatricesUniforms","ArrayCamera","Group","WebXRManager","referenceSpace","referenceSpaceType","pose","controllers","inputSourcesMap","Map","cameraL","cameraR","cameraVR","_currentDepthNear","_currentDepthFar","onSessionEvent","controller","inputSource","targetRay","grip","onSessionEnd","forEach","setFramebuffer","animation","isPresenting","onRequestReferenceSpace","updateInputSources","inputSources","removed","added","getController","getControllerGrip","setFramebufferScaleFactor","setReferenceSpaceType","getReferenceSpace","setSession","layerInit","baseLayer","XRWebGLLayer","updateRenderState","requestReferenceSpace","then","cameraLPos","cameraRPos","updateCamera","depthNear","depthFar","ipd","projL","projR","topFov","bottomFov","leftFov","rightFov","zOffset","xOffset","near2","far2","left2","right2","top2","bottom2","setProjectionFromUnion","onAnimationFrameCallback","getViewerPose","views","inputPose","gripPose","getPose","targetRaySpace","gripSpace","_context","_alpha","_depth","_stencil","_antialias","_premultipliedAlpha","_preserveDrawingBuffer","preserveDrawingBuffer","_powerPreference","powerPreference","_failIfMajorPerformanceCaveat","failIfMajorPerformanceCaveat","currentRenderList","currentRenderState","sortObjects","toneMappingExposure","toneMappingWhitePoint","programCache","renderLists","morphtargets","bufferRenderer","indexedBufferRenderer","_this","_isContextLost","_framebuffer","_currentActiveCubeFace","_currentActiveMipmapLevel","_currentRenderTarget","_currentFramebuffer","_currentMaterialId","_currentGeometryProgram","_currentCamera","_currentArrayCamera","_currentViewport","_currentScissor","_currentScissorTest","_width","_height","_pixelRatio","_opaqueSort","_transparentSort","_scissor","_scissorTest","_clipping","_clippingEnabled","_localClippingEnabled","_projScreenMatrix","_vector3","getTargetPixelRatio","contextAttributes","xrCompatible","onContextLost","onContextRestore","rangeMin","rangeMax","message","initGLContext","multiview","preventDefault","onMaterialDispose","releaseMaterialProgramReference","deallocateMaterial","programInfo","forceContextLoss","loseContext","forceContextRestore","restoreContext","getPixelRatio","updateStyle","setViewport","setDrawingBufferSize","pixelRatio","getCurrentViewport","getScissor","setScissor","getScissorTest","boolean","setOpaqueSort","method","setTransparentSort","bits","renderBufferImmediate","hasPositions","hasNormals","hasUvs","hasColors","programAttributes","positionArray","vertexAttribPointer","normalArray","uvArray","colorArray","tempScene","setProgram","updateBuffers","rangeFactor","isInstancedBufferGeometry","materialDefaultAttributeValues","programAttribute","geometryAttribute","stride","isInstancedInterleavedBuffer","maxInstancedCount","isInstancedBufferAttribute","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","vertexAttrib1fv","setupVertexAttributes","dataCount","rangeStart","rangeCount","drawStart","drawEnd","drawCount","isLineSegments","isLineLoop","isSprite","compile","compiled","initMaterial","projectObject","isGroup","isLOD","isImmediateRenderObject","renderObjects","camera2","renderObjectImmediate","materialProperties","lightsStateVersion","programCacheKey","programChange","numSupportedMorphTargets","numSupportedMorphNormals","needsLights","isMeshLambertMaterial","isMeshToonMaterial","isMeshPhongMaterial","isShadowMaterial","materialNeedsLights","progUniforms","uniformsList","useCache","refreshProgram","refreshMaterial","refreshLights","p_uniforms","m_uniforms","uCamPos","cameraPosition","isOrthographicCamera","boneTexture","boneMatrices","boneTextureSize","isFog","density","refreshUniformsFog","refreshUniformsCommon","refreshUniformsLambert","refreshUniformsToon","refreshUniformsPhong","isMeshPhysicalMaterial","refreshUniformsStandard","refreshUniformsPhysical","isMeshMatcapMaterial","refreshUniformsMatcap","refreshUniformsDepth","refreshUniformsDistance","isMeshNormalMaterial","refreshUniformsNormal","isLineBasicMaterial","refreshUniformsLine","isLineDashedMaterial","refreshUniformsDash","isPointsMaterial","uvScaleMap","refreshUniformsPoints","isSpriteMaterial","refreshUniformsSprites","ltc_1","LTC_1","ltc_2","LTC_2","uv2ScaleMap","opaqueObjects","transparentObjects","readRenderTargetPixels","activeCubeFaceIndex","restore","textureFormat","checkFramebufferStatus","readPixels","copyFramebufferToTexture","level","levelScale","copyTexImage2D","copyTextureToTexture","srcTexture","dstTexture","texSubImage2D","FogExp2","Fog","InterleavedBuffer","isInterleavedBuffer","_geometry","_vector$6","InterleavedBufferAttribute","interleavedBuffer","_intersectPoint","_worldScale","_mvPosition","_alignedPosition","_rotatedPosition","_viewWorldMatrix","_vA$1","_vB$1","_vC$1","_uvA$1","_uvB$1","_uvC$1","Sprite","transformVertex","vertexPosition","mvPosition","_v1$4","_v2$2","LOD","levels","SkinnedMesh","bindMode","bindMatrix","bindMatrixInverse","addLevel","getObjectForDistance","calculateInverses","normalizeSkinWeights","skinWeight","_offsetMatrix","_identityMatrix","Skeleton","boneInverses","Bone","bone","isBone","getBoneByName","_instanceLocalMatrix","_instanceWorldMatrix","_instanceIntersects","_mesh","InstancedMesh","linecap","linejoin","getMatrixAt","raycastTimes","instanceId","setMatrixAt","_start","_end","_inverseMatrix$1","_ray$1","_sphere$2","Line","computeLineDistances","positionAttribute","linePrecision","localPrecision","localPrecisionSq","vStart","vEnd","interSegment","interRay","nbVertices","_start$1","_end$1","LineSegments","LineLoop","_inverseMatrix$2","_ray$2","_sphere$3","_position$1","Points","testPoint","localThresholdSq","rayPointDistanceSq","intersectPoint","distanceToRay","VideoTexture","video","CompressedTexture","CanvasTexture","DepthTexture","WireframeGeometry","o","ol","edge1","edge2","edge","edges","ParametricGeometry","func","slices","stacks","ParametricBufferGeometry","EPS","pu","pv","sliceCount","PolyhedronGeometry","PolyhedronBufferGeometry","vertexBuffer","uvBuffer","subdivideFace","cols","aj","bj","rows","pushVertex","getVertexByIndex","correctUV","azimuth","subdivide","applyRadius","centroid","uvA","uvB","uvC","azi","correctUVs","correctSeam","generateUVs","TetrahedronGeometry","TetrahedronBufferGeometry","OctahedronGeometry","OctahedronBufferGeometry","IcosahedronGeometry","IcosahedronBufferGeometry","DodecahedronGeometry","DodecahedronBufferGeometry","TubeGeometry","tubularSegments","radialSegments","closed","taper","bufferGeometry","TubeBufferGeometry","tangents","binormals","frames","computeFrenetFrames","P","generateSegment","getPointAt","N","B","generateIndices","generateBufferData","TorusKnotGeometry","tube","heightScale","TorusKnotBufferGeometry","P1","P2","T","calculatePositionOnCurve","cu","su","quOverP","cs","TorusGeometry","arc","TorusBufferGeometry","threshold","params","localThreshold","readyState","HAVE_CURRENT_DATA","isCanvasTexture","Earcut","holeIndices","dim","invSize","hasHoles","outerLen","outerNode","linkedList","prev","queue","steiner","getLeftmost","compareX","eliminateHole","filterPoints","eliminateHoles","earcutLinked","clockwise","last","sum","signedArea","insertNode","removeNode","again","area","ear","pass","zOrder","prevZ","nextZ","tail","numMerges","pSize","qSize","inSize","sortLinked","indexCurve","isEarHashed","isEar","cureLocalIntersections","splitEarcut","pointInTriangle","minTX","minTY","maxTX","maxTY","locallyInside","isValidDiagonal","splitPolygon","hole","hx","hy","mx","my","tanMin","findHoleBridge","leftmost","px","py","intersectsPolygon","inside","middleInside","q1","q2","Node","an","bp","ShapeUtils","contour","isClockWise","pts","triangulateShape","holes","removeDupEndPts","addContour","holeIndex","ExtrudeGeometry","ExtrudeBufferGeometry","verticesArray","addShape","placeholder","curveSegments","steps","bevelEnabled","bevelThickness","bevelSize","bevelOffset","bevelSegments","extrudePath","uvgen","UVGenerator","WorldUVGenerator","amount","extrudePts","splineTube","binormal","position2","ahole","hl","extrudeByPath","getSpacedPoints","shapePoints","extractPoints","reverse","concat","scalePt2","pt","vec","bs","vert","vlen","flen","getBevelVec","inPt","inPrev","inNext","v_trans_x","v_trans_y","shrink_by","v_prev_x","v_prev_y","v_next_x","v_next_y","v_prev_lensq","collinear0","v_prev_len","v_next_len","ptPrevShift_x","ptPrevShift_y","sf","v_trans_lensq","direction_eq","contourMovements","oneHoleMovements","holesMovements","verticesMovements","sidewalls","layeroffset","sl","slen1","slen2","f4","f3","addVertex","nextIndex","generateTopUV","addUV","generateSideWallUV","vector2","layer","buildLidFaces","buildSideFaces","indexA","indexB","indexC","a_x","a_y","b_x","b_y","c_x","c_y","indexD","a_z","b_z","c_z","d_x","d_y","d_z","TextGeometry","text","TextBufferGeometry","font","isFont","generateShapes","SphereGeometry","phiStart","phiLength","thetaStart","thetaLength","SphereBufferGeometry","thetaEnd","grid","verticesRow","uOffset","RingGeometry","innerRadius","outerRadius","thetaSegments","phiSegments","RingBufferGeometry","segment","radiusStep","thetaSegmentLevel","LatheGeometry","segments","LatheBufferGeometry","base","inverseSegments","n1","n2","ShapeGeometry","ShapeBufferGeometry","shapeHole","indexOffset","shapeVertices","shapeHoles","toJSON$1","EdgesGeometry","thresholdAngle","thresholdDot","sourceVertices","face1","face2","CylinderGeometry","radiusTop","radiusBottom","openEnded","CylinderBufferGeometry","indexArray","generateCap","centerIndexStart","centerIndexEnd","cosTheta","sinTheta","slope","indexRow","generateTorso","ConeGeometry","ConeBufferGeometry","CircleGeometry","CircleBufferGeometry","Geometries","freeze","RawShaderMaterial","STANDARD","PHYSICAL","TOON","MATCAP","Materials","AnimationUtils","arraySlice","from","to","isTypedArray","convertArray","forceClone","ArrayBuffer","isView","DataView","getKeyframeOrder","times","sortedArray","nValues","srcOffset","flattenJSON","jsonKeys","valuePropertyName","subclip","sourceClip","startFrame","endFrame","fps","clip","tracks","track","valueSize","getValueSize","minStartTime","shift","resetDuration","Interpolant","parameterPositions","sampleValues","sampleSize","resultBuffer","_cachedIndex","CubicInterpolant","_weightPrev","_offsetPrev","_weightNext","_offsetNext","LinearInterpolant","DiscreteInterpolant","KeyframeTrack","interpolation","TimeBufferType","ValueBufferType","setInterpolation","DefaultInterpolation","BooleanKeyframeTrack","ColorKeyframeTrack","NumberKeyframeTrack","QuaternionLinearInterpolant","QuaternionKeyframeTrack","StringKeyframeTrack","VectorKeyframeTrack","AnimationClip","duration","parseKeyframeTrack","json","trackType","typeName","toLowerCase","getTrackTypeForValueTypeName","evaluate","pp","validate_interval","seek","linear_scan","forward_scan","giveUpAt","afterEnd_","t1global","beforeStart_","mid","intervalChanged_","interpolate_","settings","DefaultSettings_","getSettings_","copySampleValue_","endingStart","endingEnd","iPrev","iNext","tPrev","tNext","halfDt","o1","o0","oP","oN","wP","wN","ppp","sP","sN","offset1","offset0","weight1","weight0","getInterpolation","ValueTypeName","InterpolantFactoryMethodDiscrete","InterpolantFactoryMethodLinear","InterpolantFactoryMethodSmooth","factoryMethod","createInterpolant","timeOffset","timeScale","startTime","endTime","nKeys","validate","valid","prevTime","currTime","optimize","smoothInterpolation","writeIndex","keep","offsetP","offsetN","readOffset","writeOffset","TypedKeyframeTrack","jsonTracks","frameTime","clipTracks","CreateFromMorphTargetSequence","morphTargetSequence","noLoop","numMorphTargets","findByName","objectOrClipArray","clipArray","animations","CreateClipsFromMorphTargetSequences","animationToMorphTargets","pattern","parts","animationMorphTargets","clips","parseAnimation","addNonemptyTrack","trackName","animationKeys","propertyName","destTracks","clipName","hierarchyTracks","hierarchy","morphTargetNames","morphTargetName","animationKey","boneName","Cache","files","file","LoadingManager","onLoad","onProgress","onError","isLoading","itemsLoaded","itemsTotal","urlModifier","handlers","onStart","itemStart","itemEnd","itemError","resolveURL","setURLModifier","addHandler","regex","loader","removeHandler","getHandler","DefaultLoadingManager","Loader","manager","crossOrigin","resourcePath","load","setCrossOrigin","setPath","setResourcePath","loading","FileLoader","AnimationLoader","CompressedTextureLoader","DataTextureLoader","ImageLoader","CubeTextureLoader","TextureLoader","Curve","arcLengthDivisions","EllipseCurve","aX","aY","xRadius","yRadius","aStartAngle","aEndAngle","aClockwise","aRotation","ArcCurve","aRadius","CubicPoly","c0","initCatmullRom","x3","tension","initNonuniformCatmullRom","dt0","dt1","dt2","t2","calc","cached","dataUriRegexResult","mimeType","isBase64","decodeURIComponent","atob","response","responseType","charCodeAt","Blob","parser","DOMParser","parseFromString","request","XMLHttpRequest","header","open","callbacks","withCredentials","overrideMimeType","requestHeader","setRequestHeader","send","setResponseType","setWithCredentials","setMimeType","loadTexture","texDatas","loaded","mipmapCount","isCubemap","texData","onImageLoad","onImageError","substr","urls","isJPEG","search","getPoint","optionalTarget","getUtoTmapping","getPoints","divisions","getLength","lengths","getLengths","cacheArcLengths","current","updateArcLengths","targetArcLength","arcLengths","comparison","lengthBefore","getTangent","pt1","getTangentAt","mat","MAX_VALUE","tz","fromJSON","isEllipseCurve","twoPi","deltaAngle","samePoints","isArcCurve","pz","CatmullRomCurve3","curveType","CatmullRom","QuadraticBezier","QuadraticBezierP0","QuadraticBezierP1","QuadraticBezierP2","CubicBezier","CubicBezierP0","CubicBezierP1","CubicBezierP2","CubicBezierP3","CubicBezierCurve","v3","CubicBezierCurve3","LineCurve","LineCurve3","QuadraticBezierCurve","QuadraticBezierCurve3","SplineCurve","isCatmullRomCurve3","intPoint","weight","isCubicBezierCurve","isCubicBezierCurve3","isLineCurve","isLineCurve3","isQuadraticBezierCurve","isQuadraticBezierCurve3","isSplineCurve","Curves","CurvePath","curves","autoClose","Path","currentPoint","Shape","Light","HemisphereLight","LightShadow","_frameExtents","_viewportCount","_viewports","SpotLightShadow","SpotLight","power","PointLightShadow","_cubeDirections","_cubeUps","PointLight","DirectionalLightShadow","DirectionalLight","RectAreaLight","MaterialLoader","curve","closePath","startPoint","endPoint","curveLengths","getCurveLengths","segmentLength","lens","cacheLengths","sums","moveTo","lineTo","quadraticCurveTo","aCPx","aCPy","bezierCurveTo","aCP1x","aCP1y","aCP2x","aCP2y","splineThru","absarc","absellipse","ellipse","firstPoint","lastPoint","getPointsHoles","holesPts","_lightPositionWorld","_lookTarget","shadowMatrix","projScreenMatrix","lookTarget","lightPositionWorld","viewportIndex","isSpotLightShadow","scaleW","scaleH","isDirectionalLightShadow","getTexture","shading","setTextures","LoaderUtils","decodeText","TextDecoder","decode","fromCharCode","escape","extractUrlBase","lastIndexOf","InstancedBufferGeometry","InstancedBufferAttribute","BufferGeometryLoader","typedArray","TYPED_ARRAYS","bufferAttribute","drawcalls","offsets","ObjectLoader","parseShape","parseGeometries","parseImages","parseTextures","parseMaterials","parseObject","parseAnimations","bufferGeometryLoader","details","geometryShapes","LegacyJSONLoader","loadImage","currentUrl","parseConstant","TEXTURE_MAPPING","TEXTURE_WRAPPING","TEXTURE_FILTER","getGeometry","getMaterial","UVMapping","CubeReflectionMapping","CubeRefractionMapping","EquirectangularReflectionMapping","EquirectangularRefractionMapping","SphericalReflectionMapping","CubeUVReflectionMapping","CubeUVRefractionMapping","RepeatWrapping","ClampToEdgeWrapping","MirroredRepeatWrapping","NearestFilter","NearestMipmapNearestFilter","NearestMipmapLinearFilter","LinearFilter","LinearMipmapNearestFilter","LinearMipmapLinearFilter","ImageBitmapLoader","createImageBitmap","fetch","ShapePath","subPaths","currentPath","Font","createPath","char","glyph","glyphs","cpx","cpy","cpx1","cpy1","cpx2","cpy2","outline","_cachedOutline","ha","familyName","FontLoader","setOptions","res","blob","imageBitmap","catch","toShapes","isCCW","noHoles","toShapesNoHoles","inSubpaths","tmpPath","tmpShape","isPointInsidePolygon","inPolygon","polyLen","edgeLowPt","edgeHighPt","edgeDx","edgeDy","perpEdge","solid","holesFirst","tmpPoints","tmpHoles","betterShapeHoles","newShapes","newShapeHoles","mainIdx","ambiguous","toChange","sIdx","sLen","sho","hIdx","ho","hole_unassigned","s2Idx","froms","tos","paths","chars","line_height","yMax","yMin","underlineThickness","ret","createPaths","substring","AudioContext","webkitAudioContext","AudioLoader","SphericalHarmonics3","LightProbe","HemisphereLightProbe","sky","ground","AmbientLightProbe","bufferCopy","decodeAudioData","audioBuffer","isSphericalHarmonics3","zero","getAt","coeff","addScale","getIrradianceAt","getBasisAt","shBasis","isHemisphereLightProbe","isAmbientLightProbe","_eyeRight","_eyeLeft","StereoCamera","eyeSep","_cache","Clock","autoStart","oldTime","elapsedTime","running","xmin","xmax","eyeSepHalf","eyeSepOnProjection","ymax","performance","Date","now","getElapsedTime","getDelta","newTime","_position$2","_quaternion$3","_scale$1","_orientation","AudioListener","gain","createGain","connect","destination","timeDelta","_clock","Audio","getInput","autoplay","detune","loop","loopStart","loopEnd","playbackRate","isPlaying","hasPlaybackControl","sourceType","_startedAt","_pausedAt","filters","removeFilter","disconnect","getFilter","setFilter","getMasterVolume","setMasterVolume","setTargetAtTime","currentTime","positionX","linearRampToValueAtTime","positionY","positionZ","forwardX","forwardY","forwardZ","upX","upY","upZ","setOrientation","getOutput","setNodeSource","audioNode","setMediaElementSource","mediaElement","createMediaElementSource","setMediaStreamSource","mediaStream","createMediaStreamSource","setBuffer","play","delay","createBufferSource","onended","onEnded","setDetune","setPlaybackRate","pause","getFilters","setFilters","getDetune","getPlaybackRate","getLoop","setLoop","setLoopStart","setLoopEnd","getVolume","setVolume","_position$3","_quaternion$4","_scale$2","_orientation$1","PositionalAudio","panner","createPanner","panningModel","AudioAnalyser","audio","fftSize","analyser","createAnalyser","frequencyBinCount","PropertyMixer","binding","mixFunction","_slerp","_select","_lerp","_mixBufferRegion","cumulativeWeight","useCount","referenceCount","getRefDistance","refDistance","setRefDistance","getRolloffFactor","rolloffFactor","setRolloffFactor","getDistanceModel","distanceModel","setDistanceModel","getMaxDistance","maxDistance","setMaxDistance","setDirectionalCone","coneInnerAngle","coneOuterAngle","coneOuterGain","orientationX","orientationY","orientationZ","getFrequencyData","getByteFrequencyData","getAverageFrequency","accumulate","accuIndex","currentWeight","mix","originalValueOffset","saveOriginalState","getValue","restoreOriginalState","_reservedRe","RegExp","_wordCharOrDot","_directoryRe","_nodeRe","_objectRe","_propertyRe","_trackRe","_supportedObjectNames","Composite","targetGroup","optionalParsedPath","parsedPath","PropertyBinding","parseTrackName","_targetGroup","_bindings","subscribe_","rootNode","node","findNode","nodeName","AnimationObjectGroup","nCachedObjects_","_indicesByUUID","_paths","_parsedPaths","_bindingsIndicesByPath","stats","total","inUse","bindingsPerObject","AnimationAction","mixer","localRoot","_mixer","_clip","_localRoot","nTracks","interpolants","interpolantSettings","interpolant","_interpolantSettings","_interpolants","_propertyBindings","_cacheIndex","_byClipCacheIndex","_timeScaleInterpolant","_weightInterpolant","_loopCount","_startTime","_effectiveTimeScale","_effectiveWeight","repetitions","paused","clampWhenFinished","zeroSlopeAtStart","zeroSlopeAtEnd","AnimationMixer","root","_root","_initMemoryManager","_accuIndex","Uniform","InstancedInterleavedBuffer","Raycaster","PointCloud","ascSort","intersectObject","Spherical","Cylindrical","firstValidIndex","bindings","unbind","isAnimationObjectGroup","sanitizeNodeName","matches","results","objectName","objectIndex","propertyIndex","lastDot","searchNodeSubtree","childNode","subTreeNode","_getValue_unavailable","_setValue_unavailable","BindingType","Direct","EntireArray","ArrayElement","HasFromToArray","Versioning","None","NeedsUpdate","MatrixWorldNeedsUpdate","GetterByBindingType","resolvedProperty","SetterByBindingTypeAndVersioning","targetObject","dest","targetArray","sourceArray","nodeProperty","versioning","bindingType","_getValue_unbound","_setValue_unbound","nObjects","nCachedObjects","indicesByUUID","parsedPaths","nBindings","knownObject","firstActiveIndex","lastCachedObject","bindingsForPath","lastCached","lastCachedIndex","firstActiveObject","firstActive","uncache","lastObject","indicesByPath","unsubscribe_","lastBindingsIndex","lastBindings","_activateAction","_deactivateAction","stopFading","stopWarping","isRunning","_isActiveAction","isScheduled","startAt","setEffectiveWeight","getEffectiveWeight","fadeIn","_scheduleFading","fadeOut","crossFadeFrom","fadeOutAction","warp","fadeInDuration","fadeOutDuration","startEndRatio","endStartRatio","crossFadeTo","fadeInAction","weightInterpolant","_takeBackControlInterpolant","setEffectiveTimeScale","getEffectiveTimeScale","setDuration","syncWith","action","halt","startTimeScale","endTimeScale","_lendControlInterpolant","timeScaleInterpolant","getMixer","getClip","getRoot","_update","deltaTime","timeDirection","timeRunning","_updateTimeScale","clipTime","_updateTime","_updateWeight","propertyMixers","interpolantValue","loopCount","pingPong","_setEndings","handle_stop","loopDelta","pending","atStart","atEnd","weightNow","weightThen","_bindAction","prototypeAction","rootUuid","bindingsByRoot","_bindingsByRootAndName","bindingsByName","_addInactiveBinding","clipUuid","actionsForClip","_actionsByClip","knownActions","_addInactiveAction","_lendBinding","_lendAction","_takeBackBinding","_takeBackAction","_actions","_nActiveActions","_nActiveBindings","_controlInterpolants","_nActiveControlInterpolants","actions","controlInterpolants","actionsByClip","actionByRoot","_removeInactiveAction","lastInactiveAction","cacheIndex","knownActionsForClip","lastKnownAction","byClipCacheIndex","_removeInactiveBindingsForAction","_removeInactiveBinding","prevIndex","lastActiveIndex","firstInactiveAction","firstInactiveIndex","lastActiveAction","bindingByName","propBinding","lastInactiveBinding","firstInactiveBinding","lastActiveBinding","_controlInterpolantsResultBuffer","__cacheIndex","lastActiveInterpolant","clipAction","optionalRoot","clipObject","existingAction","newAction","stopAllAction","nActions","setTime","timeInSeconds","uncacheClip","actionsToRemove","uncacheRoot","uncacheAction","setFromCamera","coords","intersectObjects","other","makeSafe","setFromCartesianCoords","_vector$7","Box2","_startP","_startEnd","Line3","ImmediateRenderObject","distanceSq","closestPointToPointParameter","clampToLine","startEnd2","_vector$8","SpotLightHelper","cone","coneLength","coneWidth","_vector$9","_boneMatrix","_matrixWorldInv","SkeletonHelper","getBoneList","boneList","PointLightHelper","sphereSize","_vector$a","_color1","_color2","HemisphereLightHelper","GridHelper","PolarGridHelper","radials","circles","_v1$5","_v2$3","_v3$1","DirectionalLightHelper","lightPlane","targetLine","_vector$b","_camera","CameraHelper","pointMap","colorFrustum","colorCone","colorUp","colorTarget","colorCross","addLine","addPoint","setPoint","_box$3","BoxHelper","Box3Helper","PlaneHelper","_lineGeometry","_coneGeometry","_axis","ArrowHelper","headLength","headWidth","setDirection","AxesHelper","setColor","weights","poleAxis","shaderMaterial","SIZE_MAX","EXTRA_LOD_SIGMA","TOTAL_LODS","LOD_MAX","ENCODINGS","3000","3001","3002","3004","3005","3006","3007","_flatCamera","_blurMaterial","latitudinal","dTheta","mipInt","inputEncoding","_equirectShader","_cubemapShader","ref","_lodPlanes","_sizeLods","_sigmas","lod","sizeLod","sigma","texelSize","positionSize","uvSize","faceIndexSize","coordinates","fill","_createPlanes","_pingPongRenderTarget","_oldTarget","PHI","INV_PHI","_axisDirections","PMREMGenerator","_compileMaterial","_allocateTargets","equirectangular","cubeUVRenderTarget","_createRenderTarget","_cleanup","outputTarget","tmpScene","_setViewport","_applyPMREM","_blur","lodIn","lodOut","_halfBlur","targetIn","targetOut","sigmaRadians","blurScene","blurUniforms","pixels","radiansPerPixel","sigmaPixels","exp","outputSize","_getEquirectShader","_getCubemapShader","fromScene","cubeCamera","upSign","forwardSign","maxComponent","fExp","log2","col","_sceneToCubeUV","fromEquirectangular","fromCubemap","cubemap","_textureToCubeUV","compileCubemapShader","compileEquirectangularShader","ClosedSplineCurve3","SplineCurve3","Spline","construct","createPointsGeometry","createGeometry","createSpacedPointsGeometry","fromPoints","initFromArray","getControlPointsArray","reparametrizeByArcLength","setColors","Handlers","setTexturePath","isIntersectionBox","isIntersectionSphere","setFromMatrix","random16","nearestPowerOfTwo","nextPowerOfTwo","flattenToArrayOffset","multiplyVector3","multiplyVector3Array","applyToBufferAttribute","applyToVector3Array","extractPosition","getPosition","multiplyToArray","multiplyVector4","rotateAxis","crossVector","rotateByAxis","makeFrustum","isIntersectionLine","isIntersectionPlane","barycoordFromPoint","midpoint","extractAllPoints","extrude","makeGeometry","fromAttribute","distanceToManhattan","lengthManhattan","setEulerFromRotationMatrix","setEulerFromQuaternion","getPositionFromMatrix","getScaleFromMatrix","getColumnFromMatrix","applyProjection","computeTangents","applyMatrix","getChildByName","renderDepth","getWorldRotation","eulerOrder","useQuaternion","setDrawMode","drawMode","initBones","setLens","onlyShadow","shadowCameraFov","shadowCameraLeft","shadowCameraRight","shadowCameraTop","shadowCameraBottom","shadowCameraVisible","shadowDarkness","shadowMapWidth","shadowMapHeight","dynamic","setDynamic","copyIndicesArray","setArray","addIndex","addAttribute","addDrawCall","clearDrawCalls","computeOffsets","removeAttribute","getArrays","addShapeList","wrapAround","overdraw","wrapRGB","metal","clearTarget","animate","getCurrentRenderTarget","getPrecision","resetGLState","supportsFloatTextures","supportsHalfFloatTextures","supportsStandardDerivatives","supportsCompressedTextureS3TC","supportsCompressedTexturePVRTC","supportsBlendMinMax","supportsInstancedArrays","enableScissorTest","addPrePlugin","addPostPlugin","updateShadowMap","setFaceCulling","allocTextureUnit","setTexture","getActiveMipMapLevel","shadowMapCullFace","vr","gammaInput","gammaOutput","renderReverseSided","renderSingleSided","getData","updateCubeMap","GeometryUtils","geometry1","loadTextureCube","loadCompressedTexture","loadCompressedTextureCube","SceneUtils","createMultiMaterialObject","detach","revision","ACESFilmicToneMapping","AddEquation","AddOperation","AdditiveBlending","AlphaFormat","AlwaysDepth","AlwaysStencilFunc","AxisHelper","BackSide","BasicDepthPacking","BasicShadowMap","BinaryTextureLoader","BoundingBoxHelper","ByteType","CanvasRenderer","CineonToneMapping","CubeGeometry","CullFaceBack","CullFaceFront","CullFaceFrontBack","CullFaceNone","CustomBlending","DecrementStencilOp","DecrementWrapStencilOp","DepthFormat","DepthStencilFormat","DoubleSide","DstAlphaFactor","DstColorFactor","DynamicBufferAttribute","DynamicCopyUsage","DynamicDrawUsage","DynamicReadUsage","EdgesHelper","EqualDepth","EqualStencilFunc","Face4","FaceColors","FlatShading","Float32Attribute","Float64Attribute","FloatType","FrontFaceDirectionCCW","FrontFaceDirectionCW","FrontSide","GammaEncoding","GreaterDepth","GreaterEqualDepth","GreaterEqualStencilFunc","GreaterStencilFunc","HalfFloatType","IncrementStencilOp","IncrementWrapStencilOp","Int16Attribute","Int32Attribute","Int8Attribute","IntType","InterpolateDiscrete","InterpolateLinear","InterpolateSmooth","InvertStencilOp","JSONLoader","KeepStencilOp","LensFlare","LessDepth","LessEqualDepth","LessEqualStencilFunc","LessStencilFunc","LinePieces","LineStrip","LinearEncoding","LinearMipMapLinearFilter","LinearMipMapNearestFilter","LinearToneMapping","LogLuvEncoding","LoopOnce","LoopPingPong","LoopRepeat","LuminanceAlphaFormat","LuminanceFormat","MOUSE","LEFT","MIDDLE","RIGHT","ROTATE","DOLLY","PAN","MaxEquation","MeshFaceMaterial","MinEquation","MixOperation","MultiMaterial","MultiplyBlending","MultiplyOperation","NearestMipMapLinearFilter","NearestMipMapNearestFilter","NeverDepth","NeverStencilFunc","NoBlending","NoColors","NoToneMapping","NormalBlending","NotEqualDepth","NotEqualStencilFunc","ObjectSpaceNormalMap","OneFactor","OneMinusDstAlphaFactor","OneMinusDstColorFactor","OneMinusSrcAlphaFactor","OneMinusSrcColorFactor","PCFShadowMap","PCFSoftShadowMap","Particle","ParticleBasicMaterial","ParticleSystem","ParticleSystemMaterial","PointCloudMaterial","REVISION","RGBADepthPacking","RGBAFormat","RGBAIntegerFormat","RGBA_ASTC_10x10_Format","RGBA_ASTC_10x5_Format","RGBA_ASTC_10x6_Format","RGBA_ASTC_10x8_Format","RGBA_ASTC_12x10_Format","RGBA_ASTC_12x12_Format","RGBA_ASTC_4x4_Format","RGBA_ASTC_5x4_Format","RGBA_ASTC_5x5_Format","RGBA_ASTC_6x5_Format","RGBA_ASTC_6x6_Format","RGBA_ASTC_8x5_Format","RGBA_ASTC_8x6_Format","RGBA_ASTC_8x8_Format","RGBA_PVRTC_2BPPV1_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_S3TC_DXT1_Format","RGBA_S3TC_DXT3_Format","RGBA_S3TC_DXT5_Format","RGBDEncoding","RGBEEncoding","RGBEFormat","RGBFormat","RGBIntegerFormat","RGBM16Encoding","RGBM7Encoding","RGB_ETC1_Format","RGB_PVRTC_2BPPV1_Format","RGB_PVRTC_4BPPV1_Format","RGB_S3TC_DXT1_Format","RGFormat","RGIntegerFormat","RedFormat","RedIntegerFormat","ReinhardToneMapping","ReplaceStencilOp","ReverseSubtractEquation","ShortType","SmoothShading","SrcAlphaFactor","SrcAlphaSaturateFactor","SrcColorFactor","StaticCopyUsage","StaticDrawUsage","StaticReadUsage","StreamCopyUsage","StreamDrawUsage","StreamReadUsage","SubtractEquation","SubtractiveBlending","TOUCH","DOLLY_PAN","DOLLY_ROTATE","TangentSpaceNormalMap","TriangleFanDrawMode","TriangleStripDrawMode","TrianglesDrawMode","Uint16Attribute","Uint32Attribute","Uint8Attribute","Uint8ClampedAttribute","Uncharted2ToneMapping","UnsignedByteType","UnsignedInt248Type","UnsignedIntType","UnsignedShort4444Type","UnsignedShort5551Type","UnsignedShort565Type","UnsignedShortType","VSMShadowMap","Vertex","VertexColors","WebGLRenderTargetCube","WireframeHelper","WrapAroundEnding","XHRLoader","ZeroCurvatureEnding","ZeroFactor","ZeroSlopeEnding","ZeroStencilOp","sRGBEncoding","pastTimes","getNewTime","getCurrentTime","getLastTime","deltas","REMEMBER","reduce","accum","updatePastTimes","getDeltaSinceLastTick","BOX_THRESHOLD","BOX_Y_POSITION","BOX_X_POSITION","held","lastX","lastY","lastPressTime","handleKeydown","handleKeyup","handleStart","handleEnd","handleCancel","handleMove","el","press","release","tap","touch","changedTouches","clientX","clientY","deltaX","deltaY","_staticHelpers","getMesh","pivot","getPivot","moveFinish","getActions","updateMeshFromModel","lastDirection","BOARD_WIDTH","HALF_BOX","getCubeStaticQaternion","canMove","getPivotOffset","updateCube","SIDE_COLORS","3","4","5","6","STARTING_ORIENTATION","TOP","FRONT","BACK","BOTTOM","DIRECTIONS","SIDE_FIVE","SIDE_TWO","SIDE_ONE","SIDE_SIX","SIDE_THREE","SIDE_FOUR","finishHandler","newQuat","deg","PI_OVER_TWO","AHEAD","_getAction","CLIPS","PIVOTS","MOVES_XY","sideNum","CACHED_COLORS","AXES","AHEAD_BACK","RIGHT_LEFT","createCubeMoveAnimation","FLIP_DURATION","period","backward","_Squares","_Grid","squares","Squares","Grid","RESET_COLOR","START_X","coordsToBufferIndex","vi","ci","BOARD_DEPTH","getBoardSquareValue","setCoordToIndexMap","faceColor","getColorForSide","setColorIndices","setVertexIndices","colorR","colorG","colorB","centerZ","centerX","farRightX","farRightZ","nearRightX","nearRightZ","nearLeftX","nearLeftZ","farLeftX","farLeftZ","vertexIndex","colorIndex","getColorArray","getVertexIndex","pixelWidth","pixelDepth","LINE_COLOR","_BoardModel","_CubeModel","CubeModel","BoardModel","getCubeStartingPosition","getStaticQuaternion","getSide","pickUpBoardSquare","pickUpSquare","getMoveOffset","enemySide","nextTop","getNextTopSide","getNextBottomSide","SIDE_ENEMIES","NUM_ENEMY_TYPES","getRandomEnemySide","startingPosition","SIDE_TOP","SIDE_BOTTOM","SIDE_LEFT","SIDE_RIGHT","front","SIDE_FRONT","back","SIDE_BACK","quaternions","getAllQuaternionsForCube","content","xPos","yPos","makeTextCanvas","ctx","createElement","measureText","BORDER_SIZE","textBaseline","fillStyle","fillText"],"mappings":"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","file":"js.HASH_REF_67e4fade32a0b597318a54bcc72e4baa.js.map","sourcesContent":["import Engine from './game/Engine.js';\n\nconst game = new Engine();\ngame.start();\n","import * as THREE from 'three';\n\nimport Time from './controllers/Time';\nimport Input from './controllers/Input';\nimport Cube from './objects/Cube/';\nimport Board from './objects/Board/';\nimport Model from './Model/';\nimport Text from '/js/Text/';\nimport {\n  DEBUG,\n  PIXEL_WIDTH,\n  ASPECT_RATIO,\n  SCREEN_WIDTH,\n  SCREEN_HEIGHT,\n  ORTHO_DEPTH,\n  BOX_SIZE,\n  DIR_AHEAD,\n  DIR_LEFT,\n  DIR_RIGHT,\n  DIR_BACK\n} from '/js/game/constants';\n\n\nconst CAMERA_DISTANCE = 400;\nconst CAMERA_LATERAL_OFFSET = 110;\nconst CAMERA_HEIGHT = 300;\nconst CAMERA_LOOK_DISTANCE = 6 * BOX_SIZE;\n\n\nexport default class Engine {\n\n  constructor() {\n    this.v = new THREE.Vector3();\n\n    this.time = new Time();\n    this.scene = new THREE.Scene();\n    this.camera = this.getCamera();\n\n    // The model tracks cube and board positioning.\n    this.model = new Model();\n    this.model.onScoreUpdate = this.onScoreUpdate.bind(this);\n\n    this.cube = new Cube( this.model );\n    this.cube.onMoveFinish = this.onMoveFinish.bind(this);\n\n    this.input = new Input();\n    this.input.onUp = this.initiateMove.bind(this, DIR_AHEAD);\n    this.input.onDown = this.initiateMove.bind(this, DIR_BACK);\n    this.input.onLeft = this.initiateMove.bind(this, DIR_LEFT);\n    this.input.onRight = this.initiateMove.bind(this, DIR_RIGHT);\n    this.input.onRelease = this.cancelNextMove.bind(this);\n\n    this.renderer = new THREE.WebGLRenderer();\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n    this.renderer.setSize(SCREEN_WIDTH, SCREEN_HEIGHT);\n    this.renderer.autoClear = false;\n\n    this.sceneHUD = this.getSceneHUD();\n    this.HUDCamera = this.getHUDCamera();\n\n    this.nextMove = null;\n\n    this.update = this.update.bind(this);\n  }\n\n  async initWorld() {\n    this.scene.add( this.cube.getObject3D() );\n    this.board = new Board( this.model );\n    this.scene.add( this.board.getObject3D() );\n    this.scene.add( this.getLighting() );\n  }\n\n  updateNextMoveDebug() {\n    if (!this.nextMoveText) {\n      return;\n    }\n\n    this.sceneHUD.remove(this.nextMoveText.getObject3D());\n    let moveText = '';\n    switch (this.nextMove) {\n      case DIR_AHEAD:\n        moveText = '↑'\n        break;\n\n      case DIR_LEFT:\n        moveText = '←'\n        break;\n\n      case DIR_RIGHT:\n        moveText = '→'\n        break;\n\n      case DIR_BACK:\n        moveText = '↓'\n        break;\n\n      default:\n        break;\n    }\n\n    this.nextMoveText.update(moveText);\n    this.sceneHUD.add(this.nextMoveText.getObject3D());\n  }\n\n  getSceneHUD() {\n    const textSize = SCREEN_HEIGHT / 10;\n    const score = this.model.getScore();\n    const x = -SCREEN_WIDTH / 2 + textSize / 2;\n    const y = SCREEN_HEIGHT / 2 - textSize / 2;\n    this.textScore = new Text(textSize, score, x, y);\n\n    const sceneHUD = new THREE.Scene();\n    sceneHUD.add(this.textScore.getObject3D());\n\n    // Add FPS to HUD.\n    if (DEBUG) {\n      const fpsSize = SCREEN_HEIGHT / 18;\n      const fpsX = 0;\n      const fpsY = SCREEN_HEIGHT / 2 - fpsSize / 2;\n      this.fpsText = new Text(fpsSize, '0 fps', fpsX, fpsY);\n      sceneHUD.add(this.fpsText.getObject3D());\n\n      const moveX = 0;\n      const moveY = SCREEN_HEIGHT / 3 - fpsSize / 2;\n      this.nextMoveText = new Text(fpsSize, '', moveX, moveY);\n      sceneHUD.add(this.nextMoveText.getObject3D());\n\n      setInterval(() => {\n        sceneHUD.remove(this.fpsText.getObject3D());\n        this.fpsText.update(Math.round(this.time.getAverageFPS()) + ' fps');\n        sceneHUD.add(this.fpsText.getObject3D());\n      }, 2000);\n    }\n\n    return sceneHUD;\n  }\n\n  getHUDCamera() {\n    const camera = new THREE.OrthographicCamera(\n      -SCREEN_WIDTH / 2, SCREEN_WIDTH / 2,\n      SCREEN_HEIGHT / 2, -SCREEN_HEIGHT / 2,\n      -ORTHO_DEPTH / 2, ORTHO_DEPTH / 2\n    );\n\n    return camera;\n  }\n\n  getCamera() {\n    const camera = new THREE.PerspectiveCamera( 70, ASPECT_RATIO, 0.8, 5000 );\n    camera.position.set( CAMERA_LATERAL_OFFSET, CAMERA_HEIGHT, CAMERA_DISTANCE );\n    this.cameraOffset = new THREE.Vector3(0, 0, -CAMERA_LOOK_DISTANCE);\n    this.cameraLookAt = new THREE.Vector3();\n    camera.lookAt( 20, -100, -CAMERA_DISTANCE );\n    return camera;\n  }\n\n  getLighting() {\n    /*\n    const color = 0xFFFFFF;\n    const intensity = 1;\n    const light = new THREE.DirectionalLight(color, intensity);\n    light.position.set(-1, 2, 4);\n    this.scene.add(light);\n    */\n\n    var ambientLight = new THREE.AmbientLight( 0x606060 );\n    return ambientLight;\n  }\n\n  onScoreUpdate(score) {\n    this.sceneHUD.remove(this.textScore.getObject3D());\n    this.textScore.update(score);\n    this.sceneHUD.add(this.textScore.getObject3D());\n  }\n\n  initiateMove(direction) {\n    const moveSucceeded = this.cube.move(direction);\n    if (moveSucceeded) {\n      this.nextMove = null;\n    } else {\n      // Save unsuccessful moves for when current move completes.\n      this.nextMove = direction;\n    }\n    DEBUG && this.updateNextMoveDebug();\n  }\n\n  cancelNextMove() {\n    this.nextMove = null;\n    DEBUG && this.updateNextMoveDebug();\n  }\n\n  onMoveFinish(direction) {\n    if (this.model.attemptPickup()) {\n      const cubePosition = this.model.getCubePosition();\n      this.board.resetSquare(cubePosition.x, cubePosition.y);\n    }\n\n    // Make sure we have something else to do before continuing.\n    if ( !this.nextMove && !this.input.isHolding()) {\n      return;\n    }\n\n    // We use set timeout to avoid stuttering\n    // when transition between cube animations.\n    setTimeout(() => {\n      if (this.nextMove) {\n        this.initiateMove(this.nextMove);\n      } else if (this.input.isHolding()) {\n        this.initiateMove(direction);\n      }\n    }, 10);\n  }\n\n  update() {\n    requestAnimationFrame( this.update );\n\n    const delta = this.time.tick();\n    this.cube.update(delta);\n\n    this.cube.mesh.getWorldPosition(this.v);\n    this.camera.position.setZ(this.v.z + CAMERA_DISTANCE);\n    //this.camera.position.setX(this.v.x + CAMERA_LATERAL_OFFSET);\n    this.cameraLookAt.addVectors(this.v, this.cameraOffset);\n    this.camera.lookAt(this.cameraLookAt);\n\n    this.renderer.clear();\n    this.renderer.render( this.scene, this.camera );\n    this.renderer.render( this.sceneHUD, this.HUDCamera );\n  }\n\n  async start() {\n    await this.initWorld();\n\n    const scale = Math.max(\n      window.innerWidth / SCREEN_WIDTH,\n      window.innerHeight / SCREEN_HEIGHT\n    );\n    document.body.appendChild(this.renderer.domElement);\n    this.renderer.domElement.style.transform = `scale(${scale})`;\n\n    this.time.start();\n    this.update();\n  }\n}\n","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n\ttypeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t(global = global || self, factory(global.THREE = {}));\n}(this, (function (exports) { 'use strict';\n\n\t// Polyfills\n\n\tif ( Number.EPSILON === undefined ) {\n\n\t\tNumber.EPSILON = Math.pow( 2, - 52 );\n\n\t}\n\n\tif ( Number.isInteger === undefined ) {\n\n\t\t// Missing in IE\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger\n\n\t\tNumber.isInteger = function ( value ) {\n\n\t\t\treturn typeof value === 'number' && isFinite( value ) && Math.floor( value ) === value;\n\n\t\t};\n\n\t}\n\n\t//\n\n\tif ( Math.sign === undefined ) {\n\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\n\n\t\tMath.sign = function ( x ) {\n\n\t\t\treturn ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;\n\n\t\t};\n\n\t}\n\n\tif ( 'name' in Function.prototype === false ) {\n\n\t\t// Missing in IE\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\n\n\t\tObject.defineProperty( Function.prototype, 'name', {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.toString().match( /^\\s*function\\s*([^\\(\\s]*)/ )[ 1 ];\n\n\t\t\t}\n\n\t\t} );\n\n\t}\n\n\tif ( Object.assign === undefined ) {\n\n\t\t// Missing in IE\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n\n\t\tObject.assign = function ( target ) {\n\n\t\t\tif ( target === undefined || target === null ) {\n\n\t\t\t\tthrow new TypeError( 'Cannot convert undefined or null to object' );\n\n\t\t\t}\n\n\t\t\tvar output = Object( target );\n\n\t\t\tfor ( var index = 1; index < arguments.length; index ++ ) {\n\n\t\t\t\tvar source = arguments[ index ];\n\n\t\t\t\tif ( source !== undefined && source !== null ) {\n\n\t\t\t\t\tfor ( var nextKey in source ) {\n\n\t\t\t\t\t\tif ( Object.prototype.hasOwnProperty.call( source, nextKey ) ) {\n\n\t\t\t\t\t\t\toutput[ nextKey ] = source[ nextKey ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn output;\n\n\t\t};\n\n\t}\n\n\tvar REVISION = '113';\n\tvar MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 };\n\tvar TOUCH = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 };\n\tvar CullFaceNone = 0;\n\tvar CullFaceBack = 1;\n\tvar CullFaceFront = 2;\n\tvar CullFaceFrontBack = 3;\n\tvar FrontFaceDirectionCW = 0;\n\tvar FrontFaceDirectionCCW = 1;\n\tvar BasicShadowMap = 0;\n\tvar PCFShadowMap = 1;\n\tvar PCFSoftShadowMap = 2;\n\tvar VSMShadowMap = 3;\n\tvar FrontSide = 0;\n\tvar BackSide = 1;\n\tvar DoubleSide = 2;\n\tvar FlatShading = 1;\n\tvar SmoothShading = 2;\n\tvar NoColors = 0;\n\tvar FaceColors = 1;\n\tvar VertexColors = 2;\n\tvar NoBlending = 0;\n\tvar NormalBlending = 1;\n\tvar AdditiveBlending = 2;\n\tvar SubtractiveBlending = 3;\n\tvar MultiplyBlending = 4;\n\tvar CustomBlending = 5;\n\tvar AddEquation = 100;\n\tvar SubtractEquation = 101;\n\tvar ReverseSubtractEquation = 102;\n\tvar MinEquation = 103;\n\tvar MaxEquation = 104;\n\tvar ZeroFactor = 200;\n\tvar OneFactor = 201;\n\tvar SrcColorFactor = 202;\n\tvar OneMinusSrcColorFactor = 203;\n\tvar SrcAlphaFactor = 204;\n\tvar OneMinusSrcAlphaFactor = 205;\n\tvar DstAlphaFactor = 206;\n\tvar OneMinusDstAlphaFactor = 207;\n\tvar DstColorFactor = 208;\n\tvar OneMinusDstColorFactor = 209;\n\tvar SrcAlphaSaturateFactor = 210;\n\tvar NeverDepth = 0;\n\tvar AlwaysDepth = 1;\n\tvar LessDepth = 2;\n\tvar LessEqualDepth = 3;\n\tvar EqualDepth = 4;\n\tvar GreaterEqualDepth = 5;\n\tvar GreaterDepth = 6;\n\tvar NotEqualDepth = 7;\n\tvar MultiplyOperation = 0;\n\tvar MixOperation = 1;\n\tvar AddOperation = 2;\n\tvar NoToneMapping = 0;\n\tvar LinearToneMapping = 1;\n\tvar ReinhardToneMapping = 2;\n\tvar Uncharted2ToneMapping = 3;\n\tvar CineonToneMapping = 4;\n\tvar ACESFilmicToneMapping = 5;\n\n\tvar UVMapping = 300;\n\tvar CubeReflectionMapping = 301;\n\tvar CubeRefractionMapping = 302;\n\tvar EquirectangularReflectionMapping = 303;\n\tvar EquirectangularRefractionMapping = 304;\n\tvar SphericalReflectionMapping = 305;\n\tvar CubeUVReflectionMapping = 306;\n\tvar CubeUVRefractionMapping = 307;\n\tvar RepeatWrapping = 1000;\n\tvar ClampToEdgeWrapping = 1001;\n\tvar MirroredRepeatWrapping = 1002;\n\tvar NearestFilter = 1003;\n\tvar NearestMipmapNearestFilter = 1004;\n\tvar NearestMipMapNearestFilter = 1004;\n\tvar NearestMipmapLinearFilter = 1005;\n\tvar NearestMipMapLinearFilter = 1005;\n\tvar LinearFilter = 1006;\n\tvar LinearMipmapNearestFilter = 1007;\n\tvar LinearMipMapNearestFilter = 1007;\n\tvar LinearMipmapLinearFilter = 1008;\n\tvar LinearMipMapLinearFilter = 1008;\n\tvar UnsignedByteType = 1009;\n\tvar ByteType = 1010;\n\tvar ShortType = 1011;\n\tvar UnsignedShortType = 1012;\n\tvar IntType = 1013;\n\tvar UnsignedIntType = 1014;\n\tvar FloatType = 1015;\n\tvar HalfFloatType = 1016;\n\tvar UnsignedShort4444Type = 1017;\n\tvar UnsignedShort5551Type = 1018;\n\tvar UnsignedShort565Type = 1019;\n\tvar UnsignedInt248Type = 1020;\n\tvar AlphaFormat = 1021;\n\tvar RGBFormat = 1022;\n\tvar RGBAFormat = 1023;\n\tvar LuminanceFormat = 1024;\n\tvar LuminanceAlphaFormat = 1025;\n\tvar RGBEFormat = RGBAFormat;\n\tvar DepthFormat = 1026;\n\tvar DepthStencilFormat = 1027;\n\tvar RedFormat = 1028;\n\tvar RedIntegerFormat = 1029;\n\tvar RGFormat = 1030;\n\tvar RGIntegerFormat = 1031;\n\tvar RGBIntegerFormat = 1032;\n\tvar RGBAIntegerFormat = 1033;\n\n\tvar RGB_S3TC_DXT1_Format = 33776;\n\tvar RGBA_S3TC_DXT1_Format = 33777;\n\tvar RGBA_S3TC_DXT3_Format = 33778;\n\tvar RGBA_S3TC_DXT5_Format = 33779;\n\tvar RGB_PVRTC_4BPPV1_Format = 35840;\n\tvar RGB_PVRTC_2BPPV1_Format = 35841;\n\tvar RGBA_PVRTC_4BPPV1_Format = 35842;\n\tvar RGBA_PVRTC_2BPPV1_Format = 35843;\n\tvar RGB_ETC1_Format = 36196;\n\tvar RGBA_ASTC_4x4_Format = 37808;\n\tvar RGBA_ASTC_5x4_Format = 37809;\n\tvar RGBA_ASTC_5x5_Format = 37810;\n\tvar RGBA_ASTC_6x5_Format = 37811;\n\tvar RGBA_ASTC_6x6_Format = 37812;\n\tvar RGBA_ASTC_8x5_Format = 37813;\n\tvar RGBA_ASTC_8x6_Format = 37814;\n\tvar RGBA_ASTC_8x8_Format = 37815;\n\tvar RGBA_ASTC_10x5_Format = 37816;\n\tvar RGBA_ASTC_10x6_Format = 37817;\n\tvar RGBA_ASTC_10x8_Format = 37818;\n\tvar RGBA_ASTC_10x10_Format = 37819;\n\tvar RGBA_ASTC_12x10_Format = 37820;\n\tvar RGBA_ASTC_12x12_Format = 37821;\n\tvar LoopOnce = 2200;\n\tvar LoopRepeat = 2201;\n\tvar LoopPingPong = 2202;\n\tvar InterpolateDiscrete = 2300;\n\tvar InterpolateLinear = 2301;\n\tvar InterpolateSmooth = 2302;\n\tvar ZeroCurvatureEnding = 2400;\n\tvar ZeroSlopeEnding = 2401;\n\tvar WrapAroundEnding = 2402;\n\tvar TrianglesDrawMode = 0;\n\tvar TriangleStripDrawMode = 1;\n\tvar TriangleFanDrawMode = 2;\n\tvar LinearEncoding = 3000;\n\tvar sRGBEncoding = 3001;\n\tvar GammaEncoding = 3007;\n\tvar RGBEEncoding = 3002;\n\tvar LogLuvEncoding = 3003;\n\tvar RGBM7Encoding = 3004;\n\tvar RGBM16Encoding = 3005;\n\tvar RGBDEncoding = 3006;\n\tvar BasicDepthPacking = 3200;\n\tvar RGBADepthPacking = 3201;\n\tvar TangentSpaceNormalMap = 0;\n\tvar ObjectSpaceNormalMap = 1;\n\n\tvar ZeroStencilOp = 0;\n\tvar KeepStencilOp = 7680;\n\tvar ReplaceStencilOp = 7681;\n\tvar IncrementStencilOp = 7682;\n\tvar DecrementStencilOp = 7683;\n\tvar IncrementWrapStencilOp = 34055;\n\tvar DecrementWrapStencilOp = 34056;\n\tvar InvertStencilOp = 5386;\n\n\tvar NeverStencilFunc = 512;\n\tvar LessStencilFunc = 513;\n\tvar EqualStencilFunc = 514;\n\tvar LessEqualStencilFunc = 515;\n\tvar GreaterStencilFunc = 516;\n\tvar NotEqualStencilFunc = 517;\n\tvar GreaterEqualStencilFunc = 518;\n\tvar AlwaysStencilFunc = 519;\n\n\tvar StaticDrawUsage = 35044;\n\tvar DynamicDrawUsage = 35048;\n\tvar StreamDrawUsage = 35040;\n\tvar StaticReadUsage = 35045;\n\tvar DynamicReadUsage = 35049;\n\tvar StreamReadUsage = 35041;\n\tvar StaticCopyUsage = 35046;\n\tvar DynamicCopyUsage = 35050;\n\tvar StreamCopyUsage = 35042;\n\n\t/**\n\t * https://github.com/mrdoob/eventdispatcher.js/\n\t */\n\n\tfunction EventDispatcher() {}\n\n\tObject.assign( EventDispatcher.prototype, {\n\n\t\taddEventListener: function ( type, listener ) {\n\n\t\t\tif ( this._listeners === undefined ) { this._listeners = {}; }\n\n\t\t\tvar listeners = this._listeners;\n\n\t\t\tif ( listeners[ type ] === undefined ) {\n\n\t\t\t\tlisteners[ type ] = [];\n\n\t\t\t}\n\n\t\t\tif ( listeners[ type ].indexOf( listener ) === - 1 ) {\n\n\t\t\t\tlisteners[ type ].push( listener );\n\n\t\t\t}\n\n\t\t},\n\n\t\thasEventListener: function ( type, listener ) {\n\n\t\t\tif ( this._listeners === undefined ) { return false; }\n\n\t\t\tvar listeners = this._listeners;\n\n\t\t\treturn listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;\n\n\t\t},\n\n\t\tremoveEventListener: function ( type, listener ) {\n\n\t\t\tif ( this._listeners === undefined ) { return; }\n\n\t\t\tvar listeners = this._listeners;\n\t\t\tvar listenerArray = listeners[ type ];\n\n\t\t\tif ( listenerArray !== undefined ) {\n\n\t\t\t\tvar index = listenerArray.indexOf( listener );\n\n\t\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\t\tlistenerArray.splice( index, 1 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tdispatchEvent: function ( event ) {\n\n\t\t\tif ( this._listeners === undefined ) { return; }\n\n\t\t\tvar listeners = this._listeners;\n\t\t\tvar listenerArray = listeners[ event.type ];\n\n\t\t\tif ( listenerArray !== undefined ) {\n\n\t\t\t\tevent.target = this;\n\n\t\t\t\tvar array = listenerArray.slice( 0 );\n\n\t\t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\n\n\t\t\t\t\tarray[ i ].call( this, event );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author thezwap\n\t */\n\n\tvar _lut = [];\n\n\tfor ( var i = 0; i < 256; i ++ ) {\n\n\t\t_lut[ i ] = ( i < 16 ? '0' : '' ) + ( i ).toString( 16 );\n\n\t}\n\n\tvar MathUtils = {\n\n\t\tDEG2RAD: Math.PI / 180,\n\t\tRAD2DEG: 180 / Math.PI,\n\n\t\tgenerateUUID: function () {\n\n\t\t\t// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\n\n\t\t\tvar d0 = Math.random() * 0xffffffff | 0;\n\t\t\tvar d1 = Math.random() * 0xffffffff | 0;\n\t\t\tvar d2 = Math.random() * 0xffffffff | 0;\n\t\t\tvar d3 = Math.random() * 0xffffffff | 0;\n\t\t\tvar uuid = _lut[ d0 & 0xff ] + _lut[ d0 >> 8 & 0xff ] + _lut[ d0 >> 16 & 0xff ] + _lut[ d0 >> 24 & 0xff ] + '-' +\n\t\t\t\t_lut[ d1 & 0xff ] + _lut[ d1 >> 8 & 0xff ] + '-' + _lut[ d1 >> 16 & 0x0f | 0x40 ] + _lut[ d1 >> 24 & 0xff ] + '-' +\n\t\t\t\t_lut[ d2 & 0x3f | 0x80 ] + _lut[ d2 >> 8 & 0xff ] + '-' + _lut[ d2 >> 16 & 0xff ] + _lut[ d2 >> 24 & 0xff ] +\n\t\t\t\t_lut[ d3 & 0xff ] + _lut[ d3 >> 8 & 0xff ] + _lut[ d3 >> 16 & 0xff ] + _lut[ d3 >> 24 & 0xff ];\n\n\t\t\t// .toUpperCase() here flattens concatenated strings to save heap memory space.\n\t\t\treturn uuid.toUpperCase();\n\n\t\t},\n\n\t\tclamp: function ( value, min, max ) {\n\n\t\t\treturn Math.max( min, Math.min( max, value ) );\n\n\t\t},\n\n\t\t// compute euclidian modulo of m % n\n\t\t// https://en.wikipedia.org/wiki/Modulo_operation\n\n\t\teuclideanModulo: function ( n, m ) {\n\n\t\t\treturn ( ( n % m ) + m ) % m;\n\n\t\t},\n\n\t\t// Linear mapping from range <a1, a2> to range <b1, b2>\n\n\t\tmapLinear: function ( x, a1, a2, b1, b2 ) {\n\n\t\t\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\n\n\t\t},\n\n\t\t// https://en.wikipedia.org/wiki/Linear_interpolation\n\n\t\tlerp: function ( x, y, t ) {\n\n\t\t\treturn ( 1 - t ) * x + t * y;\n\n\t\t},\n\n\t\t// http://en.wikipedia.org/wiki/Smoothstep\n\n\t\tsmoothstep: function ( x, min, max ) {\n\n\t\t\tif ( x <= min ) { return 0; }\n\t\t\tif ( x >= max ) { return 1; }\n\n\t\t\tx = ( x - min ) / ( max - min );\n\n\t\t\treturn x * x * ( 3 - 2 * x );\n\n\t\t},\n\n\t\tsmootherstep: function ( x, min, max ) {\n\n\t\t\tif ( x <= min ) { return 0; }\n\t\t\tif ( x >= max ) { return 1; }\n\n\t\t\tx = ( x - min ) / ( max - min );\n\n\t\t\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\n\n\t\t},\n\n\t\t// Random integer from <low, high> interval\n\n\t\trandInt: function ( low, high ) {\n\n\t\t\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\n\n\t\t},\n\n\t\t// Random float from <low, high> interval\n\n\t\trandFloat: function ( low, high ) {\n\n\t\t\treturn low + Math.random() * ( high - low );\n\n\t\t},\n\n\t\t// Random float from <-range/2, range/2> interval\n\n\t\trandFloatSpread: function ( range ) {\n\n\t\t\treturn range * ( 0.5 - Math.random() );\n\n\t\t},\n\n\t\tdegToRad: function ( degrees ) {\n\n\t\t\treturn degrees * MathUtils.DEG2RAD;\n\n\t\t},\n\n\t\tradToDeg: function ( radians ) {\n\n\t\t\treturn radians * MathUtils.RAD2DEG;\n\n\t\t},\n\n\t\tisPowerOfTwo: function ( value ) {\n\n\t\t\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\n\n\t\t},\n\n\t\tceilPowerOfTwo: function ( value ) {\n\n\t\t\treturn Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );\n\n\t\t},\n\n\t\tfloorPowerOfTwo: function ( value ) {\n\n\t\t\treturn Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );\n\n\t\t},\n\n\t\tsetQuaternionFromProperEuler: function ( q, a, b, c, order ) {\n\n\t\t\t// Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles\n\n\t\t\t// rotations are applied to the axes in the order specified by 'order'\n\t\t\t// rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'\n\t\t\t// angles are in radians\n\n\t\t\tvar cos = Math.cos;\n\t\t\tvar sin = Math.sin;\n\n\t\t\tvar c2 = cos( b / 2 );\n\t\t\tvar s2 = sin( b / 2 );\n\n\t\t\tvar c13 = cos( ( a + c ) / 2 );\n\t\t\tvar s13 = sin( ( a + c ) / 2 );\n\n\t\t\tvar c1_3 = cos( ( a - c ) / 2 );\n\t\t\tvar s1_3 = sin( ( a - c ) / 2 );\n\n\t\t\tvar c3_1 = cos( ( c - a ) / 2 );\n\t\t\tvar s3_1 = sin( ( c - a ) / 2 );\n\n\t\t\tif ( order === 'XYX' ) {\n\n\t\t\t\tq.set( c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13 );\n\n\t\t\t} else if ( order === 'YZY' ) {\n\n\t\t\t\tq.set( s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13 );\n\n\t\t\t} else if ( order === 'ZXZ' ) {\n\n\t\t\t\tq.set( s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13 );\n\n\t\t\t} else if ( order === 'XZX' ) {\n\n\t\t\t\tq.set( c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13 );\n\n\t\t\t} else if ( order === 'YXY' ) {\n\n\t\t\t\tq.set( s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13 );\n\n\t\t\t} else if ( order === 'ZYZ' ) {\n\n\t\t\t\tq.set( s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13 );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order.' );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author philogb / http://blog.thejit.org/\n\t * @author egraether / http://egraether.com/\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t */\n\n\tfunction Vector2( x, y ) {\n\n\t\tthis.x = x || 0;\n\t\tthis.y = y || 0;\n\n\t}\n\n\tObject.defineProperties( Vector2.prototype, {\n\n\t\t\"width\": {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.x;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.x = value;\n\n\t\t\t}\n\n\t\t},\n\n\t\t\"height\": {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.y;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.y = value;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Vector2.prototype, {\n\n\t\tisVector2: true,\n\n\t\tset: function ( x, y ) {\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetScalar: function ( scalar ) {\n\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetX: function ( x ) {\n\n\t\t\tthis.x = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetY: function ( y ) {\n\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetComponent: function ( index, value ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: this.x = value; break;\n\t\t\t\tcase 1: this.y = value; break;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetComponent: function ( index ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: return this.x;\n\t\t\t\tcase 1: return this.y;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.x, this.y );\n\n\t\t},\n\n\t\tcopy: function ( v ) {\n\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tadd: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\t\treturn this.addVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScalar: function ( s ) {\n\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScaledVector: function ( v, s ) {\n\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsub: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\t\treturn this.subVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubScalar: function ( s ) {\n\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( v ) {\n\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( scalar ) {\n\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdivide: function ( v ) {\n\n\t\t\tthis.x /= v.x;\n\t\t\tthis.y /= v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdivideScalar: function ( scalar ) {\n\n\t\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t\t},\n\n\t\tapplyMatrix3: function ( m ) {\n\n\t\t\tvar x = this.x, y = this.y;\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];\n\t\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmin: function ( v ) {\n\n\t\t\tthis.x = Math.min( this.x, v.x );\n\t\t\tthis.y = Math.min( this.y, v.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmax: function ( v ) {\n\n\t\t\tthis.x = Math.max( this.x, v.x );\n\t\t\tthis.y = Math.max( this.y, v.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclamp: function ( min, max ) {\n\n\t\t\t// assumes min < max, componentwise\n\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampScalar: function ( minVal, maxVal ) {\n\n\t\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\n\t\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampLength: function ( min, max ) {\n\n\t\t\tvar length = this.length();\n\n\t\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t\t},\n\n\t\tfloor: function () {\n\n\t\t\tthis.x = Math.floor( this.x );\n\t\t\tthis.y = Math.floor( this.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tceil: function () {\n\n\t\t\tthis.x = Math.ceil( this.x );\n\t\t\tthis.y = Math.ceil( this.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tround: function () {\n\n\t\t\tthis.x = Math.round( this.x );\n\t\t\tthis.y = Math.round( this.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\troundToZero: function () {\n\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnegate: function () {\n\n\t\t\tthis.x = - this.x;\n\t\t\tthis.y = - this.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdot: function ( v ) {\n\n\t\t\treturn this.x * v.x + this.y * v.y;\n\n\t\t},\n\n\t\tcross: function ( v ) {\n\n\t\t\treturn this.x * v.y - this.y * v.x;\n\n\t\t},\n\n\t\tlengthSq: function () {\n\n\t\t\treturn this.x * this.x + this.y * this.y;\n\n\t\t},\n\n\t\tlength: function () {\n\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\n\n\t\t},\n\n\t\tmanhattanLength: function () {\n\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y );\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\treturn this.divideScalar( this.length() || 1 );\n\n\t\t},\n\n\t\tangle: function () {\n\n\t\t\t// computes the angle in radians with respect to the positive x-axis\n\n\t\t\tvar angle = Math.atan2( this.y, this.x );\n\n\t\t\tif ( angle < 0 ) { angle += 2 * Math.PI; }\n\n\t\t\treturn angle;\n\n\t\t},\n\n\t\tdistanceTo: function ( v ) {\n\n\t\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t\t},\n\n\t\tdistanceToSquared: function ( v ) {\n\n\t\t\tvar dx = this.x - v.x, dy = this.y - v.y;\n\t\t\treturn dx * dx + dy * dy;\n\n\t\t},\n\n\t\tmanhattanDistanceTo: function ( v ) {\n\n\t\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );\n\n\t\t},\n\n\t\tsetLength: function ( length ) {\n\n\t\t\treturn this.normalize().multiplyScalar( length );\n\n\t\t},\n\n\t\tlerp: function ( v, alpha ) {\n\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n\t\t},\n\n\t\tequals: function ( v ) {\n\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tthis.x = array[ offset ];\n\t\t\tthis.y = array[ offset + 1 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tarray[ offset ] = this.x;\n\t\t\tarray[ offset + 1 ] = this.y;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\tfromBufferAttribute: function ( attribute, index, offset ) {\n\n\t\t\tif ( offset !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector2: offset has been removed from .fromBufferAttribute().' );\n\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX( index );\n\t\t\tthis.y = attribute.getY( index );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateAround: function ( center, angle ) {\n\n\t\t\tvar c = Math.cos( angle ), s = Math.sin( angle );\n\n\t\t\tvar x = this.x - center.x;\n\t\t\tvar y = this.y - center.y;\n\n\t\t\tthis.x = x * c - y * s + center.x;\n\t\t\tthis.y = x * s + y * c + center.y;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author bhouston / http://clara.io\n\t * @author tschw\n\t */\n\n\tfunction Matrix3() {\n\n\t\tthis.elements = [\n\n\t\t\t1, 0, 0,\n\t\t\t0, 1, 0,\n\t\t\t0, 0, 1\n\n\t\t];\n\n\t\tif ( arguments.length > 0 ) {\n\n\t\t\tconsole.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );\n\n\t\t}\n\n\t}\n\n\tObject.assign( Matrix3.prototype, {\n\n\t\tisMatrix3: true,\n\n\t\tset: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;\n\t\t\tte[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;\n\t\t\tte[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tidentity: function () {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0,\n\t\t\t\t0, 1, 0,\n\t\t\t\t0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().fromArray( this.elements );\n\n\t\t},\n\n\t\tcopy: function ( m ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = m.elements;\n\n\t\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];\n\t\t\tte[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];\n\t\t\tte[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrix4: function ( m ) {\n\n\t\t\tvar me = m.elements;\n\n\t\t\tthis.set(\n\n\t\t\t\tme[ 0 ], me[ 4 ], me[ 8 ],\n\t\t\t\tme[ 1 ], me[ 5 ], me[ 9 ],\n\t\t\t\tme[ 2 ], me[ 6 ], me[ 10 ]\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( m ) {\n\n\t\t\treturn this.multiplyMatrices( this, m );\n\n\t\t},\n\n\t\tpremultiply: function ( m ) {\n\n\t\t\treturn this.multiplyMatrices( m, this );\n\n\t\t},\n\n\t\tmultiplyMatrices: function ( a, b ) {\n\n\t\t\tvar ae = a.elements;\n\t\t\tvar be = b.elements;\n\t\t\tvar te = this.elements;\n\n\t\t\tvar a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];\n\t\t\tvar a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];\n\t\t\tvar a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];\n\n\t\t\tvar b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];\n\t\t\tvar b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];\n\t\t\tvar b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];\n\n\t\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;\n\t\t\tte[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;\n\t\t\tte[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;\n\n\t\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;\n\t\t\tte[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;\n\t\t\tte[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;\n\n\t\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;\n\t\t\tte[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;\n\t\t\tte[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( s ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;\n\t\t\tte[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;\n\t\t\tte[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdeterminant: function () {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],\n\t\t\t\td = te[ 3 ], e = te[ 4 ], f = te[ 5 ],\n\t\t\t\tg = te[ 6 ], h = te[ 7 ], i = te[ 8 ];\n\n\t\t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n\n\t\t},\n\n\t\tgetInverse: function ( matrix, throwOnDegenerate ) {\n\n\t\t\tif ( matrix && matrix.isMatrix4 ) {\n\n\t\t\t\tconsole.error( \"THREE.Matrix3: .getInverse() no longer takes a Matrix4 argument.\" );\n\n\t\t\t}\n\n\t\t\tvar me = matrix.elements,\n\t\t\t\tte = this.elements,\n\n\t\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],\n\t\t\t\tn12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],\n\t\t\t\tn13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],\n\n\t\t\t\tt11 = n33 * n22 - n32 * n23,\n\t\t\t\tt12 = n32 * n13 - n33 * n12,\n\t\t\t\tt13 = n23 * n12 - n22 * n13,\n\n\t\t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\n\n\t\t\tif ( det === 0 ) {\n\n\t\t\t\tvar msg = \"THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0\";\n\n\t\t\t\tif ( throwOnDegenerate === true ) {\n\n\t\t\t\t\tthrow new Error( msg );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( msg );\n\n\t\t\t\t}\n\n\t\t\t\treturn this.identity();\n\n\t\t\t}\n\n\t\t\tvar detInv = 1 / det;\n\n\t\t\tte[ 0 ] = t11 * detInv;\n\t\t\tte[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;\n\t\t\tte[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;\n\n\t\t\tte[ 3 ] = t12 * detInv;\n\t\t\tte[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;\n\t\t\tte[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;\n\n\t\t\tte[ 6 ] = t13 * detInv;\n\t\t\tte[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;\n\t\t\tte[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranspose: function () {\n\n\t\t\tvar tmp, m = this.elements;\n\n\t\t\ttmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;\n\t\t\ttmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;\n\t\t\ttmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetNormalMatrix: function ( matrix4 ) {\n\n\t\t\treturn this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();\n\n\t\t},\n\n\t\ttransposeIntoArray: function ( r ) {\n\n\t\t\tvar m = this.elements;\n\n\t\t\tr[ 0 ] = m[ 0 ];\n\t\t\tr[ 1 ] = m[ 3 ];\n\t\t\tr[ 2 ] = m[ 6 ];\n\t\t\tr[ 3 ] = m[ 1 ];\n\t\t\tr[ 4 ] = m[ 4 ];\n\t\t\tr[ 5 ] = m[ 7 ];\n\t\t\tr[ 6 ] = m[ 2 ];\n\t\t\tr[ 7 ] = m[ 5 ];\n\t\t\tr[ 8 ] = m[ 8 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetUvTransform: function ( tx, ty, sx, sy, rotation, cx, cy ) {\n\n\t\t\tvar c = Math.cos( rotation );\n\t\t\tvar s = Math.sin( rotation );\n\n\t\t\tthis.set(\n\t\t\t\tsx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,\n\t\t\t\t- sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,\n\t\t\t\t0, 0, 1\n\t\t\t);\n\n\t\t},\n\n\t\tscale: function ( sx, sy ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] *= sx; te[ 3 ] *= sx; te[ 6 ] *= sx;\n\t\t\tte[ 1 ] *= sy; te[ 4 ] *= sy; te[ 7 ] *= sy;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotate: function ( theta ) {\n\n\t\t\tvar c = Math.cos( theta );\n\t\t\tvar s = Math.sin( theta );\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar a11 = te[ 0 ], a12 = te[ 3 ], a13 = te[ 6 ];\n\t\t\tvar a21 = te[ 1 ], a22 = te[ 4 ], a23 = te[ 7 ];\n\n\t\t\tte[ 0 ] = c * a11 + s * a21;\n\t\t\tte[ 3 ] = c * a12 + s * a22;\n\t\t\tte[ 6 ] = c * a13 + s * a23;\n\n\t\t\tte[ 1 ] = - s * a11 + c * a21;\n\t\t\tte[ 4 ] = - s * a12 + c * a22;\n\t\t\tte[ 7 ] = - s * a13 + c * a23;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( tx, ty ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] += tx * te[ 2 ]; te[ 3 ] += tx * te[ 5 ]; te[ 6 ] += tx * te[ 8 ];\n\t\t\tte[ 1 ] += ty * te[ 2 ]; te[ 4 ] += ty * te[ 5 ]; te[ 7 ] += ty * te[ 8 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( matrix ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = matrix.elements;\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tif ( te[ i ] !== me[ i ] ) { return false; }\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tthis.elements[ i ] = array[ i + offset ];\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tvar te = this.elements;\n\n\t\t\tarray[ offset ] = te[ 0 ];\n\t\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\t\tarray[ offset + 2 ] = te[ 2 ];\n\n\t\t\tarray[ offset + 3 ] = te[ 3 ];\n\t\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\t\tarray[ offset + 5 ] = te[ 5 ];\n\n\t\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\t\tarray[ offset + 7 ] = te[ 7 ];\n\t\t\tarray[ offset + 8 ] = te[ 8 ];\n\n\t\t\treturn array;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author szimek / https://github.com/szimek/\n\t */\n\n\tvar _canvas;\n\n\tvar ImageUtils = {\n\n\t\tgetDataURL: function ( image ) {\n\n\t\t\tvar canvas;\n\n\t\t\tif ( typeof HTMLCanvasElement == 'undefined' ) {\n\n\t\t\t\treturn image.src;\n\n\t\t\t} else if ( image instanceof HTMLCanvasElement ) {\n\n\t\t\t\tcanvas = image;\n\n\t\t\t} else {\n\n\t\t\t\tif ( _canvas === undefined ) { _canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ); }\n\n\t\t\t\t_canvas.width = image.width;\n\t\t\t\t_canvas.height = image.height;\n\n\t\t\t\tvar context = _canvas.getContext( '2d' );\n\n\t\t\t\tif ( image instanceof ImageData ) {\n\n\t\t\t\t\tcontext.putImageData( image, 0, 0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height );\n\n\t\t\t\t}\n\n\t\t\t\tcanvas = _canvas;\n\n\t\t\t}\n\n\t\t\tif ( canvas.width > 2048 || canvas.height > 2048 ) {\n\n\t\t\t\treturn canvas.toDataURL( 'image/jpeg', 0.6 );\n\n\t\t\t} else {\n\n\t\t\t\treturn canvas.toDataURL( 'image/png' );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author szimek / https://github.com/szimek/\n\t */\n\n\tvar textureId = 0;\n\n\tfunction Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\n\t\tObject.defineProperty( this, 'id', { value: textureId ++ } );\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\tthis.name = '';\n\n\t\tthis.image = image !== undefined ? image : Texture.DEFAULT_IMAGE;\n\t\tthis.mipmaps = [];\n\n\t\tthis.mapping = mapping !== undefined ? mapping : Texture.DEFAULT_MAPPING;\n\n\t\tthis.wrapS = wrapS !== undefined ? wrapS : ClampToEdgeWrapping;\n\t\tthis.wrapT = wrapT !== undefined ? wrapT : ClampToEdgeWrapping;\n\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : LinearMipmapLinearFilter;\n\n\t\tthis.anisotropy = anisotropy !== undefined ? anisotropy : 1;\n\n\t\tthis.format = format !== undefined ? format : RGBAFormat;\n\t\tthis.internalFormat = null;\n\t\tthis.type = type !== undefined ? type : UnsignedByteType;\n\n\t\tthis.offset = new Vector2( 0, 0 );\n\t\tthis.repeat = new Vector2( 1, 1 );\n\t\tthis.center = new Vector2( 0, 0 );\n\t\tthis.rotation = 0;\n\n\t\tthis.matrixAutoUpdate = true;\n\t\tthis.matrix = new Matrix3();\n\n\t\tthis.generateMipmaps = true;\n\t\tthis.premultiplyAlpha = false;\n\t\tthis.flipY = true;\n\t\tthis.unpackAlignment = 4;\t// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n\n\t\t// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\n\t\t//\n\t\t// Also changing the encoding after already used by a Material will not automatically make the Material\n\t\t// update. You need to explicitly call Material.needsUpdate to trigger it to recompile.\n\t\tthis.encoding = encoding !== undefined ? encoding : LinearEncoding;\n\n\t\tthis.version = 0;\n\t\tthis.onUpdate = null;\n\n\t}\n\n\tTexture.DEFAULT_IMAGE = undefined;\n\tTexture.DEFAULT_MAPPING = UVMapping;\n\n\tTexture.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: Texture,\n\n\t\tisTexture: true,\n\n\t\tupdateMatrix: function () {\n\n\t\t\tthis.matrix.setUvTransform( this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.name = source.name;\n\n\t\t\tthis.image = source.image;\n\t\t\tthis.mipmaps = source.mipmaps.slice( 0 );\n\n\t\t\tthis.mapping = source.mapping;\n\n\t\t\tthis.wrapS = source.wrapS;\n\t\t\tthis.wrapT = source.wrapT;\n\n\t\t\tthis.magFilter = source.magFilter;\n\t\t\tthis.minFilter = source.minFilter;\n\n\t\t\tthis.anisotropy = source.anisotropy;\n\n\t\t\tthis.format = source.format;\n\t\t\tthis.internalFormat = source.internalFormat;\n\t\t\tthis.type = source.type;\n\n\t\t\tthis.offset.copy( source.offset );\n\t\t\tthis.repeat.copy( source.repeat );\n\t\t\tthis.center.copy( source.center );\n\t\t\tthis.rotation = source.rotation;\n\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\tthis.matrix.copy( source.matrix );\n\n\t\t\tthis.generateMipmaps = source.generateMipmaps;\n\t\t\tthis.premultiplyAlpha = source.premultiplyAlpha;\n\t\t\tthis.flipY = source.flipY;\n\t\t\tthis.unpackAlignment = source.unpackAlignment;\n\t\t\tthis.encoding = source.encoding;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\t\tif ( ! isRootObject && meta.textures[ this.uuid ] !== undefined ) {\n\n\t\t\t\treturn meta.textures[ this.uuid ];\n\n\t\t\t}\n\n\t\t\tvar output = {\n\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Texture',\n\t\t\t\t\tgenerator: 'Texture.toJSON'\n\t\t\t\t},\n\n\t\t\t\tuuid: this.uuid,\n\t\t\t\tname: this.name,\n\n\t\t\t\tmapping: this.mapping,\n\n\t\t\t\trepeat: [ this.repeat.x, this.repeat.y ],\n\t\t\t\toffset: [ this.offset.x, this.offset.y ],\n\t\t\t\tcenter: [ this.center.x, this.center.y ],\n\t\t\t\trotation: this.rotation,\n\n\t\t\t\twrap: [ this.wrapS, this.wrapT ],\n\n\t\t\t\tformat: this.format,\n\t\t\t\ttype: this.type,\n\t\t\t\tencoding: this.encoding,\n\n\t\t\t\tminFilter: this.minFilter,\n\t\t\t\tmagFilter: this.magFilter,\n\t\t\t\tanisotropy: this.anisotropy,\n\n\t\t\t\tflipY: this.flipY,\n\n\t\t\t\tpremultiplyAlpha: this.premultiplyAlpha,\n\t\t\t\tunpackAlignment: this.unpackAlignment\n\n\t\t\t};\n\n\t\t\tif ( this.image !== undefined ) {\n\n\t\t\t\t// TODO: Move to THREE.Image\n\n\t\t\t\tvar image = this.image;\n\n\t\t\t\tif ( image.uuid === undefined ) {\n\n\t\t\t\t\timage.uuid = MathUtils.generateUUID(); // UGH\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! isRootObject && meta.images[ image.uuid ] === undefined ) {\n\n\t\t\t\t\tvar url;\n\n\t\t\t\t\tif ( Array.isArray( image ) ) {\n\n\t\t\t\t\t\t// process array of images e.g. CubeTexture\n\n\t\t\t\t\t\turl = [];\n\n\t\t\t\t\t\tfor ( var i = 0, l = image.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\turl.push( ImageUtils.getDataURL( image[ i ] ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// process single image\n\n\t\t\t\t\t\turl = ImageUtils.getDataURL( image );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmeta.images[ image.uuid ] = {\n\t\t\t\t\t\tuuid: image.uuid,\n\t\t\t\t\t\turl: url\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t\toutput.image = image.uuid;\n\n\t\t\t}\n\n\t\t\tif ( ! isRootObject ) {\n\n\t\t\t\tmeta.textures[ this.uuid ] = output;\n\n\t\t\t}\n\n\t\t\treturn output;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t},\n\n\t\ttransformUv: function ( uv ) {\n\n\t\t\tif ( this.mapping !== UVMapping ) { return uv; }\n\n\t\t\tuv.applyMatrix3( this.matrix );\n\n\t\t\tif ( uv.x < 0 || uv.x > 1 ) {\n\n\t\t\t\tswitch ( this.wrapS ) {\n\n\t\t\t\t\tcase RepeatWrapping:\n\n\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ClampToEdgeWrapping:\n\n\t\t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MirroredRepeatWrapping:\n\n\t\t\t\t\t\tif ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\t\tuv.x = Math.ceil( uv.x ) - uv.x;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( uv.y < 0 || uv.y > 1 ) {\n\n\t\t\t\tswitch ( this.wrapT ) {\n\n\t\t\t\t\tcase RepeatWrapping:\n\n\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ClampToEdgeWrapping:\n\n\t\t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MirroredRepeatWrapping:\n\n\t\t\t\t\t\tif ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\t\tuv.y = Math.ceil( uv.y ) - uv.y;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.flipY ) {\n\n\t\t\t\tuv.y = 1 - uv.y;\n\n\t\t\t}\n\n\t\t\treturn uv;\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperty( Texture.prototype, \"needsUpdate\", {\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value === true ) { this.version ++; }\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\n\t * @author philogb / http://blog.thejit.org/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author egraether / http://egraether.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction Vector4( x, y, z, w ) {\n\n\t\tthis.x = x || 0;\n\t\tthis.y = y || 0;\n\t\tthis.z = z || 0;\n\t\tthis.w = ( w !== undefined ) ? w : 1;\n\n\t}\n\n\tObject.defineProperties( Vector4.prototype, {\n\n\t\t\"width\": {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.z;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.z = value;\n\n\t\t\t}\n\n\t\t},\n\n\t\t\"height\": {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.w;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.w = value;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Vector4.prototype, {\n\n\t\tisVector4: true,\n\n\t\tset: function ( x, y, z, w ) {\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t\tthis.w = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetScalar: function ( scalar ) {\n\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\tthis.z = scalar;\n\t\t\tthis.w = scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetX: function ( x ) {\n\n\t\t\tthis.x = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetY: function ( y ) {\n\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetZ: function ( z ) {\n\n\t\t\tthis.z = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetW: function ( w ) {\n\n\t\t\tthis.w = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetComponent: function ( index, value ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: this.x = value; break;\n\t\t\t\tcase 1: this.y = value; break;\n\t\t\t\tcase 2: this.z = value; break;\n\t\t\t\tcase 3: this.w = value; break;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetComponent: function ( index ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: return this.x;\n\t\t\t\tcase 1: return this.y;\n\t\t\t\tcase 2: return this.z;\n\t\t\t\tcase 3: return this.w;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.x, this.y, this.z, this.w );\n\n\t\t},\n\n\t\tcopy: function ( v ) {\n\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\tthis.z = v.z;\n\t\t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tadd: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\t\treturn this.addVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\tthis.z += v.z;\n\t\t\tthis.w += v.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScalar: function ( s ) {\n\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\tthis.z += s;\n\t\t\tthis.w += s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\tthis.z = a.z + b.z;\n\t\t\tthis.w = a.w + b.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScaledVector: function ( v, s ) {\n\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\tthis.z += v.z * s;\n\t\t\tthis.w += v.w * s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsub: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\t\treturn this.subVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\tthis.z -= v.z;\n\t\t\tthis.w -= v.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubScalar: function ( s ) {\n\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\tthis.z -= s;\n\t\t\tthis.w -= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\tthis.z = a.z - b.z;\n\t\t\tthis.w = a.w - b.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( scalar ) {\n\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\tthis.z *= scalar;\n\t\t\tthis.w *= scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyMatrix4: function ( m ) {\n\n\t\t\tvar x = this.x, y = this.y, z = this.z, w = this.w;\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\n\t\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\n\t\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\n\t\t\tthis.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdivideScalar: function ( scalar ) {\n\n\t\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t\t},\n\n\t\tsetAxisAngleFromQuaternion: function ( q ) {\n\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n\n\t\t\t// q is assumed to be normalized\n\n\t\t\tthis.w = 2 * Math.acos( q.w );\n\n\t\t\tvar s = Math.sqrt( 1 - q.w * q.w );\n\n\t\t\tif ( s < 0.0001 ) {\n\n\t\t\t\tthis.x = 1;\n\t\t\t\tthis.y = 0;\n\t\t\t\tthis.z = 0;\n\n\t\t\t} else {\n\n\t\t\t\tthis.x = q.x / s;\n\t\t\t\tthis.y = q.y / s;\n\t\t\t\tthis.z = q.z / s;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetAxisAngleFromRotationMatrix: function ( m ) {\n\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tvar angle, x, y, z,\t\t// variables for result\n\t\t\t\tepsilon = 0.01,\t\t// margin to allow for rounding errors\n\t\t\t\tepsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\n\n\t\t\t\tte = m.elements,\n\n\t\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\t\tif ( ( Math.abs( m12 - m21 ) < epsilon ) &&\n\t\t\t     ( Math.abs( m13 - m31 ) < epsilon ) &&\n\t\t\t     ( Math.abs( m23 - m32 ) < epsilon ) ) {\n\n\t\t\t\t// singularity found\n\t\t\t\t// first check for identity matrix which must have +1 for all terms\n\t\t\t\t// in leading diagonal and zero in other terms\n\n\t\t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&\n\t\t\t\t     ( Math.abs( m13 + m31 ) < epsilon2 ) &&\n\t\t\t\t     ( Math.abs( m23 + m32 ) < epsilon2 ) &&\n\t\t\t\t     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\n\n\t\t\t\t\t// this singularity is identity matrix so angle = 0\n\n\t\t\t\t\tthis.set( 1, 0, 0, 0 );\n\n\t\t\t\t\treturn this; // zero angle, arbitrary axis\n\n\t\t\t\t}\n\n\t\t\t\t// otherwise this singularity is angle = 180\n\n\t\t\t\tangle = Math.PI;\n\n\t\t\t\tvar xx = ( m11 + 1 ) / 2;\n\t\t\t\tvar yy = ( m22 + 1 ) / 2;\n\t\t\t\tvar zz = ( m33 + 1 ) / 2;\n\t\t\t\tvar xy = ( m12 + m21 ) / 4;\n\t\t\t\tvar xz = ( m13 + m31 ) / 4;\n\t\t\t\tvar yz = ( m23 + m32 ) / 4;\n\n\t\t\t\tif ( ( xx > yy ) && ( xx > zz ) ) {\n\n\t\t\t\t\t// m11 is the largest diagonal term\n\n\t\t\t\t\tif ( xx < epsilon ) {\n\n\t\t\t\t\t\tx = 0;\n\t\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tx = Math.sqrt( xx );\n\t\t\t\t\t\ty = xy / x;\n\t\t\t\t\t\tz = xz / x;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( yy > zz ) {\n\n\t\t\t\t\t// m22 is the largest diagonal term\n\n\t\t\t\t\tif ( yy < epsilon ) {\n\n\t\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\t\ty = 0;\n\t\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ty = Math.sqrt( yy );\n\t\t\t\t\t\tx = xy / y;\n\t\t\t\t\t\tz = yz / y;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// m33 is the largest diagonal term so base result on this\n\n\t\t\t\t\tif ( zz < epsilon ) {\n\n\t\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\t\tz = 0;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tz = Math.sqrt( zz );\n\t\t\t\t\t\tx = xz / z;\n\t\t\t\t\t\ty = yz / z;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.set( x, y, z, angle );\n\n\t\t\t\treturn this; // return 180 deg rotation\n\n\t\t\t}\n\n\t\t\t// as we have reached here there are no singularities so we can handle normally\n\n\t\t\tvar s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +\n\t\t\t                   ( m13 - m31 ) * ( m13 - m31 ) +\n\t\t\t                   ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\n\n\t\t\tif ( Math.abs( s ) < 0.001 ) { s = 1; }\n\n\t\t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\n\t\t\t// caught by singularity test above, but I've left it in just in case\n\n\t\t\tthis.x = ( m32 - m23 ) / s;\n\t\t\tthis.y = ( m13 - m31 ) / s;\n\t\t\tthis.z = ( m21 - m12 ) / s;\n\t\t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmin: function ( v ) {\n\n\t\t\tthis.x = Math.min( this.x, v.x );\n\t\t\tthis.y = Math.min( this.y, v.y );\n\t\t\tthis.z = Math.min( this.z, v.z );\n\t\t\tthis.w = Math.min( this.w, v.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmax: function ( v ) {\n\n\t\t\tthis.x = Math.max( this.x, v.x );\n\t\t\tthis.y = Math.max( this.y, v.y );\n\t\t\tthis.z = Math.max( this.z, v.z );\n\t\t\tthis.w = Math.max( this.w, v.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclamp: function ( min, max ) {\n\n\t\t\t// assumes min < max, componentwise\n\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\t\t\tthis.w = Math.max( min.w, Math.min( max.w, this.w ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampScalar: function ( minVal, maxVal ) {\n\n\t\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\n\t\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\n\t\t\tthis.z = Math.max( minVal, Math.min( maxVal, this.z ) );\n\t\t\tthis.w = Math.max( minVal, Math.min( maxVal, this.w ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampLength: function ( min, max ) {\n\n\t\t\tvar length = this.length();\n\n\t\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t\t},\n\n\t\tfloor: function () {\n\n\t\t\tthis.x = Math.floor( this.x );\n\t\t\tthis.y = Math.floor( this.y );\n\t\t\tthis.z = Math.floor( this.z );\n\t\t\tthis.w = Math.floor( this.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tceil: function () {\n\n\t\t\tthis.x = Math.ceil( this.x );\n\t\t\tthis.y = Math.ceil( this.y );\n\t\t\tthis.z = Math.ceil( this.z );\n\t\t\tthis.w = Math.ceil( this.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tround: function () {\n\n\t\t\tthis.x = Math.round( this.x );\n\t\t\tthis.y = Math.round( this.y );\n\t\t\tthis.z = Math.round( this.z );\n\t\t\tthis.w = Math.round( this.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\troundToZero: function () {\n\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\t\t\tthis.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnegate: function () {\n\n\t\t\tthis.x = - this.x;\n\t\t\tthis.y = - this.y;\n\t\t\tthis.z = - this.z;\n\t\t\tthis.w = - this.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdot: function ( v ) {\n\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n\n\t\t},\n\n\t\tlengthSq: function () {\n\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n\n\t\t},\n\n\t\tlength: function () {\n\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\n\n\t\t},\n\n\t\tmanhattanLength: function () {\n\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\treturn this.divideScalar( this.length() || 1 );\n\n\t\t},\n\n\t\tsetLength: function ( length ) {\n\n\t\t\treturn this.normalize().multiplyScalar( length );\n\n\t\t},\n\n\t\tlerp: function ( v, alpha ) {\n\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\t\tthis.z += ( v.z - this.z ) * alpha;\n\t\t\tthis.w += ( v.w - this.w ) * alpha;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n\t\t},\n\n\t\tequals: function ( v ) {\n\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tthis.x = array[ offset ];\n\t\t\tthis.y = array[ offset + 1 ];\n\t\t\tthis.z = array[ offset + 2 ];\n\t\t\tthis.w = array[ offset + 3 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tarray[ offset ] = this.x;\n\t\t\tarray[ offset + 1 ] = this.y;\n\t\t\tarray[ offset + 2 ] = this.z;\n\t\t\tarray[ offset + 3 ] = this.w;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\tfromBufferAttribute: function ( attribute, index, offset ) {\n\n\t\t\tif ( offset !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector4: offset has been removed from .fromBufferAttribute().' );\n\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX( index );\n\t\t\tthis.y = attribute.getY( index );\n\t\t\tthis.z = attribute.getZ( index );\n\t\t\tthis.w = attribute.getW( index );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author szimek / https://github.com/szimek/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author Marius Kintel / https://github.com/kintel\n\t */\n\n\t/*\n\t In options, we can specify:\n\t * Texture parameters for an auto-generated target texture\n\t * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\n\t*/\n\tfunction WebGLRenderTarget( width, height, options ) {\n\n\t\tthis.width = width;\n\t\tthis.height = height;\n\n\t\tthis.scissor = new Vector4( 0, 0, width, height );\n\t\tthis.scissorTest = false;\n\n\t\tthis.viewport = new Vector4( 0, 0, width, height );\n\n\t\toptions = options || {};\n\n\t\tthis.texture = new Texture( undefined, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );\n\n\t\tthis.texture.image = {};\n\t\tthis.texture.image.width = width;\n\t\tthis.texture.image.height = height;\n\n\t\tthis.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;\n\t\tthis.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;\n\n\t\tthis.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\n\t\tthis.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;\n\t\tthis.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;\n\n\t}\n\n\tWebGLRenderTarget.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: WebGLRenderTarget,\n\n\t\tisWebGLRenderTarget: true,\n\n\t\tsetSize: function ( width, height ) {\n\n\t\t\tif ( this.width !== width || this.height !== height ) {\n\n\t\t\t\tthis.width = width;\n\t\t\t\tthis.height = height;\n\n\t\t\t\tthis.texture.image.width = width;\n\t\t\t\tthis.texture.image.height = height;\n\n\t\t\t\tthis.dispose();\n\n\t\t\t}\n\n\t\t\tthis.viewport.set( 0, 0, width, height );\n\t\t\tthis.scissor.set( 0, 0, width, height );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.width = source.width;\n\t\t\tthis.height = source.height;\n\n\t\t\tthis.viewport.copy( source.viewport );\n\n\t\t\tthis.texture = source.texture.clone();\n\n\t\t\tthis.depthBuffer = source.depthBuffer;\n\t\t\tthis.stencilBuffer = source.stencilBuffer;\n\t\t\tthis.depthTexture = source.depthTexture;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t * @author Matt DesLauriers / @mattdesl\n\t */\n\n\tfunction WebGLMultisampleRenderTarget( width, height, options ) {\n\n\t\tWebGLRenderTarget.call( this, width, height, options );\n\n\t\tthis.samples = 4;\n\n\t}\n\n\tWebGLMultisampleRenderTarget.prototype = Object.assign( Object.create( WebGLRenderTarget.prototype ), {\n\n\t\tconstructor: WebGLMultisampleRenderTarget,\n\n\t\tisWebGLMultisampleRenderTarget: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tWebGLRenderTarget.prototype.copy.call( this, source );\n\n\t\t\tthis.samples = source.samples;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author bhouston / http://clara.io\n\t */\n\n\tfunction Quaternion( x, y, z, w ) {\n\n\t\tthis._x = x || 0;\n\t\tthis._y = y || 0;\n\t\tthis._z = z || 0;\n\t\tthis._w = ( w !== undefined ) ? w : 1;\n\n\t}\n\n\tObject.assign( Quaternion, {\n\n\t\tslerp: function ( qa, qb, qm, t ) {\n\n\t\t\treturn qm.copy( qa ).slerp( qb, t );\n\n\t\t},\n\n\t\tslerpFlat: function ( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\n\n\t\t\t// fuzz-free, array-based Quaternion SLERP operation\n\n\t\t\tvar x0 = src0[ srcOffset0 + 0 ],\n\t\t\t\ty0 = src0[ srcOffset0 + 1 ],\n\t\t\t\tz0 = src0[ srcOffset0 + 2 ],\n\t\t\t\tw0 = src0[ srcOffset0 + 3 ],\n\n\t\t\t\tx1 = src1[ srcOffset1 + 0 ],\n\t\t\t\ty1 = src1[ srcOffset1 + 1 ],\n\t\t\t\tz1 = src1[ srcOffset1 + 2 ],\n\t\t\t\tw1 = src1[ srcOffset1 + 3 ];\n\n\t\t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\n\n\t\t\t\tvar s = 1 - t,\n\n\t\t\t\t\tcos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n\n\t\t\t\t\tdir = ( cos >= 0 ? 1 : - 1 ),\n\t\t\t\t\tsqrSin = 1 - cos * cos;\n\n\t\t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\n\t\t\t\tif ( sqrSin > Number.EPSILON ) {\n\n\t\t\t\t\tvar sin = Math.sqrt( sqrSin ),\n\t\t\t\t\t\tlen = Math.atan2( sin, cos * dir );\n\n\t\t\t\t\ts = Math.sin( s * len ) / sin;\n\t\t\t\t\tt = Math.sin( t * len ) / sin;\n\n\t\t\t\t}\n\n\t\t\t\tvar tDir = t * dir;\n\n\t\t\t\tx0 = x0 * s + x1 * tDir;\n\t\t\t\ty0 = y0 * s + y1 * tDir;\n\t\t\t\tz0 = z0 * s + z1 * tDir;\n\t\t\t\tw0 = w0 * s + w1 * tDir;\n\n\t\t\t\t// Normalize in case we just did a lerp:\n\t\t\t\tif ( s === 1 - t ) {\n\n\t\t\t\t\tvar f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\n\n\t\t\t\t\tx0 *= f;\n\t\t\t\t\ty0 *= f;\n\t\t\t\t\tz0 *= f;\n\t\t\t\t\tw0 *= f;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tdst[ dstOffset ] = x0;\n\t\t\tdst[ dstOffset + 1 ] = y0;\n\t\t\tdst[ dstOffset + 2 ] = z0;\n\t\t\tdst[ dstOffset + 3 ] = w0;\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( Quaternion.prototype, {\n\n\t\tx: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._x;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._x = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\ty: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._y;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._y = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\tz: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._z;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._z = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\tw: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._w;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._w = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Quaternion.prototype, {\n\n\t\tisQuaternion: true,\n\n\t\tset: function ( x, y, z, w ) {\n\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._w = w;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this._x, this._y, this._z, this._w );\n\n\t\t},\n\n\t\tcopy: function ( quaternion ) {\n\n\t\t\tthis._x = quaternion.x;\n\t\t\tthis._y = quaternion.y;\n\t\t\tthis._z = quaternion.z;\n\t\t\tthis._w = quaternion.w;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromEuler: function ( euler, update ) {\n\n\t\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\t\tthrow new Error( 'THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\n\t\t\t}\n\n\t\t\tvar x = euler._x, y = euler._y, z = euler._z, order = euler.order;\n\n\t\t\t// http://www.mathworks.com/matlabcentral/fileexchange/\n\t\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n\t\t\t//\tcontent/SpinCalc.m\n\n\t\t\tvar cos = Math.cos;\n\t\t\tvar sin = Math.sin;\n\n\t\t\tvar c1 = cos( x / 2 );\n\t\t\tvar c2 = cos( y / 2 );\n\t\t\tvar c3 = cos( z / 2 );\n\n\t\t\tvar s1 = sin( x / 2 );\n\t\t\tvar s2 = sin( y / 2 );\n\t\t\tvar s3 = sin( z / 2 );\n\n\t\t\tif ( order === 'XYZ' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t\t} else if ( order === 'YXZ' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t\t} else if ( order === 'ZXY' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t\t} else if ( order === 'ZYX' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t\t} else if ( order === 'YZX' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t\t} else if ( order === 'XZY' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t\t}\n\n\t\t\tif ( update !== false ) { this._onChangeCallback(); }\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromAxisAngle: function ( axis, angle ) {\n\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\n\t\t\t// assumes axis is normalized\n\n\t\t\tvar halfAngle = angle / 2, s = Math.sin( halfAngle );\n\n\t\t\tthis._x = axis.x * s;\n\t\t\tthis._y = axis.y * s;\n\t\t\tthis._z = axis.z * s;\n\t\t\tthis._w = Math.cos( halfAngle );\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromRotationMatrix: function ( m ) {\n\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tvar te = m.elements,\n\n\t\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\n\n\t\t\t\ttrace = m11 + m22 + m33,\n\t\t\t\ts;\n\n\t\t\tif ( trace > 0 ) {\n\n\t\t\t\ts = 0.5 / Math.sqrt( trace + 1.0 );\n\n\t\t\t\tthis._w = 0.25 / s;\n\t\t\t\tthis._x = ( m32 - m23 ) * s;\n\t\t\t\tthis._y = ( m13 - m31 ) * s;\n\t\t\t\tthis._z = ( m21 - m12 ) * s;\n\n\t\t\t} else if ( m11 > m22 && m11 > m33 ) {\n\n\t\t\t\ts = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\n\n\t\t\t\tthis._w = ( m32 - m23 ) / s;\n\t\t\t\tthis._x = 0.25 * s;\n\t\t\t\tthis._y = ( m12 + m21 ) / s;\n\t\t\t\tthis._z = ( m13 + m31 ) / s;\n\n\t\t\t} else if ( m22 > m33 ) {\n\n\t\t\t\ts = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\n\n\t\t\t\tthis._w = ( m13 - m31 ) / s;\n\t\t\t\tthis._x = ( m12 + m21 ) / s;\n\t\t\t\tthis._y = 0.25 * s;\n\t\t\t\tthis._z = ( m23 + m32 ) / s;\n\n\t\t\t} else {\n\n\t\t\t\ts = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\n\n\t\t\t\tthis._w = ( m21 - m12 ) / s;\n\t\t\t\tthis._x = ( m13 + m31 ) / s;\n\t\t\t\tthis._y = ( m23 + m32 ) / s;\n\t\t\t\tthis._z = 0.25 * s;\n\n\t\t\t}\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromUnitVectors: function ( vFrom, vTo ) {\n\n\t\t\t// assumes direction vectors vFrom and vTo are normalized\n\n\t\t\tvar EPS = 0.000001;\n\n\t\t\tvar r = vFrom.dot( vTo ) + 1;\n\n\t\t\tif ( r < EPS ) {\n\n\t\t\t\tr = 0;\n\n\t\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\n\n\t\t\t\t\tthis._x = - vFrom.y;\n\t\t\t\t\tthis._y = vFrom.x;\n\t\t\t\t\tthis._z = 0;\n\t\t\t\t\tthis._w = r;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._y = - vFrom.z;\n\t\t\t\t\tthis._z = vFrom.y;\n\t\t\t\t\tthis._w = r;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3\n\n\t\t\t\tthis._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\n\t\t\t\tthis._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\n\t\t\t\tthis._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\n\t\t\t\tthis._w = r;\n\n\t\t\t}\n\n\t\t\treturn this.normalize();\n\n\t\t},\n\n\t\tangleTo: function ( q ) {\n\n\t\t\treturn 2 * Math.acos( Math.abs( MathUtils.clamp( this.dot( q ), - 1, 1 ) ) );\n\n\t\t},\n\n\t\trotateTowards: function ( q, step ) {\n\n\t\t\tvar angle = this.angleTo( q );\n\n\t\t\tif ( angle === 0 ) { return this; }\n\n\t\t\tvar t = Math.min( 1, step / angle );\n\n\t\t\tthis.slerp( q, t );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tinverse: function () {\n\n\t\t\t// quaternion is assumed to have unit length\n\n\t\t\treturn this.conjugate();\n\n\t\t},\n\n\t\tconjugate: function () {\n\n\t\t\tthis._x *= - 1;\n\t\t\tthis._y *= - 1;\n\t\t\tthis._z *= - 1;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdot: function ( v ) {\n\n\t\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n\n\t\t},\n\n\t\tlengthSq: function () {\n\n\t\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\n\t\t},\n\n\t\tlength: function () {\n\n\t\t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\tvar l = this.length();\n\n\t\t\tif ( l === 0 ) {\n\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._y = 0;\n\t\t\t\tthis._z = 0;\n\t\t\t\tthis._w = 1;\n\n\t\t\t} else {\n\n\t\t\t\tl = 1 / l;\n\n\t\t\t\tthis._x = this._x * l;\n\t\t\t\tthis._y = this._y * l;\n\t\t\t\tthis._z = this._z * l;\n\t\t\t\tthis._w = this._w * l;\n\n\t\t\t}\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( q, p ) {\n\n\t\t\tif ( p !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );\n\t\t\t\treturn this.multiplyQuaternions( q, p );\n\n\t\t\t}\n\n\t\t\treturn this.multiplyQuaternions( this, q );\n\n\t\t},\n\n\t\tpremultiply: function ( q ) {\n\n\t\t\treturn this.multiplyQuaternions( q, this );\n\n\t\t},\n\n\t\tmultiplyQuaternions: function ( a, b ) {\n\n\t\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\n\t\t\tvar qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\n\t\t\tvar qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\n\n\t\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\t\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\t\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\t\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tslerp: function ( qb, t ) {\n\n\t\t\tif ( t === 0 ) { return this; }\n\t\t\tif ( t === 1 ) { return this.copy( qb ); }\n\n\t\t\tvar x = this._x, y = this._y, z = this._z, w = this._w;\n\n\t\t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n\t\t\tvar cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n\t\t\tif ( cosHalfTheta < 0 ) {\n\n\t\t\t\tthis._w = - qb._w;\n\t\t\t\tthis._x = - qb._x;\n\t\t\t\tthis._y = - qb._y;\n\t\t\t\tthis._z = - qb._z;\n\n\t\t\t\tcosHalfTheta = - cosHalfTheta;\n\n\t\t\t} else {\n\n\t\t\t\tthis.copy( qb );\n\n\t\t\t}\n\n\t\t\tif ( cosHalfTheta >= 1.0 ) {\n\n\t\t\t\tthis._w = w;\n\t\t\t\tthis._x = x;\n\t\t\t\tthis._y = y;\n\t\t\t\tthis._z = z;\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\n\n\t\t\tif ( sqrSinHalfTheta <= Number.EPSILON ) {\n\n\t\t\t\tvar s = 1 - t;\n\t\t\t\tthis._w = s * w + t * this._w;\n\t\t\t\tthis._x = s * x + t * this._x;\n\t\t\t\tthis._y = s * y + t * this._y;\n\t\t\t\tthis._z = s * z + t * this._z;\n\n\t\t\t\tthis.normalize();\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar sinHalfTheta = Math.sqrt( sqrSinHalfTheta );\n\t\t\tvar halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\n\t\t\tvar ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\n\t\t\t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\n\n\t\t\tthis._w = ( w * ratioA + this._w * ratioB );\n\t\t\tthis._x = ( x * ratioA + this._x * ratioB );\n\t\t\tthis._y = ( y * ratioA + this._y * ratioB );\n\t\t\tthis._z = ( z * ratioA + this._z * ratioB );\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( quaternion ) {\n\n\t\t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tthis._x = array[ offset ];\n\t\t\tthis._y = array[ offset + 1 ];\n\t\t\tthis._z = array[ offset + 2 ];\n\t\t\tthis._w = array[ offset + 3 ];\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tarray[ offset ] = this._x;\n\t\t\tarray[ offset + 1 ] = this._y;\n\t\t\tarray[ offset + 2 ] = this._z;\n\t\t\tarray[ offset + 3 ] = this._w;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\t_onChange: function ( callback ) {\n\n\t\t\tthis._onChangeCallback = callback;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t_onChangeCallback: function () {}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author kile / http://kile.stravaganza.org/\n\t * @author philogb / http://blog.thejit.org/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author egraether / http://egraether.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tvar _vector = new Vector3();\n\tvar _quaternion = new Quaternion();\n\n\tfunction Vector3( x, y, z ) {\n\n\t\tthis.x = x || 0;\n\t\tthis.y = y || 0;\n\t\tthis.z = z || 0;\n\n\t}\n\n\tObject.assign( Vector3.prototype, {\n\n\t\tisVector3: true,\n\n\t\tset: function ( x, y, z ) {\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetScalar: function ( scalar ) {\n\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\tthis.z = scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetX: function ( x ) {\n\n\t\t\tthis.x = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetY: function ( y ) {\n\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetZ: function ( z ) {\n\n\t\t\tthis.z = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetComponent: function ( index, value ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: this.x = value; break;\n\t\t\t\tcase 1: this.y = value; break;\n\t\t\t\tcase 2: this.z = value; break;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetComponent: function ( index ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: return this.x;\n\t\t\t\tcase 1: return this.y;\n\t\t\t\tcase 2: return this.z;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.x, this.y, this.z );\n\n\t\t},\n\n\t\tcopy: function ( v ) {\n\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\tthis.z = v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tadd: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\t\treturn this.addVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\tthis.z += v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScalar: function ( s ) {\n\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\tthis.z += s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\tthis.z = a.z + b.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScaledVector: function ( v, s ) {\n\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\tthis.z += v.z * s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsub: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\t\treturn this.subVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\tthis.z -= v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubScalar: function ( s ) {\n\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\tthis.z -= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\tthis.z = a.z - b.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );\n\t\t\t\treturn this.multiplyVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\t\t\tthis.z *= v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( scalar ) {\n\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\tthis.z *= scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x * b.x;\n\t\t\tthis.y = a.y * b.y;\n\t\t\tthis.z = a.z * b.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyEuler: function ( euler ) {\n\n\t\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\t\tconsole.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\n\t\t\t}\n\n\t\t\treturn this.applyQuaternion( _quaternion.setFromEuler( euler ) );\n\n\t\t},\n\n\t\tapplyAxisAngle: function ( axis, angle ) {\n\n\t\t\treturn this.applyQuaternion( _quaternion.setFromAxisAngle( axis, angle ) );\n\n\t\t},\n\n\t\tapplyMatrix3: function ( m ) {\n\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\n\t\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\n\t\t\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyNormalMatrix: function ( m ) {\n\n\t\t\treturn this.applyMatrix3( m ).normalize();\n\n\t\t},\n\n\t\tapplyMatrix4: function ( m ) {\n\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar e = m.elements;\n\n\t\t\tvar w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );\n\n\t\t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;\n\t\t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;\n\t\t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyQuaternion: function ( q ) {\n\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar qx = q.x, qy = q.y, qz = q.z, qw = q.w;\n\n\t\t\t// calculate quat * vector\n\n\t\t\tvar ix = qw * x + qy * z - qz * y;\n\t\t\tvar iy = qw * y + qz * x - qx * z;\n\t\t\tvar iz = qw * z + qx * y - qy * x;\n\t\t\tvar iw = - qx * x - qy * y - qz * z;\n\n\t\t\t// calculate result * inverse quat\n\n\t\t\tthis.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\n\t\t\tthis.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\n\t\t\tthis.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tproject: function ( camera ) {\n\n\t\t\treturn this.applyMatrix4( camera.matrixWorldInverse ).applyMatrix4( camera.projectionMatrix );\n\n\t\t},\n\n\t\tunproject: function ( camera ) {\n\n\t\t\treturn this.applyMatrix4( camera.projectionMatrixInverse ).applyMatrix4( camera.matrixWorld );\n\n\t\t},\n\n\t\ttransformDirection: function ( m ) {\n\n\t\t\t// input: THREE.Matrix4 affine matrix\n\t\t\t// vector interpreted as a direction\n\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;\n\t\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;\n\t\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\n\n\t\t\treturn this.normalize();\n\n\t\t},\n\n\t\tdivide: function ( v ) {\n\n\t\t\tthis.x /= v.x;\n\t\t\tthis.y /= v.y;\n\t\t\tthis.z /= v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdivideScalar: function ( scalar ) {\n\n\t\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t\t},\n\n\t\tmin: function ( v ) {\n\n\t\t\tthis.x = Math.min( this.x, v.x );\n\t\t\tthis.y = Math.min( this.y, v.y );\n\t\t\tthis.z = Math.min( this.z, v.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmax: function ( v ) {\n\n\t\t\tthis.x = Math.max( this.x, v.x );\n\t\t\tthis.y = Math.max( this.y, v.y );\n\t\t\tthis.z = Math.max( this.z, v.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclamp: function ( min, max ) {\n\n\t\t\t// assumes min < max, componentwise\n\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampScalar: function ( minVal, maxVal ) {\n\n\t\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\n\t\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\n\t\t\tthis.z = Math.max( minVal, Math.min( maxVal, this.z ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampLength: function ( min, max ) {\n\n\t\t\tvar length = this.length();\n\n\t\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t\t},\n\n\t\tfloor: function () {\n\n\t\t\tthis.x = Math.floor( this.x );\n\t\t\tthis.y = Math.floor( this.y );\n\t\t\tthis.z = Math.floor( this.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tceil: function () {\n\n\t\t\tthis.x = Math.ceil( this.x );\n\t\t\tthis.y = Math.ceil( this.y );\n\t\t\tthis.z = Math.ceil( this.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tround: function () {\n\n\t\t\tthis.x = Math.round( this.x );\n\t\t\tthis.y = Math.round( this.y );\n\t\t\tthis.z = Math.round( this.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\troundToZero: function () {\n\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnegate: function () {\n\n\t\t\tthis.x = - this.x;\n\t\t\tthis.y = - this.y;\n\t\t\tthis.z = - this.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdot: function ( v ) {\n\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\n\n\t\t},\n\n\t\t// TODO lengthSquared?\n\n\t\tlengthSq: function () {\n\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\n\n\t\t},\n\n\t\tlength: function () {\n\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\n\n\t\t},\n\n\t\tmanhattanLength: function () {\n\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\treturn this.divideScalar( this.length() || 1 );\n\n\t\t},\n\n\t\tsetLength: function ( length ) {\n\n\t\t\treturn this.normalize().multiplyScalar( length );\n\n\t\t},\n\n\t\tlerp: function ( v, alpha ) {\n\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\t\tthis.z += ( v.z - this.z ) * alpha;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n\t\t},\n\n\t\tcross: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );\n\t\t\t\treturn this.crossVectors( v, w );\n\n\t\t\t}\n\n\t\t\treturn this.crossVectors( this, v );\n\n\t\t},\n\n\t\tcrossVectors: function ( a, b ) {\n\n\t\t\tvar ax = a.x, ay = a.y, az = a.z;\n\t\t\tvar bx = b.x, by = b.y, bz = b.z;\n\n\t\t\tthis.x = ay * bz - az * by;\n\t\t\tthis.y = az * bx - ax * bz;\n\t\t\tthis.z = ax * by - ay * bx;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tprojectOnVector: function ( v ) {\n\n\t\t\tvar denominator = v.lengthSq();\n\n\t\t\tif ( denominator === 0 ) { return this.set( 0, 0, 0 ); }\n\n\t\t\tvar scalar = v.dot( this ) / denominator;\n\n\t\t\treturn this.copy( v ).multiplyScalar( scalar );\n\n\t\t},\n\n\t\tprojectOnPlane: function ( planeNormal ) {\n\n\t\t\t_vector.copy( this ).projectOnVector( planeNormal );\n\n\t\t\treturn this.sub( _vector );\n\n\t\t},\n\n\t\treflect: function ( normal ) {\n\n\t\t\t// reflect incident vector off plane orthogonal to normal\n\t\t\t// normal is assumed to have unit length\n\n\t\t\treturn this.sub( _vector.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\n\n\t\t},\n\n\t\tangleTo: function ( v ) {\n\n\t\t\tvar denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );\n\n\t\t\tif ( denominator === 0 ) { return Math.PI / 2; }\n\n\t\t\tvar theta = this.dot( v ) / denominator;\n\n\t\t\t// clamp, to handle numerical problems\n\n\t\t\treturn Math.acos( MathUtils.clamp( theta, - 1, 1 ) );\n\n\t\t},\n\n\t\tdistanceTo: function ( v ) {\n\n\t\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t\t},\n\n\t\tdistanceToSquared: function ( v ) {\n\n\t\t\tvar dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\n\n\t\t\treturn dx * dx + dy * dy + dz * dz;\n\n\t\t},\n\n\t\tmanhattanDistanceTo: function ( v ) {\n\n\t\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );\n\n\t\t},\n\n\t\tsetFromSpherical: function ( s ) {\n\n\t\t\treturn this.setFromSphericalCoords( s.radius, s.phi, s.theta );\n\n\t\t},\n\n\t\tsetFromSphericalCoords: function ( radius, phi, theta ) {\n\n\t\t\tvar sinPhiRadius = Math.sin( phi ) * radius;\n\n\t\t\tthis.x = sinPhiRadius * Math.sin( theta );\n\t\t\tthis.y = Math.cos( phi ) * radius;\n\t\t\tthis.z = sinPhiRadius * Math.cos( theta );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromCylindrical: function ( c ) {\n\n\t\t\treturn this.setFromCylindricalCoords( c.radius, c.theta, c.y );\n\n\t\t},\n\n\t\tsetFromCylindricalCoords: function ( radius, theta, y ) {\n\n\t\t\tthis.x = radius * Math.sin( theta );\n\t\t\tthis.y = y;\n\t\t\tthis.z = radius * Math.cos( theta );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrixPosition: function ( m ) {\n\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 12 ];\n\t\t\tthis.y = e[ 13 ];\n\t\t\tthis.z = e[ 14 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrixScale: function ( m ) {\n\n\t\t\tvar sx = this.setFromMatrixColumn( m, 0 ).length();\n\t\t\tvar sy = this.setFromMatrixColumn( m, 1 ).length();\n\t\t\tvar sz = this.setFromMatrixColumn( m, 2 ).length();\n\n\t\t\tthis.x = sx;\n\t\t\tthis.y = sy;\n\t\t\tthis.z = sz;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrixColumn: function ( m, index ) {\n\n\t\t\treturn this.fromArray( m.elements, index * 4 );\n\n\t\t},\n\n\t\tsetFromMatrix3Column: function ( m, index ) {\n\n\t\t\treturn this.fromArray( m.elements, index * 3 );\n\n\t\t},\n\n\t\tequals: function ( v ) {\n\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tthis.x = array[ offset ];\n\t\t\tthis.y = array[ offset + 1 ];\n\t\t\tthis.z = array[ offset + 2 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tarray[ offset ] = this.x;\n\t\t\tarray[ offset + 1 ] = this.y;\n\t\t\tarray[ offset + 2 ] = this.z;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\tfromBufferAttribute: function ( attribute, index, offset ) {\n\n\t\t\tif ( offset !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: offset has been removed from .fromBufferAttribute().' );\n\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX( index );\n\t\t\tthis.y = attribute.getY( index );\n\t\t\tthis.z = attribute.getZ( index );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\tvar _v1 = new Vector3();\n\tvar _m1 = new Matrix4();\n\tvar _zero = new Vector3( 0, 0, 0 );\n\tvar _one = new Vector3( 1, 1, 1 );\n\tvar _x = new Vector3();\n\tvar _y = new Vector3();\n\tvar _z = new Vector3();\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\n\t * @author philogb / http://blog.thejit.org/\n\t * @author jordi_ros / http://plattsoft.com\n\t * @author D1plo1d / http://github.com/D1plo1d\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author timknip / http://www.floorplanner.com/\n\t * @author bhouston / http://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction Matrix4() {\n\n\t\tthis.elements = [\n\n\t\t\t1, 0, 0, 0,\n\t\t\t0, 1, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t];\n\n\t\tif ( arguments.length > 0 ) {\n\n\t\t\tconsole.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );\n\n\t\t}\n\n\t}\n\n\tObject.assign( Matrix4.prototype, {\n\n\t\tisMatrix4: true,\n\n\t\tset: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\n\t\t\tte[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\n\t\t\tte[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\n\t\t\tte[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tidentity: function () {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0, 0,\n\t\t\t\t0, 1, 0, 0,\n\t\t\t\t0, 0, 1, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new Matrix4().fromArray( this.elements );\n\n\t\t},\n\n\t\tcopy: function ( m ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = m.elements;\n\n\t\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];\n\t\t\tte[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];\n\t\t\tte[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];\n\t\t\tte[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyPosition: function ( m ) {\n\n\t\t\tvar te = this.elements, me = m.elements;\n\n\t\t\tte[ 12 ] = me[ 12 ];\n\t\t\tte[ 13 ] = me[ 13 ];\n\t\t\tte[ 14 ] = me[ 14 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\textractBasis: function ( xAxis, yAxis, zAxis ) {\n\n\t\t\txAxis.setFromMatrixColumn( this, 0 );\n\t\t\tyAxis.setFromMatrixColumn( this, 1 );\n\t\t\tzAxis.setFromMatrixColumn( this, 2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeBasis: function ( xAxis, yAxis, zAxis ) {\n\n\t\t\tthis.set(\n\t\t\t\txAxis.x, yAxis.x, zAxis.x, 0,\n\t\t\t\txAxis.y, yAxis.y, zAxis.y, 0,\n\t\t\t\txAxis.z, yAxis.z, zAxis.z, 0,\n\t\t\t\t0, 0, 0, 1\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\textractRotation: function ( m ) {\n\n\t\t\t// this method does not support reflection matrices\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = m.elements;\n\n\t\t\tvar scaleX = 1 / _v1.setFromMatrixColumn( m, 0 ).length();\n\t\t\tvar scaleY = 1 / _v1.setFromMatrixColumn( m, 1 ).length();\n\t\t\tvar scaleZ = 1 / _v1.setFromMatrixColumn( m, 2 ).length();\n\n\t\t\tte[ 0 ] = me[ 0 ] * scaleX;\n\t\t\tte[ 1 ] = me[ 1 ] * scaleX;\n\t\t\tte[ 2 ] = me[ 2 ] * scaleX;\n\t\t\tte[ 3 ] = 0;\n\n\t\t\tte[ 4 ] = me[ 4 ] * scaleY;\n\t\t\tte[ 5 ] = me[ 5 ] * scaleY;\n\t\t\tte[ 6 ] = me[ 6 ] * scaleY;\n\t\t\tte[ 7 ] = 0;\n\n\t\t\tte[ 8 ] = me[ 8 ] * scaleZ;\n\t\t\tte[ 9 ] = me[ 9 ] * scaleZ;\n\t\t\tte[ 10 ] = me[ 10 ] * scaleZ;\n\t\t\tte[ 11 ] = 0;\n\n\t\t\tte[ 12 ] = 0;\n\t\t\tte[ 13 ] = 0;\n\t\t\tte[ 14 ] = 0;\n\t\t\tte[ 15 ] = 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationFromEuler: function ( euler ) {\n\n\t\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\t\tconsole.error( 'THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\n\n\t\t\t}\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar x = euler.x, y = euler.y, z = euler.z;\n\t\t\tvar a = Math.cos( x ), b = Math.sin( x );\n\t\t\tvar c = Math.cos( y ), d = Math.sin( y );\n\t\t\tvar e = Math.cos( z ), f = Math.sin( z );\n\n\t\t\tif ( euler.order === 'XYZ' ) {\n\n\t\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\tte[ 4 ] = - c * f;\n\t\t\t\tte[ 8 ] = d;\n\n\t\t\t\tte[ 1 ] = af + be * d;\n\t\t\t\tte[ 5 ] = ae - bf * d;\n\t\t\t\tte[ 9 ] = - b * c;\n\n\t\t\t\tte[ 2 ] = bf - ae * d;\n\t\t\t\tte[ 6 ] = be + af * d;\n\t\t\t\tte[ 10 ] = a * c;\n\n\t\t\t} else if ( euler.order === 'YXZ' ) {\n\n\t\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\t\tte[ 0 ] = ce + df * b;\n\t\t\t\tte[ 4 ] = de * b - cf;\n\t\t\t\tte[ 8 ] = a * d;\n\n\t\t\t\tte[ 1 ] = a * f;\n\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\tte[ 9 ] = - b;\n\n\t\t\t\tte[ 2 ] = cf * b - de;\n\t\t\t\tte[ 6 ] = df + ce * b;\n\t\t\t\tte[ 10 ] = a * c;\n\n\t\t\t} else if ( euler.order === 'ZXY' ) {\n\n\t\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\t\tte[ 0 ] = ce - df * b;\n\t\t\t\tte[ 4 ] = - a * f;\n\t\t\t\tte[ 8 ] = de + cf * b;\n\n\t\t\t\tte[ 1 ] = cf + de * b;\n\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\tte[ 9 ] = df - ce * b;\n\n\t\t\t\tte[ 2 ] = - a * d;\n\t\t\t\tte[ 6 ] = b;\n\t\t\t\tte[ 10 ] = a * c;\n\n\t\t\t} else if ( euler.order === 'ZYX' ) {\n\n\t\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\tte[ 4 ] = be * d - af;\n\t\t\t\tte[ 8 ] = ae * d + bf;\n\n\t\t\t\tte[ 1 ] = c * f;\n\t\t\t\tte[ 5 ] = bf * d + ae;\n\t\t\t\tte[ 9 ] = af * d - be;\n\n\t\t\t\tte[ 2 ] = - d;\n\t\t\t\tte[ 6 ] = b * c;\n\t\t\t\tte[ 10 ] = a * c;\n\n\t\t\t} else if ( euler.order === 'YZX' ) {\n\n\t\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\tte[ 4 ] = bd - ac * f;\n\t\t\t\tte[ 8 ] = bc * f + ad;\n\n\t\t\t\tte[ 1 ] = f;\n\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\tte[ 9 ] = - b * e;\n\n\t\t\t\tte[ 2 ] = - d * e;\n\t\t\t\tte[ 6 ] = ad * f + bc;\n\t\t\t\tte[ 10 ] = ac - bd * f;\n\n\t\t\t} else if ( euler.order === 'XZY' ) {\n\n\t\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\tte[ 4 ] = - f;\n\t\t\t\tte[ 8 ] = d * e;\n\n\t\t\t\tte[ 1 ] = ac * f + bd;\n\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\tte[ 9 ] = ad * f - bc;\n\n\t\t\t\tte[ 2 ] = bc * f - ad;\n\t\t\t\tte[ 6 ] = b * e;\n\t\t\t\tte[ 10 ] = bd * f + ac;\n\n\t\t\t}\n\n\t\t\t// bottom row\n\t\t\tte[ 3 ] = 0;\n\t\t\tte[ 7 ] = 0;\n\t\t\tte[ 11 ] = 0;\n\n\t\t\t// last column\n\t\t\tte[ 12 ] = 0;\n\t\t\tte[ 13 ] = 0;\n\t\t\tte[ 14 ] = 0;\n\t\t\tte[ 15 ] = 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationFromQuaternion: function ( q ) {\n\n\t\t\treturn this.compose( _zero, q, _one );\n\n\t\t},\n\n\t\tlookAt: function ( eye, target, up ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\t_z.subVectors( eye, target );\n\n\t\t\tif ( _z.lengthSq() === 0 ) {\n\n\t\t\t\t// eye and target are in the same position\n\n\t\t\t\t_z.z = 1;\n\n\t\t\t}\n\n\t\t\t_z.normalize();\n\t\t\t_x.crossVectors( up, _z );\n\n\t\t\tif ( _x.lengthSq() === 0 ) {\n\n\t\t\t\t// up and z are parallel\n\n\t\t\t\tif ( Math.abs( up.z ) === 1 ) {\n\n\t\t\t\t\t_z.x += 0.0001;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_z.z += 0.0001;\n\n\t\t\t\t}\n\n\t\t\t\t_z.normalize();\n\t\t\t\t_x.crossVectors( up, _z );\n\n\t\t\t}\n\n\t\t\t_x.normalize();\n\t\t\t_y.crossVectors( _z, _x );\n\n\t\t\tte[ 0 ] = _x.x; te[ 4 ] = _y.x; te[ 8 ] = _z.x;\n\t\t\tte[ 1 ] = _x.y; te[ 5 ] = _y.y; te[ 9 ] = _z.y;\n\t\t\tte[ 2 ] = _x.z; te[ 6 ] = _y.z; te[ 10 ] = _z.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( m, n ) {\n\n\t\t\tif ( n !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );\n\t\t\t\treturn this.multiplyMatrices( m, n );\n\n\t\t\t}\n\n\t\t\treturn this.multiplyMatrices( this, m );\n\n\t\t},\n\n\t\tpremultiply: function ( m ) {\n\n\t\t\treturn this.multiplyMatrices( m, this );\n\n\t\t},\n\n\t\tmultiplyMatrices: function ( a, b ) {\n\n\t\t\tvar ae = a.elements;\n\t\t\tvar be = b.elements;\n\t\t\tvar te = this.elements;\n\n\t\t\tvar a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\n\t\t\tvar a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\n\t\t\tvar a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\n\t\t\tvar a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\n\n\t\t\tvar b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\n\t\t\tvar b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\n\t\t\tvar b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\n\t\t\tvar b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\n\n\t\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n\t\t\tte[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n\t\t\tte[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n\t\t\tte[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\n\t\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n\t\t\tte[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n\t\t\tte[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n\t\t\tte[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\n\t\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n\t\t\tte[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n\t\t\tte[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n\t\t\tte[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\n\t\t\tte[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n\t\t\tte[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n\t\t\tte[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n\t\t\tte[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( s ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;\n\t\t\tte[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;\n\t\t\tte[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;\n\t\t\tte[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdeterminant: function () {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];\n\t\t\tvar n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];\n\t\t\tvar n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];\n\t\t\tvar n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];\n\n\t\t\t//TODO: make this more efficient\n\t\t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n\n\t\t\treturn (\n\t\t\t\tn41 * (\n\t\t\t\t\t+ n14 * n23 * n32\n\t\t\t\t\t - n13 * n24 * n32\n\t\t\t\t\t - n14 * n22 * n33\n\t\t\t\t\t + n12 * n24 * n33\n\t\t\t\t\t + n13 * n22 * n34\n\t\t\t\t\t - n12 * n23 * n34\n\t\t\t\t) +\n\t\t\t\tn42 * (\n\t\t\t\t\t+ n11 * n23 * n34\n\t\t\t\t\t - n11 * n24 * n33\n\t\t\t\t\t + n14 * n21 * n33\n\t\t\t\t\t - n13 * n21 * n34\n\t\t\t\t\t + n13 * n24 * n31\n\t\t\t\t\t - n14 * n23 * n31\n\t\t\t\t) +\n\t\t\t\tn43 * (\n\t\t\t\t\t+ n11 * n24 * n32\n\t\t\t\t\t - n11 * n22 * n34\n\t\t\t\t\t - n14 * n21 * n32\n\t\t\t\t\t + n12 * n21 * n34\n\t\t\t\t\t + n14 * n22 * n31\n\t\t\t\t\t - n12 * n24 * n31\n\t\t\t\t) +\n\t\t\t\tn44 * (\n\t\t\t\t\t- n13 * n22 * n31\n\t\t\t\t\t - n11 * n23 * n32\n\t\t\t\t\t + n11 * n22 * n33\n\t\t\t\t\t + n13 * n21 * n32\n\t\t\t\t\t - n12 * n21 * n33\n\t\t\t\t\t + n12 * n23 * n31\n\t\t\t\t)\n\n\t\t\t);\n\n\t\t},\n\n\t\ttranspose: function () {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar tmp;\n\n\t\t\ttmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;\n\t\t\ttmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;\n\t\t\ttmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;\n\n\t\t\ttmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;\n\t\t\ttmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;\n\t\t\ttmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetPosition: function ( x, y, z ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tif ( x.isVector3 ) {\n\n\t\t\t\tte[ 12 ] = x.x;\n\t\t\t\tte[ 13 ] = x.y;\n\t\t\t\tte[ 14 ] = x.z;\n\n\t\t\t} else {\n\n\t\t\t\tte[ 12 ] = x;\n\t\t\t\tte[ 13 ] = y;\n\t\t\t\tte[ 14 ] = z;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetInverse: function ( m, throwOnDegenerate ) {\n\n\t\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n\t\t\tvar te = this.elements,\n\t\t\t\tme = m.elements,\n\n\t\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],\n\t\t\t\tn12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],\n\t\t\t\tn13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],\n\t\t\t\tn14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],\n\n\t\t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n\t\t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n\t\t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n\t\t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n\n\t\t\tvar det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n\n\t\t\tif ( det === 0 ) {\n\n\t\t\t\tvar msg = \"THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0\";\n\n\t\t\t\tif ( throwOnDegenerate === true ) {\n\n\t\t\t\t\tthrow new Error( msg );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( msg );\n\n\t\t\t\t}\n\n\t\t\t\treturn this.identity();\n\n\t\t\t}\n\n\t\t\tvar detInv = 1 / det;\n\n\t\t\tte[ 0 ] = t11 * detInv;\n\t\t\tte[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;\n\t\t\tte[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;\n\t\t\tte[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;\n\n\t\t\tte[ 4 ] = t12 * detInv;\n\t\t\tte[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;\n\t\t\tte[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;\n\t\t\tte[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;\n\n\t\t\tte[ 8 ] = t13 * detInv;\n\t\t\tte[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;\n\t\t\tte[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;\n\t\t\tte[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;\n\n\t\t\tte[ 12 ] = t14 * detInv;\n\t\t\tte[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;\n\t\t\tte[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;\n\t\t\tte[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tscale: function ( v ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar x = v.x, y = v.y, z = v.z;\n\n\t\t\tte[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;\n\t\t\tte[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;\n\t\t\tte[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;\n\t\t\tte[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetMaxScaleOnAxis: function () {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];\n\t\t\tvar scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];\n\t\t\tvar scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];\n\n\t\t\treturn Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );\n\n\t\t},\n\n\t\tmakeTranslation: function ( x, y, z ) {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0, x,\n\t\t\t\t0, 1, 0, y,\n\t\t\t\t0, 0, 1, z,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationX: function ( theta ) {\n\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0, 0,\n\t\t\t\t0, c, - s, 0,\n\t\t\t\t0, s, c, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationY: function ( theta ) {\n\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\t\tthis.set(\n\n\t\t\t\t c, 0, s, 0,\n\t\t\t\t 0, 1, 0, 0,\n\t\t\t\t- s, 0, c, 0,\n\t\t\t\t 0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationZ: function ( theta ) {\n\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\t\tthis.set(\n\n\t\t\t\tc, - s, 0, 0,\n\t\t\t\ts, c, 0, 0,\n\t\t\t\t0, 0, 1, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationAxis: function ( axis, angle ) {\n\n\t\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\n\t\t\tvar c = Math.cos( angle );\n\t\t\tvar s = Math.sin( angle );\n\t\t\tvar t = 1 - c;\n\t\t\tvar x = axis.x, y = axis.y, z = axis.z;\n\t\t\tvar tx = t * x, ty = t * y;\n\n\t\t\tthis.set(\n\n\t\t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\n\t\t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\n\t\t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\t return this;\n\n\t\t},\n\n\t\tmakeScale: function ( x, y, z ) {\n\n\t\t\tthis.set(\n\n\t\t\t\tx, 0, 0, 0,\n\t\t\t\t0, y, 0, 0,\n\t\t\t\t0, 0, z, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeShear: function ( x, y, z ) {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, y, z, 0,\n\t\t\t\tx, 1, z, 0,\n\t\t\t\tx, y, 1, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcompose: function ( position, quaternion, scale ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;\n\t\t\tvar x2 = x + x,\ty2 = y + y, z2 = z + z;\n\t\t\tvar xx = x * x2, xy = x * y2, xz = x * z2;\n\t\t\tvar yy = y * y2, yz = y * z2, zz = z * z2;\n\t\t\tvar wx = w * x2, wy = w * y2, wz = w * z2;\n\n\t\t\tvar sx = scale.x, sy = scale.y, sz = scale.z;\n\n\t\t\tte[ 0 ] = ( 1 - ( yy + zz ) ) * sx;\n\t\t\tte[ 1 ] = ( xy + wz ) * sx;\n\t\t\tte[ 2 ] = ( xz - wy ) * sx;\n\t\t\tte[ 3 ] = 0;\n\n\t\t\tte[ 4 ] = ( xy - wz ) * sy;\n\t\t\tte[ 5 ] = ( 1 - ( xx + zz ) ) * sy;\n\t\t\tte[ 6 ] = ( yz + wx ) * sy;\n\t\t\tte[ 7 ] = 0;\n\n\t\t\tte[ 8 ] = ( xz + wy ) * sz;\n\t\t\tte[ 9 ] = ( yz - wx ) * sz;\n\t\t\tte[ 10 ] = ( 1 - ( xx + yy ) ) * sz;\n\t\t\tte[ 11 ] = 0;\n\n\t\t\tte[ 12 ] = position.x;\n\t\t\tte[ 13 ] = position.y;\n\t\t\tte[ 14 ] = position.z;\n\t\t\tte[ 15 ] = 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdecompose: function ( position, quaternion, scale ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar sx = _v1.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();\n\t\t\tvar sy = _v1.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();\n\t\t\tvar sz = _v1.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();\n\n\t\t\t// if determine is negative, we need to invert one scale\n\t\t\tvar det = this.determinant();\n\t\t\tif ( det < 0 ) { sx = - sx; }\n\n\t\t\tposition.x = te[ 12 ];\n\t\t\tposition.y = te[ 13 ];\n\t\t\tposition.z = te[ 14 ];\n\n\t\t\t// scale the rotation part\n\t\t\t_m1.copy( this );\n\n\t\t\tvar invSX = 1 / sx;\n\t\t\tvar invSY = 1 / sy;\n\t\t\tvar invSZ = 1 / sz;\n\n\t\t\t_m1.elements[ 0 ] *= invSX;\n\t\t\t_m1.elements[ 1 ] *= invSX;\n\t\t\t_m1.elements[ 2 ] *= invSX;\n\n\t\t\t_m1.elements[ 4 ] *= invSY;\n\t\t\t_m1.elements[ 5 ] *= invSY;\n\t\t\t_m1.elements[ 6 ] *= invSY;\n\n\t\t\t_m1.elements[ 8 ] *= invSZ;\n\t\t\t_m1.elements[ 9 ] *= invSZ;\n\t\t\t_m1.elements[ 10 ] *= invSZ;\n\n\t\t\tquaternion.setFromRotationMatrix( _m1 );\n\n\t\t\tscale.x = sx;\n\t\t\tscale.y = sy;\n\t\t\tscale.z = sz;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakePerspective: function ( left, right, top, bottom, near, far ) {\n\n\t\t\tif ( far === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.' );\n\n\t\t\t}\n\n\t\t\tvar te = this.elements;\n\t\t\tvar x = 2 * near / ( right - left );\n\t\t\tvar y = 2 * near / ( top - bottom );\n\n\t\t\tvar a = ( right + left ) / ( right - left );\n\t\t\tvar b = ( top + bottom ) / ( top - bottom );\n\t\t\tvar c = - ( far + near ) / ( far - near );\n\t\t\tvar d = - 2 * far * near / ( far - near );\n\n\t\t\tte[ 0 ] = x;\tte[ 4 ] = 0;\tte[ 8 ] = a;\tte[ 12 ] = 0;\n\t\t\tte[ 1 ] = 0;\tte[ 5 ] = y;\tte[ 9 ] = b;\tte[ 13 ] = 0;\n\t\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = c;\tte[ 14 ] = d;\n\t\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = - 1;\tte[ 15 ] = 0;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeOrthographic: function ( left, right, top, bottom, near, far ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar w = 1.0 / ( right - left );\n\t\t\tvar h = 1.0 / ( top - bottom );\n\t\t\tvar p = 1.0 / ( far - near );\n\n\t\t\tvar x = ( right + left ) * w;\n\t\t\tvar y = ( top + bottom ) * h;\n\t\t\tvar z = ( far + near ) * p;\n\n\t\t\tte[ 0 ] = 2 * w;\tte[ 4 ] = 0;\tte[ 8 ] = 0;\tte[ 12 ] = - x;\n\t\t\tte[ 1 ] = 0;\tte[ 5 ] = 2 * h;\tte[ 9 ] = 0;\tte[ 13 ] = - y;\n\t\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = - 2 * p;\tte[ 14 ] = - z;\n\t\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = 0;\tte[ 15 ] = 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( matrix ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = matrix.elements;\n\n\t\t\tfor ( var i = 0; i < 16; i ++ ) {\n\n\t\t\t\tif ( te[ i ] !== me[ i ] ) { return false; }\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tfor ( var i = 0; i < 16; i ++ ) {\n\n\t\t\t\tthis.elements[ i ] = array[ i + offset ];\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tvar te = this.elements;\n\n\t\t\tarray[ offset ] = te[ 0 ];\n\t\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\t\tarray[ offset + 2 ] = te[ 2 ];\n\t\t\tarray[ offset + 3 ] = te[ 3 ];\n\n\t\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\t\tarray[ offset + 5 ] = te[ 5 ];\n\t\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\t\tarray[ offset + 7 ] = te[ 7 ];\n\n\t\t\tarray[ offset + 8 ] = te[ 8 ];\n\t\t\tarray[ offset + 9 ] = te[ 9 ];\n\t\t\tarray[ offset + 10 ] = te[ 10 ];\n\t\t\tarray[ offset + 11 ] = te[ 11 ];\n\n\t\t\tarray[ offset + 12 ] = te[ 12 ];\n\t\t\tarray[ offset + 13 ] = te[ 13 ];\n\t\t\tarray[ offset + 14 ] = te[ 14 ];\n\t\t\tarray[ offset + 15 ] = te[ 15 ];\n\n\t\t\treturn array;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author bhouston / http://clara.io\n\t */\n\n\tvar _matrix = new Matrix4();\n\tvar _quaternion$1 = new Quaternion();\n\n\tfunction Euler( x, y, z, order ) {\n\n\t\tthis._x = x || 0;\n\t\tthis._y = y || 0;\n\t\tthis._z = z || 0;\n\t\tthis._order = order || Euler.DefaultOrder;\n\n\t}\n\n\tEuler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];\n\n\tEuler.DefaultOrder = 'XYZ';\n\n\tObject.defineProperties( Euler.prototype, {\n\n\t\tx: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._x;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._x = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\ty: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._y;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._y = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\tz: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._z;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._z = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\torder: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._order;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._order = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Euler.prototype, {\n\n\t\tisEuler: true,\n\n\t\tset: function ( x, y, z, order ) {\n\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._order = order || this._order;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this._x, this._y, this._z, this._order );\n\n\t\t},\n\n\t\tcopy: function ( euler ) {\n\n\t\t\tthis._x = euler._x;\n\t\t\tthis._y = euler._y;\n\t\t\tthis._z = euler._z;\n\t\t\tthis._order = euler._order;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromRotationMatrix: function ( m, order, update ) {\n\n\t\t\tvar clamp = MathUtils.clamp;\n\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tvar te = m.elements;\n\t\t\tvar m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\n\t\t\tvar m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\n\t\t\tvar m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\t\torder = order || this._order;\n\n\t\t\tif ( order === 'XYZ' ) {\n\n\t\t\t\tthis._y = Math.asin( clamp( m13, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m13 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\t\tthis._z = Math.atan2( - m12, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\t\tthis._z = 0;\n\n\t\t\t\t}\n\n\t\t\t} else if ( order === 'YXZ' ) {\n\n\t\t\t\tthis._x = Math.asin( - clamp( m23, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m23 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\t\t\t\t\tthis._z = Math.atan2( m21, m22 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\t\t\t\t\tthis._z = 0;\n\n\t\t\t\t}\n\n\t\t\t} else if ( order === 'ZXY' ) {\n\n\t\t\t\tthis._x = Math.asin( clamp( m32, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m32 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._y = Math.atan2( - m31, m33 );\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._y = 0;\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t\t}\n\n\t\t\t} else if ( order === 'ZYX' ) {\n\n\t\t\t\tthis._y = Math.asin( - clamp( m31, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m31 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m33 );\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t\t}\n\n\t\t\t} else if ( order === 'YZX' ) {\n\n\t\t\t\tthis._z = Math.asin( clamp( m21, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m21 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m22 );\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\n\t\t\t\t}\n\n\t\t\t} else if ( order === 'XZY' ) {\n\n\t\t\t\tthis._z = Math.asin( - clamp( m12, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m12 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\t\tthis._y = Math.atan2( m13, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\t\tthis._y = 0;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order );\n\n\t\t\t}\n\n\t\t\tthis._order = order;\n\n\t\t\tif ( update !== false ) { this._onChangeCallback(); }\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromQuaternion: function ( q, order, update ) {\n\n\t\t\t_matrix.makeRotationFromQuaternion( q );\n\n\t\t\treturn this.setFromRotationMatrix( _matrix, order, update );\n\n\t\t},\n\n\t\tsetFromVector3: function ( v, order ) {\n\n\t\t\treturn this.set( v.x, v.y, v.z, order || this._order );\n\n\t\t},\n\n\t\treorder: function ( newOrder ) {\n\n\t\t\t// WARNING: this discards revolution information -bhouston\n\n\t\t\t_quaternion$1.setFromEuler( this );\n\n\t\t\treturn this.setFromQuaternion( _quaternion$1, newOrder );\n\n\t\t},\n\n\t\tequals: function ( euler ) {\n\n\t\t\treturn ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\n\n\t\t},\n\n\t\tfromArray: function ( array ) {\n\n\t\t\tthis._x = array[ 0 ];\n\t\t\tthis._y = array[ 1 ];\n\t\t\tthis._z = array[ 2 ];\n\t\t\tif ( array[ 3 ] !== undefined ) { this._order = array[ 3 ]; }\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tarray[ offset ] = this._x;\n\t\t\tarray[ offset + 1 ] = this._y;\n\t\t\tarray[ offset + 2 ] = this._z;\n\t\t\tarray[ offset + 3 ] = this._order;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\ttoVector3: function ( optionalResult ) {\n\n\t\t\tif ( optionalResult ) {\n\n\t\t\t\treturn optionalResult.set( this._x, this._y, this._z );\n\n\t\t\t} else {\n\n\t\t\t\treturn new Vector3( this._x, this._y, this._z );\n\n\t\t\t}\n\n\t\t},\n\n\t\t_onChange: function ( callback ) {\n\n\t\t\tthis._onChangeCallback = callback;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t_onChangeCallback: function () {}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Layers() {\n\n\t\tthis.mask = 1 | 0;\n\n\t}\n\n\tObject.assign( Layers.prototype, {\n\n\t\tset: function ( channel ) {\n\n\t\t\tthis.mask = 1 << channel | 0;\n\n\t\t},\n\n\t\tenable: function ( channel ) {\n\n\t\t\tthis.mask |= 1 << channel | 0;\n\n\t\t},\n\n\t\tenableAll: function () {\n\n\t\t\tthis.mask = 0xffffffff | 0;\n\n\t\t},\n\n\t\ttoggle: function ( channel ) {\n\n\t\t\tthis.mask ^= 1 << channel | 0;\n\n\t\t},\n\n\t\tdisable: function ( channel ) {\n\n\t\t\tthis.mask &= ~ ( 1 << channel | 0 );\n\n\t\t},\n\n\t\tdisableAll: function () {\n\n\t\t\tthis.mask = 0;\n\n\t\t},\n\n\t\ttest: function ( layers ) {\n\n\t\t\treturn ( this.mask & layers.mask ) !== 0;\n\n\t\t}\n\n\t} );\n\n\tvar _object3DId = 0;\n\n\tvar _v1$1 = new Vector3();\n\tvar _q1 = new Quaternion();\n\tvar _m1$1 = new Matrix4();\n\tvar _target = new Vector3();\n\n\tvar _position = new Vector3();\n\tvar _scale = new Vector3();\n\tvar _quaternion$2 = new Quaternion();\n\n\tvar _xAxis = new Vector3( 1, 0, 0 );\n\tvar _yAxis = new Vector3( 0, 1, 0 );\n\tvar _zAxis = new Vector3( 0, 0, 1 );\n\n\tvar _addedEvent = { type: 'added' };\n\tvar _removedEvent = { type: 'removed' };\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author elephantatwork / www.elephantatwork.ch\n\t */\n\n\tfunction Object3D() {\n\n\t\tObject.defineProperty( this, 'id', { value: _object3DId ++ } );\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Object3D';\n\n\t\tthis.parent = null;\n\t\tthis.children = [];\n\n\t\tthis.up = Object3D.DefaultUp.clone();\n\n\t\tvar position = new Vector3();\n\t\tvar rotation = new Euler();\n\t\tvar quaternion = new Quaternion();\n\t\tvar scale = new Vector3( 1, 1, 1 );\n\n\t\tfunction onRotationChange() {\n\n\t\t\tquaternion.setFromEuler( rotation, false );\n\n\t\t}\n\n\t\tfunction onQuaternionChange() {\n\n\t\t\trotation.setFromQuaternion( quaternion, undefined, false );\n\n\t\t}\n\n\t\trotation._onChange( onRotationChange );\n\t\tquaternion._onChange( onQuaternionChange );\n\n\t\tObject.defineProperties( this, {\n\t\t\tposition: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: position\n\t\t\t},\n\t\t\trotation: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: rotation\n\t\t\t},\n\t\t\tquaternion: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: quaternion\n\t\t\t},\n\t\t\tscale: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: scale\n\t\t\t},\n\t\t\tmodelViewMatrix: {\n\t\t\t\tvalue: new Matrix4()\n\t\t\t},\n\t\t\tnormalMatrix: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t}\n\t\t} );\n\n\t\tthis.matrix = new Matrix4();\n\t\tthis.matrixWorld = new Matrix4();\n\n\t\tthis.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;\n\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\tthis.layers = new Layers();\n\t\tthis.visible = true;\n\n\t\tthis.castShadow = false;\n\t\tthis.receiveShadow = false;\n\n\t\tthis.frustumCulled = true;\n\t\tthis.renderOrder = 0;\n\n\t\tthis.userData = {};\n\n\t}\n\n\tObject3D.DefaultUp = new Vector3( 0, 1, 0 );\n\tObject3D.DefaultMatrixAutoUpdate = true;\n\n\tObject3D.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: Object3D,\n\n\t\tisObject3D: true,\n\n\t\tonBeforeRender: function () {},\n\t\tonAfterRender: function () {},\n\n\t\tapplyMatrix4: function ( matrix ) {\n\n\t\t\tif ( this.matrixAutoUpdate ) { this.updateMatrix(); }\n\n\t\t\tthis.matrix.premultiply( matrix );\n\n\t\t\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\n\n\t\t},\n\n\t\tapplyQuaternion: function ( q ) {\n\n\t\t\tthis.quaternion.premultiply( q );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetRotationFromAxisAngle: function ( axis, angle ) {\n\n\t\t\t// assumes axis is normalized\n\n\t\t\tthis.quaternion.setFromAxisAngle( axis, angle );\n\n\t\t},\n\n\t\tsetRotationFromEuler: function ( euler ) {\n\n\t\t\tthis.quaternion.setFromEuler( euler, true );\n\n\t\t},\n\n\t\tsetRotationFromMatrix: function ( m ) {\n\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tthis.quaternion.setFromRotationMatrix( m );\n\n\t\t},\n\n\t\tsetRotationFromQuaternion: function ( q ) {\n\n\t\t\t// assumes q is normalized\n\n\t\t\tthis.quaternion.copy( q );\n\n\t\t},\n\n\t\trotateOnAxis: function ( axis, angle ) {\n\n\t\t\t// rotate object on axis in object space\n\t\t\t// axis is assumed to be normalized\n\n\t\t\t_q1.setFromAxisAngle( axis, angle );\n\n\t\t\tthis.quaternion.multiply( _q1 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateOnWorldAxis: function ( axis, angle ) {\n\n\t\t\t// rotate object on axis in world space\n\t\t\t// axis is assumed to be normalized\n\t\t\t// method assumes no rotated parent\n\n\t\t\t_q1.setFromAxisAngle( axis, angle );\n\n\t\t\tthis.quaternion.premultiply( _q1 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateX: function ( angle ) {\n\n\t\t\treturn this.rotateOnAxis( _xAxis, angle );\n\n\t\t},\n\n\t\trotateY: function ( angle ) {\n\n\t\t\treturn this.rotateOnAxis( _yAxis, angle );\n\n\t\t},\n\n\t\trotateZ: function ( angle ) {\n\n\t\t\treturn this.rotateOnAxis( _zAxis, angle );\n\n\t\t},\n\n\t\ttranslateOnAxis: function ( axis, distance ) {\n\n\t\t\t// translate object by distance along axis in object space\n\t\t\t// axis is assumed to be normalized\n\n\t\t\t_v1$1.copy( axis ).applyQuaternion( this.quaternion );\n\n\t\t\tthis.position.add( _v1$1.multiplyScalar( distance ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslateX: function ( distance ) {\n\n\t\t\treturn this.translateOnAxis( _xAxis, distance );\n\n\t\t},\n\n\t\ttranslateY: function ( distance ) {\n\n\t\t\treturn this.translateOnAxis( _yAxis, distance );\n\n\t\t},\n\n\t\ttranslateZ: function ( distance ) {\n\n\t\t\treturn this.translateOnAxis( _zAxis, distance );\n\n\t\t},\n\n\t\tlocalToWorld: function ( vector ) {\n\n\t\t\treturn vector.applyMatrix4( this.matrixWorld );\n\n\t\t},\n\n\t\tworldToLocal: function ( vector ) {\n\n\t\t\treturn vector.applyMatrix4( _m1$1.getInverse( this.matrixWorld ) );\n\n\t\t},\n\n\t\tlookAt: function ( x, y, z ) {\n\n\t\t\t// This method does not support objects having non-uniformly-scaled parent(s)\n\n\t\t\tif ( x.isVector3 ) {\n\n\t\t\t\t_target.copy( x );\n\n\t\t\t} else {\n\n\t\t\t\t_target.set( x, y, z );\n\n\t\t\t}\n\n\t\t\tvar parent = this.parent;\n\n\t\t\tthis.updateWorldMatrix( true, false );\n\n\t\t\t_position.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\tif ( this.isCamera || this.isLight ) {\n\n\t\t\t\t_m1$1.lookAt( _position, _target, this.up );\n\n\t\t\t} else {\n\n\t\t\t\t_m1$1.lookAt( _target, _position, this.up );\n\n\t\t\t}\n\n\t\t\tthis.quaternion.setFromRotationMatrix( _m1$1 );\n\n\t\t\tif ( parent ) {\n\n\t\t\t\t_m1$1.extractRotation( parent.matrixWorld );\n\t\t\t\t_q1.setFromRotationMatrix( _m1$1 );\n\t\t\t\tthis.quaternion.premultiply( _q1.inverse() );\n\n\t\t\t}\n\n\t\t},\n\n\t\tadd: function ( object ) {\n\n\t\t\tif ( arguments.length > 1 ) {\n\n\t\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\t\tthis.add( arguments[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tif ( object === this ) {\n\n\t\t\t\tconsole.error( \"THREE.Object3D.add: object can't be added as a child of itself.\", object );\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tif ( ( object && object.isObject3D ) ) {\n\n\t\t\t\tif ( object.parent !== null ) {\n\n\t\t\t\t\tobject.parent.remove( object );\n\n\t\t\t\t}\n\n\t\t\t\tobject.parent = this;\n\t\t\t\tthis.children.push( object );\n\n\t\t\t\tobject.dispatchEvent( _addedEvent );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( \"THREE.Object3D.add: object not an instance of THREE.Object3D.\", object );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tremove: function ( object ) {\n\n\t\t\tif ( arguments.length > 1 ) {\n\n\t\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\t\tthis.remove( arguments[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar index = this.children.indexOf( object );\n\n\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\tobject.parent = null;\n\t\t\t\tthis.children.splice( index, 1 );\n\n\t\t\t\tobject.dispatchEvent( _removedEvent );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tattach: function ( object ) {\n\n\t\t\t// adds object as a child of this, while maintaining the object's world transform\n\n\t\t\tthis.updateWorldMatrix( true, false );\n\n\t\t\t_m1$1.getInverse( this.matrixWorld );\n\n\t\t\tif ( object.parent !== null ) {\n\n\t\t\t\tobject.parent.updateWorldMatrix( true, false );\n\n\t\t\t\t_m1$1.multiply( object.parent.matrixWorld );\n\n\t\t\t}\n\n\t\t\tobject.applyMatrix4( _m1$1 );\n\n\t\t\tobject.updateWorldMatrix( false, false );\n\n\t\t\tthis.add( object );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetObjectById: function ( id ) {\n\n\t\t\treturn this.getObjectByProperty( 'id', id );\n\n\t\t},\n\n\t\tgetObjectByName: function ( name ) {\n\n\t\t\treturn this.getObjectByProperty( 'name', name );\n\n\t\t},\n\n\t\tgetObjectByProperty: function ( name, value ) {\n\n\t\t\tif ( this[ name ] === value ) { return this; }\n\n\t\t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = this.children[ i ];\n\t\t\t\tvar object = child.getObjectByProperty( name, value );\n\n\t\t\t\tif ( object !== undefined ) {\n\n\t\t\t\t\treturn object;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn undefined;\n\n\t\t},\n\n\t\tgetWorldPosition: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .getWorldPosition() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\treturn target.setFromMatrixPosition( this.matrixWorld );\n\n\t\t},\n\n\t\tgetWorldQuaternion: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .getWorldQuaternion() target is now required' );\n\t\t\t\ttarget = new Quaternion();\n\n\t\t\t}\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tthis.matrixWorld.decompose( _position, target, _scale );\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tgetWorldScale: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .getWorldScale() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tthis.matrixWorld.decompose( _position, _quaternion$2, target );\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tgetWorldDirection: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .getWorldDirection() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tvar e = this.matrixWorld.elements;\n\n\t\t\treturn target.set( e[ 8 ], e[ 9 ], e[ 10 ] ).normalize();\n\n\t\t},\n\n\t\traycast: function () {},\n\n\t\ttraverse: function ( callback ) {\n\n\t\t\tcallback( this );\n\n\t\t\tvar children = this.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].traverse( callback );\n\n\t\t\t}\n\n\t\t},\n\n\t\ttraverseVisible: function ( callback ) {\n\n\t\t\tif ( this.visible === false ) { return; }\n\n\t\t\tcallback( this );\n\n\t\t\tvar children = this.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].traverseVisible( callback );\n\n\t\t\t}\n\n\t\t},\n\n\t\ttraverseAncestors: function ( callback ) {\n\n\t\t\tvar parent = this.parent;\n\n\t\t\tif ( parent !== null ) {\n\n\t\t\t\tcallback( parent );\n\n\t\t\t\tparent.traverseAncestors( callback );\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdateMatrix: function () {\n\n\t\t\tthis.matrix.compose( this.position, this.quaternion, this.scale );\n\n\t\t\tthis.matrixWorldNeedsUpdate = true;\n\n\t\t},\n\n\t\tupdateMatrixWorld: function ( force ) {\n\n\t\t\tif ( this.matrixAutoUpdate ) { this.updateMatrix(); }\n\n\t\t\tif ( this.matrixWorldNeedsUpdate || force ) {\n\n\t\t\t\tif ( this.parent === null ) {\n\n\t\t\t\t\tthis.matrixWorld.copy( this.matrix );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n\t\t\t\t}\n\n\t\t\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\t\t\tforce = true;\n\n\t\t\t}\n\n\t\t\t// update children\n\n\t\t\tvar children = this.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].updateMatrixWorld( force );\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdateWorldMatrix: function ( updateParents, updateChildren ) {\n\n\t\t\tvar parent = this.parent;\n\n\t\t\tif ( updateParents === true && parent !== null ) {\n\n\t\t\t\tparent.updateWorldMatrix( true, false );\n\n\t\t\t}\n\n\t\t\tif ( this.matrixAutoUpdate ) { this.updateMatrix(); }\n\n\t\t\tif ( this.parent === null ) {\n\n\t\t\t\tthis.matrixWorld.copy( this.matrix );\n\n\t\t\t} else {\n\n\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n\t\t\t}\n\n\t\t\t// update children\n\n\t\t\tif ( updateChildren === true ) {\n\n\t\t\t\tvar children = this.children;\n\n\t\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\t\tchildren[ i ].updateWorldMatrix( false, true );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\t// meta is a string when called from JSON.stringify\n\t\t\tvar isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\t\tvar output = {};\n\n\t\t\t// meta is a hash used to collect geometries, materials.\n\t\t\t// not providing it implies that this is the root object\n\t\t\t// being serialized.\n\t\t\tif ( isRootObject ) {\n\n\t\t\t\t// initialize meta obj\n\t\t\t\tmeta = {\n\t\t\t\t\tgeometries: {},\n\t\t\t\t\tmaterials: {},\n\t\t\t\t\ttextures: {},\n\t\t\t\t\timages: {},\n\t\t\t\t\tshapes: {}\n\t\t\t\t};\n\n\t\t\t\toutput.metadata = {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Object',\n\t\t\t\t\tgenerator: 'Object3D.toJSON'\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\t// standard Object3D serialization\n\n\t\t\tvar object = {};\n\n\t\t\tobject.uuid = this.uuid;\n\t\t\tobject.type = this.type;\n\n\t\t\tif ( this.name !== '' ) { object.name = this.name; }\n\t\t\tif ( this.castShadow === true ) { object.castShadow = true; }\n\t\t\tif ( this.receiveShadow === true ) { object.receiveShadow = true; }\n\t\t\tif ( this.visible === false ) { object.visible = false; }\n\t\t\tif ( this.frustumCulled === false ) { object.frustumCulled = false; }\n\t\t\tif ( this.renderOrder !== 0 ) { object.renderOrder = this.renderOrder; }\n\t\t\tif ( JSON.stringify( this.userData ) !== '{}' ) { object.userData = this.userData; }\n\n\t\t\tobject.layers = this.layers.mask;\n\t\t\tobject.matrix = this.matrix.toArray();\n\n\t\t\tif ( this.matrixAutoUpdate === false ) { object.matrixAutoUpdate = false; }\n\n\t\t\t// object specific properties\n\n\t\t\tif ( this.isInstancedMesh ) {\n\n\t\t\t\tobject.type = 'InstancedMesh';\n\t\t\t\tobject.count = this.count;\n\t\t\t\tobject.instanceMatrix = this.instanceMatrix.toJSON();\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tfunction serialize( library, element ) {\n\n\t\t\t\tif ( library[ element.uuid ] === undefined ) {\n\n\t\t\t\t\tlibrary[ element.uuid ] = element.toJSON( meta );\n\n\t\t\t\t}\n\n\t\t\t\treturn element.uuid;\n\n\t\t\t}\n\n\t\t\tif ( this.isMesh || this.isLine || this.isPoints ) {\n\n\t\t\t\tobject.geometry = serialize( meta.geometries, this.geometry );\n\n\t\t\t\tvar parameters = this.geometry.parameters;\n\n\t\t\t\tif ( parameters !== undefined && parameters.shapes !== undefined ) {\n\n\t\t\t\t\tvar shapes = parameters.shapes;\n\n\t\t\t\t\tif ( Array.isArray( shapes ) ) {\n\n\t\t\t\t\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\tvar shape = shapes[ i ];\n\n\t\t\t\t\t\t\tserialize( meta.shapes, shape );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tserialize( meta.shapes, shapes );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.material !== undefined ) {\n\n\t\t\t\tif ( Array.isArray( this.material ) ) {\n\n\t\t\t\t\tvar uuids = [];\n\n\t\t\t\t\tfor ( var i = 0, l = this.material.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tuuids.push( serialize( meta.materials, this.material[ i ] ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tobject.material = uuids;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tobject.material = serialize( meta.materials, this.material );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( this.children.length > 0 ) {\n\n\t\t\t\tobject.children = [];\n\n\t\t\t\tfor ( var i = 0; i < this.children.length; i ++ ) {\n\n\t\t\t\t\tobject.children.push( this.children[ i ].toJSON( meta ).object );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( isRootObject ) {\n\n\t\t\t\tvar geometries = extractFromCache( meta.geometries );\n\t\t\t\tvar materials = extractFromCache( meta.materials );\n\t\t\t\tvar textures = extractFromCache( meta.textures );\n\t\t\t\tvar images = extractFromCache( meta.images );\n\t\t\t\tvar shapes = extractFromCache( meta.shapes );\n\n\t\t\t\tif ( geometries.length > 0 ) { output.geometries = geometries; }\n\t\t\t\tif ( materials.length > 0 ) { output.materials = materials; }\n\t\t\t\tif ( textures.length > 0 ) { output.textures = textures; }\n\t\t\t\tif ( images.length > 0 ) { output.images = images; }\n\t\t\t\tif ( shapes.length > 0 ) { output.shapes = shapes; }\n\n\t\t\t}\n\n\t\t\toutput.object = object;\n\n\t\t\treturn output;\n\n\t\t\t// extract data from the cache hash\n\t\t\t// remove metadata on each item\n\t\t\t// and return as array\n\t\t\tfunction extractFromCache( cache ) {\n\n\t\t\t\tvar values = [];\n\t\t\t\tfor ( var key in cache ) {\n\n\t\t\t\t\tvar data = cache[ key ];\n\t\t\t\t\tdelete data.metadata;\n\t\t\t\t\tvalues.push( data );\n\n\t\t\t\t}\n\t\t\t\treturn values;\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function ( recursive ) {\n\n\t\t\treturn new this.constructor().copy( this, recursive );\n\n\t\t},\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tif ( recursive === undefined ) { recursive = true; }\n\n\t\t\tthis.name = source.name;\n\n\t\t\tthis.up.copy( source.up );\n\n\t\t\tthis.position.copy( source.position );\n\t\t\tthis.quaternion.copy( source.quaternion );\n\t\t\tthis.scale.copy( source.scale );\n\n\t\t\tthis.matrix.copy( source.matrix );\n\t\t\tthis.matrixWorld.copy( source.matrixWorld );\n\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n\n\t\t\tthis.layers.mask = source.layers.mask;\n\t\t\tthis.visible = source.visible;\n\n\t\t\tthis.castShadow = source.castShadow;\n\t\t\tthis.receiveShadow = source.receiveShadow;\n\n\t\t\tthis.frustumCulled = source.frustumCulled;\n\t\t\tthis.renderOrder = source.renderOrder;\n\n\t\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\t\tif ( recursive === true ) {\n\n\t\t\t\tfor ( var i = 0; i < source.children.length; i ++ ) {\n\n\t\t\t\t\tvar child = source.children[ i ];\n\t\t\t\t\tthis.add( child.clone() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Scene() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Scene';\n\n\t\tthis.background = null;\n\t\tthis.environment = null;\n\t\tthis.fog = null;\n\n\t\tthis.overrideMaterial = null;\n\n\t\tthis.autoUpdate = true; // checked by the renderer\n\n\t\tif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n\n\t\t\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) ); // eslint-disable-line no-undef\n\n\t\t}\n\n\t}\n\n\tScene.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Scene,\n\n\t\tisScene: true,\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source, recursive );\n\n\t\t\tif ( source.background !== null ) { this.background = source.background.clone(); }\n\t\t\tif ( source.environment !== null ) { this.environment = source.environment.clone(); }\n\t\t\tif ( source.fog !== null ) { this.fog = source.fog.clone(); }\n\n\t\t\tif ( source.overrideMaterial !== null ) { this.overrideMaterial = source.overrideMaterial.clone(); }\n\n\t\t\tthis.autoUpdate = source.autoUpdate;\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tif ( this.background !== null ) { data.object.background = this.background.toJSON( meta ); }\n\t\t\tif ( this.environment !== null ) { data.object.environment = this.environment.toJSON( meta ); }\n\t\t\tif ( this.fog !== null ) { data.object.fog = this.fog.toJSON(); }\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\tvar _points = [\n\t\tnew Vector3(),\n\t\tnew Vector3(),\n\t\tnew Vector3(),\n\t\tnew Vector3(),\n\t\tnew Vector3(),\n\t\tnew Vector3(),\n\t\tnew Vector3(),\n\t\tnew Vector3()\n\t];\n\n\tvar _vector$1 = new Vector3();\n\n\tvar _box = new Box3();\n\n\t// triangle centered vertices\n\n\tvar _v0 = new Vector3();\n\tvar _v1$2 = new Vector3();\n\tvar _v2 = new Vector3();\n\n\t// triangle edge vectors\n\n\tvar _f0 = new Vector3();\n\tvar _f1 = new Vector3();\n\tvar _f2 = new Vector3();\n\n\tvar _center = new Vector3();\n\tvar _extents = new Vector3();\n\tvar _triangleNormal = new Vector3();\n\tvar _testAxis = new Vector3();\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction Box3( min, max ) {\n\n\t\tthis.min = ( min !== undefined ) ? min : new Vector3( + Infinity, + Infinity, + Infinity );\n\t\tthis.max = ( max !== undefined ) ? max : new Vector3( - Infinity, - Infinity, - Infinity );\n\n\t}\n\n\n\tObject.assign( Box3.prototype, {\n\n\t\tisBox3: true,\n\n\t\tset: function ( min, max ) {\n\n\t\t\tthis.min.copy( min );\n\t\t\tthis.max.copy( max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromArray: function ( array ) {\n\n\t\t\tvar minX = + Infinity;\n\t\t\tvar minY = + Infinity;\n\t\t\tvar minZ = + Infinity;\n\n\t\t\tvar maxX = - Infinity;\n\t\t\tvar maxY = - Infinity;\n\t\t\tvar maxZ = - Infinity;\n\n\t\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\t\tvar x = array[ i ];\n\t\t\t\tvar y = array[ i + 1 ];\n\t\t\t\tvar z = array[ i + 2 ];\n\n\t\t\t\tif ( x < minX ) { minX = x; }\n\t\t\t\tif ( y < minY ) { minY = y; }\n\t\t\t\tif ( z < minZ ) { minZ = z; }\n\n\t\t\t\tif ( x > maxX ) { maxX = x; }\n\t\t\t\tif ( y > maxY ) { maxY = y; }\n\t\t\t\tif ( z > maxZ ) { maxZ = z; }\n\n\t\t\t}\n\n\t\t\tthis.min.set( minX, minY, minZ );\n\t\t\tthis.max.set( maxX, maxY, maxZ );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromBufferAttribute: function ( attribute ) {\n\n\t\t\tvar minX = + Infinity;\n\t\t\tvar minY = + Infinity;\n\t\t\tvar minZ = + Infinity;\n\n\t\t\tvar maxX = - Infinity;\n\t\t\tvar maxY = - Infinity;\n\t\t\tvar maxZ = - Infinity;\n\n\t\t\tfor ( var i = 0, l = attribute.count; i < l; i ++ ) {\n\n\t\t\t\tvar x = attribute.getX( i );\n\t\t\t\tvar y = attribute.getY( i );\n\t\t\t\tvar z = attribute.getZ( i );\n\n\t\t\t\tif ( x < minX ) { minX = x; }\n\t\t\t\tif ( y < minY ) { minY = y; }\n\t\t\t\tif ( z < minZ ) { minZ = z; }\n\n\t\t\t\tif ( x > maxX ) { maxX = x; }\n\t\t\t\tif ( y > maxY ) { maxY = y; }\n\t\t\t\tif ( z > maxZ ) { maxZ = z; }\n\n\t\t\t}\n\n\t\t\tthis.min.set( minX, minY, minZ );\n\t\t\tthis.max.set( maxX, maxY, maxZ );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tthis.makeEmpty();\n\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromCenterAndSize: function ( center, size ) {\n\n\t\t\tvar halfSize = _vector$1.copy( size ).multiplyScalar( 0.5 );\n\n\t\t\tthis.min.copy( center ).sub( halfSize );\n\t\t\tthis.max.copy( center ).add( halfSize );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromObject: function ( object ) {\n\n\t\t\tthis.makeEmpty();\n\n\t\t\treturn this.expandByObject( object );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( box ) {\n\n\t\t\tthis.min.copy( box.min );\n\t\t\tthis.max.copy( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeEmpty: function () {\n\n\t\t\tthis.min.x = this.min.y = this.min.z = + Infinity;\n\t\t\tthis.max.x = this.max.y = this.max.z = - Infinity;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tisEmpty: function () {\n\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\n\n\t\t},\n\n\t\tgetCenter: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box3: .getCenter() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t\t},\n\n\t\tgetSize: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box3: .getSize() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.subVectors( this.max, this.min );\n\n\t\t},\n\n\t\texpandByPoint: function ( point ) {\n\n\t\t\tthis.min.min( point );\n\t\t\tthis.max.max( point );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByVector: function ( vector ) {\n\n\t\t\tthis.min.sub( vector );\n\t\t\tthis.max.add( vector );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByScalar: function ( scalar ) {\n\n\t\t\tthis.min.addScalar( - scalar );\n\t\t\tthis.max.addScalar( scalar );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByObject: function ( object ) {\n\n\t\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\n\t\t\t// accounting for both the object's, and children's, world transforms\n\n\t\t\tobject.updateWorldMatrix( false, false );\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif ( geometry !== undefined ) {\n\n\t\t\t\tif ( geometry.boundingBox === null ) {\n\n\t\t\t\t\tgeometry.computeBoundingBox();\n\n\t\t\t\t}\n\n\t\t\t\t_box.copy( geometry.boundingBox );\n\t\t\t\t_box.applyMatrix4( object.matrixWorld );\n\n\t\t\t\tthis.expandByPoint( _box.min );\n\t\t\t\tthis.expandByPoint( _box.max );\n\n\t\t\t}\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tthis.expandByObject( children[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\treturn point.x < this.min.x || point.x > this.max.x ||\n\t\t\t\tpoint.y < this.min.y || point.y > this.max.y ||\n\t\t\t\tpoint.z < this.min.z || point.z > this.max.z ? false : true;\n\n\t\t},\n\n\t\tcontainsBox: function ( box ) {\n\n\t\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\n\t\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y &&\n\t\t\t\tthis.min.z <= box.min.z && box.max.z <= this.max.z;\n\n\t\t},\n\n\t\tgetParameter: function ( point, target ) {\n\n\t\t\t// This can potentially have a divide by zero if the box\n\t\t\t// has a size dimension of 0.\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box3: .getParameter() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.set(\n\t\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\n\t\t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\n\t\t\t);\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\t// using 6 splitting planes to rule out intersections.\n\t\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ||\n\t\t\t\tbox.max.z < this.min.z || box.min.z > this.max.z ? false : true;\n\n\t\t},\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\t// Find the point on the AABB closest to the sphere center.\n\t\t\tthis.clampPoint( sphere.center, _vector$1 );\n\n\t\t\t// If that point is inside the sphere, the AABB and sphere intersect.\n\t\t\treturn _vector$1.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n\t\t},\n\n\t\tintersectsPlane: function ( plane ) {\n\n\t\t\t// We compute the minimum and maximum dot product values. If those values\n\t\t\t// are on the same side (back or front) of the plane, then there is no intersection.\n\n\t\t\tvar min, max;\n\n\t\t\tif ( plane.normal.x > 0 ) {\n\n\t\t\t\tmin = plane.normal.x * this.min.x;\n\t\t\t\tmax = plane.normal.x * this.max.x;\n\n\t\t\t} else {\n\n\t\t\t\tmin = plane.normal.x * this.max.x;\n\t\t\t\tmax = plane.normal.x * this.min.x;\n\n\t\t\t}\n\n\t\t\tif ( plane.normal.y > 0 ) {\n\n\t\t\t\tmin += plane.normal.y * this.min.y;\n\t\t\t\tmax += plane.normal.y * this.max.y;\n\n\t\t\t} else {\n\n\t\t\t\tmin += plane.normal.y * this.max.y;\n\t\t\t\tmax += plane.normal.y * this.min.y;\n\n\t\t\t}\n\n\t\t\tif ( plane.normal.z > 0 ) {\n\n\t\t\t\tmin += plane.normal.z * this.min.z;\n\t\t\t\tmax += plane.normal.z * this.max.z;\n\n\t\t\t} else {\n\n\t\t\t\tmin += plane.normal.z * this.max.z;\n\t\t\t\tmax += plane.normal.z * this.min.z;\n\n\t\t\t}\n\n\t\t\treturn ( min <= - plane.constant && max >= - plane.constant );\n\n\t\t},\n\n\t\tintersectsTriangle: function ( triangle ) {\n\n\t\t\tif ( this.isEmpty() ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\t// compute box center and extents\n\t\t\tthis.getCenter( _center );\n\t\t\t_extents.subVectors( this.max, _center );\n\n\t\t\t// translate triangle to aabb origin\n\t\t\t_v0.subVectors( triangle.a, _center );\n\t\t\t_v1$2.subVectors( triangle.b, _center );\n\t\t\t_v2.subVectors( triangle.c, _center );\n\n\t\t\t// compute edge vectors for triangle\n\t\t\t_f0.subVectors( _v1$2, _v0 );\n\t\t\t_f1.subVectors( _v2, _v1$2 );\n\t\t\t_f2.subVectors( _v0, _v2 );\n\n\t\t\t// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\n\t\t\t// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\n\t\t\t// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\n\t\t\tvar axes = [\n\t\t\t\t0, - _f0.z, _f0.y, 0, - _f1.z, _f1.y, 0, - _f2.z, _f2.y,\n\t\t\t\t_f0.z, 0, - _f0.x, _f1.z, 0, - _f1.x, _f2.z, 0, - _f2.x,\n\t\t\t\t- _f0.y, _f0.x, 0, - _f1.y, _f1.x, 0, - _f2.y, _f2.x, 0\n\t\t\t];\n\t\t\tif ( ! satForAxes( axes, _v0, _v1$2, _v2, _extents ) ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\t// test 3 face normals from the aabb\n\t\t\taxes = [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];\n\t\t\tif ( ! satForAxes( axes, _v0, _v1$2, _v2, _extents ) ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\t// finally testing the face normal of the triangle\n\t\t\t// use already existing triangle edge vectors here\n\t\t\t_triangleNormal.crossVectors( _f0, _f1 );\n\t\t\taxes = [ _triangleNormal.x, _triangleNormal.y, _triangleNormal.z ];\n\n\t\t\treturn satForAxes( axes, _v0, _v1$2, _v2, _extents );\n\n\t\t},\n\n\t\tclampPoint: function ( point, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box3: .clampPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.copy( point ).clamp( this.min, this.max );\n\n\t\t},\n\n\t\tdistanceToPoint: function ( point ) {\n\n\t\t\tvar clampedPoint = _vector$1.copy( point ).clamp( this.min, this.max );\n\n\t\t\treturn clampedPoint.sub( point ).length();\n\n\t\t},\n\n\t\tgetBoundingSphere: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.error( 'THREE.Box3: .getBoundingSphere() target is now required' );\n\t\t\t\t//target = new Sphere(); // removed to avoid cyclic dependency\n\n\t\t\t}\n\n\t\t\tthis.getCenter( target.center );\n\n\t\t\ttarget.radius = this.getSize( _vector$1 ).length() * 0.5;\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tintersect: function ( box ) {\n\n\t\t\tthis.min.max( box.min );\n\t\t\tthis.max.min( box.max );\n\n\t\t\t// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n\t\t\tif ( this.isEmpty() ) { this.makeEmpty(); }\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tunion: function ( box ) {\n\n\t\t\tthis.min.min( box.min );\n\t\t\tthis.max.max( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyMatrix4: function ( matrix ) {\n\n\t\t\t// transform of empty box is an empty box.\n\t\t\tif ( this.isEmpty() ) { return this; }\n\n\t\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\t\t\t_points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\n\t\t\t_points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\n\t\t\t_points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\n\t\t\t_points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\n\t\t\t_points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\n\t\t\t_points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\n\t\t\t_points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\n\t\t\t_points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 111\n\n\t\t\tthis.setFromPoints( _points );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( offset ) {\n\n\t\t\tthis.min.add( offset );\n\t\t\tthis.max.add( offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( box ) {\n\n\t\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t\t}\n\n\t} );\n\n\tfunction satForAxes( axes, v0, v1, v2, extents ) {\n\n\t\tvar i, j;\n\n\t\tfor ( i = 0, j = axes.length - 3; i <= j; i += 3 ) {\n\n\t\t\t_testAxis.fromArray( axes, i );\n\t\t\t// project the aabb onto the seperating axis\n\t\t\tvar r = extents.x * Math.abs( _testAxis.x ) + extents.y * Math.abs( _testAxis.y ) + extents.z * Math.abs( _testAxis.z );\n\t\t\t// project all 3 vertices of the triangle onto the seperating axis\n\t\t\tvar p0 = v0.dot( _testAxis );\n\t\t\tvar p1 = v1.dot( _testAxis );\n\t\t\tvar p2 = v2.dot( _testAxis );\n\t\t\t// actual test, basically see if either of the most extreme of the triangle points intersects r\n\t\t\tif ( Math.max( - Math.max( p0, p1, p2 ), Math.min( p0, p1, p2 ) ) > r ) {\n\n\t\t\t\t// points of the projected triangle are outside the projected half-length of the aabb\n\t\t\t\t// the axis is seperating and we can exit\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tvar _box$1 = new Box3();\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Sphere( center, radius ) {\n\n\t\tthis.center = ( center !== undefined ) ? center : new Vector3();\n\t\tthis.radius = ( radius !== undefined ) ? radius : 0;\n\n\t}\n\n\tObject.assign( Sphere.prototype, {\n\n\t\tset: function ( center, radius ) {\n\n\t\t\tthis.center.copy( center );\n\t\t\tthis.radius = radius;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPoints: function ( points, optionalCenter ) {\n\n\t\t\tvar center = this.center;\n\n\t\t\tif ( optionalCenter !== undefined ) {\n\n\t\t\t\tcenter.copy( optionalCenter );\n\n\t\t\t} else {\n\n\t\t\t\t_box$1.setFromPoints( points ).getCenter( center );\n\n\t\t\t}\n\n\t\t\tvar maxRadiusSq = 0;\n\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\n\n\t\t\t}\n\n\t\t\tthis.radius = Math.sqrt( maxRadiusSq );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( sphere ) {\n\n\t\t\tthis.center.copy( sphere.center );\n\t\t\tthis.radius = sphere.radius;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tempty: function () {\n\n\t\t\treturn ( this.radius <= 0 );\n\n\t\t},\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\n\n\t\t},\n\n\t\tdistanceToPoint: function ( point ) {\n\n\t\t\treturn ( point.distanceTo( this.center ) - this.radius );\n\n\t\t},\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\tvar radiusSum = this.radius + sphere.radius;\n\n\t\t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\treturn box.intersectsSphere( this );\n\n\t\t},\n\n\t\tintersectsPlane: function ( plane ) {\n\n\t\t\treturn Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;\n\n\t\t},\n\n\t\tclampPoint: function ( point, target ) {\n\n\t\t\tvar deltaLengthSq = this.center.distanceToSquared( point );\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Sphere: .clampPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\ttarget.copy( point );\n\n\t\t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\n\n\t\t\t\ttarget.sub( this.center ).normalize();\n\t\t\t\ttarget.multiplyScalar( this.radius ).add( this.center );\n\n\t\t\t}\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tgetBoundingBox: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Sphere: .getBoundingBox() target is now required' );\n\t\t\t\ttarget = new Box3();\n\n\t\t\t}\n\n\t\t\ttarget.set( this.center, this.center );\n\t\t\ttarget.expandByScalar( this.radius );\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tapplyMatrix4: function ( matrix ) {\n\n\t\t\tthis.center.applyMatrix4( matrix );\n\t\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( offset ) {\n\n\t\t\tthis.center.add( offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( sphere ) {\n\n\t\t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\n\n\t\t}\n\n\t} );\n\n\tvar _vector$2 = new Vector3();\n\tvar _segCenter = new Vector3();\n\tvar _segDir = new Vector3();\n\tvar _diff = new Vector3();\n\n\tvar _edge1 = new Vector3();\n\tvar _edge2 = new Vector3();\n\tvar _normal = new Vector3();\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t */\n\n\tfunction Ray( origin, direction ) {\n\n\t\tthis.origin = ( origin !== undefined ) ? origin : new Vector3();\n\t\tthis.direction = ( direction !== undefined ) ? direction : new Vector3( 0, 0, - 1 );\n\n\t}\n\n\tObject.assign( Ray.prototype, {\n\n\t\tset: function ( origin, direction ) {\n\n\t\t\tthis.origin.copy( origin );\n\t\t\tthis.direction.copy( direction );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( ray ) {\n\n\t\t\tthis.origin.copy( ray.origin );\n\t\t\tthis.direction.copy( ray.direction );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tat: function ( t, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Ray: .at() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.copy( this.direction ).multiplyScalar( t ).add( this.origin );\n\n\t\t},\n\n\t\tlookAt: function ( v ) {\n\n\t\t\tthis.direction.copy( v ).sub( this.origin ).normalize();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trecast: function ( t ) {\n\n\t\t\tthis.origin.copy( this.at( t, _vector$2 ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclosestPointToPoint: function ( point, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Ray: .closestPointToPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\ttarget.subVectors( point, this.origin );\n\n\t\t\tvar directionDistance = target.dot( this.direction );\n\n\t\t\tif ( directionDistance < 0 ) {\n\n\t\t\t\treturn target.copy( this.origin );\n\n\t\t\t}\n\n\t\t\treturn target.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n\t\t},\n\n\t\tdistanceToPoint: function ( point ) {\n\n\t\t\treturn Math.sqrt( this.distanceSqToPoint( point ) );\n\n\t\t},\n\n\t\tdistanceSqToPoint: function ( point ) {\n\n\t\t\tvar directionDistance = _vector$2.subVectors( point, this.origin ).dot( this.direction );\n\n\t\t\t// point behind the ray\n\n\t\t\tif ( directionDistance < 0 ) {\n\n\t\t\t\treturn this.origin.distanceToSquared( point );\n\n\t\t\t}\n\n\t\t\t_vector$2.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n\t\t\treturn _vector$2.distanceToSquared( point );\n\n\t\t},\n\n\t\tdistanceSqToSegment: function ( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\n\n\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\n\t\t\t// It returns the min distance between the ray and the segment\n\t\t\t// defined by v0 and v1\n\t\t\t// It can also set two optional targets :\n\t\t\t// - The closest point on the ray\n\t\t\t// - The closest point on the segment\n\n\t\t\t_segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );\n\t\t\t_segDir.copy( v1 ).sub( v0 ).normalize();\n\t\t\t_diff.copy( this.origin ).sub( _segCenter );\n\n\t\t\tvar segExtent = v0.distanceTo( v1 ) * 0.5;\n\t\t\tvar a01 = - this.direction.dot( _segDir );\n\t\t\tvar b0 = _diff.dot( this.direction );\n\t\t\tvar b1 = - _diff.dot( _segDir );\n\t\t\tvar c = _diff.lengthSq();\n\t\t\tvar det = Math.abs( 1 - a01 * a01 );\n\t\t\tvar s0, s1, sqrDist, extDet;\n\n\t\t\tif ( det > 0 ) {\n\n\t\t\t\t// The ray and segment are not parallel.\n\n\t\t\t\ts0 = a01 * b1 - b0;\n\t\t\t\ts1 = a01 * b0 - b1;\n\t\t\t\textDet = segExtent * det;\n\n\t\t\t\tif ( s0 >= 0 ) {\n\n\t\t\t\t\tif ( s1 >= - extDet ) {\n\n\t\t\t\t\t\tif ( s1 <= extDet ) {\n\n\t\t\t\t\t\t\t// region 0\n\t\t\t\t\t\t\t// Minimum at interior points of ray and segment.\n\n\t\t\t\t\t\t\tvar invDet = 1 / det;\n\t\t\t\t\t\t\ts0 *= invDet;\n\t\t\t\t\t\t\ts1 *= invDet;\n\t\t\t\t\t\t\tsqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// region 1\n\n\t\t\t\t\t\t\ts1 = segExtent;\n\t\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// region 5\n\n\t\t\t\t\t\ts1 = - segExtent;\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( s1 <= - extDet ) {\n\n\t\t\t\t\t\t// region 4\n\n\t\t\t\t\t\ts0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\n\t\t\t\t\t\ts1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t} else if ( s1 <= extDet ) {\n\n\t\t\t\t\t\t// region 3\n\n\t\t\t\t\t\ts0 = 0;\n\t\t\t\t\t\ts1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\tsqrDist = s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// region 2\n\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\n\t\t\t\t\t\ts1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// Ray and segment are parallel.\n\n\t\t\t\ts1 = ( a01 > 0 ) ? - segExtent : segExtent;\n\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t}\n\n\t\t\tif ( optionalPointOnRay ) {\n\n\t\t\t\toptionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );\n\n\t\t\t}\n\n\t\t\tif ( optionalPointOnSegment ) {\n\n\t\t\t\toptionalPointOnSegment.copy( _segDir ).multiplyScalar( s1 ).add( _segCenter );\n\n\t\t\t}\n\n\t\t\treturn sqrDist;\n\n\t\t},\n\n\t\tintersectSphere: function ( sphere, target ) {\n\n\t\t\t_vector$2.subVectors( sphere.center, this.origin );\n\t\t\tvar tca = _vector$2.dot( this.direction );\n\t\t\tvar d2 = _vector$2.dot( _vector$2 ) - tca * tca;\n\t\t\tvar radius2 = sphere.radius * sphere.radius;\n\n\t\t\tif ( d2 > radius2 ) { return null; }\n\n\t\t\tvar thc = Math.sqrt( radius2 - d2 );\n\n\t\t\t// t0 = first intersect point - entrance on front of sphere\n\t\t\tvar t0 = tca - thc;\n\n\t\t\t// t1 = second intersect point - exit point on back of sphere\n\t\t\tvar t1 = tca + thc;\n\n\t\t\t// test to see if both t0 and t1 are behind the ray - if so, return null\n\t\t\tif ( t0 < 0 && t1 < 0 ) { return null; }\n\n\t\t\t// test to see if t0 is behind the ray:\n\t\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n\t\t\t// in order to always return an intersect point that is in front of the ray.\n\t\t\tif ( t0 < 0 ) { return this.at( t1, target ); }\n\n\t\t\t// else t0 is in front of the ray, so return the first collision point scaled by t0\n\t\t\treturn this.at( t0, target );\n\n\t\t},\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\treturn this.distanceSqToPoint( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n\t\t},\n\n\t\tdistanceToPlane: function ( plane ) {\n\n\t\t\tvar denominator = plane.normal.dot( this.direction );\n\n\t\t\tif ( denominator === 0 ) {\n\n\t\t\t\t// line is coplanar, return origin\n\t\t\t\tif ( plane.distanceToPoint( this.origin ) === 0 ) {\n\n\t\t\t\t\treturn 0;\n\n\t\t\t\t}\n\n\t\t\t\t// Null is preferable to undefined since undefined means.... it is undefined\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\n\n\t\t\t// Return if the ray never intersects the plane\n\n\t\t\treturn t >= 0 ? t : null;\n\n\t\t},\n\n\t\tintersectPlane: function ( plane, target ) {\n\n\t\t\tvar t = this.distanceToPlane( plane );\n\n\t\t\tif ( t === null ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\treturn this.at( t, target );\n\n\t\t},\n\n\t\tintersectsPlane: function ( plane ) {\n\n\t\t\t// check if the ray lies on the plane first\n\n\t\t\tvar distToPoint = plane.distanceToPoint( this.origin );\n\n\t\t\tif ( distToPoint === 0 ) {\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\tvar denominator = plane.normal.dot( this.direction );\n\n\t\t\tif ( denominator * distToPoint < 0 ) {\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\t// ray origin is behind the plane (and is pointing behind it)\n\n\t\t\treturn false;\n\n\t\t},\n\n\t\tintersectBox: function ( box, target ) {\n\n\t\t\tvar tmin, tmax, tymin, tymax, tzmin, tzmax;\n\n\t\t\tvar invdirx = 1 / this.direction.x,\n\t\t\t\tinvdiry = 1 / this.direction.y,\n\t\t\t\tinvdirz = 1 / this.direction.z;\n\n\t\t\tvar origin = this.origin;\n\n\t\t\tif ( invdirx >= 0 ) {\n\n\t\t\t\ttmin = ( box.min.x - origin.x ) * invdirx;\n\t\t\t\ttmax = ( box.max.x - origin.x ) * invdirx;\n\n\t\t\t} else {\n\n\t\t\t\ttmin = ( box.max.x - origin.x ) * invdirx;\n\t\t\t\ttmax = ( box.min.x - origin.x ) * invdirx;\n\n\t\t\t}\n\n\t\t\tif ( invdiry >= 0 ) {\n\n\t\t\t\ttymin = ( box.min.y - origin.y ) * invdiry;\n\t\t\t\ttymax = ( box.max.y - origin.y ) * invdiry;\n\n\t\t\t} else {\n\n\t\t\t\ttymin = ( box.max.y - origin.y ) * invdiry;\n\t\t\t\ttymax = ( box.min.y - origin.y ) * invdiry;\n\n\t\t\t}\n\n\t\t\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) { return null; }\n\n\t\t\t// These lines also handle the case where tmin or tmax is NaN\n\t\t\t// (result of 0 * Infinity). x !== x returns true if x is NaN\n\n\t\t\tif ( tymin > tmin || tmin !== tmin ) { tmin = tymin; }\n\n\t\t\tif ( tymax < tmax || tmax !== tmax ) { tmax = tymax; }\n\n\t\t\tif ( invdirz >= 0 ) {\n\n\t\t\t\ttzmin = ( box.min.z - origin.z ) * invdirz;\n\t\t\t\ttzmax = ( box.max.z - origin.z ) * invdirz;\n\n\t\t\t} else {\n\n\t\t\t\ttzmin = ( box.max.z - origin.z ) * invdirz;\n\t\t\t\ttzmax = ( box.min.z - origin.z ) * invdirz;\n\n\t\t\t}\n\n\t\t\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) { return null; }\n\n\t\t\tif ( tzmin > tmin || tmin !== tmin ) { tmin = tzmin; }\n\n\t\t\tif ( tzmax < tmax || tmax !== tmax ) { tmax = tzmax; }\n\n\t\t\t//return point closest to the ray (positive side)\n\n\t\t\tif ( tmax < 0 ) { return null; }\n\n\t\t\treturn this.at( tmin >= 0 ? tmin : tmax, target );\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\treturn this.intersectBox( box, _vector$2 ) !== null;\n\n\t\t},\n\n\t\tintersectTriangle: function ( a, b, c, backfaceCulling, target ) {\n\n\t\t\t// Compute the offset origin, edges, and normal.\n\n\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n\n\t\t\t_edge1.subVectors( b, a );\n\t\t\t_edge2.subVectors( c, a );\n\t\t\t_normal.crossVectors( _edge1, _edge2 );\n\n\t\t\t// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n\t\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n\t\t\t//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n\t\t\t//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n\t\t\t//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n\t\t\tvar DdN = this.direction.dot( _normal );\n\t\t\tvar sign;\n\n\t\t\tif ( DdN > 0 ) {\n\n\t\t\t\tif ( backfaceCulling ) { return null; }\n\t\t\t\tsign = 1;\n\n\t\t\t} else if ( DdN < 0 ) {\n\n\t\t\t\tsign = - 1;\n\t\t\t\tDdN = - DdN;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t_diff.subVectors( this.origin, a );\n\t\t\tvar DdQxE2 = sign * this.direction.dot( _edge2.crossVectors( _diff, _edge2 ) );\n\n\t\t\t// b1 < 0, no intersection\n\t\t\tif ( DdQxE2 < 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar DdE1xQ = sign * this.direction.dot( _edge1.cross( _diff ) );\n\n\t\t\t// b2 < 0, no intersection\n\t\t\tif ( DdE1xQ < 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t// b1+b2 > 1, no intersection\n\t\t\tif ( DdQxE2 + DdE1xQ > DdN ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t// Line intersects triangle, check if ray does.\n\t\t\tvar QdN = - sign * _diff.dot( _normal );\n\n\t\t\t// t < 0, no intersection\n\t\t\tif ( QdN < 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t// Ray intersects triangle.\n\t\t\treturn this.at( QdN / DdN, target );\n\n\t\t},\n\n\t\tapplyMatrix4: function ( matrix4 ) {\n\n\t\t\tthis.origin.applyMatrix4( matrix4 );\n\t\t\tthis.direction.transformDirection( matrix4 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( ray ) {\n\n\t\t\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t */\n\n\tvar _vector1 = new Vector3();\n\tvar _vector2 = new Vector3();\n\tvar _normalMatrix = new Matrix3();\n\n\tfunction Plane( normal, constant ) {\n\n\t\t// normal is assumed to be normalized\n\n\t\tthis.normal = ( normal !== undefined ) ? normal : new Vector3( 1, 0, 0 );\n\t\tthis.constant = ( constant !== undefined ) ? constant : 0;\n\n\t}\n\n\tObject.assign( Plane.prototype, {\n\n\t\tisPlane: true,\n\n\t\tset: function ( normal, constant ) {\n\n\t\t\tthis.normal.copy( normal );\n\t\t\tthis.constant = constant;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetComponents: function ( x, y, z, w ) {\n\n\t\t\tthis.normal.set( x, y, z );\n\t\t\tthis.constant = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromNormalAndCoplanarPoint: function ( normal, point ) {\n\n\t\t\tthis.normal.copy( normal );\n\t\t\tthis.constant = - point.dot( this.normal );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromCoplanarPoints: function ( a, b, c ) {\n\n\t\t\tvar normal = _vector1.subVectors( c, b ).cross( _vector2.subVectors( a, b ) ).normalize();\n\n\t\t\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\n\t\t\tthis.setFromNormalAndCoplanarPoint( normal, a );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( plane ) {\n\n\t\t\tthis.normal.copy( plane.normal );\n\t\t\tthis.constant = plane.constant;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\t// Note: will lead to a divide by zero if the plane is invalid.\n\n\t\t\tvar inverseNormalLength = 1.0 / this.normal.length();\n\t\t\tthis.normal.multiplyScalar( inverseNormalLength );\n\t\t\tthis.constant *= inverseNormalLength;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnegate: function () {\n\n\t\t\tthis.constant *= - 1;\n\t\t\tthis.normal.negate();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdistanceToPoint: function ( point ) {\n\n\t\t\treturn this.normal.dot( point ) + this.constant;\n\n\t\t},\n\n\t\tdistanceToSphere: function ( sphere ) {\n\n\t\t\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\n\n\t\t},\n\n\t\tprojectPoint: function ( point, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Plane: .projectPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.copy( this.normal ).multiplyScalar( - this.distanceToPoint( point ) ).add( point );\n\n\t\t},\n\n\t\tintersectLine: function ( line, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Plane: .intersectLine() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tvar direction = line.delta( _vector1 );\n\n\t\t\tvar denominator = this.normal.dot( direction );\n\n\t\t\tif ( denominator === 0 ) {\n\n\t\t\t\t// line is coplanar, return origin\n\t\t\t\tif ( this.distanceToPoint( line.start ) === 0 ) {\n\n\t\t\t\t\treturn target.copy( line.start );\n\n\t\t\t\t}\n\n\t\t\t\t// Unsure if this is the correct method to handle this case.\n\t\t\t\treturn undefined;\n\n\t\t\t}\n\n\t\t\tvar t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;\n\n\t\t\tif ( t < 0 || t > 1 ) {\n\n\t\t\t\treturn undefined;\n\n\t\t\t}\n\n\t\t\treturn target.copy( direction ).multiplyScalar( t ).add( line.start );\n\n\t\t},\n\n\t\tintersectsLine: function ( line ) {\n\n\t\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n\n\t\t\tvar startSign = this.distanceToPoint( line.start );\n\t\t\tvar endSign = this.distanceToPoint( line.end );\n\n\t\t\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\treturn box.intersectsPlane( this );\n\n\t\t},\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\treturn sphere.intersectsPlane( this );\n\n\t\t},\n\n\t\tcoplanarPoint: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Plane: .coplanarPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.copy( this.normal ).multiplyScalar( - this.constant );\n\n\t\t},\n\n\t\tapplyMatrix4: function ( matrix, optionalNormalMatrix ) {\n\n\t\t\tvar normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix( matrix );\n\n\t\t\tvar referencePoint = this.coplanarPoint( _vector1 ).applyMatrix4( matrix );\n\n\t\t\tvar normal = this.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\tthis.constant = - referencePoint.dot( normal );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( offset ) {\n\n\t\t\tthis.constant -= offset.dot( this.normal );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( plane ) {\n\n\t\t\treturn plane.normal.equals( this.normal ) && ( plane.constant === this.constant );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _v0$1 = new Vector3();\n\tvar _v1$3 = new Vector3();\n\tvar _v2$1 = new Vector3();\n\tvar _v3 = new Vector3();\n\n\tvar _vab = new Vector3();\n\tvar _vac = new Vector3();\n\tvar _vbc = new Vector3();\n\tvar _vap = new Vector3();\n\tvar _vbp = new Vector3();\n\tvar _vcp = new Vector3();\n\n\tfunction Triangle( a, b, c ) {\n\n\t\tthis.a = ( a !== undefined ) ? a : new Vector3();\n\t\tthis.b = ( b !== undefined ) ? b : new Vector3();\n\t\tthis.c = ( c !== undefined ) ? c : new Vector3();\n\n\t}\n\n\tObject.assign( Triangle, {\n\n\t\tgetNormal: function ( a, b, c, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Triangle: .getNormal() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\ttarget.subVectors( c, b );\n\t\t\t_v0$1.subVectors( a, b );\n\t\t\ttarget.cross( _v0$1 );\n\n\t\t\tvar targetLengthSq = target.lengthSq();\n\t\t\tif ( targetLengthSq > 0 ) {\n\n\t\t\t\treturn target.multiplyScalar( 1 / Math.sqrt( targetLengthSq ) );\n\n\t\t\t}\n\n\t\t\treturn target.set( 0, 0, 0 );\n\n\t\t},\n\n\t\t// static/instance method to calculate barycentric coordinates\n\t\t// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n\t\tgetBarycoord: function ( point, a, b, c, target ) {\n\n\t\t\t_v0$1.subVectors( c, a );\n\t\t\t_v1$3.subVectors( b, a );\n\t\t\t_v2$1.subVectors( point, a );\n\n\t\t\tvar dot00 = _v0$1.dot( _v0$1 );\n\t\t\tvar dot01 = _v0$1.dot( _v1$3 );\n\t\t\tvar dot02 = _v0$1.dot( _v2$1 );\n\t\t\tvar dot11 = _v1$3.dot( _v1$3 );\n\t\t\tvar dot12 = _v1$3.dot( _v2$1 );\n\n\t\t\tvar denom = ( dot00 * dot11 - dot01 * dot01 );\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Triangle: .getBarycoord() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\t// collinear or singular triangle\n\t\t\tif ( denom === 0 ) {\n\n\t\t\t\t// arbitrary location outside of triangle?\n\t\t\t\t// not sure if this is the best idea, maybe should be returning undefined\n\t\t\t\treturn target.set( - 2, - 1, - 1 );\n\n\t\t\t}\n\n\t\t\tvar invDenom = 1 / denom;\n\t\t\tvar u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\n\t\t\tvar v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\n\n\t\t\t// barycentric coordinates must always sum to 1\n\t\t\treturn target.set( 1 - u - v, v, u );\n\n\t\t},\n\n\t\tcontainsPoint: function ( point, a, b, c ) {\n\n\t\t\tTriangle.getBarycoord( point, a, b, c, _v3 );\n\n\t\t\treturn ( _v3.x >= 0 ) && ( _v3.y >= 0 ) && ( ( _v3.x + _v3.y ) <= 1 );\n\n\t\t},\n\n\t\tgetUV: function ( point, p1, p2, p3, uv1, uv2, uv3, target ) {\n\n\t\t\tthis.getBarycoord( point, p1, p2, p3, _v3 );\n\n\t\t\ttarget.set( 0, 0 );\n\t\t\ttarget.addScaledVector( uv1, _v3.x );\n\t\t\ttarget.addScaledVector( uv2, _v3.y );\n\t\t\ttarget.addScaledVector( uv3, _v3.z );\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tisFrontFacing: function ( a, b, c, direction ) {\n\n\t\t\t_v0$1.subVectors( c, b );\n\t\t\t_v1$3.subVectors( a, b );\n\n\t\t\t// strictly front facing\n\t\t\treturn ( _v0$1.cross( _v1$3 ).dot( direction ) < 0 ) ? true : false;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Triangle.prototype, {\n\n\t\tset: function ( a, b, c ) {\n\n\t\t\tthis.a.copy( a );\n\t\t\tthis.b.copy( b );\n\t\t\tthis.c.copy( c );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPointsAndIndices: function ( points, i0, i1, i2 ) {\n\n\t\t\tthis.a.copy( points[ i0 ] );\n\t\t\tthis.b.copy( points[ i1 ] );\n\t\t\tthis.c.copy( points[ i2 ] );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( triangle ) {\n\n\t\t\tthis.a.copy( triangle.a );\n\t\t\tthis.b.copy( triangle.b );\n\t\t\tthis.c.copy( triangle.c );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetArea: function () {\n\n\t\t\t_v0$1.subVectors( this.c, this.b );\n\t\t\t_v1$3.subVectors( this.a, this.b );\n\n\t\t\treturn _v0$1.cross( _v1$3 ).length() * 0.5;\n\n\t\t},\n\n\t\tgetMidpoint: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Triangle: .getMidpoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\n\n\t\t},\n\n\t\tgetNormal: function ( target ) {\n\n\t\t\treturn Triangle.getNormal( this.a, this.b, this.c, target );\n\n\t\t},\n\n\t\tgetPlane: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Triangle: .getPlane() target is now required' );\n\t\t\t\ttarget = new Plane();\n\n\t\t\t}\n\n\t\t\treturn target.setFromCoplanarPoints( this.a, this.b, this.c );\n\n\t\t},\n\n\t\tgetBarycoord: function ( point, target ) {\n\n\t\t\treturn Triangle.getBarycoord( point, this.a, this.b, this.c, target );\n\n\t\t},\n\n\t\tgetUV: function ( point, uv1, uv2, uv3, target ) {\n\n\t\t\treturn Triangle.getUV( point, this.a, this.b, this.c, uv1, uv2, uv3, target );\n\n\t\t},\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\treturn Triangle.containsPoint( point, this.a, this.b, this.c );\n\n\t\t},\n\n\t\tisFrontFacing: function ( direction ) {\n\n\t\t\treturn Triangle.isFrontFacing( this.a, this.b, this.c, direction );\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\treturn box.intersectsTriangle( this );\n\n\t\t},\n\n\t\tclosestPointToPoint: function ( p, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Triangle: .closestPointToPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tvar a = this.a, b = this.b, c = this.c;\n\t\t\tvar v, w;\n\n\t\t\t// algorithm thanks to Real-Time Collision Detection by Christer Ericson,\n\t\t\t// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,\n\t\t\t// under the accompanying license; see chapter 5.1.5 for detailed explanation.\n\t\t\t// basically, we're distinguishing which of the voronoi regions of the triangle\n\t\t\t// the point lies in with the minimum amount of redundant computation.\n\n\t\t\t_vab.subVectors( b, a );\n\t\t\t_vac.subVectors( c, a );\n\t\t\t_vap.subVectors( p, a );\n\t\t\tvar d1 = _vab.dot( _vap );\n\t\t\tvar d2 = _vac.dot( _vap );\n\t\t\tif ( d1 <= 0 && d2 <= 0 ) {\n\n\t\t\t\t// vertex region of A; barycentric coords (1, 0, 0)\n\t\t\t\treturn target.copy( a );\n\n\t\t\t}\n\n\t\t\t_vbp.subVectors( p, b );\n\t\t\tvar d3 = _vab.dot( _vbp );\n\t\t\tvar d4 = _vac.dot( _vbp );\n\t\t\tif ( d3 >= 0 && d4 <= d3 ) {\n\n\t\t\t\t// vertex region of B; barycentric coords (0, 1, 0)\n\t\t\t\treturn target.copy( b );\n\n\t\t\t}\n\n\t\t\tvar vc = d1 * d4 - d3 * d2;\n\t\t\tif ( vc <= 0 && d1 >= 0 && d3 <= 0 ) {\n\n\t\t\t\tv = d1 / ( d1 - d3 );\n\t\t\t\t// edge region of AB; barycentric coords (1-v, v, 0)\n\t\t\t\treturn target.copy( a ).addScaledVector( _vab, v );\n\n\t\t\t}\n\n\t\t\t_vcp.subVectors( p, c );\n\t\t\tvar d5 = _vab.dot( _vcp );\n\t\t\tvar d6 = _vac.dot( _vcp );\n\t\t\tif ( d6 >= 0 && d5 <= d6 ) {\n\n\t\t\t\t// vertex region of C; barycentric coords (0, 0, 1)\n\t\t\t\treturn target.copy( c );\n\n\t\t\t}\n\n\t\t\tvar vb = d5 * d2 - d1 * d6;\n\t\t\tif ( vb <= 0 && d2 >= 0 && d6 <= 0 ) {\n\n\t\t\t\tw = d2 / ( d2 - d6 );\n\t\t\t\t// edge region of AC; barycentric coords (1-w, 0, w)\n\t\t\t\treturn target.copy( a ).addScaledVector( _vac, w );\n\n\t\t\t}\n\n\t\t\tvar va = d3 * d6 - d5 * d4;\n\t\t\tif ( va <= 0 && ( d4 - d3 ) >= 0 && ( d5 - d6 ) >= 0 ) {\n\n\t\t\t\t_vbc.subVectors( c, b );\n\t\t\t\tw = ( d4 - d3 ) / ( ( d4 - d3 ) + ( d5 - d6 ) );\n\t\t\t\t// edge region of BC; barycentric coords (0, 1-w, w)\n\t\t\t\treturn target.copy( b ).addScaledVector( _vbc, w ); // edge region of BC\n\n\t\t\t}\n\n\t\t\t// face region\n\t\t\tvar denom = 1 / ( va + vb + vc );\n\t\t\t// u = va * denom\n\t\t\tv = vb * denom;\n\t\t\tw = vc * denom;\n\n\t\t\treturn target.copy( a ).addScaledVector( _vab, v ).addScaledVector( _vac, w );\n\n\t\t},\n\n\t\tequals: function ( triangle ) {\n\n\t\t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _colorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,\n\t\t'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,\n\t\t'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,\n\t\t'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,\n\t\t'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,\n\t\t'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,\n\t\t'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,\n\t\t'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,\n\t\t'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,\n\t\t'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,\n\t\t'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,\n\t\t'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,\n\t\t'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,\n\t\t'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,\n\t\t'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,\n\t\t'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,\n\t\t'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,\n\t\t'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,\n\t\t'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,\n\t\t'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'rebeccapurple': 0x663399, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,\n\t\t'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,\n\t\t'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,\n\t\t'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,\n\t\t'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };\n\n\tvar _hslA = { h: 0, s: 0, l: 0 };\n\tvar _hslB = { h: 0, s: 0, l: 0 };\n\n\tfunction Color( r, g, b ) {\n\n\t\tif ( g === undefined && b === undefined ) {\n\n\t\t\t// r is THREE.Color, hex or string\n\t\t\treturn this.set( r );\n\n\t\t}\n\n\t\treturn this.setRGB( r, g, b );\n\n\t}\n\n\tfunction hue2rgb( p, q, t ) {\n\n\t\tif ( t < 0 ) { t += 1; }\n\t\tif ( t > 1 ) { t -= 1; }\n\t\tif ( t < 1 / 6 ) { return p + ( q - p ) * 6 * t; }\n\t\tif ( t < 1 / 2 ) { return q; }\n\t\tif ( t < 2 / 3 ) { return p + ( q - p ) * 6 * ( 2 / 3 - t ); }\n\t\treturn p;\n\n\t}\n\n\tfunction SRGBToLinear( c ) {\n\n\t\treturn ( c < 0.04045 ) ? c * 0.0773993808 : Math.pow( c * 0.9478672986 + 0.0521327014, 2.4 );\n\n\t}\n\n\tfunction LinearToSRGB( c ) {\n\n\t\treturn ( c < 0.0031308 ) ? c * 12.92 : 1.055 * ( Math.pow( c, 0.41666 ) ) - 0.055;\n\n\t}\n\n\tObject.assign( Color.prototype, {\n\n\t\tisColor: true,\n\n\t\tr: 1, g: 1, b: 1,\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value && value.isColor ) {\n\n\t\t\t\tthis.copy( value );\n\n\t\t\t} else if ( typeof value === 'number' ) {\n\n\t\t\t\tthis.setHex( value );\n\n\t\t\t} else if ( typeof value === 'string' ) {\n\n\t\t\t\tthis.setStyle( value );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetScalar: function ( scalar ) {\n\n\t\t\tthis.r = scalar;\n\t\t\tthis.g = scalar;\n\t\t\tthis.b = scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetHex: function ( hex ) {\n\n\t\t\thex = Math.floor( hex );\n\n\t\t\tthis.r = ( hex >> 16 & 255 ) / 255;\n\t\t\tthis.g = ( hex >> 8 & 255 ) / 255;\n\t\t\tthis.b = ( hex & 255 ) / 255;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetRGB: function ( r, g, b ) {\n\n\t\t\tthis.r = r;\n\t\t\tthis.g = g;\n\t\t\tthis.b = b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetHSL: function ( h, s, l ) {\n\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\n\t\t\th = MathUtils.euclideanModulo( h, 1 );\n\t\t\ts = MathUtils.clamp( s, 0, 1 );\n\t\t\tl = MathUtils.clamp( l, 0, 1 );\n\n\t\t\tif ( s === 0 ) {\n\n\t\t\t\tthis.r = this.g = this.b = l;\n\n\t\t\t} else {\n\n\t\t\t\tvar p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );\n\t\t\t\tvar q = ( 2 * l ) - p;\n\n\t\t\t\tthis.r = hue2rgb( q, p, h + 1 / 3 );\n\t\t\t\tthis.g = hue2rgb( q, p, h );\n\t\t\t\tthis.b = hue2rgb( q, p, h - 1 / 3 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetStyle: function ( style ) {\n\n\t\t\tfunction handleAlpha( string ) {\n\n\t\t\t\tif ( string === undefined ) { return; }\n\n\t\t\t\tif ( parseFloat( string ) < 1 ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\tvar m;\n\n\t\t\tif ( m = /^((?:rgb|hsl)a?)\\(\\s*([^\\)]*)\\)/.exec( style ) ) {\n\n\t\t\t\t// rgb / hsl\n\n\t\t\t\tvar color;\n\t\t\t\tvar name = m[ 1 ];\n\t\t\t\tvar components = m[ 2 ];\n\n\t\t\t\tswitch ( name ) {\n\n\t\t\t\t\tcase 'rgb':\n\t\t\t\t\tcase 'rgba':\n\n\t\t\t\t\t\tif ( color = /^(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\n\t\t\t\t\t\t\tthis.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;\n\t\t\t\t\t\t\tthis.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;\n\t\t\t\t\t\t\tthis.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;\n\n\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\t\treturn this;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( color = /^(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n\t\t\t\t\t\t\tthis.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;\n\t\t\t\t\t\t\tthis.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;\n\t\t\t\t\t\t\tthis.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;\n\n\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\t\treturn this;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'hsl':\n\t\t\t\t\tcase 'hsla':\n\n\t\t\t\t\t\tif ( color = /^([0-9]*\\.?[0-9]+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n\t\t\t\t\t\t\tvar h = parseFloat( color[ 1 ] ) / 360;\n\t\t\t\t\t\t\tvar s = parseInt( color[ 2 ], 10 ) / 100;\n\t\t\t\t\t\t\tvar l = parseInt( color[ 3 ], 10 ) / 100;\n\n\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\t\treturn this.setHSL( h, s, l );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t} else if ( m = /^\\#([A-Fa-f0-9]+)$/.exec( style ) ) {\n\n\t\t\t\t// hex color\n\n\t\t\t\tvar hex = m[ 1 ];\n\t\t\t\tvar size = hex.length;\n\n\t\t\t\tif ( size === 3 ) {\n\n\t\t\t\t\t// #ff0\n\t\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;\n\t\t\t\t\tthis.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;\n\t\t\t\t\tthis.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t} else if ( size === 6 ) {\n\n\t\t\t\t\t// #ff0000\n\t\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;\n\t\t\t\t\tthis.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;\n\t\t\t\t\tthis.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( style && style.length > 0 ) {\n\n\t\t\t\treturn this.setColorName( style );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetColorName: function ( style ) {\n\n\t\t\t// color keywords\n\t\t\tvar hex = _colorKeywords[ style ];\n\n\t\t\tif ( hex !== undefined ) {\n\n\t\t\t\t// red\n\t\t\t\tthis.setHex( hex );\n\n\t\t\t} else {\n\n\t\t\t\t// unknown color\n\t\t\t\tconsole.warn( 'THREE.Color: Unknown color ' + style );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.r, this.g, this.b );\n\n\t\t},\n\n\t\tcopy: function ( color ) {\n\n\t\t\tthis.r = color.r;\n\t\t\tthis.g = color.g;\n\t\t\tthis.b = color.b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyGammaToLinear: function ( color, gammaFactor ) {\n\n\t\t\tif ( gammaFactor === undefined ) { gammaFactor = 2.0; }\n\n\t\t\tthis.r = Math.pow( color.r, gammaFactor );\n\t\t\tthis.g = Math.pow( color.g, gammaFactor );\n\t\t\tthis.b = Math.pow( color.b, gammaFactor );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyLinearToGamma: function ( color, gammaFactor ) {\n\n\t\t\tif ( gammaFactor === undefined ) { gammaFactor = 2.0; }\n\n\t\t\tvar safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;\n\n\t\t\tthis.r = Math.pow( color.r, safeInverse );\n\t\t\tthis.g = Math.pow( color.g, safeInverse );\n\t\t\tthis.b = Math.pow( color.b, safeInverse );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tconvertGammaToLinear: function ( gammaFactor ) {\n\n\t\t\tthis.copyGammaToLinear( this, gammaFactor );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tconvertLinearToGamma: function ( gammaFactor ) {\n\n\t\t\tthis.copyLinearToGamma( this, gammaFactor );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopySRGBToLinear: function ( color ) {\n\n\t\t\tthis.r = SRGBToLinear( color.r );\n\t\t\tthis.g = SRGBToLinear( color.g );\n\t\t\tthis.b = SRGBToLinear( color.b );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyLinearToSRGB: function ( color ) {\n\n\t\t\tthis.r = LinearToSRGB( color.r );\n\t\t\tthis.g = LinearToSRGB( color.g );\n\t\t\tthis.b = LinearToSRGB( color.b );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tconvertSRGBToLinear: function () {\n\n\t\t\tthis.copySRGBToLinear( this );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tconvertLinearToSRGB: function () {\n\n\t\t\tthis.copyLinearToSRGB( this );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetHex: function () {\n\n\t\t\treturn ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;\n\n\t\t},\n\n\t\tgetHexString: function () {\n\n\t\t\treturn ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );\n\n\t\t},\n\n\t\tgetHSL: function ( target ) {\n\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Color: .getHSL() target is now required' );\n\t\t\t\ttarget = { h: 0, s: 0, l: 0 };\n\n\t\t\t}\n\n\t\t\tvar r = this.r, g = this.g, b = this.b;\n\n\t\t\tvar max = Math.max( r, g, b );\n\t\t\tvar min = Math.min( r, g, b );\n\n\t\t\tvar hue, saturation;\n\t\t\tvar lightness = ( min + max ) / 2.0;\n\n\t\t\tif ( min === max ) {\n\n\t\t\t\thue = 0;\n\t\t\t\tsaturation = 0;\n\n\t\t\t} else {\n\n\t\t\t\tvar delta = max - min;\n\n\t\t\t\tsaturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );\n\n\t\t\t\tswitch ( max ) {\n\n\t\t\t\t\tcase r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;\n\t\t\t\t\tcase g: hue = ( b - r ) / delta + 2; break;\n\t\t\t\t\tcase b: hue = ( r - g ) / delta + 4; break;\n\n\t\t\t\t}\n\n\t\t\t\thue /= 6;\n\n\t\t\t}\n\n\t\t\ttarget.h = hue;\n\t\t\ttarget.s = saturation;\n\t\t\ttarget.l = lightness;\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tgetStyle: function () {\n\n\t\t\treturn 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';\n\n\t\t},\n\n\t\toffsetHSL: function ( h, s, l ) {\n\n\t\t\tthis.getHSL( _hslA );\n\n\t\t\t_hslA.h += h; _hslA.s += s; _hslA.l += l;\n\n\t\t\tthis.setHSL( _hslA.h, _hslA.s, _hslA.l );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tadd: function ( color ) {\n\n\t\t\tthis.r += color.r;\n\t\t\tthis.g += color.g;\n\t\t\tthis.b += color.b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddColors: function ( color1, color2 ) {\n\n\t\t\tthis.r = color1.r + color2.r;\n\t\t\tthis.g = color1.g + color2.g;\n\t\t\tthis.b = color1.b + color2.b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScalar: function ( s ) {\n\n\t\t\tthis.r += s;\n\t\t\tthis.g += s;\n\t\t\tthis.b += s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsub: function ( color ) {\n\n\t\t\tthis.r = Math.max( 0, this.r - color.r );\n\t\t\tthis.g = Math.max( 0, this.g - color.g );\n\t\t\tthis.b = Math.max( 0, this.b - color.b );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( color ) {\n\n\t\t\tthis.r *= color.r;\n\t\t\tthis.g *= color.g;\n\t\t\tthis.b *= color.b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( s ) {\n\n\t\t\tthis.r *= s;\n\t\t\tthis.g *= s;\n\t\t\tthis.b *= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerp: function ( color, alpha ) {\n\n\t\t\tthis.r += ( color.r - this.r ) * alpha;\n\t\t\tthis.g += ( color.g - this.g ) * alpha;\n\t\t\tthis.b += ( color.b - this.b ) * alpha;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerpHSL: function ( color, alpha ) {\n\n\t\t\tthis.getHSL( _hslA );\n\t\t\tcolor.getHSL( _hslB );\n\n\t\t\tvar h = MathUtils.lerp( _hslA.h, _hslB.h, alpha );\n\t\t\tvar s = MathUtils.lerp( _hslA.s, _hslB.s, alpha );\n\t\t\tvar l = MathUtils.lerp( _hslA.l, _hslB.l, alpha );\n\n\t\t\tthis.setHSL( h, s, l );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( c ) {\n\n\t\t\treturn ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tthis.r = array[ offset ];\n\t\t\tthis.g = array[ offset + 1 ];\n\t\t\tthis.b = array[ offset + 2 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tarray[ offset ] = this.r;\n\t\t\tarray[ offset + 1 ] = this.g;\n\t\t\tarray[ offset + 2 ] = this.b;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\treturn this.getHex();\n\n\t\t}\n\n\t} );\n\n\tColor.NAMES = _colorKeywords;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Face3( a, b, c, normal, color, materialIndex ) {\n\n\t\tthis.a = a;\n\t\tthis.b = b;\n\t\tthis.c = c;\n\n\t\tthis.normal = ( normal && normal.isVector3 ) ? normal : new Vector3();\n\t\tthis.vertexNormals = Array.isArray( normal ) ? normal : [];\n\n\t\tthis.color = ( color && color.isColor ) ? color : new Color();\n\t\tthis.vertexColors = Array.isArray( color ) ? color : [];\n\n\t\tthis.materialIndex = materialIndex !== undefined ? materialIndex : 0;\n\n\t}\n\n\tObject.assign( Face3.prototype, {\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.a = source.a;\n\t\t\tthis.b = source.b;\n\t\t\tthis.c = source.c;\n\n\t\t\tthis.normal.copy( source.normal );\n\t\t\tthis.color.copy( source.color );\n\n\t\t\tthis.materialIndex = source.materialIndex;\n\n\t\t\tfor ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {\n\n\t\t\t\tthis.vertexNormals[ i ] = source.vertexNormals[ i ].clone();\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {\n\n\t\t\t\tthis.vertexColors[ i ] = source.vertexColors[ i ].clone();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tvar materialId = 0;\n\n\tfunction Material() {\n\n\t\tObject.defineProperty( this, 'id', { value: materialId ++ } );\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Material';\n\n\t\tthis.fog = true;\n\n\t\tthis.blending = NormalBlending;\n\t\tthis.side = FrontSide;\n\t\tthis.flatShading = false;\n\t\tthis.vertexTangents = false;\n\t\tthis.vertexColors = NoColors; // THREE.NoColors, THREE.VertexColors, THREE.FaceColors\n\n\t\tthis.opacity = 1;\n\t\tthis.transparent = false;\n\n\t\tthis.blendSrc = SrcAlphaFactor;\n\t\tthis.blendDst = OneMinusSrcAlphaFactor;\n\t\tthis.blendEquation = AddEquation;\n\t\tthis.blendSrcAlpha = null;\n\t\tthis.blendDstAlpha = null;\n\t\tthis.blendEquationAlpha = null;\n\n\t\tthis.depthFunc = LessEqualDepth;\n\t\tthis.depthTest = true;\n\t\tthis.depthWrite = true;\n\n\t\tthis.stencilWriteMask = 0xff;\n\t\tthis.stencilFunc = AlwaysStencilFunc;\n\t\tthis.stencilRef = 0;\n\t\tthis.stencilFuncMask = 0xff;\n\t\tthis.stencilFail = KeepStencilOp;\n\t\tthis.stencilZFail = KeepStencilOp;\n\t\tthis.stencilZPass = KeepStencilOp;\n\t\tthis.stencilWrite = false;\n\n\t\tthis.clippingPlanes = null;\n\t\tthis.clipIntersection = false;\n\t\tthis.clipShadows = false;\n\n\t\tthis.shadowSide = null;\n\n\t\tthis.colorWrite = true;\n\n\t\tthis.precision = null; // override the renderer's default precision for this material\n\n\t\tthis.polygonOffset = false;\n\t\tthis.polygonOffsetFactor = 0;\n\t\tthis.polygonOffsetUnits = 0;\n\n\t\tthis.dithering = false;\n\n\t\tthis.alphaTest = 0;\n\t\tthis.premultipliedAlpha = false;\n\n\t\tthis.visible = true;\n\n\t\tthis.toneMapped = true;\n\n\t\tthis.userData = {};\n\n\t\tthis.version = 0;\n\n\t}\n\n\tMaterial.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: Material,\n\n\t\tisMaterial: true,\n\n\t\tonBeforeCompile: function () {},\n\n\t\tsetValues: function ( values ) {\n\n\t\t\tif ( values === undefined ) { return; }\n\n\t\t\tfor ( var key in values ) {\n\n\t\t\t\tvar newValue = values[ key ];\n\n\t\t\t\tif ( newValue === undefined ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.Material: '\" + key + \"' parameter is undefined.\" );\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\t// for backward compatability if shading is set in the constructor\n\t\t\t\tif ( key === 'shading' ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\n\t\t\t\t\tthis.flatShading = ( newValue === FlatShading ) ? true : false;\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tvar currentValue = this[ key ];\n\n\t\t\t\tif ( currentValue === undefined ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.\" + this.type + \": '\" + key + \"' is not a property of this material.\" );\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tif ( currentValue && currentValue.isColor ) {\n\n\t\t\t\t\tcurrentValue.set( newValue );\n\n\t\t\t\t} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {\n\n\t\t\t\t\tcurrentValue.copy( newValue );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis[ key ] = newValue;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar isRoot = ( meta === undefined || typeof meta === 'string' );\n\n\t\t\tif ( isRoot ) {\n\n\t\t\t\tmeta = {\n\t\t\t\t\ttextures: {},\n\t\t\t\t\timages: {}\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Material',\n\t\t\t\t\tgenerator: 'Material.toJSON'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// standard Material serialization\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\n\t\t\tif ( this.name !== '' ) { data.name = this.name; }\n\n\t\t\tif ( this.color && this.color.isColor ) { data.color = this.color.getHex(); }\n\n\t\t\tif ( this.roughness !== undefined ) { data.roughness = this.roughness; }\n\t\t\tif ( this.metalness !== undefined ) { data.metalness = this.metalness; }\n\n\t\t\tif ( this.sheen && this.sheen.isColor ) { data.sheen = this.sheen.getHex(); }\n\t\t\tif ( this.emissive && this.emissive.isColor ) { data.emissive = this.emissive.getHex(); }\n\t\t\tif ( this.emissiveIntensity && this.emissiveIntensity !== 1 ) { data.emissiveIntensity = this.emissiveIntensity; }\n\n\t\t\tif ( this.specular && this.specular.isColor ) { data.specular = this.specular.getHex(); }\n\t\t\tif ( this.shininess !== undefined ) { data.shininess = this.shininess; }\n\t\t\tif ( this.clearcoat !== undefined ) { data.clearcoat = this.clearcoat; }\n\t\t\tif ( this.clearcoatRoughness !== undefined ) { data.clearcoatRoughness = this.clearcoatRoughness; }\n\n\t\t\tif ( this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture ) {\n\n\t\t\t\tdata.clearcoatNormalMap = this.clearcoatNormalMap.toJSON( meta ).uuid;\n\t\t\t\tdata.clearcoatNormalScale = this.clearcoatNormalScale.toArray();\n\n\t\t\t}\n\n\t\t\tif ( this.map && this.map.isTexture ) { data.map = this.map.toJSON( meta ).uuid; }\n\t\t\tif ( this.matcap && this.matcap.isTexture ) { data.matcap = this.matcap.toJSON( meta ).uuid; }\n\t\t\tif ( this.alphaMap && this.alphaMap.isTexture ) { data.alphaMap = this.alphaMap.toJSON( meta ).uuid; }\n\t\t\tif ( this.lightMap && this.lightMap.isTexture ) { data.lightMap = this.lightMap.toJSON( meta ).uuid; }\n\n\t\t\tif ( this.aoMap && this.aoMap.isTexture ) {\n\n\t\t\t\tdata.aoMap = this.aoMap.toJSON( meta ).uuid;\n\t\t\t\tdata.aoMapIntensity = this.aoMapIntensity;\n\n\t\t\t}\n\n\t\t\tif ( this.bumpMap && this.bumpMap.isTexture ) {\n\n\t\t\t\tdata.bumpMap = this.bumpMap.toJSON( meta ).uuid;\n\t\t\t\tdata.bumpScale = this.bumpScale;\n\n\t\t\t}\n\n\t\t\tif ( this.normalMap && this.normalMap.isTexture ) {\n\n\t\t\t\tdata.normalMap = this.normalMap.toJSON( meta ).uuid;\n\t\t\t\tdata.normalMapType = this.normalMapType;\n\t\t\t\tdata.normalScale = this.normalScale.toArray();\n\n\t\t\t}\n\n\t\t\tif ( this.displacementMap && this.displacementMap.isTexture ) {\n\n\t\t\t\tdata.displacementMap = this.displacementMap.toJSON( meta ).uuid;\n\t\t\t\tdata.displacementScale = this.displacementScale;\n\t\t\t\tdata.displacementBias = this.displacementBias;\n\n\t\t\t}\n\n\t\t\tif ( this.roughnessMap && this.roughnessMap.isTexture ) { data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid; }\n\t\t\tif ( this.metalnessMap && this.metalnessMap.isTexture ) { data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid; }\n\n\t\t\tif ( this.emissiveMap && this.emissiveMap.isTexture ) { data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid; }\n\t\t\tif ( this.specularMap && this.specularMap.isTexture ) { data.specularMap = this.specularMap.toJSON( meta ).uuid; }\n\n\t\t\tif ( this.envMap && this.envMap.isTexture ) {\n\n\t\t\t\tdata.envMap = this.envMap.toJSON( meta ).uuid;\n\t\t\t\tdata.reflectivity = this.reflectivity; // Scale behind envMap\n\t\t\t\tdata.refractionRatio = this.refractionRatio;\n\n\t\t\t\tif ( this.combine !== undefined ) { data.combine = this.combine; }\n\t\t\t\tif ( this.envMapIntensity !== undefined ) { data.envMapIntensity = this.envMapIntensity; }\n\n\t\t\t}\n\n\t\t\tif ( this.gradientMap && this.gradientMap.isTexture ) {\n\n\t\t\t\tdata.gradientMap = this.gradientMap.toJSON( meta ).uuid;\n\n\t\t\t}\n\n\t\t\tif ( this.size !== undefined ) { data.size = this.size; }\n\t\t\tif ( this.sizeAttenuation !== undefined ) { data.sizeAttenuation = this.sizeAttenuation; }\n\n\t\t\tif ( this.blending !== NormalBlending ) { data.blending = this.blending; }\n\t\t\tif ( this.flatShading === true ) { data.flatShading = this.flatShading; }\n\t\t\tif ( this.side !== FrontSide ) { data.side = this.side; }\n\t\t\tif ( this.vertexColors !== NoColors ) { data.vertexColors = this.vertexColors; }\n\n\t\t\tif ( this.opacity < 1 ) { data.opacity = this.opacity; }\n\t\t\tif ( this.transparent === true ) { data.transparent = this.transparent; }\n\n\t\t\tdata.depthFunc = this.depthFunc;\n\t\t\tdata.depthTest = this.depthTest;\n\t\t\tdata.depthWrite = this.depthWrite;\n\n\t\t\tdata.stencilWrite = this.stencilWrite;\n\t\t\tdata.stencilWriteMask = this.stencilWriteMask;\n\t\t\tdata.stencilFunc = this.stencilFunc;\n\t\t\tdata.stencilRef = this.stencilRef;\n\t\t\tdata.stencilFuncMask = this.stencilFuncMask;\n\t\t\tdata.stencilFail = this.stencilFail;\n\t\t\tdata.stencilZFail = this.stencilZFail;\n\t\t\tdata.stencilZPass = this.stencilZPass;\n\n\t\t\t// rotation (SpriteMaterial)\n\t\t\tif ( this.rotation && this.rotation !== 0 ) { data.rotation = this.rotation; }\n\n\t\t\tif ( this.polygonOffset === true ) { data.polygonOffset = true; }\n\t\t\tif ( this.polygonOffsetFactor !== 0 ) { data.polygonOffsetFactor = this.polygonOffsetFactor; }\n\t\t\tif ( this.polygonOffsetUnits !== 0 ) { data.polygonOffsetUnits = this.polygonOffsetUnits; }\n\n\t\t\tif ( this.linewidth && this.linewidth !== 1 ) { data.linewidth = this.linewidth; }\n\t\t\tif ( this.dashSize !== undefined ) { data.dashSize = this.dashSize; }\n\t\t\tif ( this.gapSize !== undefined ) { data.gapSize = this.gapSize; }\n\t\t\tif ( this.scale !== undefined ) { data.scale = this.scale; }\n\n\t\t\tif ( this.dithering === true ) { data.dithering = true; }\n\n\t\t\tif ( this.alphaTest > 0 ) { data.alphaTest = this.alphaTest; }\n\t\t\tif ( this.premultipliedAlpha === true ) { data.premultipliedAlpha = this.premultipliedAlpha; }\n\n\t\t\tif ( this.wireframe === true ) { data.wireframe = this.wireframe; }\n\t\t\tif ( this.wireframeLinewidth > 1 ) { data.wireframeLinewidth = this.wireframeLinewidth; }\n\t\t\tif ( this.wireframeLinecap !== 'round' ) { data.wireframeLinecap = this.wireframeLinecap; }\n\t\t\tif ( this.wireframeLinejoin !== 'round' ) { data.wireframeLinejoin = this.wireframeLinejoin; }\n\n\t\t\tif ( this.morphTargets === true ) { data.morphTargets = true; }\n\t\t\tif ( this.morphNormals === true ) { data.morphNormals = true; }\n\t\t\tif ( this.skinning === true ) { data.skinning = true; }\n\n\t\t\tif ( this.visible === false ) { data.visible = false; }\n\n\t\t\tif ( this.toneMapped === false ) { data.toneMapped = false; }\n\n\t\t\tif ( JSON.stringify( this.userData ) !== '{}' ) { data.userData = this.userData; }\n\n\t\t\t// TODO: Copied from Object3D.toJSON\n\n\t\t\tfunction extractFromCache( cache ) {\n\n\t\t\t\tvar values = [];\n\n\t\t\t\tfor ( var key in cache ) {\n\n\t\t\t\t\tvar data = cache[ key ];\n\t\t\t\t\tdelete data.metadata;\n\t\t\t\t\tvalues.push( data );\n\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\n\t\t\t}\n\n\t\t\tif ( isRoot ) {\n\n\t\t\t\tvar textures = extractFromCache( meta.textures );\n\t\t\t\tvar images = extractFromCache( meta.images );\n\n\t\t\t\tif ( textures.length > 0 ) { data.textures = textures; }\n\t\t\t\tif ( images.length > 0 ) { data.images = images; }\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.name = source.name;\n\n\t\t\tthis.fog = source.fog;\n\n\t\t\tthis.blending = source.blending;\n\t\t\tthis.side = source.side;\n\t\t\tthis.flatShading = source.flatShading;\n\t\t\tthis.vertexTangents = source.vertexTangents;\n\t\t\tthis.vertexColors = source.vertexColors;\n\n\t\t\tthis.opacity = source.opacity;\n\t\t\tthis.transparent = source.transparent;\n\n\t\t\tthis.blendSrc = source.blendSrc;\n\t\t\tthis.blendDst = source.blendDst;\n\t\t\tthis.blendEquation = source.blendEquation;\n\t\t\tthis.blendSrcAlpha = source.blendSrcAlpha;\n\t\t\tthis.blendDstAlpha = source.blendDstAlpha;\n\t\t\tthis.blendEquationAlpha = source.blendEquationAlpha;\n\n\t\t\tthis.depthFunc = source.depthFunc;\n\t\t\tthis.depthTest = source.depthTest;\n\t\t\tthis.depthWrite = source.depthWrite;\n\n\t\t\tthis.stencilWriteMask = source.stencilWriteMask;\n\t\t\tthis.stencilFunc = source.stencilFunc;\n\t\t\tthis.stencilRef = source.stencilRef;\n\t\t\tthis.stencilFuncMask = source.stencilFuncMask;\n\t\t\tthis.stencilFail = source.stencilFail;\n\t\t\tthis.stencilZFail = source.stencilZFail;\n\t\t\tthis.stencilZPass = source.stencilZPass;\n\t\t\tthis.stencilWrite = source.stencilWrite;\n\n\t\t\tvar srcPlanes = source.clippingPlanes,\n\t\t\t\tdstPlanes = null;\n\n\t\t\tif ( srcPlanes !== null ) {\n\n\t\t\t\tvar n = srcPlanes.length;\n\t\t\t\tdstPlanes = new Array( n );\n\n\t\t\t\tfor ( var i = 0; i !== n; ++ i )\n\t\t\t\t\t{ dstPlanes[ i ] = srcPlanes[ i ].clone(); }\n\n\t\t\t}\n\n\t\t\tthis.clippingPlanes = dstPlanes;\n\t\t\tthis.clipIntersection = source.clipIntersection;\n\t\t\tthis.clipShadows = source.clipShadows;\n\n\t\t\tthis.shadowSide = source.shadowSide;\n\n\t\t\tthis.colorWrite = source.colorWrite;\n\n\t\t\tthis.precision = source.precision;\n\n\t\t\tthis.polygonOffset = source.polygonOffset;\n\t\t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\n\t\t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\n\n\t\t\tthis.dithering = source.dithering;\n\n\t\t\tthis.alphaTest = source.alphaTest;\n\t\t\tthis.premultipliedAlpha = source.premultipliedAlpha;\n\n\t\t\tthis.visible = source.visible;\n\n\t\t\tthis.toneMapped = source.toneMapped;\n\n\t\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperty( Material.prototype, 'needsUpdate', {\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value === true ) { this.version ++; }\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  specularMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *  combine: THREE.Multiply,\n\t *  reflectivity: <float>,\n\t *  refractionRatio: <float>,\n\t *\n\t *  depthTest: <bool>,\n\t *  depthWrite: <bool>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>\n\t * }\n\t */\n\n\tfunction MeshBasicMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshBasicMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // emissive\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshBasicMaterial.prototype = Object.create( Material.prototype );\n\tMeshBasicMaterial.prototype.constructor = MeshBasicMaterial;\n\n\tMeshBasicMaterial.prototype.isMeshBasicMaterial = true;\n\n\tMeshBasicMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _vector$3 = new Vector3();\n\n\tfunction BufferAttribute( array, itemSize, normalized ) {\n\n\t\tif ( Array.isArray( array ) ) {\n\n\t\t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\n\n\t\t}\n\n\t\tthis.name = '';\n\n\t\tthis.array = array;\n\t\tthis.itemSize = itemSize;\n\t\tthis.count = array !== undefined ? array.length / itemSize : 0;\n\t\tthis.normalized = normalized === true;\n\n\t\tthis.usage = StaticDrawUsage;\n\t\tthis.updateRange = { offset: 0, count: - 1 };\n\n\t\tthis.version = 0;\n\n\t}\n\n\tObject.defineProperty( BufferAttribute.prototype, 'needsUpdate', {\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value === true ) { this.version ++; }\n\n\t\t}\n\n\t} );\n\n\tObject.assign( BufferAttribute.prototype, {\n\n\t\tisBufferAttribute: true,\n\n\t\tonUploadCallback: function () {},\n\n\t\tsetUsage: function ( value ) {\n\n\t\t\tthis.usage = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.name = source.name;\n\t\t\tthis.array = new source.array.constructor( source.array );\n\t\t\tthis.itemSize = source.itemSize;\n\t\t\tthis.count = source.count;\n\t\t\tthis.normalized = source.normalized;\n\n\t\t\tthis.usage = source.usage;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyAt: function ( index1, attribute, index2 ) {\n\n\t\t\tindex1 *= this.itemSize;\n\t\t\tindex2 *= attribute.itemSize;\n\n\t\t\tfor ( var i = 0, l = this.itemSize; i < l; i ++ ) {\n\n\t\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyArray: function ( array ) {\n\n\t\t\tthis.array.set( array );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyColorsArray: function ( colors ) {\n\n\t\t\tvar array = this.array, offset = 0;\n\n\t\t\tfor ( var i = 0, l = colors.length; i < l; i ++ ) {\n\n\t\t\t\tvar color = colors[ i ];\n\n\t\t\t\tif ( color === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );\n\t\t\t\t\tcolor = new Color();\n\n\t\t\t\t}\n\n\t\t\t\tarray[ offset ++ ] = color.r;\n\t\t\t\tarray[ offset ++ ] = color.g;\n\t\t\t\tarray[ offset ++ ] = color.b;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyVector2sArray: function ( vectors ) {\n\n\t\t\tvar array = this.array, offset = 0;\n\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\t\tvar vector = vectors[ i ];\n\n\t\t\t\tif ( vector === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );\n\t\t\t\t\tvector = new Vector2();\n\n\t\t\t\t}\n\n\t\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\t\tarray[ offset ++ ] = vector.y;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyVector3sArray: function ( vectors ) {\n\n\t\t\tvar array = this.array, offset = 0;\n\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\t\tvar vector = vectors[ i ];\n\n\t\t\t\tif ( vector === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );\n\t\t\t\t\tvector = new Vector3();\n\n\t\t\t\t}\n\n\t\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\t\tarray[ offset ++ ] = vector.y;\n\t\t\t\tarray[ offset ++ ] = vector.z;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyVector4sArray: function ( vectors ) {\n\n\t\t\tvar array = this.array, offset = 0;\n\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\t\tvar vector = vectors[ i ];\n\n\t\t\t\tif ( vector === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );\n\t\t\t\t\tvector = new Vector4();\n\n\t\t\t\t}\n\n\t\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\t\tarray[ offset ++ ] = vector.y;\n\t\t\t\tarray[ offset ++ ] = vector.z;\n\t\t\t\tarray[ offset ++ ] = vector.w;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyMatrix3: function ( m ) {\n\n\t\t\tfor ( var i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t\t_vector$3.x = this.getX( i );\n\t\t\t\t_vector$3.y = this.getY( i );\n\t\t\t\t_vector$3.z = this.getZ( i );\n\n\t\t\t\t_vector$3.applyMatrix3( m );\n\n\t\t\t\tthis.setXYZ( i, _vector$3.x, _vector$3.y, _vector$3.z );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyMatrix4: function ( m ) {\n\n\t\t\tfor ( var i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t\t_vector$3.x = this.getX( i );\n\t\t\t\t_vector$3.y = this.getY( i );\n\t\t\t\t_vector$3.z = this.getZ( i );\n\n\t\t\t\t_vector$3.applyMatrix4( m );\n\n\t\t\t\tthis.setXYZ( i, _vector$3.x, _vector$3.y, _vector$3.z );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyNormalMatrix: function ( m ) {\n\n\t\t\tfor ( var i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t\t_vector$3.x = this.getX( i );\n\t\t\t\t_vector$3.y = this.getY( i );\n\t\t\t\t_vector$3.z = this.getZ( i );\n\n\t\t\t\t_vector$3.applyNormalMatrix( m );\n\n\t\t\t\tthis.setXYZ( i, _vector$3.x, _vector$3.y, _vector$3.z );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttransformDirection: function ( m ) {\n\n\t\t\tfor ( var i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t\t_vector$3.x = this.getX( i );\n\t\t\t\t_vector$3.y = this.getY( i );\n\t\t\t\t_vector$3.z = this.getZ( i );\n\n\t\t\t\t_vector$3.transformDirection( m );\n\n\t\t\t\tthis.setXYZ( i, _vector$3.x, _vector$3.y, _vector$3.z );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tset: function ( value, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tthis.array.set( value, offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetX: function ( index ) {\n\n\t\t\treturn this.array[ index * this.itemSize ];\n\n\t\t},\n\n\t\tsetX: function ( index, x ) {\n\n\t\t\tthis.array[ index * this.itemSize ] = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetY: function ( index ) {\n\n\t\t\treturn this.array[ index * this.itemSize + 1 ];\n\n\t\t},\n\n\t\tsetY: function ( index, y ) {\n\n\t\t\tthis.array[ index * this.itemSize + 1 ] = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetZ: function ( index ) {\n\n\t\t\treturn this.array[ index * this.itemSize + 2 ];\n\n\t\t},\n\n\t\tsetZ: function ( index, z ) {\n\n\t\t\tthis.array[ index * this.itemSize + 2 ] = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetW: function ( index ) {\n\n\t\t\treturn this.array[ index * this.itemSize + 3 ];\n\n\t\t},\n\n\t\tsetW: function ( index, w ) {\n\n\t\t\tthis.array[ index * this.itemSize + 3 ] = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXY: function ( index, x, y ) {\n\n\t\t\tindex *= this.itemSize;\n\n\t\t\tthis.array[ index + 0 ] = x;\n\t\t\tthis.array[ index + 1 ] = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXYZ: function ( index, x, y, z ) {\n\n\t\t\tindex *= this.itemSize;\n\n\t\t\tthis.array[ index + 0 ] = x;\n\t\t\tthis.array[ index + 1 ] = y;\n\t\t\tthis.array[ index + 2 ] = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXYZW: function ( index, x, y, z, w ) {\n\n\t\t\tindex *= this.itemSize;\n\n\t\t\tthis.array[ index + 0 ] = x;\n\t\t\tthis.array[ index + 1 ] = y;\n\t\t\tthis.array[ index + 2 ] = z;\n\t\t\tthis.array[ index + 3 ] = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tonUpload: function ( callback ) {\n\n\t\t\tthis.onUploadCallback = callback;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.array, this.itemSize ).copy( this );\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\treturn {\n\t\t\t\titemSize: this.itemSize,\n\t\t\t\ttype: this.array.constructor.name,\n\t\t\t\tarray: Array.prototype.slice.call( this.array ),\n\t\t\t\tnormalized: this.normalized\n\t\t\t};\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tfunction Int8BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Int8Array( array ), itemSize, normalized );\n\n\t}\n\n\tInt8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tInt8BufferAttribute.prototype.constructor = Int8BufferAttribute;\n\n\n\tfunction Uint8BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Uint8Array( array ), itemSize, normalized );\n\n\t}\n\n\tUint8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tUint8BufferAttribute.prototype.constructor = Uint8BufferAttribute;\n\n\n\tfunction Uint8ClampedBufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Uint8ClampedArray( array ), itemSize, normalized );\n\n\t}\n\n\tUint8ClampedBufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tUint8ClampedBufferAttribute.prototype.constructor = Uint8ClampedBufferAttribute;\n\n\n\tfunction Int16BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Int16Array( array ), itemSize, normalized );\n\n\t}\n\n\tInt16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tInt16BufferAttribute.prototype.constructor = Int16BufferAttribute;\n\n\n\tfunction Uint16BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Uint16Array( array ), itemSize, normalized );\n\n\t}\n\n\tUint16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tUint16BufferAttribute.prototype.constructor = Uint16BufferAttribute;\n\n\n\tfunction Int32BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Int32Array( array ), itemSize, normalized );\n\n\t}\n\n\tInt32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tInt32BufferAttribute.prototype.constructor = Int32BufferAttribute;\n\n\n\tfunction Uint32BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Uint32Array( array ), itemSize, normalized );\n\n\t}\n\n\tUint32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tUint32BufferAttribute.prototype.constructor = Uint32BufferAttribute;\n\n\n\tfunction Float32BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Float32Array( array ), itemSize, normalized );\n\n\t}\n\n\tFloat32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tFloat32BufferAttribute.prototype.constructor = Float32BufferAttribute;\n\n\n\tfunction Float64BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Float64Array( array ), itemSize, normalized );\n\n\t}\n\n\tFloat64BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tFloat64BufferAttribute.prototype.constructor = Float64BufferAttribute;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction DirectGeometry() {\n\n\t\tthis.vertices = [];\n\t\tthis.normals = [];\n\t\tthis.colors = [];\n\t\tthis.uvs = [];\n\t\tthis.uvs2 = [];\n\n\t\tthis.groups = [];\n\n\t\tthis.morphTargets = {};\n\n\t\tthis.skinWeights = [];\n\t\tthis.skinIndices = [];\n\n\t\t// this.lineDistances = [];\n\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\t// update flags\n\n\t\tthis.verticesNeedUpdate = false;\n\t\tthis.normalsNeedUpdate = false;\n\t\tthis.colorsNeedUpdate = false;\n\t\tthis.uvsNeedUpdate = false;\n\t\tthis.groupsNeedUpdate = false;\n\n\t}\n\n\tObject.assign( DirectGeometry.prototype, {\n\n\t\tcomputeGroups: function ( geometry ) {\n\n\t\t\tvar group;\n\t\t\tvar groups = [];\n\t\t\tvar materialIndex = undefined;\n\n\t\t\tvar faces = geometry.faces;\n\n\t\t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\t// materials\n\n\t\t\t\tif ( face.materialIndex !== materialIndex ) {\n\n\t\t\t\t\tmaterialIndex = face.materialIndex;\n\n\t\t\t\t\tif ( group !== undefined ) {\n\n\t\t\t\t\t\tgroup.count = ( i * 3 ) - group.start;\n\t\t\t\t\t\tgroups.push( group );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgroup = {\n\t\t\t\t\t\tstart: i * 3,\n\t\t\t\t\t\tmaterialIndex: materialIndex\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( group !== undefined ) {\n\n\t\t\t\tgroup.count = ( i * 3 ) - group.start;\n\t\t\t\tgroups.push( group );\n\n\t\t\t}\n\n\t\t\tthis.groups = groups;\n\n\t\t},\n\n\t\tfromGeometry: function ( geometry ) {\n\n\t\t\tvar faces = geometry.faces;\n\t\t\tvar vertices = geometry.vertices;\n\t\t\tvar faceVertexUvs = geometry.faceVertexUvs;\n\n\t\t\tvar hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;\n\t\t\tvar hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;\n\n\t\t\t// morphs\n\n\t\t\tvar morphTargets = geometry.morphTargets;\n\t\t\tvar morphTargetsLength = morphTargets.length;\n\n\t\t\tvar morphTargetsPosition;\n\n\t\t\tif ( morphTargetsLength > 0 ) {\n\n\t\t\t\tmorphTargetsPosition = [];\n\n\t\t\t\tfor ( var i = 0; i < morphTargetsLength; i ++ ) {\n\n\t\t\t\t\tmorphTargetsPosition[ i ] = {\n\t\t\t\t\t\tname: morphTargets[ i ].name,\n\t\t\t\t\t \tdata: []\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphTargets.position = morphTargetsPosition;\n\n\t\t\t}\n\n\t\t\tvar morphNormals = geometry.morphNormals;\n\t\t\tvar morphNormalsLength = morphNormals.length;\n\n\t\t\tvar morphTargetsNormal;\n\n\t\t\tif ( morphNormalsLength > 0 ) {\n\n\t\t\t\tmorphTargetsNormal = [];\n\n\t\t\t\tfor ( var i = 0; i < morphNormalsLength; i ++ ) {\n\n\t\t\t\t\tmorphTargetsNormal[ i ] = {\n\t\t\t\t\t\tname: morphNormals[ i ].name,\n\t\t\t\t\t \tdata: []\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphTargets.normal = morphTargetsNormal;\n\n\t\t\t}\n\n\t\t\t// skins\n\n\t\t\tvar skinIndices = geometry.skinIndices;\n\t\t\tvar skinWeights = geometry.skinWeights;\n\n\t\t\tvar hasSkinIndices = skinIndices.length === vertices.length;\n\t\t\tvar hasSkinWeights = skinWeights.length === vertices.length;\n\n\t\t\t//\n\n\t\t\tif ( vertices.length > 0 && faces.length === 0 ) {\n\n\t\t\t\tconsole.error( 'THREE.DirectGeometry: Faceless geometries are not supported.' );\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\tthis.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );\n\n\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\t\tthis.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar normal = face.normal;\n\n\t\t\t\t\tthis.normals.push( normal, normal, normal );\n\n\t\t\t\t}\n\n\t\t\t\tvar vertexColors = face.vertexColors;\n\n\t\t\t\tif ( vertexColors.length === 3 ) {\n\n\t\t\t\t\tthis.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar color = face.color;\n\n\t\t\t\t\tthis.colors.push( color, color, color );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceVertexUv === true ) {\n\n\t\t\t\t\tvar vertexUvs = faceVertexUvs[ 0 ][ i ];\n\n\t\t\t\t\tif ( vertexUvs !== undefined ) {\n\n\t\t\t\t\t\tthis.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );\n\n\t\t\t\t\t\tthis.uvs.push( new Vector2(), new Vector2(), new Vector2() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceVertexUv2 === true ) {\n\n\t\t\t\t\tvar vertexUvs = faceVertexUvs[ 1 ][ i ];\n\n\t\t\t\t\tif ( vertexUvs !== undefined ) {\n\n\t\t\t\t\t\tthis.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );\n\n\t\t\t\t\t\tthis.uvs2.push( new Vector2(), new Vector2(), new Vector2() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// morphs\n\n\t\t\t\tfor ( var j = 0; j < morphTargetsLength; j ++ ) {\n\n\t\t\t\t\tvar morphTarget = morphTargets[ j ].vertices;\n\n\t\t\t\t\tmorphTargetsPosition[ j ].data.push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var j = 0; j < morphNormalsLength; j ++ ) {\n\n\t\t\t\t\tvar morphNormal = morphNormals[ j ].vertexNormals[ i ];\n\n\t\t\t\t\tmorphTargetsNormal[ j ].data.push( morphNormal.a, morphNormal.b, morphNormal.c );\n\n\t\t\t\t}\n\n\t\t\t\t// skins\n\n\t\t\t\tif ( hasSkinIndices ) {\n\n\t\t\t\t\tthis.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasSkinWeights ) {\n\n\t\t\t\t\tthis.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.computeGroups( geometry );\n\n\t\t\tthis.verticesNeedUpdate = geometry.verticesNeedUpdate;\n\t\t\tthis.normalsNeedUpdate = geometry.normalsNeedUpdate;\n\t\t\tthis.colorsNeedUpdate = geometry.colorsNeedUpdate;\n\t\t\tthis.uvsNeedUpdate = geometry.uvsNeedUpdate;\n\t\t\tthis.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\n\t\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction arrayMax( array ) {\n\n\t\tif ( array.length === 0 ) { return - Infinity; }\n\n\t\tvar max = array[ 0 ];\n\n\t\tfor ( var i = 1, l = array.length; i < l; ++ i ) {\n\n\t\t\tif ( array[ i ] > max ) { max = array[ i ]; }\n\n\t\t}\n\n\t\treturn max;\n\n\t}\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _bufferGeometryId = 1; // BufferGeometry uses odd numbers as Id\n\n\tvar _m1$2 = new Matrix4();\n\tvar _obj = new Object3D();\n\tvar _offset = new Vector3();\n\tvar _box$2 = new Box3();\n\tvar _boxMorphTargets = new Box3();\n\tvar _vector$4 = new Vector3();\n\n\tfunction BufferGeometry() {\n\n\t\tObject.defineProperty( this, 'id', { value: _bufferGeometryId += 2 } );\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'BufferGeometry';\n\n\t\tthis.index = null;\n\t\tthis.attributes = {};\n\n\t\tthis.morphAttributes = {};\n\t\tthis.morphTargetsRelative = false;\n\n\t\tthis.groups = [];\n\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\tthis.drawRange = { start: 0, count: Infinity };\n\n\t\tthis.userData = {};\n\n\t}\n\n\tBufferGeometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: BufferGeometry,\n\n\t\tisBufferGeometry: true,\n\n\t\tgetIndex: function () {\n\n\t\t\treturn this.index;\n\n\t\t},\n\n\t\tsetIndex: function ( index ) {\n\n\t\t\tif ( Array.isArray( index ) ) {\n\n\t\t\t\tthis.index = new ( arrayMax( index ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( index, 1 );\n\n\t\t\t} else {\n\n\t\t\t\tthis.index = index;\n\n\t\t\t}\n\n\t\t},\n\n\t\tgetAttribute: function ( name ) {\n\n\t\t\treturn this.attributes[ name ];\n\n\t\t},\n\n\t\tsetAttribute: function ( name, attribute ) {\n\n\t\t\tthis.attributes[ name ] = attribute;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdeleteAttribute: function ( name ) {\n\n\t\t\tdelete this.attributes[ name ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddGroup: function ( start, count, materialIndex ) {\n\n\t\t\tthis.groups.push( {\n\n\t\t\t\tstart: start,\n\t\t\t\tcount: count,\n\t\t\t\tmaterialIndex: materialIndex !== undefined ? materialIndex : 0\n\n\t\t\t} );\n\n\t\t},\n\n\t\tclearGroups: function () {\n\n\t\t\tthis.groups = [];\n\n\t\t},\n\n\t\tsetDrawRange: function ( start, count ) {\n\n\t\t\tthis.drawRange.start = start;\n\t\t\tthis.drawRange.count = count;\n\n\t\t},\n\n\t\tapplyMatrix4: function ( matrix ) {\n\n\t\t\tvar position = this.attributes.position;\n\n\t\t\tif ( position !== undefined ) {\n\n\t\t\t\tposition.applyMatrix4( matrix );\n\n\t\t\t\tposition.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tvar normal = this.attributes.normal;\n\n\t\t\tif ( normal !== undefined ) {\n\n\t\t\t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t\t\tnormal.applyNormalMatrix( normalMatrix );\n\n\t\t\t\tnormal.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tvar tangent = this.attributes.tangent;\n\n\t\t\tif ( tangent !== undefined ) {\n\n\t\t\t\ttangent.transformDirection( matrix );\n\n\t\t\t\ttangent.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tif ( this.boundingBox !== null ) {\n\n\t\t\t\tthis.computeBoundingBox();\n\n\t\t\t}\n\n\t\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\t\tthis.computeBoundingSphere();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateX: function ( angle ) {\n\n\t\t\t// rotate geometry around world x-axis\n\n\t\t\t_m1$2.makeRotationX( angle );\n\n\t\t\tthis.applyMatrix4( _m1$2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateY: function ( angle ) {\n\n\t\t\t// rotate geometry around world y-axis\n\n\t\t\t_m1$2.makeRotationY( angle );\n\n\t\t\tthis.applyMatrix4( _m1$2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateZ: function ( angle ) {\n\n\t\t\t// rotate geometry around world z-axis\n\n\t\t\t_m1$2.makeRotationZ( angle );\n\n\t\t\tthis.applyMatrix4( _m1$2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( x, y, z ) {\n\n\t\t\t// translate geometry\n\n\t\t\t_m1$2.makeTranslation( x, y, z );\n\n\t\t\tthis.applyMatrix4( _m1$2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tscale: function ( x, y, z ) {\n\n\t\t\t// scale geometry\n\n\t\t\t_m1$2.makeScale( x, y, z );\n\n\t\t\tthis.applyMatrix4( _m1$2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlookAt: function ( vector ) {\n\n\t\t\t_obj.lookAt( vector );\n\n\t\t\t_obj.updateMatrix();\n\n\t\t\tthis.applyMatrix4( _obj.matrix );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcenter: function () {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t\tthis.boundingBox.getCenter( _offset ).negate();\n\n\t\t\tthis.translate( _offset.x, _offset.y, _offset.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromObject: function ( object ) {\n\n\t\t\t// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif ( object.isPoints || object.isLine ) {\n\n\t\t\t\tvar positions = new Float32BufferAttribute( geometry.vertices.length * 3, 3 );\n\t\t\t\tvar colors = new Float32BufferAttribute( geometry.colors.length * 3, 3 );\n\n\t\t\t\tthis.setAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );\n\t\t\t\tthis.setAttribute( 'color', colors.copyColorsArray( geometry.colors ) );\n\n\t\t\t\tif ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {\n\n\t\t\t\t\tvar lineDistances = new Float32BufferAttribute( geometry.lineDistances.length, 1 );\n\n\t\t\t\t\tthis.setAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isMesh ) {\n\n\t\t\t\tif ( geometry && geometry.isGeometry ) {\n\n\t\t\t\t\tthis.fromGeometry( geometry );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tvar position = [];\n\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tvar point = points[ i ];\n\t\t\t\tposition.push( point.x, point.y, point.z || 0 );\n\n\t\t\t}\n\n\t\t\tthis.setAttribute( 'position', new Float32BufferAttribute( position, 3 ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tupdateFromObject: function ( object ) {\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif ( object.isMesh ) {\n\n\t\t\t\tvar direct = geometry.__directGeometry;\n\n\t\t\t\tif ( geometry.elementsNeedUpdate === true ) {\n\n\t\t\t\t\tdirect = undefined;\n\t\t\t\t\tgeometry.elementsNeedUpdate = false;\n\n\t\t\t\t}\n\n\t\t\t\tif ( direct === undefined ) {\n\n\t\t\t\t\treturn this.fromGeometry( geometry );\n\n\t\t\t\t}\n\n\t\t\t\tdirect.verticesNeedUpdate = geometry.verticesNeedUpdate;\n\t\t\t\tdirect.normalsNeedUpdate = geometry.normalsNeedUpdate;\n\t\t\t\tdirect.colorsNeedUpdate = geometry.colorsNeedUpdate;\n\t\t\t\tdirect.uvsNeedUpdate = geometry.uvsNeedUpdate;\n\t\t\t\tdirect.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\n\t\t\t\tgeometry.verticesNeedUpdate = false;\n\t\t\t\tgeometry.normalsNeedUpdate = false;\n\t\t\t\tgeometry.colorsNeedUpdate = false;\n\t\t\t\tgeometry.uvsNeedUpdate = false;\n\t\t\t\tgeometry.groupsNeedUpdate = false;\n\n\t\t\t\tgeometry = direct;\n\n\t\t\t}\n\n\t\t\tvar attribute;\n\n\t\t\tif ( geometry.verticesNeedUpdate === true ) {\n\n\t\t\t\tattribute = this.attributes.position;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyVector3sArray( geometry.vertices );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.verticesNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.normalsNeedUpdate === true ) {\n\n\t\t\t\tattribute = this.attributes.normal;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyVector3sArray( geometry.normals );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.normalsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.colorsNeedUpdate === true ) {\n\n\t\t\t\tattribute = this.attributes.color;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyColorsArray( geometry.colors );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.colorsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.uvsNeedUpdate ) {\n\n\t\t\t\tattribute = this.attributes.uv;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyVector2sArray( geometry.uvs );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.uvsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.lineDistancesNeedUpdate ) {\n\n\t\t\t\tattribute = this.attributes.lineDistance;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyArray( geometry.lineDistances );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.lineDistancesNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.groupsNeedUpdate ) {\n\n\t\t\t\tgeometry.computeGroups( object.geometry );\n\t\t\t\tthis.groups = geometry.groups;\n\n\t\t\t\tgeometry.groupsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tfromGeometry: function ( geometry ) {\n\n\t\t\tgeometry.__directGeometry = new DirectGeometry().fromGeometry( geometry );\n\n\t\t\treturn this.fromDirectGeometry( geometry.__directGeometry );\n\n\t\t},\n\n\t\tfromDirectGeometry: function ( geometry ) {\n\n\t\t\tvar positions = new Float32Array( geometry.vertices.length * 3 );\n\t\t\tthis.setAttribute( 'position', new BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );\n\n\t\t\tif ( geometry.normals.length > 0 ) {\n\n\t\t\t\tvar normals = new Float32Array( geometry.normals.length * 3 );\n\t\t\t\tthis.setAttribute( 'normal', new BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.colors.length > 0 ) {\n\n\t\t\t\tvar colors = new Float32Array( geometry.colors.length * 3 );\n\t\t\t\tthis.setAttribute( 'color', new BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.uvs.length > 0 ) {\n\n\t\t\t\tvar uvs = new Float32Array( geometry.uvs.length * 2 );\n\t\t\t\tthis.setAttribute( 'uv', new BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.uvs2.length > 0 ) {\n\n\t\t\t\tvar uvs2 = new Float32Array( geometry.uvs2.length * 2 );\n\t\t\t\tthis.setAttribute( 'uv2', new BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );\n\n\t\t\t}\n\n\t\t\t// groups\n\n\t\t\tthis.groups = geometry.groups;\n\n\t\t\t// morphs\n\n\t\t\tfor ( var name in geometry.morphTargets ) {\n\n\t\t\t\tvar array = [];\n\t\t\t\tvar morphTargets = geometry.morphTargets[ name ];\n\n\t\t\t\tfor ( var i = 0, l = morphTargets.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar morphTarget = morphTargets[ i ];\n\n\t\t\t\t\tvar attribute = new Float32BufferAttribute( morphTarget.data.length * 3, 3 );\n\t\t\t\t\tattribute.name = morphTarget.name;\n\n\t\t\t\t\tarray.push( attribute.copyVector3sArray( morphTarget.data ) );\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphAttributes[ name ] = array;\n\n\t\t\t}\n\n\t\t\t// skinning\n\n\t\t\tif ( geometry.skinIndices.length > 0 ) {\n\n\t\t\t\tvar skinIndices = new Float32BufferAttribute( geometry.skinIndices.length * 4, 4 );\n\t\t\t\tthis.setAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.skinWeights.length > 0 ) {\n\n\t\t\t\tvar skinWeights = new Float32BufferAttribute( geometry.skinWeights.length * 4, 4 );\n\t\t\t\tthis.setAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcomputeBoundingBox: function () {\n\n\t\t\tif ( this.boundingBox === null ) {\n\n\t\t\t\tthis.boundingBox = new Box3();\n\n\t\t\t}\n\n\t\t\tvar position = this.attributes.position;\n\t\t\tvar morphAttributesPosition = this.morphAttributes.position;\n\n\t\t\tif ( position !== undefined ) {\n\n\t\t\t\tthis.boundingBox.setFromBufferAttribute( position );\n\n\t\t\t\t// process morph attributes if present\n\n\t\t\t\tif ( morphAttributesPosition ) {\n\n\t\t\t\t\tfor ( var i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar morphAttribute = morphAttributesPosition[ i ];\n\t\t\t\t\t\t_box$2.setFromBufferAttribute( morphAttribute );\n\n\t\t\t\t\t\tif ( this.morphTargetsRelative ) {\n\n\t\t\t\t\t\t\t_vector$4.addVectors( this.boundingBox.min, _box$2.min );\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint( _vector$4 );\n\n\t\t\t\t\t\t\t_vector$4.addVectors( this.boundingBox.max, _box$2.max );\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint( _vector$4 );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint( _box$2.min );\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint( _box$2.max );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tthis.boundingBox.makeEmpty();\n\n\t\t\t}\n\n\t\t\tif ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeBoundingSphere: function () {\n\n\t\t\tif ( this.boundingSphere === null ) {\n\n\t\t\t\tthis.boundingSphere = new Sphere();\n\n\t\t\t}\n\n\t\t\tvar position = this.attributes.position;\n\t\t\tvar morphAttributesPosition = this.morphAttributes.position;\n\n\t\t\tif ( position ) {\n\n\t\t\t\t// first, find the center of the bounding sphere\n\n\t\t\t\tvar center = this.boundingSphere.center;\n\n\t\t\t\t_box$2.setFromBufferAttribute( position );\n\n\t\t\t\t// process morph attributes if present\n\n\t\t\t\tif ( morphAttributesPosition ) {\n\n\t\t\t\t\tfor ( var i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar morphAttribute = morphAttributesPosition[ i ];\n\t\t\t\t\t\t_boxMorphTargets.setFromBufferAttribute( morphAttribute );\n\n\t\t\t\t\t\tif ( this.morphTargetsRelative ) {\n\n\t\t\t\t\t\t\t_vector$4.addVectors( _box$2.min, _boxMorphTargets.min );\n\t\t\t\t\t\t\t_box$2.expandByPoint( _vector$4 );\n\n\t\t\t\t\t\t\t_vector$4.addVectors( _box$2.max, _boxMorphTargets.max );\n\t\t\t\t\t\t\t_box$2.expandByPoint( _vector$4 );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t_box$2.expandByPoint( _boxMorphTargets.min );\n\t\t\t\t\t\t\t_box$2.expandByPoint( _boxMorphTargets.max );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t_box$2.getCenter( center );\n\n\t\t\t\t// second, try to find a boundingSphere with a radius smaller than the\n\t\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\n\t\t\t\tvar maxRadiusSq = 0;\n\n\t\t\t\tfor ( var i = 0, il = position.count; i < il; i ++ ) {\n\n\t\t\t\t\t_vector$4.fromBufferAttribute( position, i );\n\n\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$4 ) );\n\n\t\t\t\t}\n\n\t\t\t\t// process morph attributes if present\n\n\t\t\t\tif ( morphAttributesPosition ) {\n\n\t\t\t\t\tfor ( var i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar morphAttribute = morphAttributesPosition[ i ];\n\t\t\t\t\t\tvar morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t\t\t\t\tfor ( var j = 0, jl = morphAttribute.count; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\t_vector$4.fromBufferAttribute( morphAttribute, j );\n\n\t\t\t\t\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\t\t\t\t\t_offset.fromBufferAttribute( position, j );\n\t\t\t\t\t\t\t\t_vector$4.add( _offset );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$4 ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\n\n\t\t\t\tif ( isNaN( this.boundingSphere.radius ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeFaceNormals: function () {\n\n\t\t\t// backwards compatibility\n\n\t\t},\n\n\t\tcomputeVertexNormals: function () {\n\n\t\t\tvar index = this.index;\n\t\t\tvar attributes = this.attributes;\n\n\t\t\tif ( attributes.position ) {\n\n\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\tif ( attributes.normal === undefined ) {\n\n\t\t\t\t\tthis.setAttribute( 'normal', new BufferAttribute( new Float32Array( positions.length ), 3 ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// reset existing normals to zero\n\n\t\t\t\t\tvar array = attributes.normal.array;\n\n\t\t\t\t\tfor ( var i = 0, il = array.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tarray[ i ] = 0;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar normals = attributes.normal.array;\n\n\t\t\t\tvar vA, vB, vC;\n\t\t\t\tvar pA = new Vector3(), pB = new Vector3(), pC = new Vector3();\n\t\t\t\tvar cb = new Vector3(), ab = new Vector3();\n\n\t\t\t\t// indexed elements\n\n\t\t\t\tif ( index ) {\n\n\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\tfor ( var i = 0, il = index.count; i < il; i += 3 ) {\n\n\t\t\t\t\t\tvA = indices[ i + 0 ] * 3;\n\t\t\t\t\t\tvB = indices[ i + 1 ] * 3;\n\t\t\t\t\t\tvC = indices[ i + 2 ] * 3;\n\n\t\t\t\t\t\tpA.fromArray( positions, vA );\n\t\t\t\t\t\tpB.fromArray( positions, vB );\n\t\t\t\t\t\tpC.fromArray( positions, vC );\n\n\t\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\t\tnormals[ vA ] += cb.x;\n\t\t\t\t\t\tnormals[ vA + 1 ] += cb.y;\n\t\t\t\t\t\tnormals[ vA + 2 ] += cb.z;\n\n\t\t\t\t\t\tnormals[ vB ] += cb.x;\n\t\t\t\t\t\tnormals[ vB + 1 ] += cb.y;\n\t\t\t\t\t\tnormals[ vB + 2 ] += cb.z;\n\n\t\t\t\t\t\tnormals[ vC ] += cb.x;\n\t\t\t\t\t\tnormals[ vC + 1 ] += cb.y;\n\t\t\t\t\t\tnormals[ vC + 2 ] += cb.z;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// non-indexed elements (unconnected triangle soup)\n\n\t\t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 9 ) {\n\n\t\t\t\t\t\tpA.fromArray( positions, i );\n\t\t\t\t\t\tpB.fromArray( positions, i + 3 );\n\t\t\t\t\t\tpC.fromArray( positions, i + 6 );\n\n\t\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\t\tnormals[ i ] = cb.x;\n\t\t\t\t\t\tnormals[ i + 1 ] = cb.y;\n\t\t\t\t\t\tnormals[ i + 2 ] = cb.z;\n\n\t\t\t\t\t\tnormals[ i + 3 ] = cb.x;\n\t\t\t\t\t\tnormals[ i + 4 ] = cb.y;\n\t\t\t\t\t\tnormals[ i + 5 ] = cb.z;\n\n\t\t\t\t\t\tnormals[ i + 6 ] = cb.x;\n\t\t\t\t\t\tnormals[ i + 7 ] = cb.y;\n\t\t\t\t\t\tnormals[ i + 8 ] = cb.z;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.normalizeNormals();\n\n\t\t\t\tattributes.normal.needsUpdate = true;\n\n\t\t\t}\n\n\t\t},\n\n\t\tmerge: function ( geometry, offset ) {\n\n\t\t\tif ( ! ( geometry && geometry.isBufferGeometry ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( offset === undefined ) {\n\n\t\t\t\toffset = 0;\n\n\t\t\t\tconsole.warn(\n\t\t\t\t\t'THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. '\n\t\t\t\t\t+ 'Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.'\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tvar attributes = this.attributes;\n\n\t\t\tfor ( var key in attributes ) {\n\n\t\t\t\tif ( geometry.attributes[ key ] === undefined ) { continue; }\n\n\t\t\t\tvar attribute1 = attributes[ key ];\n\t\t\t\tvar attributeArray1 = attribute1.array;\n\n\t\t\t\tvar attribute2 = geometry.attributes[ key ];\n\t\t\t\tvar attributeArray2 = attribute2.array;\n\n\t\t\t\tvar attributeOffset = attribute2.itemSize * offset;\n\t\t\t\tvar length = Math.min( attributeArray2.length, attributeArray1.length - attributeOffset );\n\n\t\t\t\tfor ( var i = 0, j = attributeOffset; i < length; i ++, j ++ ) {\n\n\t\t\t\t\tattributeArray1[ j ] = attributeArray2[ i ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnormalizeNormals: function () {\n\n\t\t\tvar normals = this.attributes.normal;\n\n\t\t\tfor ( var i = 0, il = normals.count; i < il; i ++ ) {\n\n\t\t\t\t_vector$4.x = normals.getX( i );\n\t\t\t\t_vector$4.y = normals.getY( i );\n\t\t\t\t_vector$4.z = normals.getZ( i );\n\n\t\t\t\t_vector$4.normalize();\n\n\t\t\t\tnormals.setXYZ( i, _vector$4.x, _vector$4.y, _vector$4.z );\n\n\t\t\t}\n\n\t\t},\n\n\t\ttoNonIndexed: function () {\n\n\t\t\tfunction convertBufferAttribute( attribute, indices ) {\n\n\t\t\t\tvar array = attribute.array;\n\t\t\t\tvar itemSize = attribute.itemSize;\n\n\t\t\t\tvar array2 = new array.constructor( indices.length * itemSize );\n\n\t\t\t\tvar index = 0, index2 = 0;\n\n\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\n\n\t\t\t\t\tindex = indices[ i ] * itemSize;\n\n\t\t\t\t\tfor ( var j = 0; j < itemSize; j ++ ) {\n\n\t\t\t\t\t\tarray2[ index2 ++ ] = array[ index ++ ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn new BufferAttribute( array2, itemSize );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( this.index === null ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar geometry2 = new BufferGeometry();\n\n\t\t\tvar indices = this.index.array;\n\t\t\tvar attributes = this.attributes;\n\n\t\t\t// attributes\n\n\t\t\tfor ( var name in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ name ];\n\n\t\t\t\tvar newAttribute = convertBufferAttribute( attribute, indices );\n\n\t\t\t\tgeometry2.setAttribute( name, newAttribute );\n\n\t\t\t}\n\n\t\t\t// morph attributes\n\n\t\t\tvar morphAttributes = this.morphAttributes;\n\n\t\t\tfor ( name in morphAttributes ) {\n\n\t\t\t\tvar morphArray = [];\n\t\t\t\tvar morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\t\tfor ( var i = 0, il = morphAttribute.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar attribute = morphAttribute[ i ];\n\n\t\t\t\t\tvar newAttribute = convertBufferAttribute( attribute, indices );\n\n\t\t\t\t\tmorphArray.push( newAttribute );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry2.morphAttributes[ name ] = morphArray;\n\n\t\t\t}\n\n\t\t\tgeometry2.morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t\t// groups\n\n\t\t\tvar groups = this.groups;\n\n\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\tvar group = groups[ i ];\n\t\t\t\tgeometry2.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t\t}\n\n\t\t\treturn geometry2;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'BufferGeometry',\n\t\t\t\t\tgenerator: 'BufferGeometry.toJSON'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// standard BufferGeometry serialization\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\t\t\tif ( this.name !== '' ) { data.name = this.name; }\n\t\t\tif ( Object.keys( this.userData ).length > 0 ) { data.userData = this.userData; }\n\n\t\t\tif ( this.parameters !== undefined ) {\n\n\t\t\t\tvar parameters = this.parameters;\n\n\t\t\t\tfor ( var key in parameters ) {\n\n\t\t\t\t\tif ( parameters[ key ] !== undefined ) { data[ key ] = parameters[ key ]; }\n\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\n\t\t\t}\n\n\t\t\tdata.data = { attributes: {} };\n\n\t\t\tvar index = this.index;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tdata.data.index = {\n\t\t\t\t\ttype: index.array.constructor.name,\n\t\t\t\t\tarray: Array.prototype.slice.call( index.array )\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tvar attributes = this.attributes;\n\n\t\t\tfor ( var key in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ key ];\n\n\t\t\t\tvar attributeData = attribute.toJSON();\n\n\t\t\t\tif ( attribute.name !== '' ) { attributeData.name = attribute.name; }\n\n\t\t\t\tdata.data.attributes[ key ] = attributeData;\n\n\t\t\t}\n\n\t\t\tvar morphAttributes = {};\n\t\t\tvar hasMorphAttributes = false;\n\n\t\t\tfor ( var key in this.morphAttributes ) {\n\n\t\t\t\tvar attributeArray = this.morphAttributes[ key ];\n\n\t\t\t\tvar array = [];\n\n\t\t\t\tfor ( var i = 0, il = attributeArray.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar attribute = attributeArray[ i ];\n\n\t\t\t\t\tvar attributeData = attribute.toJSON();\n\n\t\t\t\t\tif ( attribute.name !== '' ) { attributeData.name = attribute.name; }\n\n\t\t\t\t\tarray.push( attributeData );\n\n\t\t\t\t}\n\n\t\t\t\tif ( array.length > 0 ) {\n\n\t\t\t\t\tmorphAttributes[ key ] = array;\n\n\t\t\t\t\thasMorphAttributes = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( hasMorphAttributes ) {\n\n\t\t\t\tdata.data.morphAttributes = morphAttributes;\n\t\t\t\tdata.data.morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t\t}\n\n\t\t\tvar groups = this.groups;\n\n\t\t\tif ( groups.length > 0 ) {\n\n\t\t\t\tdata.data.groups = JSON.parse( JSON.stringify( groups ) );\n\n\t\t\t}\n\n\t\t\tvar boundingSphere = this.boundingSphere;\n\n\t\t\tif ( boundingSphere !== null ) {\n\n\t\t\t\tdata.data.boundingSphere = {\n\t\t\t\t\tcenter: boundingSphere.center.toArray(),\n\t\t\t\t\tradius: boundingSphere.radius\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\t/*\n\t\t\t // Handle primitives\n\n\t\t\t var parameters = this.parameters;\n\n\t\t\t if ( parameters !== undefined ) {\n\n\t\t\t var values = [];\n\n\t\t\t for ( var key in parameters ) {\n\n\t\t\t values.push( parameters[ key ] );\n\n\t\t\t }\n\n\t\t\t var geometry = Object.create( this.constructor.prototype );\n\t\t\t this.constructor.apply( geometry, values );\n\t\t\t return geometry;\n\n\t\t\t }\n\n\t\t\t return new this.constructor().copy( this );\n\t\t\t */\n\n\t\t\treturn new BufferGeometry().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tvar name, i, l;\n\n\t\t\t// reset\n\n\t\t\tthis.index = null;\n\t\t\tthis.attributes = {};\n\t\t\tthis.morphAttributes = {};\n\t\t\tthis.groups = [];\n\t\t\tthis.boundingBox = null;\n\t\t\tthis.boundingSphere = null;\n\n\t\t\t// name\n\n\t\t\tthis.name = source.name;\n\n\t\t\t// index\n\n\t\t\tvar index = source.index;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tthis.setIndex( index.clone() );\n\n\t\t\t}\n\n\t\t\t// attributes\n\n\t\t\tvar attributes = source.attributes;\n\n\t\t\tfor ( name in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ name ];\n\t\t\t\tthis.setAttribute( name, attribute.clone() );\n\n\t\t\t}\n\n\t\t\t// morph attributes\n\n\t\t\tvar morphAttributes = source.morphAttributes;\n\n\t\t\tfor ( name in morphAttributes ) {\n\n\t\t\t\tvar array = [];\n\t\t\t\tvar morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\t\tfor ( i = 0, l = morphAttribute.length; i < l; i ++ ) {\n\n\t\t\t\t\tarray.push( morphAttribute[ i ].clone() );\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphAttributes[ name ] = array;\n\n\t\t\t}\n\n\t\t\tthis.morphTargetsRelative = source.morphTargetsRelative;\n\n\t\t\t// groups\n\n\t\t\tvar groups = source.groups;\n\n\t\t\tfor ( i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\tvar group = groups[ i ];\n\t\t\t\tthis.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t\t}\n\n\t\t\t// bounding box\n\n\t\t\tvar boundingBox = source.boundingBox;\n\n\t\t\tif ( boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = boundingBox.clone();\n\n\t\t\t}\n\n\t\t\t// bounding sphere\n\n\t\t\tvar boundingSphere = source.boundingSphere;\n\n\t\t\tif ( boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\t// draw range\n\n\t\t\tthis.drawRange.start = source.drawRange.start;\n\t\t\tthis.drawRange.count = source.drawRange.count;\n\n\t\t\t// user data\n\n\t\t\tthis.userData = source.userData;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author jonobr1 / http://jonobr1.com/\n\t */\n\n\tvar _inverseMatrix = new Matrix4();\n\tvar _ray = new Ray();\n\tvar _sphere = new Sphere();\n\n\tvar _vA = new Vector3();\n\tvar _vB = new Vector3();\n\tvar _vC = new Vector3();\n\n\tvar _tempA = new Vector3();\n\tvar _tempB = new Vector3();\n\tvar _tempC = new Vector3();\n\n\tvar _morphA = new Vector3();\n\tvar _morphB = new Vector3();\n\tvar _morphC = new Vector3();\n\n\tvar _uvA = new Vector2();\n\tvar _uvB = new Vector2();\n\tvar _uvC = new Vector2();\n\n\tvar _intersectionPoint = new Vector3();\n\tvar _intersectionPointWorld = new Vector3();\n\n\tfunction Mesh( geometry, material ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Mesh';\n\n\t\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\t\tthis.material = material !== undefined ? material : new MeshBasicMaterial();\n\n\t\tthis.updateMorphTargets();\n\n\t}\n\n\tMesh.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Mesh,\n\n\t\tisMesh: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source );\n\n\t\t\tif ( source.morphTargetInfluences !== undefined ) {\n\n\t\t\t\tthis.morphTargetInfluences = source.morphTargetInfluences.slice();\n\n\t\t\t}\n\n\t\t\tif ( source.morphTargetDictionary !== undefined ) {\n\n\t\t\t\tthis.morphTargetDictionary = Object.assign( {}, source.morphTargetDictionary );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tupdateMorphTargets: function () {\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar m, ml, name;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tvar morphAttributes = geometry.morphAttributes;\n\t\t\t\tvar keys = Object.keys( morphAttributes );\n\n\t\t\t\tif ( keys.length > 0 ) {\n\n\t\t\t\t\tvar morphAttribute = morphAttributes[ keys[ 0 ] ];\n\n\t\t\t\t\tif ( morphAttribute !== undefined ) {\n\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\t\tfor ( m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n\n\t\t\t\t\t\t\tname = morphAttribute[ m ].name || String( m );\n\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar morphTargets = geometry.morphTargets;\n\n\t\t\t\tif ( morphTargets !== undefined && morphTargets.length > 0 ) {\n\n\t\t\t\t\tconsole.error( 'THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\traycast: function ( raycaster, intersects ) {\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar material = this.material;\n\t\t\tvar matrixWorld = this.matrixWorld;\n\n\t\t\tif ( material === undefined ) { return; }\n\n\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\tif ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }\n\n\t\t\t_sphere.copy( geometry.boundingSphere );\n\t\t\t_sphere.applyMatrix4( matrixWorld );\n\n\t\t\tif ( raycaster.ray.intersectsSphere( _sphere ) === false ) { return; }\n\n\t\t\t//\n\n\t\t\t_inverseMatrix.getInverse( matrixWorld );\n\t\t\t_ray.copy( raycaster.ray ).applyMatrix4( _inverseMatrix );\n\n\t\t\t// Check boundingBox before continuing\n\n\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\tif ( _ray.intersectsBox( geometry.boundingBox ) === false ) { return; }\n\n\t\t\t}\n\n\t\t\tvar intersection;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tvar a, b, c;\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar position = geometry.attributes.position;\n\t\t\t\tvar morphPosition = geometry.morphAttributes.position;\n\t\t\t\tvar morphTargetsRelative = geometry.morphTargetsRelative;\n\t\t\t\tvar uv = geometry.attributes.uv;\n\t\t\t\tvar uv2 = geometry.attributes.uv2;\n\t\t\t\tvar groups = geometry.groups;\n\t\t\t\tvar drawRange = geometry.drawRange;\n\t\t\t\tvar i, j, il, jl;\n\t\t\t\tvar group, groupMaterial;\n\t\t\t\tvar start, end;\n\n\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\t// indexed buffer geometry\n\n\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\tfor ( i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\tgroup = groups[ i ];\n\t\t\t\t\t\t\tgroupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\t\tstart = Math.max( group.start, drawRange.start );\n\t\t\t\t\t\t\tend = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\t\t\tfor ( j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\t\t\t\ta = index.getX( j );\n\t\t\t\t\t\t\t\tb = index.getX( j + 1 );\n\t\t\t\t\t\t\t\tc = index.getX( j + 2 );\n\n\t\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n\n\t\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in indexed buffer semantics\n\t\t\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tstart = Math.max( 0, drawRange.start );\n\t\t\t\t\t\tend = Math.min( index.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\t\tfor ( i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\t\t\t\ta = index.getX( i );\n\t\t\t\t\t\t\tb = index.getX( i + 1 );\n\t\t\t\t\t\t\tc = index.getX( i + 2 );\n\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, material, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n\n\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in indexed buffer semantics\n\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( position !== undefined ) {\n\n\t\t\t\t\t// non-indexed buffer geometry\n\n\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\tfor ( i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\tgroup = groups[ i ];\n\t\t\t\t\t\t\tgroupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\t\tstart = Math.max( group.start, drawRange.start );\n\t\t\t\t\t\t\tend = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\t\t\tfor ( j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\t\t\t\ta = j;\n\t\t\t\t\t\t\t\tb = j + 1;\n\t\t\t\t\t\t\t\tc = j + 2;\n\n\t\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n\n\t\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in non-indexed buffer semantics\n\t\t\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tstart = Math.max( 0, drawRange.start );\n\t\t\t\t\t\tend = Math.min( position.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\t\tfor ( i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\t\t\t\ta = i;\n\t\t\t\t\t\t\tb = i + 1;\n\t\t\t\t\t\t\tc = i + 2;\n\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, material, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n\n\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in non-indexed buffer semantics\n\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\tvar fvA, fvB, fvC;\n\t\t\t\tvar isMultiMaterial = Array.isArray( material );\n\n\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\tvar faces = geometry.faces;\n\t\t\t\tvar uvs;\n\n\t\t\t\tvar faceVertexUvs = geometry.faceVertexUvs[ 0 ];\n\t\t\t\tif ( faceVertexUvs.length > 0 ) { uvs = faceVertexUvs; }\n\n\t\t\t\tfor ( var f = 0, fl = faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tvar face = faces[ f ];\n\t\t\t\t\tvar faceMaterial = isMultiMaterial ? material[ face.materialIndex ] : material;\n\n\t\t\t\t\tif ( faceMaterial === undefined ) { continue; }\n\n\t\t\t\t\tfvA = vertices[ face.a ];\n\t\t\t\t\tfvB = vertices[ face.b ];\n\t\t\t\t\tfvC = vertices[ face.c ];\n\n\t\t\t\t\tintersection = checkIntersection( this, faceMaterial, raycaster, _ray, fvA, fvB, fvC, _intersectionPoint );\n\n\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\tif ( uvs && uvs[ f ] ) {\n\n\t\t\t\t\t\t\tvar uvs_f = uvs[ f ];\n\t\t\t\t\t\t\t_uvA.copy( uvs_f[ 0 ] );\n\t\t\t\t\t\t\t_uvB.copy( uvs_f[ 1 ] );\n\t\t\t\t\t\t\t_uvC.copy( uvs_f[ 2 ] );\n\n\t\t\t\t\t\t\tintersection.uv = Triangle.getUV( _intersectionPoint, fvA, fvB, fvC, _uvA, _uvB, _uvC, new Vector2() );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tintersection.face = face;\n\t\t\t\t\t\tintersection.faceIndex = f;\n\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t\t}\n\n\t} );\n\n\tfunction checkIntersection( object, material, raycaster, ray, pA, pB, pC, point ) {\n\n\t\tvar intersect;\n\n\t\tif ( material.side === BackSide ) {\n\n\t\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\n\n\t\t} else {\n\n\t\t\tintersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );\n\n\t\t}\n\n\t\tif ( intersect === null ) { return null; }\n\n\t\t_intersectionPointWorld.copy( point );\n\t\t_intersectionPointWorld.applyMatrix4( object.matrixWorld );\n\n\t\tvar distance = raycaster.ray.origin.distanceTo( _intersectionPointWorld );\n\n\t\tif ( distance < raycaster.near || distance > raycaster.far ) { return null; }\n\n\t\treturn {\n\t\t\tdistance: distance,\n\t\t\tpoint: _intersectionPointWorld.clone(),\n\t\t\tobject: object\n\t\t};\n\n\t}\n\n\tfunction checkBufferGeometryIntersection( object, material, raycaster, ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c ) {\n\n\t\t_vA.fromBufferAttribute( position, a );\n\t\t_vB.fromBufferAttribute( position, b );\n\t\t_vC.fromBufferAttribute( position, c );\n\n\t\tvar morphInfluences = object.morphTargetInfluences;\n\n\t\tif ( material.morphTargets && morphPosition && morphInfluences ) {\n\n\t\t\t_morphA.set( 0, 0, 0 );\n\t\t\t_morphB.set( 0, 0, 0 );\n\t\t\t_morphC.set( 0, 0, 0 );\n\n\t\t\tfor ( var i = 0, il = morphPosition.length; i < il; i ++ ) {\n\n\t\t\t\tvar influence = morphInfluences[ i ];\n\t\t\t\tvar morphAttribute = morphPosition[ i ];\n\n\t\t\t\tif ( influence === 0 ) { continue; }\n\n\t\t\t\t_tempA.fromBufferAttribute( morphAttribute, a );\n\t\t\t\t_tempB.fromBufferAttribute( morphAttribute, b );\n\t\t\t\t_tempC.fromBufferAttribute( morphAttribute, c );\n\n\t\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\t\t_morphA.addScaledVector( _tempA, influence );\n\t\t\t\t\t_morphB.addScaledVector( _tempB, influence );\n\t\t\t\t\t_morphC.addScaledVector( _tempC, influence );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_morphA.addScaledVector( _tempA.sub( _vA ), influence );\n\t\t\t\t\t_morphB.addScaledVector( _tempB.sub( _vB ), influence );\n\t\t\t\t\t_morphC.addScaledVector( _tempC.sub( _vC ), influence );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_vA.add( _morphA );\n\t\t\t_vB.add( _morphB );\n\t\t\t_vC.add( _morphC );\n\n\t\t}\n\n\t\tvar intersection = checkIntersection( object, material, raycaster, ray, _vA, _vB, _vC, _intersectionPoint );\n\n\t\tif ( intersection ) {\n\n\t\t\tif ( uv ) {\n\n\t\t\t\t_uvA.fromBufferAttribute( uv, a );\n\t\t\t\t_uvB.fromBufferAttribute( uv, b );\n\t\t\t\t_uvC.fromBufferAttribute( uv, c );\n\n\t\t\t\tintersection.uv = Triangle.getUV( _intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() );\n\n\t\t\t}\n\n\t\t\tif ( uv2 ) {\n\n\t\t\t\t_uvA.fromBufferAttribute( uv2, a );\n\t\t\t\t_uvB.fromBufferAttribute( uv2, b );\n\t\t\t\t_uvC.fromBufferAttribute( uv2, c );\n\n\t\t\t\tintersection.uv2 = Triangle.getUV( _intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() );\n\n\t\t\t}\n\n\t\t\tvar face = new Face3( a, b, c );\n\t\t\tTriangle.getNormal( _vA, _vB, _vC, face.normal );\n\n\t\t\tintersection.face = face;\n\n\t\t}\n\n\t\treturn intersection;\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author kile / http://kile.stravaganza.org/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * @author bhouston / http://clara.io\n\t */\n\n\tvar _geometryId = 0; // Geometry uses even numbers as Id\n\tvar _m1$3 = new Matrix4();\n\tvar _obj$1 = new Object3D();\n\tvar _offset$1 = new Vector3();\n\n\tfunction Geometry() {\n\n\t\tObject.defineProperty( this, 'id', { value: _geometryId += 2 } );\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Geometry';\n\n\t\tthis.vertices = [];\n\t\tthis.colors = [];\n\t\tthis.faces = [];\n\t\tthis.faceVertexUvs = [[]];\n\n\t\tthis.morphTargets = [];\n\t\tthis.morphNormals = [];\n\n\t\tthis.skinWeights = [];\n\t\tthis.skinIndices = [];\n\n\t\tthis.lineDistances = [];\n\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\t// update flags\n\n\t\tthis.elementsNeedUpdate = false;\n\t\tthis.verticesNeedUpdate = false;\n\t\tthis.uvsNeedUpdate = false;\n\t\tthis.normalsNeedUpdate = false;\n\t\tthis.colorsNeedUpdate = false;\n\t\tthis.lineDistancesNeedUpdate = false;\n\t\tthis.groupsNeedUpdate = false;\n\n\t}\n\n\tGeometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: Geometry,\n\n\t\tisGeometry: true,\n\n\t\tapplyMatrix4: function ( matrix ) {\n\n\t\t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t\tfor ( var i = 0, il = this.vertices.length; i < il; i ++ ) {\n\n\t\t\t\tvar vertex = this.vertices[ i ];\n\t\t\t\tvertex.applyMatrix4( matrix );\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0, il = this.faces.length; i < il; i ++ ) {\n\n\t\t\t\tvar face = this.faces[ i ];\n\t\t\t\tface.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\tface.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.boundingBox !== null ) {\n\n\t\t\t\tthis.computeBoundingBox();\n\n\t\t\t}\n\n\t\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\t\tthis.computeBoundingSphere();\n\n\t\t\t}\n\n\t\t\tthis.verticesNeedUpdate = true;\n\t\t\tthis.normalsNeedUpdate = true;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateX: function ( angle ) {\n\n\t\t\t// rotate geometry around world x-axis\n\n\t\t\t_m1$3.makeRotationX( angle );\n\n\t\t\tthis.applyMatrix4( _m1$3 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateY: function ( angle ) {\n\n\t\t\t// rotate geometry around world y-axis\n\n\t\t\t_m1$3.makeRotationY( angle );\n\n\t\t\tthis.applyMatrix4( _m1$3 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateZ: function ( angle ) {\n\n\t\t\t// rotate geometry around world z-axis\n\n\t\t\t_m1$3.makeRotationZ( angle );\n\n\t\t\tthis.applyMatrix4( _m1$3 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( x, y, z ) {\n\n\t\t\t// translate geometry\n\n\t\t\t_m1$3.makeTranslation( x, y, z );\n\n\t\t\tthis.applyMatrix4( _m1$3 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tscale: function ( x, y, z ) {\n\n\t\t\t// scale geometry\n\n\t\t\t_m1$3.makeScale( x, y, z );\n\n\t\t\tthis.applyMatrix4( _m1$3 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlookAt: function ( vector ) {\n\n\t\t\t_obj$1.lookAt( vector );\n\n\t\t\t_obj$1.updateMatrix();\n\n\t\t\tthis.applyMatrix4( _obj$1.matrix );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tfromBufferGeometry: function ( geometry ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar indices = geometry.index !== null ? geometry.index.array : undefined;\n\t\t\tvar attributes = geometry.attributes;\n\n\t\t\tif ( attributes.position === undefined ) {\n\n\t\t\t\tconsole.error( 'THREE.Geometry.fromBufferGeometry(): Position attribute required for conversion.' );\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar positions = attributes.position.array;\n\t\t\tvar normals = attributes.normal !== undefined ? attributes.normal.array : undefined;\n\t\t\tvar colors = attributes.color !== undefined ? attributes.color.array : undefined;\n\t\t\tvar uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;\n\t\t\tvar uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;\n\n\t\t\tif ( uvs2 !== undefined ) { this.faceVertexUvs[ 1 ] = []; }\n\n\t\t\tfor ( var i = 0; i < positions.length; i += 3 ) {\n\n\t\t\t\tscope.vertices.push( new Vector3().fromArray( positions, i ) );\n\n\t\t\t\tif ( colors !== undefined ) {\n\n\t\t\t\t\tscope.colors.push( new Color().fromArray( colors, i ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction addFace( a, b, c, materialIndex ) {\n\n\t\t\t\tvar vertexColors = ( colors === undefined ) ? [] : [\n\t\t\t\t\tscope.colors[ a ].clone(),\n\t\t\t\t\tscope.colors[ b ].clone(),\n\t\t\t\t\tscope.colors[ c ].clone() ];\n\n\t\t\t\tvar vertexNormals = ( normals === undefined ) ? [] : [\n\t\t\t\t\tnew Vector3().fromArray( normals, a * 3 ),\n\t\t\t\t\tnew Vector3().fromArray( normals, b * 3 ),\n\t\t\t\t\tnew Vector3().fromArray( normals, c * 3 )\n\t\t\t\t];\n\n\t\t\t\tvar face = new Face3( a, b, c, vertexNormals, vertexColors, materialIndex );\n\n\t\t\t\tscope.faces.push( face );\n\n\t\t\t\tif ( uvs !== undefined ) {\n\n\t\t\t\t\tscope.faceVertexUvs[ 0 ].push( [\n\t\t\t\t\t\tnew Vector2().fromArray( uvs, a * 2 ),\n\t\t\t\t\t\tnew Vector2().fromArray( uvs, b * 2 ),\n\t\t\t\t\t\tnew Vector2().fromArray( uvs, c * 2 )\n\t\t\t\t\t] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( uvs2 !== undefined ) {\n\n\t\t\t\t\tscope.faceVertexUvs[ 1 ].push( [\n\t\t\t\t\t\tnew Vector2().fromArray( uvs2, a * 2 ),\n\t\t\t\t\t\tnew Vector2().fromArray( uvs2, b * 2 ),\n\t\t\t\t\t\tnew Vector2().fromArray( uvs2, c * 2 )\n\t\t\t\t\t] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar groups = geometry.groups;\n\n\t\t\tif ( groups.length > 0 ) {\n\n\t\t\t\tfor ( var i = 0; i < groups.length; i ++ ) {\n\n\t\t\t\t\tvar group = groups[ i ];\n\n\t\t\t\t\tvar start = group.start;\n\t\t\t\t\tvar count = group.count;\n\n\t\t\t\t\tfor ( var j = start, jl = start + count; j < jl; j += 3 ) {\n\n\t\t\t\t\t\tif ( indices !== undefined ) {\n\n\t\t\t\t\t\t\taddFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ], group.materialIndex );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\taddFace( j, j + 1, j + 2, group.materialIndex );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( indices !== undefined ) {\n\n\t\t\t\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\n\n\t\t\t\t\t\taddFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfor ( var i = 0; i < positions.length / 3; i += 3 ) {\n\n\t\t\t\t\t\taddFace( i, i + 1, i + 2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.computeFaceNormals();\n\n\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t\t}\n\n\t\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcenter: function () {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t\tthis.boundingBox.getCenter( _offset$1 ).negate();\n\n\t\t\tthis.translate( _offset$1.x, _offset$1.y, _offset$1.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\tthis.computeBoundingSphere();\n\n\t\t\tvar center = this.boundingSphere.center;\n\t\t\tvar radius = this.boundingSphere.radius;\n\n\t\t\tvar s = radius === 0 ? 1 : 1.0 / radius;\n\n\t\t\tvar matrix = new Matrix4();\n\t\t\tmatrix.set(\n\t\t\t\ts, 0, 0, - s * center.x,\n\t\t\t\t0, s, 0, - s * center.y,\n\t\t\t\t0, 0, s, - s * center.z,\n\t\t\t\t0, 0, 0, 1\n\t\t\t);\n\n\t\t\tthis.applyMatrix4( matrix );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcomputeFaceNormals: function () {\n\n\t\t\tvar cb = new Vector3(), ab = new Vector3();\n\n\t\t\tfor ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tvar face = this.faces[ f ];\n\n\t\t\t\tvar vA = this.vertices[ face.a ];\n\t\t\t\tvar vB = this.vertices[ face.b ];\n\t\t\t\tvar vC = this.vertices[ face.c ];\n\n\t\t\t\tcb.subVectors( vC, vB );\n\t\t\t\tab.subVectors( vA, vB );\n\t\t\t\tcb.cross( ab );\n\n\t\t\t\tcb.normalize();\n\n\t\t\t\tface.normal.copy( cb );\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeVertexNormals: function ( areaWeighted ) {\n\n\t\t\tif ( areaWeighted === undefined ) { areaWeighted = true; }\n\n\t\t\tvar v, vl, f, fl, face, vertices;\n\n\t\t\tvertices = new Array( this.vertices.length );\n\n\t\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\n\t\t\t\tvertices[ v ] = new Vector3();\n\n\t\t\t}\n\n\t\t\tif ( areaWeighted ) {\n\n\t\t\t\t// vertex normals weighted by triangle areas\n\t\t\t\t// http://www.iquilezles.org/www/articles/normals/normals.htm\n\n\t\t\t\tvar vA, vB, vC;\n\t\t\t\tvar cb = new Vector3(), ab = new Vector3();\n\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\t\tvA = this.vertices[ face.a ];\n\t\t\t\t\tvB = this.vertices[ face.b ];\n\t\t\t\t\tvC = this.vertices[ face.c ];\n\n\t\t\t\t\tcb.subVectors( vC, vB );\n\t\t\t\t\tab.subVectors( vA, vB );\n\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\tvertices[ face.a ].add( cb );\n\t\t\t\t\tvertices[ face.b ].add( cb );\n\t\t\t\t\tvertices[ face.c ].add( cb );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tthis.computeFaceNormals();\n\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\t\tvertices[ face.a ].add( face.normal );\n\t\t\t\t\tvertices[ face.b ].add( face.normal );\n\t\t\t\t\tvertices[ face.c ].add( face.normal );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\n\t\t\t\tvertices[ v ].normalize();\n\n\t\t\t}\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\t\tvertexNormals[ 0 ].copy( vertices[ face.a ] );\n\t\t\t\t\tvertexNormals[ 1 ].copy( vertices[ face.b ] );\n\t\t\t\t\tvertexNormals[ 2 ].copy( vertices[ face.c ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvertexNormals[ 0 ] = vertices[ face.a ].clone();\n\t\t\t\t\tvertexNormals[ 1 ] = vertices[ face.b ].clone();\n\t\t\t\t\tvertexNormals[ 2 ] = vertices[ face.c ].clone();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.faces.length > 0 ) {\n\n\t\t\t\tthis.normalsNeedUpdate = true;\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeFlatVertexNormals: function () {\n\n\t\t\tvar f, fl, face;\n\n\t\t\tthis.computeFaceNormals();\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\t\tvertexNormals[ 0 ].copy( face.normal );\n\t\t\t\t\tvertexNormals[ 1 ].copy( face.normal );\n\t\t\t\t\tvertexNormals[ 2 ].copy( face.normal );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvertexNormals[ 0 ] = face.normal.clone();\n\t\t\t\t\tvertexNormals[ 1 ] = face.normal.clone();\n\t\t\t\t\tvertexNormals[ 2 ] = face.normal.clone();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.faces.length > 0 ) {\n\n\t\t\t\tthis.normalsNeedUpdate = true;\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeMorphNormals: function () {\n\n\t\t\tvar i, il, f, fl, face;\n\n\t\t\t// save original normals\n\t\t\t// - create temp variables on first access\n\t\t\t//   otherwise just copy (for faster repeated calls)\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tif ( ! face.__originalFaceNormal ) {\n\n\t\t\t\t\tface.__originalFaceNormal = face.normal.clone();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tface.__originalFaceNormal.copy( face.normal );\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! face.__originalVertexNormals ) { face.__originalVertexNormals = []; }\n\n\t\t\t\tfor ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {\n\n\t\t\t\t\tif ( ! face.__originalVertexNormals[ i ] ) {\n\n\t\t\t\t\t\tface.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tface.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// use temp geometry to compute face and vertex normals for each morph\n\n\t\t\tvar tmpGeo = new Geometry();\n\t\t\ttmpGeo.faces = this.faces;\n\n\t\t\tfor ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {\n\n\t\t\t\t// create on first access\n\n\t\t\t\tif ( ! this.morphNormals[ i ] ) {\n\n\t\t\t\t\tthis.morphNormals[ i ] = {};\n\t\t\t\t\tthis.morphNormals[ i ].faceNormals = [];\n\t\t\t\t\tthis.morphNormals[ i ].vertexNormals = [];\n\n\t\t\t\t\tvar dstNormalsFace = this.morphNormals[ i ].faceNormals;\n\t\t\t\t\tvar dstNormalsVertex = this.morphNormals[ i ].vertexNormals;\n\n\t\t\t\t\tvar faceNormal, vertexNormals;\n\n\t\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\t\tfaceNormal = new Vector3();\n\t\t\t\t\t\tvertexNormals = { a: new Vector3(), b: new Vector3(), c: new Vector3() };\n\n\t\t\t\t\t\tdstNormalsFace.push( faceNormal );\n\t\t\t\t\t\tdstNormalsVertex.push( vertexNormals );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar morphNormals = this.morphNormals[ i ];\n\n\t\t\t\t// set vertices to morph target\n\n\t\t\t\ttmpGeo.vertices = this.morphTargets[ i ].vertices;\n\n\t\t\t\t// compute morph normals\n\n\t\t\t\ttmpGeo.computeFaceNormals();\n\t\t\t\ttmpGeo.computeVertexNormals();\n\n\t\t\t\t// store morph normals\n\n\t\t\t\tvar faceNormal, vertexNormals;\n\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\t\tfaceNormal = morphNormals.faceNormals[ f ];\n\t\t\t\t\tvertexNormals = morphNormals.vertexNormals[ f ];\n\n\t\t\t\t\tfaceNormal.copy( face.normal );\n\n\t\t\t\t\tvertexNormals.a.copy( face.vertexNormals[ 0 ] );\n\t\t\t\t\tvertexNormals.b.copy( face.vertexNormals[ 1 ] );\n\t\t\t\t\tvertexNormals.c.copy( face.vertexNormals[ 2 ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// restore original normals\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tface.normal = face.__originalFaceNormal;\n\t\t\t\tface.vertexNormals = face.__originalVertexNormals;\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeBoundingBox: function () {\n\n\t\t\tif ( this.boundingBox === null ) {\n\n\t\t\t\tthis.boundingBox = new Box3();\n\n\t\t\t}\n\n\t\t\tthis.boundingBox.setFromPoints( this.vertices );\n\n\t\t},\n\n\t\tcomputeBoundingSphere: function () {\n\n\t\t\tif ( this.boundingSphere === null ) {\n\n\t\t\t\tthis.boundingSphere = new Sphere();\n\n\t\t\t}\n\n\t\t\tthis.boundingSphere.setFromPoints( this.vertices );\n\n\t\t},\n\n\t\tmerge: function ( geometry, matrix, materialIndexOffset ) {\n\n\t\t\tif ( ! ( geometry && geometry.isGeometry ) ) {\n\n\t\t\t\tconsole.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar normalMatrix,\n\t\t\t\tvertexOffset = this.vertices.length,\n\t\t\t\tvertices1 = this.vertices,\n\t\t\t\tvertices2 = geometry.vertices,\n\t\t\t\tfaces1 = this.faces,\n\t\t\t\tfaces2 = geometry.faces,\n\t\t\t\tcolors1 = this.colors,\n\t\t\t\tcolors2 = geometry.colors;\n\n\t\t\tif ( materialIndexOffset === undefined ) { materialIndexOffset = 0; }\n\n\t\t\tif ( matrix !== undefined ) {\n\n\t\t\t\tnormalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t\t}\n\n\t\t\t// vertices\n\n\t\t\tfor ( var i = 0, il = vertices2.length; i < il; i ++ ) {\n\n\t\t\t\tvar vertex = vertices2[ i ];\n\n\t\t\t\tvar vertexCopy = vertex.clone();\n\n\t\t\t\tif ( matrix !== undefined ) { vertexCopy.applyMatrix4( matrix ); }\n\n\t\t\t\tvertices1.push( vertexCopy );\n\n\t\t\t}\n\n\t\t\t// colors\n\n\t\t\tfor ( var i = 0, il = colors2.length; i < il; i ++ ) {\n\n\t\t\t\tcolors1.push( colors2[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// faces\n\n\t\t\tfor ( i = 0, il = faces2.length; i < il; i ++ ) {\n\n\t\t\t\tvar face = faces2[ i ], faceCopy, normal, color,\n\t\t\t\t\tfaceVertexNormals = face.vertexNormals,\n\t\t\t\t\tfaceVertexColors = face.vertexColors;\n\n\t\t\t\tfaceCopy = new Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );\n\t\t\t\tfaceCopy.normal.copy( face.normal );\n\n\t\t\t\tif ( normalMatrix !== undefined ) {\n\n\t\t\t\t\tfaceCopy.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\tnormal = faceVertexNormals[ j ].clone();\n\n\t\t\t\t\tif ( normalMatrix !== undefined ) {\n\n\t\t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfaceCopy.vertexNormals.push( normal );\n\n\t\t\t\t}\n\n\t\t\t\tfaceCopy.color.copy( face.color );\n\n\t\t\t\tfor ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {\n\n\t\t\t\t\tcolor = faceVertexColors[ j ];\n\t\t\t\t\tfaceCopy.vertexColors.push( color.clone() );\n\n\t\t\t\t}\n\n\t\t\t\tfaceCopy.materialIndex = face.materialIndex + materialIndexOffset;\n\n\t\t\t\tfaces1.push( faceCopy );\n\n\t\t\t}\n\n\t\t\t// uvs\n\n\t\t\tfor ( var i = 0, il = geometry.faceVertexUvs.length; i < il; i ++ ) {\n\n\t\t\t\tvar faceVertexUvs2 = geometry.faceVertexUvs[ i ];\n\n\t\t\t\tif ( this.faceVertexUvs[ i ] === undefined ) { this.faceVertexUvs[ i ] = []; }\n\n\t\t\t\tfor ( var j = 0, jl = faceVertexUvs2.length; j < jl; j ++ ) {\n\n\t\t\t\t\tvar uvs2 = faceVertexUvs2[ j ], uvsCopy = [];\n\n\t\t\t\t\tfor ( var k = 0, kl = uvs2.length; k < kl; k ++ ) {\n\n\t\t\t\t\t\tuvsCopy.push( uvs2[ k ].clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.faceVertexUvs[ i ].push( uvsCopy );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tmergeMesh: function ( mesh ) {\n\n\t\t\tif ( ! ( mesh && mesh.isMesh ) ) {\n\n\t\t\t\tconsole.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( mesh.matrixAutoUpdate ) { mesh.updateMatrix(); }\n\n\t\t\tthis.merge( mesh.geometry, mesh.matrix );\n\n\t\t},\n\n\t\t/*\n\t\t * Checks for duplicate vertices with hashmap.\n\t\t * Duplicated vertices are removed\n\t\t * and faces' vertices are updated.\n\t\t */\n\n\t\tmergeVertices: function () {\n\n\t\t\tvar verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\n\t\t\tvar unique = [], changes = [];\n\n\t\t\tvar v, key;\n\t\t\tvar precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\n\t\t\tvar precision = Math.pow( 10, precisionPoints );\n\t\t\tvar i, il, face;\n\t\t\tvar indices, j, jl;\n\n\t\t\tfor ( i = 0, il = this.vertices.length; i < il; i ++ ) {\n\n\t\t\t\tv = this.vertices[ i ];\n\t\t\t\tkey = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );\n\n\t\t\t\tif ( verticesMap[ key ] === undefined ) {\n\n\t\t\t\t\tverticesMap[ key ] = i;\n\t\t\t\t\tunique.push( this.vertices[ i ] );\n\t\t\t\t\tchanges[ i ] = unique.length - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);\n\t\t\t\t\tchanges[ i ] = changes[ verticesMap[ key ] ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\t// if faces are completely degenerate after merging vertices, we\n\t\t\t// have to remove them from the geometry.\n\t\t\tvar faceIndicesToRemove = [];\n\n\t\t\tfor ( i = 0, il = this.faces.length; i < il; i ++ ) {\n\n\t\t\t\tface = this.faces[ i ];\n\n\t\t\t\tface.a = changes[ face.a ];\n\t\t\t\tface.b = changes[ face.b ];\n\t\t\t\tface.c = changes[ face.c ];\n\n\t\t\t\tindices = [ face.a, face.b, face.c ];\n\n\t\t\t\t// if any duplicate vertices are found in a Face3\n\t\t\t\t// we have to remove the face as nothing can be saved\n\t\t\t\tfor ( var n = 0; n < 3; n ++ ) {\n\n\t\t\t\t\tif ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {\n\n\t\t\t\t\t\tfaceIndicesToRemove.push( i );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {\n\n\t\t\t\tvar idx = faceIndicesToRemove[ i ];\n\n\t\t\t\tthis.faces.splice( idx, 1 );\n\n\t\t\t\tfor ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {\n\n\t\t\t\t\tthis.faceVertexUvs[ j ].splice( idx, 1 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Use unique set of vertices\n\n\t\t\tvar diff = this.vertices.length - unique.length;\n\t\t\tthis.vertices = unique;\n\t\t\treturn diff;\n\n\t\t},\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tthis.vertices = [];\n\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tvar point = points[ i ];\n\t\t\t\tthis.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsortFacesByMaterialIndex: function () {\n\n\t\t\tvar faces = this.faces;\n\t\t\tvar length = faces.length;\n\n\t\t\t// tag faces\n\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\tfaces[ i ]._id = i;\n\n\t\t\t}\n\n\t\t\t// sort faces\n\n\t\t\tfunction materialIndexSort( a, b ) {\n\n\t\t\t\treturn a.materialIndex - b.materialIndex;\n\n\t\t\t}\n\n\t\t\tfaces.sort( materialIndexSort );\n\n\t\t\t// sort uvs\n\n\t\t\tvar uvs1 = this.faceVertexUvs[ 0 ];\n\t\t\tvar uvs2 = this.faceVertexUvs[ 1 ];\n\n\t\t\tvar newUvs1, newUvs2;\n\n\t\t\tif ( uvs1 && uvs1.length === length ) { newUvs1 = []; }\n\t\t\tif ( uvs2 && uvs2.length === length ) { newUvs2 = []; }\n\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\tvar id = faces[ i ]._id;\n\n\t\t\t\tif ( newUvs1 ) { newUvs1.push( uvs1[ id ] ); }\n\t\t\t\tif ( newUvs2 ) { newUvs2.push( uvs2[ id ] ); }\n\n\t\t\t}\n\n\t\t\tif ( newUvs1 ) { this.faceVertexUvs[ 0 ] = newUvs1; }\n\t\t\tif ( newUvs2 ) { this.faceVertexUvs[ 1 ] = newUvs2; }\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Geometry',\n\t\t\t\t\tgenerator: 'Geometry.toJSON'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// standard Geometry serialization\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\t\t\tif ( this.name !== '' ) { data.name = this.name; }\n\n\t\t\tif ( this.parameters !== undefined ) {\n\n\t\t\t\tvar parameters = this.parameters;\n\n\t\t\t\tfor ( var key in parameters ) {\n\n\t\t\t\t\tif ( parameters[ key ] !== undefined ) { data[ key ] = parameters[ key ]; }\n\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\n\t\t\t}\n\n\t\t\tvar vertices = [];\n\n\t\t\tfor ( var i = 0; i < this.vertices.length; i ++ ) {\n\n\t\t\t\tvar vertex = this.vertices[ i ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t\tvar faces = [];\n\t\t\tvar normals = [];\n\t\t\tvar normalsHash = {};\n\t\t\tvar colors = [];\n\t\t\tvar colorsHash = {};\n\t\t\tvar uvs = [];\n\t\t\tvar uvsHash = {};\n\n\t\t\tfor ( var i = 0; i < this.faces.length; i ++ ) {\n\n\t\t\t\tvar face = this.faces[ i ];\n\n\t\t\t\tvar hasMaterial = true;\n\t\t\t\tvar hasFaceUv = false; // deprecated\n\t\t\t\tvar hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;\n\t\t\t\tvar hasFaceNormal = face.normal.length() > 0;\n\t\t\t\tvar hasFaceVertexNormal = face.vertexNormals.length > 0;\n\t\t\t\tvar hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;\n\t\t\t\tvar hasFaceVertexColor = face.vertexColors.length > 0;\n\n\t\t\t\tvar faceType = 0;\n\n\t\t\t\tfaceType = setBit( faceType, 0, 0 ); // isQuad\n\t\t\t\tfaceType = setBit( faceType, 1, hasMaterial );\n\t\t\t\tfaceType = setBit( faceType, 2, hasFaceUv );\n\t\t\t\tfaceType = setBit( faceType, 3, hasFaceVertexUv );\n\t\t\t\tfaceType = setBit( faceType, 4, hasFaceNormal );\n\t\t\t\tfaceType = setBit( faceType, 5, hasFaceVertexNormal );\n\t\t\t\tfaceType = setBit( faceType, 6, hasFaceColor );\n\t\t\t\tfaceType = setBit( faceType, 7, hasFaceVertexColor );\n\n\t\t\t\tfaces.push( faceType );\n\t\t\t\tfaces.push( face.a, face.b, face.c );\n\t\t\t\tfaces.push( face.materialIndex );\n\n\t\t\t\tif ( hasFaceVertexUv ) {\n\n\t\t\t\t\tvar faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];\n\n\t\t\t\t\tfaces.push(\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 0 ] ),\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 1 ] ),\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 2 ] )\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceNormal ) {\n\n\t\t\t\t\tfaces.push( getNormalIndex( face.normal ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceVertexNormal ) {\n\n\t\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\t\tfaces.push(\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 0 ] ),\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 1 ] ),\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 2 ] )\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceColor ) {\n\n\t\t\t\t\tfaces.push( getColorIndex( face.color ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceVertexColor ) {\n\n\t\t\t\t\tvar vertexColors = face.vertexColors;\n\n\t\t\t\t\tfaces.push(\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 0 ] ),\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 1 ] ),\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 2 ] )\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction setBit( value, position, enabled ) {\n\n\t\t\t\treturn enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );\n\n\t\t\t}\n\n\t\t\tfunction getNormalIndex( normal ) {\n\n\t\t\t\tvar hash = normal.x.toString() + normal.y.toString() + normal.z.toString();\n\n\t\t\t\tif ( normalsHash[ hash ] !== undefined ) {\n\n\t\t\t\t\treturn normalsHash[ hash ];\n\n\t\t\t\t}\n\n\t\t\t\tnormalsHash[ hash ] = normals.length / 3;\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\treturn normalsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tfunction getColorIndex( color ) {\n\n\t\t\t\tvar hash = color.r.toString() + color.g.toString() + color.b.toString();\n\n\t\t\t\tif ( colorsHash[ hash ] !== undefined ) {\n\n\t\t\t\t\treturn colorsHash[ hash ];\n\n\t\t\t\t}\n\n\t\t\t\tcolorsHash[ hash ] = colors.length;\n\t\t\t\tcolors.push( color.getHex() );\n\n\t\t\t\treturn colorsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tfunction getUvIndex( uv ) {\n\n\t\t\t\tvar hash = uv.x.toString() + uv.y.toString();\n\n\t\t\t\tif ( uvsHash[ hash ] !== undefined ) {\n\n\t\t\t\t\treturn uvsHash[ hash ];\n\n\t\t\t\t}\n\n\t\t\t\tuvsHash[ hash ] = uvs.length / 2;\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\treturn uvsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tdata.data = {};\n\n\t\t\tdata.data.vertices = vertices;\n\t\t\tdata.data.normals = normals;\n\t\t\tif ( colors.length > 0 ) { data.data.colors = colors; }\n\t\t\tif ( uvs.length > 0 ) { data.data.uvs = [ uvs ]; } // temporal backward compatibility\n\t\t\tdata.data.faces = faces;\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\t/*\n\t\t\t // Handle primitives\n\n\t\t\t var parameters = this.parameters;\n\n\t\t\t if ( parameters !== undefined ) {\n\n\t\t\t var values = [];\n\n\t\t\t for ( var key in parameters ) {\n\n\t\t\t values.push( parameters[ key ] );\n\n\t\t\t }\n\n\t\t\t var geometry = Object.create( this.constructor.prototype );\n\t\t\t this.constructor.apply( geometry, values );\n\t\t\t return geometry;\n\n\t\t\t }\n\n\t\t\t return new this.constructor().copy( this );\n\t\t\t */\n\n\t\t\treturn new Geometry().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tvar i, il, j, jl, k, kl;\n\n\t\t\t// reset\n\n\t\t\tthis.vertices = [];\n\t\t\tthis.colors = [];\n\t\t\tthis.faces = [];\n\t\t\tthis.faceVertexUvs = [[]];\n\t\t\tthis.morphTargets = [];\n\t\t\tthis.morphNormals = [];\n\t\t\tthis.skinWeights = [];\n\t\t\tthis.skinIndices = [];\n\t\t\tthis.lineDistances = [];\n\t\t\tthis.boundingBox = null;\n\t\t\tthis.boundingSphere = null;\n\n\t\t\t// name\n\n\t\t\tthis.name = source.name;\n\n\t\t\t// vertices\n\n\t\t\tvar vertices = source.vertices;\n\n\t\t\tfor ( i = 0, il = vertices.length; i < il; i ++ ) {\n\n\t\t\t\tthis.vertices.push( vertices[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// colors\n\n\t\t\tvar colors = source.colors;\n\n\t\t\tfor ( i = 0, il = colors.length; i < il; i ++ ) {\n\n\t\t\t\tthis.colors.push( colors[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// faces\n\n\t\t\tvar faces = source.faces;\n\n\t\t\tfor ( i = 0, il = faces.length; i < il; i ++ ) {\n\n\t\t\t\tthis.faces.push( faces[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// face vertex uvs\n\n\t\t\tfor ( i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {\n\n\t\t\t\tvar faceVertexUvs = source.faceVertexUvs[ i ];\n\n\t\t\t\tif ( this.faceVertexUvs[ i ] === undefined ) {\n\n\t\t\t\t\tthis.faceVertexUvs[ i ] = [];\n\n\t\t\t\t}\n\n\t\t\t\tfor ( j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {\n\n\t\t\t\t\tvar uvs = faceVertexUvs[ j ], uvsCopy = [];\n\n\t\t\t\t\tfor ( k = 0, kl = uvs.length; k < kl; k ++ ) {\n\n\t\t\t\t\t\tvar uv = uvs[ k ];\n\n\t\t\t\t\t\tuvsCopy.push( uv.clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.faceVertexUvs[ i ].push( uvsCopy );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// morph targets\n\n\t\t\tvar morphTargets = source.morphTargets;\n\n\t\t\tfor ( i = 0, il = morphTargets.length; i < il; i ++ ) {\n\n\t\t\t\tvar morphTarget = {};\n\t\t\t\tmorphTarget.name = morphTargets[ i ].name;\n\n\t\t\t\t// vertices\n\n\t\t\t\tif ( morphTargets[ i ].vertices !== undefined ) {\n\n\t\t\t\t\tmorphTarget.vertices = [];\n\n\t\t\t\t\tfor ( j = 0, jl = morphTargets[ i ].vertices.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tmorphTarget.vertices.push( morphTargets[ i ].vertices[ j ].clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// normals\n\n\t\t\t\tif ( morphTargets[ i ].normals !== undefined ) {\n\n\t\t\t\t\tmorphTarget.normals = [];\n\n\t\t\t\t\tfor ( j = 0, jl = morphTargets[ i ].normals.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tmorphTarget.normals.push( morphTargets[ i ].normals[ j ].clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphTargets.push( morphTarget );\n\n\t\t\t}\n\n\t\t\t// morph normals\n\n\t\t\tvar morphNormals = source.morphNormals;\n\n\t\t\tfor ( i = 0, il = morphNormals.length; i < il; i ++ ) {\n\n\t\t\t\tvar morphNormal = {};\n\n\t\t\t\t// vertex normals\n\n\t\t\t\tif ( morphNormals[ i ].vertexNormals !== undefined ) {\n\n\t\t\t\t\tmorphNormal.vertexNormals = [];\n\n\t\t\t\t\tfor ( j = 0, jl = morphNormals[ i ].vertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tvar srcVertexNormal = morphNormals[ i ].vertexNormals[ j ];\n\t\t\t\t\t\tvar destVertexNormal = {};\n\n\t\t\t\t\t\tdestVertexNormal.a = srcVertexNormal.a.clone();\n\t\t\t\t\t\tdestVertexNormal.b = srcVertexNormal.b.clone();\n\t\t\t\t\t\tdestVertexNormal.c = srcVertexNormal.c.clone();\n\n\t\t\t\t\t\tmorphNormal.vertexNormals.push( destVertexNormal );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// face normals\n\n\t\t\t\tif ( morphNormals[ i ].faceNormals !== undefined ) {\n\n\t\t\t\t\tmorphNormal.faceNormals = [];\n\n\t\t\t\t\tfor ( j = 0, jl = morphNormals[ i ].faceNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tmorphNormal.faceNormals.push( morphNormals[ i ].faceNormals[ j ].clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphNormals.push( morphNormal );\n\n\t\t\t}\n\n\t\t\t// skin weights\n\n\t\t\tvar skinWeights = source.skinWeights;\n\n\t\t\tfor ( i = 0, il = skinWeights.length; i < il; i ++ ) {\n\n\t\t\t\tthis.skinWeights.push( skinWeights[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// skin indices\n\n\t\t\tvar skinIndices = source.skinIndices;\n\n\t\t\tfor ( i = 0, il = skinIndices.length; i < il; i ++ ) {\n\n\t\t\t\tthis.skinIndices.push( skinIndices[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// line distances\n\n\t\t\tvar lineDistances = source.lineDistances;\n\n\t\t\tfor ( i = 0, il = lineDistances.length; i < il; i ++ ) {\n\n\t\t\t\tthis.lineDistances.push( lineDistances[ i ] );\n\n\t\t\t}\n\n\t\t\t// bounding box\n\n\t\t\tvar boundingBox = source.boundingBox;\n\n\t\t\tif ( boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = boundingBox.clone();\n\n\t\t\t}\n\n\t\t\t// bounding sphere\n\n\t\t\tvar boundingSphere = source.boundingSphere;\n\n\t\t\tif ( boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\t// update flags\n\n\t\t\tthis.elementsNeedUpdate = source.elementsNeedUpdate;\n\t\t\tthis.verticesNeedUpdate = source.verticesNeedUpdate;\n\t\t\tthis.uvsNeedUpdate = source.uvsNeedUpdate;\n\t\t\tthis.normalsNeedUpdate = source.normalsNeedUpdate;\n\t\t\tthis.colorsNeedUpdate = source.colorsNeedUpdate;\n\t\t\tthis.lineDistancesNeedUpdate = source.lineDistancesNeedUpdate;\n\t\t\tthis.groupsNeedUpdate = source.groupsNeedUpdate;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// BoxGeometry\n\n\tvar BoxGeometry = /*@__PURE__*/(function (Geometry) {\n\t\tfunction BoxGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\n\t\t\tGeometry.call(this);\n\n\t\t\tthis.type = 'BoxGeometry';\n\n\t\t\tthis.parameters = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\tdepth: depth,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\tdepthSegments: depthSegments\n\t\t\t};\n\n\t\t\tthis.fromBufferGeometry( new BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );\n\t\t\tthis.mergeVertices();\n\n\t\t}\n\n\t\tif ( Geometry ) BoxGeometry.__proto__ = Geometry;\n\t\tBoxGeometry.prototype = Object.create( Geometry && Geometry.prototype );\n\t\tBoxGeometry.prototype.constructor = BoxGeometry;\n\n\t\treturn BoxGeometry;\n\t}(Geometry));\n\n\t// BoxBufferGeometry\n\n\tvar BoxBufferGeometry = /*@__PURE__*/(function (BufferGeometry) {\n\t\tfunction BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\n\t\t\tBufferGeometry.call(this);\n\n\t\t\tthis.type = 'BoxBufferGeometry';\n\n\t\t\tthis.parameters = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\tdepth: depth,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\tdepthSegments: depthSegments\n\t\t\t};\n\n\t\t\tvar scope = this;\n\n\t\t\twidth = width || 1;\n\t\t\theight = height || 1;\n\t\t\tdepth = depth || 1;\n\n\t\t\t// segments\n\n\t\t\twidthSegments = Math.floor( widthSegments ) || 1;\n\t\t\theightSegments = Math.floor( heightSegments ) || 1;\n\t\t\tdepthSegments = Math.floor( depthSegments ) || 1;\n\n\t\t\t// buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = [];\n\n\t\t\t// helper variables\n\n\t\t\tvar numberOfVertices = 0;\n\t\t\tvar groupStart = 0;\n\n\t\t\t// build each side of the box geometry\n\n\t\t\tbuildPlane( 'z', 'y', 'x', - 1, - 1, depth, height, width, depthSegments, heightSegments, 0 ); // px\n\t\t\tbuildPlane( 'z', 'y', 'x', 1, - 1, depth, height, - width, depthSegments, heightSegments, 1 ); // nx\n\t\t\tbuildPlane( 'x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2 ); // py\n\t\t\tbuildPlane( 'x', 'z', 'y', 1, - 1, width, depth, - height, widthSegments, depthSegments, 3 ); // ny\n\t\t\tbuildPlane( 'x', 'y', 'z', 1, - 1, width, height, depth, widthSegments, heightSegments, 4 ); // pz\n\t\t\tbuildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth, widthSegments, heightSegments, 5 ); // nz\n\n\t\t\t// build geometry\n\n\t\t\tthis.setIndex( indices );\n\t\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t\tfunction buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {\n\n\t\t\t\tvar segmentWidth = width / gridX;\n\t\t\t\tvar segmentHeight = height / gridY;\n\n\t\t\t\tvar widthHalf = width / 2;\n\t\t\t\tvar heightHalf = height / 2;\n\t\t\t\tvar depthHalf = depth / 2;\n\n\t\t\t\tvar gridX1 = gridX + 1;\n\t\t\t\tvar gridY1 = gridY + 1;\n\n\t\t\t\tvar vertexCounter = 0;\n\t\t\t\tvar groupCount = 0;\n\n\t\t\t\tvar ix, iy;\n\n\t\t\t\tvar vector = new Vector3();\n\n\t\t\t\t// generate vertices, normals and uvs\n\n\t\t\t\tfor ( iy = 0; iy < gridY1; iy ++ ) {\n\n\t\t\t\t\tvar y = iy * segmentHeight - heightHalf;\n\n\t\t\t\t\tfor ( ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\t\t\t\tvar x = ix * segmentWidth - widthHalf;\n\n\t\t\t\t\t\t// set values to correct vector component\n\n\t\t\t\t\t\tvector[ u ] = x * udir;\n\t\t\t\t\t\tvector[ v ] = y * vdir;\n\t\t\t\t\t\tvector[ w ] = depthHalf;\n\n\t\t\t\t\t\t// now apply vector to vertex buffer\n\n\t\t\t\t\t\tvertices.push( vector.x, vector.y, vector.z );\n\n\t\t\t\t\t\t// set values to correct vector component\n\n\t\t\t\t\t\tvector[ u ] = 0;\n\t\t\t\t\t\tvector[ v ] = 0;\n\t\t\t\t\t\tvector[ w ] = depth > 0 ? 1 : - 1;\n\n\t\t\t\t\t\t// now apply vector to normal buffer\n\n\t\t\t\t\t\tnormals.push( vector.x, vector.y, vector.z );\n\n\t\t\t\t\t\t// uvs\n\n\t\t\t\t\t\tuvs.push( ix / gridX );\n\t\t\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\n\n\t\t\t\t\t\t// counters\n\n\t\t\t\t\t\tvertexCounter += 1;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// indices\n\n\t\t\t\t// 1. you need three indices to draw a single face\n\t\t\t\t// 2. a single segment consists of two faces\n\t\t\t\t// 3. so we need to generate six (2*3) indices per segment\n\n\t\t\t\tfor ( iy = 0; iy < gridY; iy ++ ) {\n\n\t\t\t\t\tfor ( ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\t\t\t\tvar a = numberOfVertices + ix + gridX1 * iy;\n\t\t\t\t\t\tvar b = numberOfVertices + ix + gridX1 * ( iy + 1 );\n\t\t\t\t\t\tvar c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\t\t\t\tvar d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;\n\n\t\t\t\t\t\t// faces\n\n\t\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t\t\t// increase counter\n\n\t\t\t\t\t\tgroupCount += 6;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\t\tscope.addGroup( groupStart, groupCount, materialIndex );\n\n\t\t\t\t// calculate new start value for groups\n\n\t\t\t\tgroupStart += groupCount;\n\n\t\t\t\t// update total number of vertices\n\n\t\t\t\tnumberOfVertices += vertexCounter;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( BufferGeometry ) BoxBufferGeometry.__proto__ = BufferGeometry;\n\t\tBoxBufferGeometry.prototype = Object.create( BufferGeometry && BufferGeometry.prototype );\n\t\tBoxBufferGeometry.prototype.constructor = BoxBufferGeometry;\n\n\t\treturn BoxBufferGeometry;\n\t}(BufferGeometry));\n\n\t/**\n\t * Uniform Utilities\n\t */\n\n\tfunction cloneUniforms( src ) {\n\n\t\tvar dst = {};\n\n\t\tfor ( var u in src ) {\n\n\t\t\tdst[ u ] = {};\n\n\t\t\tfor ( var p in src[ u ] ) {\n\n\t\t\t\tvar property = src[ u ][ p ];\n\n\t\t\t\tif ( property && ( property.isColor ||\n\t\t\t\t\tproperty.isMatrix3 || property.isMatrix4 ||\n\t\t\t\t\tproperty.isVector2 || property.isVector3 || property.isVector4 ||\n\t\t\t\t\tproperty.isTexture ) ) {\n\n\t\t\t\t\tdst[ u ][ p ] = property.clone();\n\n\t\t\t\t} else if ( Array.isArray( property ) ) {\n\n\t\t\t\t\tdst[ u ][ p ] = property.slice();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tdst[ u ][ p ] = property;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn dst;\n\n\t}\n\n\tfunction mergeUniforms( uniforms ) {\n\n\t\tvar merged = {};\n\n\t\tfor ( var u = 0; u < uniforms.length; u ++ ) {\n\n\t\t\tvar tmp = cloneUniforms( uniforms[ u ] );\n\n\t\t\tfor ( var p in tmp ) {\n\n\t\t\t\tmerged[ p ] = tmp[ p ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn merged;\n\n\t}\n\n\t// Legacy\n\n\tvar UniformsUtils = { clone: cloneUniforms, merge: mergeUniforms };\n\n\tvar default_vertex = \"void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\";\n\n\tvar default_fragment = \"void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}\";\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  defines: { \"label\" : \"value\" },\n\t *  uniforms: { \"parameter1\": { value: 1.0 }, \"parameter2\": { value2: 2 } },\n\t *\n\t *  fragmentShader: <string>,\n\t *  vertexShader: <string>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  lights: <bool>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction ShaderMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'ShaderMaterial';\n\n\t\tthis.defines = {};\n\t\tthis.uniforms = {};\n\n\t\tthis.vertexShader = default_vertex;\n\t\tthis.fragmentShader = default_fragment;\n\n\t\tthis.linewidth = 1;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.fog = false; // set to use scene fog\n\t\tthis.lights = false; // set to use scene lights\n\t\tthis.clipping = false; // set to use user-defined clipping planes\n\n\t\tthis.skinning = false; // set to use skinning attribute streams\n\t\tthis.morphTargets = false; // set to use morph targets\n\t\tthis.morphNormals = false; // set to use morph normals\n\n\t\tthis.extensions = {\n\t\t\tderivatives: false, // set to use derivatives\n\t\t\tfragDepth: false, // set to use fragment depth values\n\t\t\tdrawBuffers: false, // set to use draw buffers\n\t\t\tshaderTextureLOD: false // set to use shader texture LOD\n\t\t};\n\n\t\t// When rendered geometry doesn't include these attributes but the material does,\n\t\t// use these default values in WebGL. This avoids errors when buffer data is missing.\n\t\tthis.defaultAttributeValues = {\n\t\t\t'color': [ 1, 1, 1 ],\n\t\t\t'uv': [ 0, 0 ],\n\t\t\t'uv2': [ 0, 0 ]\n\t\t};\n\n\t\tthis.index0AttributeName = undefined;\n\t\tthis.uniformsNeedUpdate = false;\n\n\t\tif ( parameters !== undefined ) {\n\n\t\t\tif ( parameters.attributes !== undefined ) {\n\n\t\t\t\tconsole.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );\n\n\t\t\t}\n\n\t\t\tthis.setValues( parameters );\n\n\t\t}\n\n\t}\n\n\tShaderMaterial.prototype = Object.create( Material.prototype );\n\tShaderMaterial.prototype.constructor = ShaderMaterial;\n\n\tShaderMaterial.prototype.isShaderMaterial = true;\n\n\tShaderMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.fragmentShader = source.fragmentShader;\n\t\tthis.vertexShader = source.vertexShader;\n\n\t\tthis.uniforms = cloneUniforms( source.uniforms );\n\n\t\tthis.defines = Object.assign( {}, source.defines );\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\tthis.lights = source.lights;\n\t\tthis.clipping = source.clipping;\n\n\t\tthis.skinning = source.skinning;\n\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\tthis.extensions = source.extensions;\n\n\t\treturn this;\n\n\t};\n\n\tShaderMaterial.prototype.toJSON = function ( meta ) {\n\n\t\tvar data = Material.prototype.toJSON.call( this, meta );\n\n\t\tdata.uniforms = {};\n\n\t\tfor ( var name in this.uniforms ) {\n\n\t\t\tvar uniform = this.uniforms[ name ];\n\t\t\tvar value = uniform.value;\n\n\t\t\tif ( value && value.isTexture ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 't',\n\t\t\t\t\tvalue: value.toJSON( meta ).uuid\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isColor ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'c',\n\t\t\t\t\tvalue: value.getHex()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isVector2 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v2',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isVector3 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v3',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isVector4 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v4',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isMatrix3 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'm3',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isMatrix4 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'm4',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\tvalue: value\n\t\t\t\t};\n\n\t\t\t\t// note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( Object.keys( this.defines ).length > 0 ) { data.defines = this.defines; }\n\n\t\tdata.vertexShader = this.vertexShader;\n\t\tdata.fragmentShader = this.fragmentShader;\n\n\t\tvar extensions = {};\n\n\t\tfor ( var key in this.extensions ) {\n\n\t\t\tif ( this.extensions[ key ] === true ) { extensions[ key ] = true; }\n\n\t\t}\n\n\t\tif ( Object.keys( extensions ).length > 0 ) { data.extensions = extensions; }\n\n\t\treturn data;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author WestLangley / http://github.com/WestLangley\n\t*/\n\n\tfunction Camera() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Camera';\n\n\t\tthis.matrixWorldInverse = new Matrix4();\n\n\t\tthis.projectionMatrix = new Matrix4();\n\t\tthis.projectionMatrixInverse = new Matrix4();\n\n\t}\n\n\tCamera.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Camera,\n\n\t\tisCamera: true,\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source, recursive );\n\n\t\t\tthis.matrixWorldInverse.copy( source.matrixWorldInverse );\n\n\t\t\tthis.projectionMatrix.copy( source.projectionMatrix );\n\t\t\tthis.projectionMatrixInverse.copy( source.projectionMatrixInverse );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetWorldDirection: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Camera: .getWorldDirection() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tvar e = this.matrixWorld.elements;\n\n\t\t\treturn target.set( - e[ 8 ], - e[ 9 ], - e[ 10 ] ).normalize();\n\n\t\t},\n\n\t\tupdateMatrixWorld: function ( force ) {\n\n\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\tthis.matrixWorldInverse.getInverse( this.matrixWorld );\n\n\t\t},\n\n\t\tupdateWorldMatrix: function ( updateParents, updateChildren ) {\n\n\t\t\tObject3D.prototype.updateWorldMatrix.call( this, updateParents, updateChildren );\n\n\t\t\tthis.matrixWorldInverse.getInverse( this.matrixWorld );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author greggman / http://games.greggman.com/\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * @author tschw\n\t */\n\n\tfunction PerspectiveCamera( fov, aspect, near, far ) {\n\n\t\tCamera.call( this );\n\n\t\tthis.type = 'PerspectiveCamera';\n\n\t\tthis.fov = fov !== undefined ? fov : 50;\n\t\tthis.zoom = 1;\n\n\t\tthis.near = near !== undefined ? near : 0.1;\n\t\tthis.far = far !== undefined ? far : 2000;\n\t\tthis.focus = 10;\n\n\t\tthis.aspect = aspect !== undefined ? aspect : 1;\n\t\tthis.view = null;\n\n\t\tthis.filmGauge = 35;\t// width of the film (default in millimeters)\n\t\tthis.filmOffset = 0;\t// horizontal film offset (same unit as gauge)\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tPerspectiveCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\n\n\t\tconstructor: PerspectiveCamera,\n\n\t\tisPerspectiveCamera: true,\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tCamera.prototype.copy.call( this, source, recursive );\n\n\t\t\tthis.fov = source.fov;\n\t\t\tthis.zoom = source.zoom;\n\n\t\t\tthis.near = source.near;\n\t\t\tthis.far = source.far;\n\t\t\tthis.focus = source.focus;\n\n\t\t\tthis.aspect = source.aspect;\n\t\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\t\tthis.filmGauge = source.filmGauge;\n\t\t\tthis.filmOffset = source.filmOffset;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t/**\n\t\t * Sets the FOV by focal length in respect to the current .filmGauge.\n\t\t *\n\t\t * The default film gauge is 35, so that the focal length can be specified for\n\t\t * a 35mm (full frame) camera.\n\t\t *\n\t\t * Values for focal length and film gauge must have the same unit.\n\t\t */\n\t\tsetFocalLength: function ( focalLength ) {\n\n\t\t\t// see http://www.bobatkins.com/photography/technical/field_of_view.html\n\t\t\tvar vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n\n\t\t\tthis.fov = MathUtils.RAD2DEG * 2 * Math.atan( vExtentSlope );\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\t/**\n\t\t * Calculates the focal length from the current .fov and .filmGauge.\n\t\t */\n\t\tgetFocalLength: function () {\n\n\t\t\tvar vExtentSlope = Math.tan( MathUtils.DEG2RAD * 0.5 * this.fov );\n\n\t\t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\n\n\t\t},\n\n\t\tgetEffectiveFOV: function () {\n\n\t\t\treturn MathUtils.RAD2DEG * 2 * Math.atan(\n\t\t\t\tMath.tan( MathUtils.DEG2RAD * 0.5 * this.fov ) / this.zoom );\n\n\t\t},\n\n\t\tgetFilmWidth: function () {\n\n\t\t\t// film not completely covered in portrait format (aspect < 1)\n\t\t\treturn this.filmGauge * Math.min( this.aspect, 1 );\n\n\t\t},\n\n\t\tgetFilmHeight: function () {\n\n\t\t\t// film not completely covered in landscape format (aspect > 1)\n\t\t\treturn this.filmGauge / Math.max( this.aspect, 1 );\n\n\t\t},\n\n\t\t/**\n\t\t * Sets an offset in a larger frustum. This is useful for multi-window or\n\t\t * multi-monitor/multi-machine setups.\n\t\t *\n\t\t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n\t\t * the monitors are in grid like this\n\t\t *\n\t\t *   +---+---+---+\n\t\t *   | A | B | C |\n\t\t *   +---+---+---+\n\t\t *   | D | E | F |\n\t\t *   +---+---+---+\n\t\t *\n\t\t * then for each monitor you would call it like this\n\t\t *\n\t\t *   var w = 1920;\n\t\t *   var h = 1080;\n\t\t *   var fullWidth = w * 3;\n\t\t *   var fullHeight = h * 2;\n\t\t *\n\t\t *   --A--\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n\t\t *   --B--\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n\t\t *   --C--\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n\t\t *   --D--\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n\t\t *   --E--\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n\t\t *   --F--\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n\t\t *\n\t\t *   Note there is no reason monitors have to be the same size or in a grid.\n\t\t */\n\t\tsetViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\t\tthis.aspect = fullWidth / fullHeight;\n\n\t\t\tif ( this.view === null ) {\n\n\t\t\t\tthis.view = {\n\t\t\t\t\tenabled: true,\n\t\t\t\t\tfullWidth: 1,\n\t\t\t\t\tfullHeight: 1,\n\t\t\t\t\toffsetX: 0,\n\t\t\t\t\toffsetY: 0,\n\t\t\t\t\twidth: 1,\n\t\t\t\t\theight: 1\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tthis.view.enabled = true;\n\t\t\tthis.view.fullWidth = fullWidth;\n\t\t\tthis.view.fullHeight = fullHeight;\n\t\t\tthis.view.offsetX = x;\n\t\t\tthis.view.offsetY = y;\n\t\t\tthis.view.width = width;\n\t\t\tthis.view.height = height;\n\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\tclearViewOffset: function () {\n\n\t\t\tif ( this.view !== null ) {\n\n\t\t\t\tthis.view.enabled = false;\n\n\t\t\t}\n\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\tupdateProjectionMatrix: function () {\n\n\t\t\tvar near = this.near,\n\t\t\t\ttop = near * Math.tan( MathUtils.DEG2RAD * 0.5 * this.fov ) / this.zoom,\n\t\t\t\theight = 2 * top,\n\t\t\t\twidth = this.aspect * height,\n\t\t\t\tleft = - 0.5 * width,\n\t\t\t\tview = this.view;\n\n\t\t\tif ( this.view !== null && this.view.enabled ) {\n\n\t\t\t\tvar fullWidth = view.fullWidth,\n\t\t\t\t\tfullHeight = view.fullHeight;\n\n\t\t\t\tleft += view.offsetX * width / fullWidth;\n\t\t\t\ttop -= view.offsetY * height / fullHeight;\n\t\t\t\twidth *= view.width / fullWidth;\n\t\t\t\theight *= view.height / fullHeight;\n\n\t\t\t}\n\n\t\t\tvar skew = this.filmOffset;\n\t\t\tif ( skew !== 0 ) { left += near * skew / this.getFilmWidth(); }\n\n\t\t\tthis.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far );\n\n\t\t\tthis.projectionMatrixInverse.getInverse( this.projectionMatrix );\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.fov = this.fov;\n\t\t\tdata.object.zoom = this.zoom;\n\n\t\t\tdata.object.near = this.near;\n\t\t\tdata.object.far = this.far;\n\t\t\tdata.object.focus = this.focus;\n\n\t\t\tdata.object.aspect = this.aspect;\n\n\t\t\tif ( this.view !== null ) { data.object.view = Object.assign( {}, this.view ); }\n\n\t\t\tdata.object.filmGauge = this.filmGauge;\n\t\t\tdata.object.filmOffset = this.filmOffset;\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * Camera for rendering cube maps\n\t *\t- renders scene into axis-aligned cube\n\t *\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tvar fov = 90, aspect = 1;\n\n\tfunction CubeCamera( near, far, cubeResolution, options ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'CubeCamera';\n\n\t\tvar cameraPX = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPX.up.set( 0, - 1, 0 );\n\t\tcameraPX.lookAt( new Vector3( 1, 0, 0 ) );\n\t\tthis.add( cameraPX );\n\n\t\tvar cameraNX = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNX.up.set( 0, - 1, 0 );\n\t\tcameraNX.lookAt( new Vector3( - 1, 0, 0 ) );\n\t\tthis.add( cameraNX );\n\n\t\tvar cameraPY = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPY.up.set( 0, 0, 1 );\n\t\tcameraPY.lookAt( new Vector3( 0, 1, 0 ) );\n\t\tthis.add( cameraPY );\n\n\t\tvar cameraNY = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNY.up.set( 0, 0, - 1 );\n\t\tcameraNY.lookAt( new Vector3( 0, - 1, 0 ) );\n\t\tthis.add( cameraNY );\n\n\t\tvar cameraPZ = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPZ.up.set( 0, - 1, 0 );\n\t\tcameraPZ.lookAt( new Vector3( 0, 0, 1 ) );\n\t\tthis.add( cameraPZ );\n\n\t\tvar cameraNZ = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNZ.up.set( 0, - 1, 0 );\n\t\tcameraNZ.lookAt( new Vector3( 0, 0, - 1 ) );\n\t\tthis.add( cameraNZ );\n\n\t\toptions = options || { format: RGBFormat, magFilter: LinearFilter, minFilter: LinearFilter };\n\n\t\tthis.renderTarget = new WebGLCubeRenderTarget( cubeResolution, options );\n\t\tthis.renderTarget.texture.name = \"CubeCamera\";\n\n\t\tthis.update = function ( renderer, scene ) {\n\n\t\t\tif ( this.parent === null ) { this.updateMatrixWorld(); }\n\n\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\n\t\t\tvar renderTarget = this.renderTarget;\n\t\t\tvar generateMipmaps = renderTarget.texture.generateMipmaps;\n\n\t\t\trenderTarget.texture.generateMipmaps = false;\n\n\t\t\trenderer.setRenderTarget( renderTarget, 0 );\n\t\t\trenderer.render( scene, cameraPX );\n\n\t\t\trenderer.setRenderTarget( renderTarget, 1 );\n\t\t\trenderer.render( scene, cameraNX );\n\n\t\t\trenderer.setRenderTarget( renderTarget, 2 );\n\t\t\trenderer.render( scene, cameraPY );\n\n\t\t\trenderer.setRenderTarget( renderTarget, 3 );\n\t\t\trenderer.render( scene, cameraNY );\n\n\t\t\trenderer.setRenderTarget( renderTarget, 4 );\n\t\t\trenderer.render( scene, cameraPZ );\n\n\t\t\trenderTarget.texture.generateMipmaps = generateMipmaps;\n\n\t\t\trenderer.setRenderTarget( renderTarget, 5 );\n\t\t\trenderer.render( scene, cameraNZ );\n\n\t\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t\t};\n\n\t\tthis.clear = function ( renderer, color, depth, stencil ) {\n\n\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\n\t\t\tvar renderTarget = this.renderTarget;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\trenderer.setRenderTarget( renderTarget, i );\n\n\t\t\t\trenderer.clear( color, depth, stencil );\n\n\t\t\t}\n\n\t\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t\t};\n\n\t}\n\n\tCubeCamera.prototype = Object.create( Object3D.prototype );\n\tCubeCamera.prototype.constructor = CubeCamera;\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction WebGLCubeRenderTarget( size, options, dummy ) {\n\n\t\tif ( Number.isInteger( options ) ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )' );\n\n\t\t\toptions = dummy;\n\n\t\t}\n\n\t\tWebGLRenderTarget.call( this, size, size, options );\n\n\t}\n\n\tWebGLCubeRenderTarget.prototype = Object.create( WebGLRenderTarget.prototype );\n\tWebGLCubeRenderTarget.prototype.constructor = WebGLCubeRenderTarget;\n\n\tWebGLCubeRenderTarget.prototype.isWebGLCubeRenderTarget = true;\n\n\tWebGLCubeRenderTarget.prototype.fromEquirectangularTexture = function ( renderer, texture ) {\n\n\t\tthis.texture.type = texture.type;\n\t\tthis.texture.format = texture.format;\n\t\tthis.texture.encoding = texture.encoding;\n\n\t\tvar scene = new Scene();\n\n\t\tvar shader = {\n\n\t\t\tuniforms: {\n\t\t\t\ttEquirect: { value: null },\n\t\t\t},\n\n\t\t\tvertexShader: [\n\n\t\t\t\t\"varying vec3 vWorldDirection;\",\n\n\t\t\t\t\"vec3 transformDirection( in vec3 dir, in mat4 matrix ) {\",\n\n\t\t\t\t\"\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\",\n\n\t\t\t\t\"}\",\n\n\t\t\t\t\"void main() {\",\n\n\t\t\t\t\"\tvWorldDirection = transformDirection( position, modelMatrix );\",\n\n\t\t\t\t\"\t#include <begin_vertex>\",\n\t\t\t\t\"\t#include <project_vertex>\",\n\n\t\t\t\t\"}\"\n\n\t\t\t].join( '\\n' ),\n\n\t\t\tfragmentShader: [\n\n\t\t\t\t\"uniform sampler2D tEquirect;\",\n\n\t\t\t\t\"varying vec3 vWorldDirection;\",\n\n\t\t\t\t\"#define RECIPROCAL_PI 0.31830988618\",\n\t\t\t\t\"#define RECIPROCAL_PI2 0.15915494\",\n\n\t\t\t\t\"void main() {\",\n\n\t\t\t\t\"\tvec3 direction = normalize( vWorldDirection );\",\n\n\t\t\t\t\"\tvec2 sampleUV;\",\n\n\t\t\t\t\"\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\",\n\n\t\t\t\t\"\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\",\n\n\t\t\t\t\"\tgl_FragColor = texture2D( tEquirect, sampleUV );\",\n\n\t\t\t\t\"}\"\n\n\t\t\t].join( '\\n' ),\n\t\t};\n\n\t\tvar material = new ShaderMaterial( {\n\n\t\t\ttype: 'CubemapFromEquirect',\n\n\t\t\tuniforms: cloneUniforms( shader.uniforms ),\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader,\n\t\t\tside: BackSide,\n\t\t\tblending: NoBlending\n\n\t\t} );\n\n\t\tmaterial.uniforms.tEquirect.value = texture;\n\n\t\tvar mesh = new Mesh( new BoxBufferGeometry( 5, 5, 5 ), material );\n\n\t\tscene.add( mesh );\n\n\t\tvar camera = new CubeCamera( 1, 10, 1 );\n\n\t\tcamera.renderTarget = this;\n\t\tcamera.renderTarget.texture.name = 'CubeCameraTexture';\n\n\t\tcamera.update( renderer, scene );\n\n\t\tmesh.geometry.dispose();\n\t\tmesh.material.dispose();\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction DataTexture( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\n\t\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\t\tthis.image = { data: data || null, width: width || 1, height: height || 1 };\n\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\t\tthis.unpackAlignment = 1;\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n\tDataTexture.prototype = Object.create( Texture.prototype );\n\tDataTexture.prototype.constructor = DataTexture;\n\n\tDataTexture.prototype.isDataTexture = true;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author bhouston / http://clara.io\n\t */\n\n\tvar _sphere$1 = new Sphere();\n\tvar _vector$5 = new Vector3();\n\n\tfunction Frustum( p0, p1, p2, p3, p4, p5 ) {\n\n\t\tthis.planes = [\n\n\t\t\t( p0 !== undefined ) ? p0 : new Plane(),\n\t\t\t( p1 !== undefined ) ? p1 : new Plane(),\n\t\t\t( p2 !== undefined ) ? p2 : new Plane(),\n\t\t\t( p3 !== undefined ) ? p3 : new Plane(),\n\t\t\t( p4 !== undefined ) ? p4 : new Plane(),\n\t\t\t( p5 !== undefined ) ? p5 : new Plane()\n\n\t\t];\n\n\t}\n\n\tObject.assign( Frustum.prototype, {\n\n\t\tset: function ( p0, p1, p2, p3, p4, p5 ) {\n\n\t\t\tvar planes = this.planes;\n\n\t\t\tplanes[ 0 ].copy( p0 );\n\t\t\tplanes[ 1 ].copy( p1 );\n\t\t\tplanes[ 2 ].copy( p2 );\n\t\t\tplanes[ 3 ].copy( p3 );\n\t\t\tplanes[ 4 ].copy( p4 );\n\t\t\tplanes[ 5 ].copy( p5 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( frustum ) {\n\n\t\t\tvar planes = this.planes;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tplanes[ i ].copy( frustum.planes[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromProjectionMatrix: function ( m ) {\n\n\t\t\tvar planes = this.planes;\n\t\t\tvar me = m.elements;\n\t\t\tvar me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\n\t\t\tvar me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\n\t\t\tvar me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\n\t\t\tvar me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\n\n\t\t\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\n\t\t\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\n\t\t\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\n\t\t\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\n\t\t\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\n\t\t\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tintersectsObject: function ( object ) {\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }\n\n\t\t\t_sphere$1.copy( geometry.boundingSphere ).applyMatrix4( object.matrixWorld );\n\n\t\t\treturn this.intersectsSphere( _sphere$1 );\n\n\t\t},\n\n\t\tintersectsSprite: function ( sprite ) {\n\n\t\t\t_sphere$1.center.set( 0, 0, 0 );\n\t\t\t_sphere$1.radius = 0.7071067811865476;\n\t\t\t_sphere$1.applyMatrix4( sprite.matrixWorld );\n\n\t\t\treturn this.intersectsSphere( _sphere$1 );\n\n\t\t},\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\tvar planes = this.planes;\n\t\t\tvar center = sphere.center;\n\t\t\tvar negRadius = - sphere.radius;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tvar distance = planes[ i ].distanceToPoint( center );\n\n\t\t\t\tif ( distance < negRadius ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\tvar planes = this.planes;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tvar plane = planes[ i ];\n\n\t\t\t\t// corner at max distance\n\n\t\t\t\t_vector$5.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n\t\t\t\t_vector$5.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n\t\t\t\t_vector$5.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\n\t\t\t\tif ( plane.distanceToPoint( _vector$5 ) < 0 ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\tvar planes = this.planes;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tif ( planes[ i ].distanceToPoint( point ) < 0 ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * Uniforms library for shared webgl shaders\n\t */\n\n\tvar UniformsLib = {\n\n\t\tcommon: {\n\n\t\t\tdiffuse: { value: new Color( 0xeeeeee ) },\n\t\t\topacity: { value: 1.0 },\n\n\t\t\tmap: { value: null },\n\t\t\tuvTransform: { value: new Matrix3() },\n\t\t\tuv2Transform: { value: new Matrix3() },\n\n\t\t\talphaMap: { value: null },\n\n\t\t},\n\n\t\tspecularmap: {\n\n\t\t\tspecularMap: { value: null },\n\n\t\t},\n\n\t\tenvmap: {\n\n\t\t\tenvMap: { value: null },\n\t\t\tflipEnvMap: { value: - 1 },\n\t\t\treflectivity: { value: 1.0 },\n\t\t\trefractionRatio: { value: 0.98 },\n\t\t\tmaxMipLevel: { value: 0 }\n\n\t\t},\n\n\t\taomap: {\n\n\t\t\taoMap: { value: null },\n\t\t\taoMapIntensity: { value: 1 }\n\n\t\t},\n\n\t\tlightmap: {\n\n\t\t\tlightMap: { value: null },\n\t\t\tlightMapIntensity: { value: 1 }\n\n\t\t},\n\n\t\temissivemap: {\n\n\t\t\temissiveMap: { value: null }\n\n\t\t},\n\n\t\tbumpmap: {\n\n\t\t\tbumpMap: { value: null },\n\t\t\tbumpScale: { value: 1 }\n\n\t\t},\n\n\t\tnormalmap: {\n\n\t\t\tnormalMap: { value: null },\n\t\t\tnormalScale: { value: new Vector2( 1, 1 ) }\n\n\t\t},\n\n\t\tdisplacementmap: {\n\n\t\t\tdisplacementMap: { value: null },\n\t\t\tdisplacementScale: { value: 1 },\n\t\t\tdisplacementBias: { value: 0 }\n\n\t\t},\n\n\t\troughnessmap: {\n\n\t\t\troughnessMap: { value: null }\n\n\t\t},\n\n\t\tmetalnessmap: {\n\n\t\t\tmetalnessMap: { value: null }\n\n\t\t},\n\n\t\tgradientmap: {\n\n\t\t\tgradientMap: { value: null }\n\n\t\t},\n\n\t\tfog: {\n\n\t\t\tfogDensity: { value: 0.00025 },\n\t\t\tfogNear: { value: 1 },\n\t\t\tfogFar: { value: 2000 },\n\t\t\tfogColor: { value: new Color( 0xffffff ) }\n\n\t\t},\n\n\t\tlights: {\n\n\t\t\tambientLightColor: { value: [] },\n\n\t\t\tlightProbe: { value: [] },\n\n\t\t\tdirectionalLights: { value: [], properties: {\n\t\t\t\tdirection: {},\n\t\t\t\tcolor: {},\n\n\t\t\t\tshadow: {},\n\t\t\t\tshadowBias: {},\n\t\t\t\tshadowRadius: {},\n\t\t\t\tshadowMapSize: {}\n\t\t\t} },\n\n\t\t\tdirectionalShadowMap: { value: [] },\n\t\t\tdirectionalShadowMatrix: { value: [] },\n\n\t\t\tspotLights: { value: [], properties: {\n\t\t\t\tcolor: {},\n\t\t\t\tposition: {},\n\t\t\t\tdirection: {},\n\t\t\t\tdistance: {},\n\t\t\t\tconeCos: {},\n\t\t\t\tpenumbraCos: {},\n\t\t\t\tdecay: {},\n\n\t\t\t\tshadow: {},\n\t\t\t\tshadowBias: {},\n\t\t\t\tshadowRadius: {},\n\t\t\t\tshadowMapSize: {}\n\t\t\t} },\n\n\t\t\tspotShadowMap: { value: [] },\n\t\t\tspotShadowMatrix: { value: [] },\n\n\t\t\tpointLights: { value: [], properties: {\n\t\t\t\tcolor: {},\n\t\t\t\tposition: {},\n\t\t\t\tdecay: {},\n\t\t\t\tdistance: {},\n\n\t\t\t\tshadow: {},\n\t\t\t\tshadowBias: {},\n\t\t\t\tshadowRadius: {},\n\t\t\t\tshadowMapSize: {},\n\t\t\t\tshadowCameraNear: {},\n\t\t\t\tshadowCameraFar: {}\n\t\t\t} },\n\n\t\t\tpointShadowMap: { value: [] },\n\t\t\tpointShadowMatrix: { value: [] },\n\n\t\t\themisphereLights: { value: [], properties: {\n\t\t\t\tdirection: {},\n\t\t\t\tskyColor: {},\n\t\t\t\tgroundColor: {}\n\t\t\t} },\n\n\t\t\t// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src\n\t\t\trectAreaLights: { value: [], properties: {\n\t\t\t\tcolor: {},\n\t\t\t\tposition: {},\n\t\t\t\twidth: {},\n\t\t\t\theight: {}\n\t\t\t} }\n\n\t\t},\n\n\t\tpoints: {\n\n\t\t\tdiffuse: { value: new Color( 0xeeeeee ) },\n\t\t\topacity: { value: 1.0 },\n\t\t\tsize: { value: 1.0 },\n\t\t\tscale: { value: 1.0 },\n\t\t\tmap: { value: null },\n\t\t\talphaMap: { value: null },\n\t\t\tuvTransform: { value: new Matrix3() }\n\n\t\t},\n\n\t\tsprite: {\n\n\t\t\tdiffuse: { value: new Color( 0xeeeeee ) },\n\t\t\topacity: { value: 1.0 },\n\t\t\tcenter: { value: new Vector2( 0.5, 0.5 ) },\n\t\t\trotation: { value: 0.0 },\n\t\t\tmap: { value: null },\n\t\t\talphaMap: { value: null },\n\t\t\tuvTransform: { value: new Matrix3() }\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLAnimation() {\n\n\t\tvar context = null;\n\t\tvar isAnimating = false;\n\t\tvar animationLoop = null;\n\n\t\tfunction onAnimationFrame( time, frame ) {\n\n\t\t\tif ( isAnimating === false ) { return; }\n\n\t\t\tanimationLoop( time, frame );\n\n\t\t\tcontext.requestAnimationFrame( onAnimationFrame );\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tstart: function () {\n\n\t\t\t\tif ( isAnimating === true ) { return; }\n\t\t\t\tif ( animationLoop === null ) { return; }\n\n\t\t\t\tcontext.requestAnimationFrame( onAnimationFrame );\n\n\t\t\t\tisAnimating = true;\n\n\t\t\t},\n\n\t\t\tstop: function () {\n\n\t\t\t\tisAnimating = false;\n\n\t\t\t},\n\n\t\t\tsetAnimationLoop: function ( callback ) {\n\n\t\t\t\tanimationLoop = callback;\n\n\t\t\t},\n\n\t\t\tsetContext: function ( value ) {\n\n\t\t\t\tcontext = value;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLAttributes( gl, capabilities ) {\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\n\t\tvar buffers = new WeakMap();\n\n\t\tfunction createBuffer( attribute, bufferType ) {\n\n\t\t\tvar array = attribute.array;\n\t\t\tvar usage = attribute.usage;\n\n\t\t\tvar buffer = gl.createBuffer();\n\n\t\t\tgl.bindBuffer( bufferType, buffer );\n\t\t\tgl.bufferData( bufferType, array, usage );\n\n\t\t\tattribute.onUploadCallback();\n\n\t\t\tvar type = 5126;\n\n\t\t\tif ( array instanceof Float32Array ) {\n\n\t\t\t\ttype = 5126;\n\n\t\t\t} else if ( array instanceof Float64Array ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.' );\n\n\t\t\t} else if ( array instanceof Uint16Array ) {\n\n\t\t\t\ttype = 5123;\n\n\t\t\t} else if ( array instanceof Int16Array ) {\n\n\t\t\t\ttype = 5122;\n\n\t\t\t} else if ( array instanceof Uint32Array ) {\n\n\t\t\t\ttype = 5125;\n\n\t\t\t} else if ( array instanceof Int32Array ) {\n\n\t\t\t\ttype = 5124;\n\n\t\t\t} else if ( array instanceof Int8Array ) {\n\n\t\t\t\ttype = 5120;\n\n\t\t\t} else if ( array instanceof Uint8Array ) {\n\n\t\t\t\ttype = 5121;\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tbuffer: buffer,\n\t\t\t\ttype: type,\n\t\t\t\tbytesPerElement: array.BYTES_PER_ELEMENT,\n\t\t\t\tversion: attribute.version\n\t\t\t};\n\n\t\t}\n\n\t\tfunction updateBuffer( buffer, attribute, bufferType ) {\n\n\t\t\tvar array = attribute.array;\n\t\t\tvar updateRange = attribute.updateRange;\n\n\t\t\tgl.bindBuffer( bufferType, buffer );\n\n\t\t\tif ( updateRange.count === - 1 ) {\n\n\t\t\t\t// Not using update ranges\n\n\t\t\t\tgl.bufferSubData( bufferType, 0, array );\n\n\t\t\t} else {\n\n\t\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t\tgl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,\n\t\t\t\t\t\tarray, updateRange.offset, updateRange.count );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,\n\t\t\t\t\t\tarray.subarray( updateRange.offset, updateRange.offset + updateRange.count ) );\n\n\t\t\t\t}\n\n\t\t\t\tupdateRange.count = - 1; // reset range\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tfunction get( attribute ) {\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) { attribute = attribute.data; }\n\n\t\t\treturn buffers.get( attribute );\n\n\t\t}\n\n\t\tfunction remove( attribute ) {\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) { attribute = attribute.data; }\n\n\t\t\tvar data = buffers.get( attribute );\n\n\t\t\tif ( data ) {\n\n\t\t\t\tgl.deleteBuffer( data.buffer );\n\n\t\t\t\tbuffers.delete( attribute );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction update( attribute, bufferType ) {\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) { attribute = attribute.data; }\n\n\t\t\tvar data = buffers.get( attribute );\n\n\t\t\tif ( data === undefined ) {\n\n\t\t\t\tbuffers.set( attribute, createBuffer( attribute, bufferType ) );\n\n\t\t\t} else if ( data.version < attribute.version ) {\n\n\t\t\t\tupdateBuffer( data.buffer, attribute, bufferType );\n\n\t\t\t\tdata.version = attribute.version;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tget: get,\n\t\t\tremove: remove,\n\t\t\tupdate: update\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// PlaneGeometry\n\n\tfunction PlaneGeometry( width, height, widthSegments, heightSegments ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'PlaneGeometry';\n\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments\n\t\t};\n\n\t\tthis.fromBufferGeometry( new PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tPlaneGeometry.prototype = Object.create( Geometry.prototype );\n\tPlaneGeometry.prototype.constructor = PlaneGeometry;\n\n\t// PlaneBufferGeometry\n\n\tfunction PlaneBufferGeometry( width, height, widthSegments, heightSegments ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'PlaneBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments\n\t\t};\n\n\t\twidth = width || 1;\n\t\theight = height || 1;\n\n\t\tvar width_half = width / 2;\n\t\tvar height_half = height / 2;\n\n\t\tvar gridX = Math.floor( widthSegments ) || 1;\n\t\tvar gridY = Math.floor( heightSegments ) || 1;\n\n\t\tvar gridX1 = gridX + 1;\n\t\tvar gridY1 = gridY + 1;\n\n\t\tvar segment_width = width / gridX;\n\t\tvar segment_height = height / gridY;\n\n\t\tvar ix, iy;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( iy = 0; iy < gridY1; iy ++ ) {\n\n\t\t\tvar y = iy * segment_height - height_half;\n\n\t\t\tfor ( ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\t\tvar x = ix * segment_width - width_half;\n\n\t\t\t\tvertices.push( x, - y, 0 );\n\n\t\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t\tuvs.push( ix / gridX );\n\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( iy = 0; iy < gridY; iy ++ ) {\n\n\t\t\tfor ( ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\t\tvar a = ix + gridX1 * iy;\n\t\t\t\tvar b = ix + gridX1 * ( iy + 1 );\n\t\t\t\tvar c = ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\t\tvar d = ( ix + 1 ) + gridX1 * iy;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tPlaneBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tPlaneBufferGeometry.prototype.constructor = PlaneBufferGeometry;\n\n\tvar alphamap_fragment = \"#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\";\n\n\tvar alphamap_pars_fragment = \"#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\n\n\tvar alphatest_fragment = \"#ifdef ALPHATEST\\n\\tif ( diffuseColor.a < ALPHATEST ) discard;\\n#endif\";\n\n\tvar aomap_fragment = \"#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD )\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\\t#endif\\n#endif\";\n\n\tvar aomap_pars_fragment = \"#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif\";\n\n\tvar begin_vertex = \"vec3 transformed = vec3( position );\";\n\n\tvar beginnormal_vertex = \"vec3 objectNormal = vec3( normal );\\n#ifdef USE_TANGENT\\n\\tvec3 objectTangent = vec3( tangent.xyz );\\n#endif\";\n\n\tvar bsdfs = \"vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\\n}\\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\tif( cutoffDistance > 0.0 ) {\\n\\t\\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t}\\n\\treturn distanceFalloff;\\n#else\\n\\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\\n\\t\\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n\\t}\\n\\treturn 1.0;\\n#endif\\n}\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\n\\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n}\\nvec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );\\n\\tvec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;\\n\\treturn Fr * fresnel + F0;\\n}\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\treturn 1.0 / ( gl * gv );\\n}\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( incidentLight.direction + viewDir );\\n\\tfloat dotNL = saturate( dot( normal, incidentLight.direction ) );\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\tfloat D = D_GGX( alpha, dotNH );\\n\\treturn F * ( G * D );\\n}\\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\\n\\tconst float LUT_SIZE  = 64.0;\\n\\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\\n\\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\\n\\tfloat dotNV = saturate( dot( N, V ) );\\n\\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\\n\\tuv = uv * LUT_SCALE + LUT_BIAS;\\n\\treturn uv;\\n}\\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\\n\\tfloat l = length( f );\\n\\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\\n}\\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\\n\\tfloat x = dot( v1, v2 );\\n\\tfloat y = abs( x );\\n\\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\\n\\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\\n\\tfloat v = a / b;\\n\\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\\n\\treturn cross( v1, v2 ) * theta_sintheta;\\n}\\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\\n\\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\\n\\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\\n\\tvec3 lightNormal = cross( v1, v2 );\\n\\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\\n\\tvec3 T1, T2;\\n\\tT1 = normalize( V - N * dot( V, N ) );\\n\\tT2 = - cross( N, T1 );\\n\\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\\n\\tvec3 coords[ 4 ];\\n\\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\\n\\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\\n\\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\\n\\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\\n\\tcoords[ 0 ] = normalize( coords[ 0 ] );\\n\\tcoords[ 1 ] = normalize( coords[ 1 ] );\\n\\tcoords[ 2 ] = normalize( coords[ 2 ] );\\n\\tcoords[ 3 ] = normalize( coords[ 3 ] );\\n\\tvec3 vectorFormFactor = vec3( 0.0 );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\\n\\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\\n\\treturn vec3( result );\\n}\\nvec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\\n\\treturn specularColor * brdf.x + brdf.y;\\n}\\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tvec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );\\n\\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\\n\\tvec3 FssEss = F * brdf.x + brdf.y;\\n\\tfloat Ess = brdf.x + brdf.y;\\n\\tfloat Ems = 1.0 - Ess;\\n\\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\\n\\tsingleScatter += FssEss;\\n\\tmultiScatter += Fms * Ems;\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n}\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\\n#if defined( USE_SHEEN )\\nfloat D_Charlie(float roughness, float NoH) {\\n\\tfloat invAlpha  = 1.0 / roughness;\\n\\tfloat cos2h = NoH * NoH;\\n\\tfloat sin2h = max(1.0 - cos2h, 0.0078125);\\treturn (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);\\n}\\nfloat V_Neubelt(float NoV, float NoL) {\\n\\treturn saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\\n}\\nvec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {\\n\\tvec3 N = geometry.normal;\\n\\tvec3 V = geometry.viewDir;\\n\\tvec3 H = normalize( V + L );\\n\\tfloat dotNH = saturate( dot( N, H ) );\\n\\treturn specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );\\n}\\n#endif\";\n\n\tvar bumpmap_pars_fragment = \"#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\\n\\t\\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\\n\\t\\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 );\\n\\t\\tfDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif\";\n\n\tvar clipping_planes_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvec4 plane;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\\n\\t\\tplane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\\n\\t}\\n\\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\\n\\t\\tbool clipped = true;\\n\\t\\t#pragma unroll_loop\\n\\t\\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\\n\\t\\t\\tplane = clippingPlanes[ i ];\\n\\t\\t\\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\\n\\t\\t}\\n\\t\\tif ( clipped ) discard;\\n\\t#endif\\n#endif\";\n\n\tvar clipping_planes_pars_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\t#if ! defined( STANDARD ) && ! defined( PHONG ) && ! defined( MATCAP )\\n\\t\\tvarying vec3 vViewPosition;\\n\\t#endif\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\";\n\n\tvar clipping_planes_pars_vertex = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( STANDARD ) && ! defined( PHONG ) && ! defined( MATCAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\";\n\n\tvar clipping_planes_vertex = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( STANDARD ) && ! defined( PHONG ) && ! defined( MATCAP )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\";\n\n\tvar color_fragment = \"#ifdef USE_COLOR\\n\\tdiffuseColor.rgb *= vColor;\\n#endif\";\n\n\tvar color_pars_fragment = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\";\n\n\tvar color_pars_vertex = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\";\n\n\tvar color_vertex = \"#ifdef USE_COLOR\\n\\tvColor.xyz = color.xyz;\\n#endif\";\n\n\tvar common = \"#define PI 3.14159265359\\n#define PI2 6.28318530718\\n#define PI_HALF 1.5707963267949\\n#define RECIPROCAL_PI 0.31830988618\\n#define RECIPROCAL_PI2 0.15915494\\n#define LOG2 1.442695\\n#define EPSILON 1e-6\\n#ifndef saturate\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\n#define whiteComplement(a) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract(sin(sn) * c);\\n}\\n#ifdef HIGH_PRECISION\\n\\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\\n#else\\n\\tfloat max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }\\n\\tfloat precisionSafeLength( vec3 v ) {\\n\\t\\tfloat maxComponent = max3( abs( v ) );\\n\\t\\treturn length( v / maxComponent ) * maxComponent;\\n\\t}\\n#endif\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n#ifdef CLEARCOAT\\n\\tvec3 clearcoatNormal;\\n#endif\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\\treturn - distance * planeNormal + point;\\n}\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n}\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n}\\nmat3 transposeMat3( const in mat3 m ) {\\n\\tmat3 tmp;\\n\\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\\n\\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\\n\\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\\n\\treturn tmp;\\n}\\nfloat linearToRelativeLuminance( const in vec3 color ) {\\n\\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\\n\\treturn dot( weights, color.rgb );\\n}\\nbool isPerspectiveMatrix( mat4 m ) {\\n  return m[ 2 ][ 3 ] == - 1.0;\\n}\";\n\n\tvar cube_uv_reflection_fragment = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n#define cubeUV_maxMipLevel 8.0\\n#define cubeUV_minMipLevel 4.0\\n#define cubeUV_maxTileSize 256.0\\n#define cubeUV_minTileSize 16.0\\nfloat getFace(vec3 direction) {\\n    vec3 absDirection = abs(direction);\\n    float face = -1.0;\\n    if (absDirection.x > absDirection.z) {\\n      if (absDirection.x > absDirection.y)\\n        face = direction.x > 0.0 ? 0.0 : 3.0;\\n      else\\n        face = direction.y > 0.0 ? 1.0 : 4.0;\\n    } else {\\n      if (absDirection.z > absDirection.y)\\n        face = direction.z > 0.0 ? 2.0 : 5.0;\\n      else\\n        face = direction.y > 0.0 ? 1.0 : 4.0;\\n    }\\n    return face;\\n}\\nvec2 getUV(vec3 direction, float face) {\\n    vec2 uv;\\n    if (face == 0.0) {\\n      uv = vec2(-direction.z, direction.y) / abs(direction.x);\\n    } else if (face == 1.0) {\\n      uv = vec2(direction.x, -direction.z) / abs(direction.y);\\n    } else if (face == 2.0) {\\n      uv = direction.xy / abs(direction.z);\\n    } else if (face == 3.0) {\\n      uv = vec2(direction.z, direction.y) / abs(direction.x);\\n    } else if (face == 4.0) {\\n      uv = direction.xz / abs(direction.y);\\n    } else {\\n      uv = vec2(-direction.x, direction.y) / abs(direction.z);\\n    }\\n    return 0.5 * (uv + 1.0);\\n}\\nvec3 bilinearCubeUV(sampler2D envMap, vec3 direction, float mipInt) {\\n  float face = getFace(direction);\\n  float filterInt = max(cubeUV_minMipLevel - mipInt, 0.0);\\n  mipInt = max(mipInt, cubeUV_minMipLevel);\\n  float faceSize = exp2(mipInt);\\n  float texelSize = 1.0 / (3.0 * cubeUV_maxTileSize);\\n  vec2 uv = getUV(direction, face) * (faceSize - 1.0);\\n  vec2 f = fract(uv);\\n  uv += 0.5 - f;\\n  if (face > 2.0) {\\n    uv.y += faceSize;\\n    face -= 3.0;\\n  }\\n  uv.x += face * faceSize;\\n  if(mipInt < cubeUV_maxMipLevel){\\n    uv.y += 2.0 * cubeUV_maxTileSize;\\n  }\\n  uv.y += filterInt * 2.0 * cubeUV_minTileSize;\\n  uv.x += 3.0 * max(0.0, cubeUV_maxTileSize - 2.0 * faceSize);\\n  uv *= texelSize;\\n  vec3 tl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\\n  uv.x += texelSize;\\n  vec3 tr = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\\n  uv.y += texelSize;\\n  vec3 br = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\\n  uv.x -= texelSize;\\n  vec3 bl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\\n  vec3 tm = mix(tl, tr, f.x);\\n  vec3 bm = mix(bl, br, f.x);\\n  return mix(tm, bm, f.y);\\n}\\n#define r0 1.0\\n#define v0 0.339\\n#define m0 -2.0\\n#define r1 0.8\\n#define v1 0.276\\n#define m1 -1.0\\n#define r4 0.4\\n#define v4 0.046\\n#define m4 2.0\\n#define r5 0.305\\n#define v5 0.016\\n#define m5 3.0\\n#define r6 0.21\\n#define v6 0.0038\\n#define m6 4.0\\nfloat roughnessToMip(float roughness) {\\n  float mip = 0.0;\\n  if (roughness >= r1) {\\n    mip = (r0 - roughness) * (m1 - m0) / (r0 - r1) + m0;\\n  } else if (roughness >= r4) {\\n    mip = (r1 - roughness) * (m4 - m1) / (r1 - r4) + m1;\\n  } else if (roughness >= r5) {\\n    mip = (r4 - roughness) * (m5 - m4) / (r4 - r5) + m4;\\n  } else if (roughness >= r6) {\\n    mip = (r5 - roughness) * (m6 - m5) / (r5 - r6) + m5;\\n  } else {\\n    mip = -2.0 * log2(1.16 * roughness);  }\\n  return mip;\\n}\\nvec4 textureCubeUV(sampler2D envMap, vec3 sampleDir, float roughness) {\\n  float mip = clamp(roughnessToMip(roughness), m0, cubeUV_maxMipLevel);\\n  float mipF = fract(mip);\\n  float mipInt = floor(mip);\\n  vec3 color0 = bilinearCubeUV(envMap, sampleDir, mipInt);\\n  if (mipF == 0.0) {\\n    return vec4(color0, 1.0);\\n  } else {\\n    vec3 color1 = bilinearCubeUV(envMap, sampleDir, mipInt + 1.0);\\n    return vec4(mix(color0, color1, mipF), 1.0);\\n  }\\n}\\n#endif\";\n\n\tvar defaultnormal_vertex = \"vec3 transformedNormal = objectNormal;\\n#ifdef USE_INSTANCING\\n\\ttransformedNormal = mat3( instanceMatrix ) * transformedNormal;\\n#endif\\ntransformedNormal = normalMatrix * transformedNormal;\\n#ifdef FLIP_SIDED\\n\\ttransformedNormal = - transformedNormal;\\n#endif\\n#ifdef USE_TANGENT\\n\\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#ifdef FLIP_SIDED\\n\\t\\ttransformedTangent = - transformedTangent;\\n\\t#endif\\n#endif\";\n\n\tvar displacementmap_pars_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif\";\n\n\tvar displacementmap_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\\n#endif\";\n\n\tvar emissivemap_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\";\n\n\tvar emissivemap_pars_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif\";\n\n\tvar encodings_fragment = \"gl_FragColor = linearToOutputTexel( gl_FragColor );\";\n\n\tvar encodings_pars_fragment = \"\\nvec4 LinearToLinear( in vec4 value ) {\\n\\treturn value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n\\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n\\tfloat maxComponent = max( max( value.r, value.g ), value.b );\\n\\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n\\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n\\tM = ceil( M * 255.0 ) / 255.0;\\n\\treturn vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat D = max( maxRange / maxRGB, 1.0 );\\n\\tD = clamp( floor( D ) / 255.0, 0.0, 1.0 );\\n\\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value )  {\\n\\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\\n\\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\\n\\tvec4 vResult;\\n\\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n\\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n\\tvResult.w = fract( Le );\\n\\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\\n\\treturn vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n\\tfloat Le = value.z * 255.0 + value.w;\\n\\tvec3 Xp_Y_XYZp;\\n\\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\\n\\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n\\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n\\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\\n\\treturn vec4( max( vRGB, 0.0 ), 1.0 );\\n}\";\n\n\tvar envmap_fragment = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvec3 cameraToFrag;\\n\\t\\t\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t}  else {\\n\\t\\t\\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\\n\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\tvec2 sampleUV;\\n\\t\\treflectVec = normalize( reflectVec );\\n\\t\\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\t\\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\tvec4 envColor = texture2D( envMap, sampleUV );\\n\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\treflectVec = normalize( reflectVec );\\n\\t\\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\\n\\t\\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\\n\\t#else\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\t#endif\\n\\t#ifndef ENVMAP_TYPE_CUBE_UV\\n\\t\\tenvColor = envMapTexelToLinear( envColor );\\n\\t#endif\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif\";\n\n\tvar envmap_common_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float envMapIntensity;\\n\\tuniform float flipEnvMap;\\n\\tuniform int maxMipLevel;\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\t\\n#endif\";\n\n\tvar envmap_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float reflectivity;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif\";\n\n\tvar envmap_pars_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\t\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif\";\n\n\tvar envmap_vertex = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex;\\n\\t\\tif ( isOrthographic ) { \\n\\t\\t\\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif\";\n\n\tvar fog_vertex = \"#ifdef USE_FOG\\n\\tfogDepth = -mvPosition.z;\\n#endif\";\n\n\tvar fog_pars_vertex = \"#ifdef USE_FOG\\n\\tvarying float fogDepth;\\n#endif\";\n\n\tvar fog_fragment = \"#ifdef USE_FOG\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\";\n\n\tvar fog_pars_fragment = \"#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\tvarying float fogDepth;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif\";\n\n\tvar gradientmap_pars_fragment = \"#ifdef USE_GRADIENTMAP\\n\\tuniform sampler2D gradientMap;\\n#endif\\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\\n\\tfloat dotNL = dot( normal, lightDirection );\\n\\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\\n\\t#ifdef USE_GRADIENTMAP\\n\\t\\treturn texture2D( gradientMap, coord ).rgb;\\n\\t#else\\n\\t\\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\\n\\t#endif\\n}\";\n\n\tvar lightmap_fragment = \"#ifdef USE_LIGHTMAP\\n\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\treflectedLight.indirectDiffuse += PI * lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n#endif\";\n\n\tvar lightmap_pars_fragment = \"#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif\";\n\n\tvar lights_lambert_vertex = \"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\nvIndirectFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\\tvLightBack = vec3( 0.0 );\\n\\tvIndirectBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\n#if NUM_POINT_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\\t\\t#endif\\n\\t}\\n#endif\";\n\n\tvar lights_pars_begin = \"uniform bool receiveShadow;\\nuniform vec3 ambientLightColor;\\nuniform vec3 lightProbe[ 9 ];\\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\\n\\tfloat x = normal.x, y = normal.y, z = normal.z;\\n\\tvec3 result = shCoefficients[ 0 ] * 0.886227;\\n\\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\\n\\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\\n\\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\\n\\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\\n\\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\\n\\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\\n\\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\\n\\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\\n\\treturn result;\\n}\\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\\n\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\\n\\treturn irradiance;\\n}\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treturn irradiance;\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tdirectLight.color = directionalLight.color;\\n\\t\\tdirectLight.direction = directionalLight.direction;\\n\\t\\tdirectLight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t\\tfloat shadowCameraNear;\\n\\t\\tfloat shadowCameraFar;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tdirectLight.color = pointLight.color;\\n\\t\\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\\t\\tif ( angleCos > spotLight.coneCos ) {\\n\\t\\t\\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\t\\tdirectLight.color = spotLight.color;\\n\\t\\t\\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\t\\t} else {\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tstruct RectAreaLight {\\n\\t\\tvec3 color;\\n\\t\\tvec3 position;\\n\\t\\tvec3 halfWidth;\\n\\t\\tvec3 halfHeight;\\n\\t};\\n\\tuniform sampler2D ltc_1;\\tuniform sampler2D ltc_2;\\n\\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\\t\\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tirradiance *= PI;\\n\\t\\t#endif\\n\\t\\treturn irradiance;\\n\\t}\\n#endif\";\n\n\tvar envmap_physical_pars_fragment = \"#if defined( USE_ENVMAP )\\n\\t#ifdef ENVMAP_MODE_REFRACTION\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n\\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\\t\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\\n\\t\\t#else\\n\\t\\t\\tvec4 envMapColor = vec4( 0.0 );\\n\\t\\t#endif\\n\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t}\\n\\tfloat getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {\\n\\t\\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\\t\\tfloat sigma = PI * roughness * roughness / ( 1.0 + roughness );\\n\\t\\tfloat desiredMIPLevel = maxMIPLevelScalar + log2( sigma );\\n\\t\\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\\t}\\n\\tvec3 getLightProbeIndirectRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t  vec3 reflectVec = reflect( -viewDir, normal );\\n\\t\\t  reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\\n\\t\\t#else\\n\\t\\t  vec3 reflectVec = refract( -viewDir, normal, refractionRatio );\\n\\t\\t#endif\\n\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\tfloat specularMIPLevel = getSpecularMIPLevel( roughness, maxMIPLevel );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\\n\\t\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\t\\tvec2 sampleUV;\\n\\t\\t\\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\t\\t\\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\t\\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#endif\\n\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t}\\n#endif\";\n\n\tvar lights_toon_fragment = \"ToonMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\";\n\n\tvar lights_toon_pars_fragment = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct ToonMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tvec3\\tspecularColor;\\n\\tfloat\\tspecularShininess;\\n\\tfloat\\tspecularStrength;\\n};\\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Toon\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Toon\\n#define Material_LightProbeLOD( material )\\t(0)\";\n\n\tvar lights_phong_fragment = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\";\n\n\tvar lights_phong_pars_fragment = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct BlinnPhongMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tvec3\\tspecularColor;\\n\\tfloat\\tspecularShininess;\\n\\tfloat\\tspecularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\\t(0)\";\n\n\tvar lights_physical_fragment = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\\nmaterial.specularRoughness = max( roughnessFactor, 0.0525 );material.specularRoughness += geometryRoughness;\\nmaterial.specularRoughness = min( material.specularRoughness, 1.0 );\\n#ifdef REFLECTIVITY\\n\\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\\n#endif\\n#ifdef CLEARCOAT\\n\\tmaterial.clearcoat = saturate( clearcoat );\\tmaterial.clearcoatRoughness = max( clearcoatRoughness, 0.0525 );\\n\\tmaterial.clearcoatRoughness += geometryRoughness;\\n\\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\\n#endif\\n#ifdef USE_SHEEN\\n\\tmaterial.sheenColor = sheen;\\n#endif\";\n\n\tvar lights_physical_pars_fragment = \"struct PhysicalMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tfloat\\tspecularRoughness;\\n\\tvec3\\tspecularColor;\\n#ifdef CLEARCOAT\\n\\tfloat clearcoat;\\n\\tfloat clearcoatRoughness;\\n#endif\\n#ifdef USE_SHEEN\\n\\tvec3 sheenColor;\\n#endif\\n};\\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\\nfloat clearcoatDHRApprox( const in float roughness, const in float dotNL ) {\\n\\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\\n}\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t\\tvec3 normal = geometry.normal;\\n\\t\\tvec3 viewDir = geometry.viewDir;\\n\\t\\tvec3 position = geometry.position;\\n\\t\\tvec3 lightPos = rectAreaLight.position;\\n\\t\\tvec3 halfWidth = rectAreaLight.halfWidth;\\n\\t\\tvec3 halfHeight = rectAreaLight.halfHeight;\\n\\t\\tvec3 lightColor = rectAreaLight.color;\\n\\t\\tfloat roughness = material.specularRoughness;\\n\\t\\tvec3 rectCoords[ 4 ];\\n\\t\\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\\t\\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\\n\\t\\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\\n\\t\\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\\n\\t\\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\\n\\t\\tvec4 t1 = texture2D( ltc_1, uv );\\n\\t\\tvec4 t2 = texture2D( ltc_2, uv );\\n\\t\\tmat3 mInv = mat3(\\n\\t\\t\\tvec3( t1.x, 0, t1.y ),\\n\\t\\t\\tvec3(    0, 1,    0 ),\\n\\t\\t\\tvec3( t1.z, 0, t1.w )\\n\\t\\t);\\n\\t\\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\\n\\t\\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\\n\\t\\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\\n\\t}\\n#endif\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\t#ifdef CLEARCOAT\\n\\t\\tfloat ccDotNL = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\\n\\t\\tvec3 ccIrradiance = ccDotNL * directLight.color;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tccIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\\n\\t\\treflectedLight.directSpecular += ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\\n\\t#else\\n\\t\\tfloat clearcoatDHR = 0.0;\\n\\t#endif\\n\\t#ifdef USE_SHEEN\\n\\t\\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(\\n\\t\\t\\tmaterial.specularRoughness,\\n\\t\\t\\tdirectLight.direction,\\n\\t\\t\\tgeometry,\\n\\t\\t\\tmaterial.sheenColor\\n\\t\\t);\\n\\t#else\\n\\t\\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularRoughness);\\n\\t#endif\\n\\treflectedLight.directDiffuse += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\\n\\t#ifdef CLEARCOAT\\n\\t\\tfloat ccDotNV = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular += clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\\n\\t\\tfloat ccDotNL = ccDotNV;\\n\\t\\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\\n\\t#else\\n\\t\\tfloat clearcoatDHR = 0.0;\\n\\t#endif\\n\\tfloat clearcoatInv = 1.0 - clearcoatDHR;\\n\\tvec3 singleScattering = vec3( 0.0 );\\n\\tvec3 multiScattering = vec3( 0.0 );\\n\\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\\n\\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\\n\\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\\n\\treflectedLight.indirectSpecular += clearcoatInv * radiance * singleScattering;\\n\\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\\n\\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_Direct_RectArea\\t\\tRE_Direct_RectArea_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\";\n\n\tvar lights_fragment_begin = \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\\n#ifdef CLEARCOAT\\n\\tgeometry.clearcoatNormal = clearcoatNormal;\\n#endif\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\\n\\t\\tdirectLight.color *= all( bvec3( pointLight.shadow, directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\\n\\t\\tdirectLight.color *= all( bvec3( spotLight.shadow, directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\\n\\t\\tdirectLight.color *= all( bvec3( directionalLight.shadow, directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\\n\\tRectAreaLight rectAreaLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\\n\\t\\trectAreaLight = rectAreaLights[ i ];\\n\\t\\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 iblIrradiance = vec3( 0.0 );\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\tirradiance += getLightProbeIrradiance( lightProbe, geometry );\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\t#pragma unroll_loop\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t}\\n\\t#endif\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tvec3 radiance = vec3( 0.0 );\\n\\tvec3 clearcoatRadiance = vec3( 0.0 );\\n#endif\";\n\n\tvar lights_fragment_maps = \"#if defined( RE_IndirectDiffuse )\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\t\\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tlightMapIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tiblIrradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\\n\\t#endif\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\tradiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );\\n\\t#ifdef CLEARCOAT\\n\\t\\tclearcoatRadiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );\\n\\t#endif\\n#endif\";\n\n\tvar lights_fragment_end = \"#if defined( RE_IndirectDiffuse )\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\\n#endif\";\n\n\tvar logdepthbuf_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\\n#endif\";\n\n\tvar logdepthbuf_pars_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tuniform float logDepthBufFC;\\n\\tvarying float vFragDepth;\\n\\tvarying float vIsPerspective;\\n#endif\";\n\n\tvar logdepthbuf_pars_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t\\tvarying float vIsPerspective;\\n\\t#else\\n\\t\\tuniform float logDepthBufFC;\\n\\t#endif\\n#endif\";\n\n\tvar logdepthbuf_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\t\\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\\n\\t#else\\n\\t\\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\\n\\t\\t\\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\\n\\t\\t\\tgl_Position.z *= gl_Position.w;\\n\\t\\t}\\n\\t#endif\\n#endif\";\n\n\tvar map_fragment = \"#ifdef USE_MAP\\n\\tvec4 texelColor = texture2D( map, vUv );\\n\\ttexelColor = mapTexelToLinear( texelColor );\\n\\tdiffuseColor *= texelColor;\\n#endif\";\n\n\tvar map_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\";\n\n\tvar map_particle_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\\n#endif\\n#ifdef USE_MAP\\n\\tvec4 mapTexel = texture2D( map, uv );\\n\\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\\n#endif\";\n\n\tvar map_particle_pars_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tuniform mat3 uvTransform;\\n#endif\\n#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\n\n\tvar metalnessmap_fragment = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\tmetalnessFactor *= texelMetalness.b;\\n#endif\";\n\n\tvar metalnessmap_pars_fragment = \"#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif\";\n\n\tvar morphnormal_vertex = \"#ifdef USE_MORPHNORMALS\\n\\tobjectNormal *= morphTargetBaseInfluence;\\n\\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\\n\\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\\n\\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\\n\\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\\n#endif\";\n\n\tvar morphtarget_pars_vertex = \"#ifdef USE_MORPHTARGETS\\n\\tuniform float morphTargetBaseInfluence;\\n\\t#ifndef USE_MORPHNORMALS\\n\\tuniform float morphTargetInfluences[ 8 ];\\n\\t#else\\n\\tuniform float morphTargetInfluences[ 4 ];\\n\\t#endif\\n#endif\";\n\n\tvar morphtarget_vertex = \"#ifdef USE_MORPHTARGETS\\n\\ttransformed *= morphTargetBaseInfluence;\\n\\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\\n\\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\\n\\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\\n\\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\\n\\t#ifndef USE_MORPHNORMALS\\n\\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\\n\\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\\n\\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\\n\\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\\n\\t#endif\\n#endif\";\n\n\tvar normal_fragment_begin = \"#ifdef FLAT_SHADED\\n\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t#endif\\n\\t#ifdef USE_TANGENT\\n\\t\\tvec3 tangent = normalize( vTangent );\\n\\t\\tvec3 bitangent = normalize( vBitangent );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\ttangent = tangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\t\\tbitangent = bitangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\t#endif\\n\\t\\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\\n\\t\\t\\tmat3 vTBN = mat3( tangent, bitangent, normal );\\n\\t\\t#endif\\n\\t#endif\\n#endif\\nvec3 geometryNormal = normal;\";\n\n\tvar normal_fragment_maps = \"#ifdef OBJECTSPACE_NORMALMAP\\n\\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t#ifdef FLIP_SIDED\\n\\t\\tnormal = - normal;\\n\\t#endif\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t#endif\\n\\tnormal = normalize( normalMatrix * normal );\\n#elif defined( TANGENTSPACE_NORMALMAP )\\n\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tmapN.xy *= normalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tnormal = normalize( vTBN * mapN );\\n\\t#else\\n\\t\\tnormal = perturbNormal2Arb( -vViewPosition, normal, mapN );\\n\\t#endif\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\\n#endif\";\n\n\tvar normalmap_pars_fragment = \"#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n#endif\\n#ifdef OBJECTSPACE_NORMALMAP\\n\\tuniform mat3 normalMatrix;\\n#endif\\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\\n\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN ) {\\n\\t\\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\\n\\t\\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\\n\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\t\\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s );\\n\\t\\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\\n\\t\\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\\n\\t\\tvec3 N = normalize( surf_norm );\\n\\t\\tmat3 tsn = mat3( S, T, N );\\n\\t\\tmapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\treturn normalize( tsn * mapN );\\n\\t}\\n#endif\";\n\n\tvar clearcoat_normal_fragment_begin = \"#ifdef CLEARCOAT\\n\\tvec3 clearcoatNormal = geometryNormal;\\n#endif\";\n\n\tvar clearcoat_normal_fragment_maps = \"#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tclearcoatMapN.xy *= clearcoatNormalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\\n\\t#else\\n\\t\\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN );\\n\\t#endif\\n#endif\";\n\n\tvar clearcoat_normalmap_pars_fragment = \"#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tuniform sampler2D clearcoatNormalMap;\\n\\tuniform vec2 clearcoatNormalScale;\\n#endif\";\n\n\tvar packing = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n\\treturn normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n\\treturn 2.0 * rgb.xyz - 1.0;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8;\\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\nvec4 pack2HalfToRGBA( vec2 v ) {\\n\\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ));\\n\\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w);\\n}\\nvec2 unpackRGBATo2Half( vec4 v ) {\\n\\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n\\treturn linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n\\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\";\n\n\tvar premultiplied_alpha_fragment = \"#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\";\n\n\tvar project_vertex = \"vec4 mvPosition = vec4( transformed, 1.0 );\\n#ifdef USE_INSTANCING\\n\\tmvPosition = instanceMatrix * mvPosition;\\n#endif\\nmvPosition = modelViewMatrix * mvPosition;\\ngl_Position = projectionMatrix * mvPosition;\";\n\n\tvar dithering_fragment = \"#ifdef DITHERING\\n\\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\\n#endif\";\n\n\tvar dithering_pars_fragment = \"#ifdef DITHERING\\n\\tvec3 dithering( vec3 color ) {\\n\\t\\tfloat grid_position = rand( gl_FragCoord.xy );\\n\\t\\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\\n\\t\\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\\n\\t\\treturn color + dither_shift_RGB;\\n\\t}\\n#endif\";\n\n\tvar roughnessmap_fragment = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\troughnessFactor *= texelRoughness.g;\\n#endif\";\n\n\tvar roughnessmap_pars_fragment = \"#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif\";\n\n\tvar shadowmap_pars_fragment = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\\n\\t\\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\\n\\t}\\n\\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\\n\\t\\tfloat occlusion = 1.0;\\n\\t\\tvec2 distribution = texture2DDistribution( shadow, uv );\\n\\t\\tfloat hard_shadow = step( compare , distribution.x );\\n\\t\\tif (hard_shadow != 1.0 ) {\\n\\t\\t\\tfloat distance = compare - distribution.x ;\\n\\t\\t\\tfloat variance = max( 0.00000, distribution.y * distribution.y );\\n\\t\\t\\tfloat softness_probability = variance / (variance + distance * distance );\\t\\t\\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\\t\\t\\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\\n\\t\\t}\\n\\t\\treturn occlusion;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tfloat shadow = 1.0;\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\\t\\tbool inFrustum = all( inFrustumVec );\\n\\t\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\t\\tbool frustumTest = all( frustumTestVec );\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx2 = dx0 / 2.0;\\n\\t\\t\\tfloat dy2 = dy0 / 2.0;\\n\\t\\t\\tfloat dx3 = dx1 / 2.0;\\n\\t\\t\\tfloat dy3 = dy1 / 2.0;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 17.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx = texelSize.x;\\n\\t\\t\\tfloat dy = texelSize.y;\\n\\t\\t\\tvec2 uv = shadowCoord.xy;\\n\\t\\t\\tvec2 f = fract( uv * shadowMapSize + 0.5 );\\n\\t\\t\\tuv -= f * texelSize;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t\\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t  f.x ),\\n\\t\\t\\t\\t\\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t\\t  texture2DCompare( shadowMap, uv + + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t  f.x ),\\n\\t\\t\\t\\t\\t f.y )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#else\\n\\t\\t\\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn shadow;\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\\t\\tdp += shadowBias;\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t#endif\\n\\t}\\n#endif\";\n\n\tvar shadowmap_pars_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n#endif\";\n\n\tvar shadowmap_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n#endif\";\n\n\tvar shadowmask_pars_fragment = \"float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLight directionalLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tshadow *= all( bvec2( directionalLight.shadow, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLight spotLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tshadow *= all( bvec2( spotLight.shadow, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLight pointLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tshadow *= all( bvec2( pointLight.shadow, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}\";\n\n\tvar skinbase_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\n\n\tvar skinning_pars_vertex = \"#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\t#ifdef BONE_TEXTURE\\n\\t\\tuniform highp sampler2D boneTexture;\\n\\t\\tuniform int boneTextureSize;\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tfloat j = i * 4.0;\\n\\t\\t\\tfloat x = mod( j, float( boneTextureSize ) );\\n\\t\\t\\tfloat y = floor( j / float( boneTextureSize ) );\\n\\t\\t\\tfloat dx = 1.0 / float( boneTextureSize );\\n\\t\\t\\tfloat dy = 1.0 / float( boneTextureSize );\\n\\t\\t\\ty = dy * ( y + 0.5 );\\n\\t\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\t\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#else\\n\\t\\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tmat4 bone = boneMatrices[ int(i) ];\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#endif\\n#endif\";\n\n\tvar skinning_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\ttransformed = ( bindMatrixInverse * skinned ).xyz;\\n#endif\";\n\n\tvar skinnormal_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n\\t#ifdef USE_TANGENT\\n\\t\\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#endif\\n#endif\";\n\n\tvar specularmap_fragment = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif\";\n\n\tvar specularmap_pars_fragment = \"#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif\";\n\n\tvar tonemapping_fragment = \"#if defined( TONE_MAPPING )\\n\\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\";\n\n\tvar tonemapping_pars_fragment = \"#ifndef saturate\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\nuniform float toneMappingExposure;\\nuniform float toneMappingWhitePoint;\\nvec3 LinearToneMapping( vec3 color ) {\\n\\treturn toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\\nvec3 Uncharted2ToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\tcolor = max( vec3( 0.0 ), color - 0.004 );\\n\\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\nvec3 ACESFilmicToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( ( color * ( 2.51 * color + 0.03 ) ) / ( color * ( 2.43 * color + 0.59 ) + 0.14 ) );\\n}\";\n\n\tvar uv_pars_fragment = \"#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\\n\\tvarying vec2 vUv;\\n#endif\";\n\n\tvar uv_pars_vertex = \"#ifdef USE_UV\\n\\t#ifdef UVS_VERTEX_ONLY\\n\\t\\tvec2 vUv;\\n\\t#else\\n\\t\\tvarying vec2 vUv;\\n\\t#endif\\n\\tuniform mat3 uvTransform;\\n#endif\";\n\n\tvar uv_vertex = \"#ifdef USE_UV\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n#endif\";\n\n\tvar uv2_pars_fragment = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvarying vec2 vUv2;\\n#endif\";\n\n\tvar uv2_pars_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tattribute vec2 uv2;\\n\\tvarying vec2 vUv2;\\n\\tuniform mat3 uv2Transform;\\n#endif\";\n\n\tvar uv2_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\\n#endif\";\n\n\tvar worldpos_vertex = \"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\\n\\tvec4 worldPosition = vec4( transformed, 1.0 );\\n\\t#ifdef USE_INSTANCING\\n\\t\\tworldPosition = instanceMatrix * worldPosition;\\n\\t#endif\\n\\tworldPosition = modelMatrix * worldPosition;\\n#endif\";\n\n\tvar background_frag = \"uniform sampler2D t2D;\\nvarying vec2 vUv;\\nvoid main() {\\n\\tvec4 texColor = texture2D( t2D, vUv );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\n\tvar background_vert = \"varying vec2 vUv;\\nuniform mat3 uvTransform;\\nvoid main() {\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n\\tgl_Position = vec4( position.xy, 1.0, 1.0 );\\n}\";\n\n\tvar cube_frag = \"#include <envmap_common_pars_fragment>\\nuniform float opacity;\\nvarying vec3 vWorldDirection;\\n#include <cube_uv_reflection_fragment>\\nvoid main() {\\n\\tvec3 vReflect = vWorldDirection;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = envColor;\\n\\tgl_FragColor.a *= opacity;\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\n\tvar cube_vert = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\tgl_Position.z = gl_Position.w;\\n}\";\n\n\tvar depth_frag = \"#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( 1.0 - gl_FragCoord.z ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\\n\\t#endif\\n}\";\n\n\tvar depth_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n}\";\n\n\tvar distanceRGBA_frag = \"#define DISTANCE\\nuniform vec3 referencePosition;\\nuniform float nearDistance;\\nuniform float farDistance;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\tfloat dist = length( vWorldPosition - referencePosition );\\n\\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\\n\\tdist = saturate( dist );\\n\\tgl_FragColor = packDepthToRGBA( dist );\\n}\";\n\n\tvar distanceRGBA_vert = \"#define DISTANCE\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition.xyz;\\n}\";\n\n\tvar equirect_frag = \"uniform sampler2D tEquirect;\\nvarying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvec3 direction = normalize( vWorldDirection );\\n\\tvec2 sampleUV;\\n\\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tvec4 texColor = texture2D( tEquirect, sampleUV );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\n\tvar equirect_vert = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\";\n\n\tvar linedashed_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n\n\tvar linedashed_vert = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\tvLineDistance = scale * lineDistance;\\n\\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshbasic_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\n\\t\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\t\\treflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vec3( 1.0 );\\n\\t#endif\\n\\t#include <aomap_fragment>\\n\\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n\n\tvar meshbasic_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_ENVMAP\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshlambert_frag = \"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <emissivemap_fragment>\\n\\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vIndirectFront;\\n\\t#endif\\n\\t#include <lightmap_fragment>\\n\\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\\t#else\\n\\t\\treflectedLight.directDiffuse = vLightFront;\\n\\t#endif\\n\\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshlambert_vert = \"#define LAMBERT\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <lights_lambert_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshmatcap_frag = \"#define MATCAP\\nuniform vec3 diffuse;\\nuniform float opacity;\\nuniform sampler2D matcap;\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tvec3 viewDir = normalize( vViewPosition );\\n\\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\\n\\tvec3 y = cross( viewDir, x );\\n\\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\\n\\t#ifdef USE_MATCAP\\n\\t\\tvec4 matcapColor = texture2D( matcap, uv );\\n\\t\\tmatcapColor = matcapTexelToLinear( matcapColor );\\n\\t#else\\n\\t\\tvec4 matcapColor = vec4( 1.0 );\\n\\t#endif\\n\\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n\n\tvar meshmatcap_vert = \"#define MATCAP\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#ifndef FLAT_SHADED\\n\\t\\tvNormal = normalize( transformedNormal );\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n}\";\n\n\tvar meshtoon_frag = \"#define TOON\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <gradientmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <lights_toon_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_toon_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshtoon_vert = \"#define TOON\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshphong_frag = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshphong_vert = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshphysical_frag = \"#define STANDARD\\n#ifdef PHYSICAL\\n\\t#define REFLECTIVITY\\n\\t#define CLEARCOAT\\n\\t#define TRANSPARENCY\\n#endif\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifdef TRANSPARENCY\\n\\tuniform float transparency;\\n#endif\\n#ifdef REFLECTIVITY\\n\\tuniform float reflectivity;\\n#endif\\n#ifdef CLEARCOAT\\n\\tuniform float clearcoat;\\n\\tuniform float clearcoatRoughness;\\n#endif\\n#ifdef USE_SHEEN\\n\\tuniform vec3 sheen;\\n#endif\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_physical_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <lights_pars_begin>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <clearcoat_normalmap_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <clearcoat_normal_fragment_begin>\\n\\t#include <clearcoat_normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#ifdef TRANSPARENCY\\n\\t\\tdiffuseColor.a *= saturate( 1. - transparency + linearToRelativeLuminance( reflectedLight.directSpecular + reflectedLight.indirectSpecular ) );\\n\\t#endif\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshphysical_vert = \"#define STANDARD\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar normal_frag = \"#define NORMAL\\nuniform float opacity;\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\\n}\";\n\n\tvar normal_vert = \"#define NORMAL\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n}\";\n\n\tvar points_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n\n\tvar points_vert = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\tgl_PointSize = size;\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar shadow_frag = \"uniform vec3 color;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\n\tvar shadow_vert = \"#include <fog_pars_vertex>\\n#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar sprite_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\n\tvar sprite_vert = \"uniform float rotation;\\nuniform vec2 center;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\tvec2 scale;\\n\\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\\n\\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\\n\\t#ifndef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) scale *= - mvPosition.z;\\n\\t#endif\\n\\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\\n\\tvec2 rotatedPosition;\\n\\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\\n\\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\\n\\tmvPosition.xy += rotatedPosition;\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar ShaderChunk = {\n\t\talphamap_fragment: alphamap_fragment,\n\t\talphamap_pars_fragment: alphamap_pars_fragment,\n\t\talphatest_fragment: alphatest_fragment,\n\t\taomap_fragment: aomap_fragment,\n\t\taomap_pars_fragment: aomap_pars_fragment,\n\t\tbegin_vertex: begin_vertex,\n\t\tbeginnormal_vertex: beginnormal_vertex,\n\t\tbsdfs: bsdfs,\n\t\tbumpmap_pars_fragment: bumpmap_pars_fragment,\n\t\tclipping_planes_fragment: clipping_planes_fragment,\n\t\tclipping_planes_pars_fragment: clipping_planes_pars_fragment,\n\t\tclipping_planes_pars_vertex: clipping_planes_pars_vertex,\n\t\tclipping_planes_vertex: clipping_planes_vertex,\n\t\tcolor_fragment: color_fragment,\n\t\tcolor_pars_fragment: color_pars_fragment,\n\t\tcolor_pars_vertex: color_pars_vertex,\n\t\tcolor_vertex: color_vertex,\n\t\tcommon: common,\n\t\tcube_uv_reflection_fragment: cube_uv_reflection_fragment,\n\t\tdefaultnormal_vertex: defaultnormal_vertex,\n\t\tdisplacementmap_pars_vertex: displacementmap_pars_vertex,\n\t\tdisplacementmap_vertex: displacementmap_vertex,\n\t\temissivemap_fragment: emissivemap_fragment,\n\t\temissivemap_pars_fragment: emissivemap_pars_fragment,\n\t\tencodings_fragment: encodings_fragment,\n\t\tencodings_pars_fragment: encodings_pars_fragment,\n\t\tenvmap_fragment: envmap_fragment,\n\t\tenvmap_common_pars_fragment: envmap_common_pars_fragment,\n\t\tenvmap_pars_fragment: envmap_pars_fragment,\n\t\tenvmap_pars_vertex: envmap_pars_vertex,\n\t\tenvmap_physical_pars_fragment: envmap_physical_pars_fragment,\n\t\tenvmap_vertex: envmap_vertex,\n\t\tfog_vertex: fog_vertex,\n\t\tfog_pars_vertex: fog_pars_vertex,\n\t\tfog_fragment: fog_fragment,\n\t\tfog_pars_fragment: fog_pars_fragment,\n\t\tgradientmap_pars_fragment: gradientmap_pars_fragment,\n\t\tlightmap_fragment: lightmap_fragment,\n\t\tlightmap_pars_fragment: lightmap_pars_fragment,\n\t\tlights_lambert_vertex: lights_lambert_vertex,\n\t\tlights_pars_begin: lights_pars_begin,\n\t\tlights_toon_fragment: lights_toon_fragment,\n\t\tlights_toon_pars_fragment: lights_toon_pars_fragment,\n\t\tlights_phong_fragment: lights_phong_fragment,\n\t\tlights_phong_pars_fragment: lights_phong_pars_fragment,\n\t\tlights_physical_fragment: lights_physical_fragment,\n\t\tlights_physical_pars_fragment: lights_physical_pars_fragment,\n\t\tlights_fragment_begin: lights_fragment_begin,\n\t\tlights_fragment_maps: lights_fragment_maps,\n\t\tlights_fragment_end: lights_fragment_end,\n\t\tlogdepthbuf_fragment: logdepthbuf_fragment,\n\t\tlogdepthbuf_pars_fragment: logdepthbuf_pars_fragment,\n\t\tlogdepthbuf_pars_vertex: logdepthbuf_pars_vertex,\n\t\tlogdepthbuf_vertex: logdepthbuf_vertex,\n\t\tmap_fragment: map_fragment,\n\t\tmap_pars_fragment: map_pars_fragment,\n\t\tmap_particle_fragment: map_particle_fragment,\n\t\tmap_particle_pars_fragment: map_particle_pars_fragment,\n\t\tmetalnessmap_fragment: metalnessmap_fragment,\n\t\tmetalnessmap_pars_fragment: metalnessmap_pars_fragment,\n\t\tmorphnormal_vertex: morphnormal_vertex,\n\t\tmorphtarget_pars_vertex: morphtarget_pars_vertex,\n\t\tmorphtarget_vertex: morphtarget_vertex,\n\t\tnormal_fragment_begin: normal_fragment_begin,\n\t\tnormal_fragment_maps: normal_fragment_maps,\n\t\tnormalmap_pars_fragment: normalmap_pars_fragment,\n\t\tclearcoat_normal_fragment_begin: clearcoat_normal_fragment_begin,\n\t\tclearcoat_normal_fragment_maps: clearcoat_normal_fragment_maps,\n\t\tclearcoat_normalmap_pars_fragment: clearcoat_normalmap_pars_fragment,\n\t\tpacking: packing,\n\t\tpremultiplied_alpha_fragment: premultiplied_alpha_fragment,\n\t\tproject_vertex: project_vertex,\n\t\tdithering_fragment: dithering_fragment,\n\t\tdithering_pars_fragment: dithering_pars_fragment,\n\t\troughnessmap_fragment: roughnessmap_fragment,\n\t\troughnessmap_pars_fragment: roughnessmap_pars_fragment,\n\t\tshadowmap_pars_fragment: shadowmap_pars_fragment,\n\t\tshadowmap_pars_vertex: shadowmap_pars_vertex,\n\t\tshadowmap_vertex: shadowmap_vertex,\n\t\tshadowmask_pars_fragment: shadowmask_pars_fragment,\n\t\tskinbase_vertex: skinbase_vertex,\n\t\tskinning_pars_vertex: skinning_pars_vertex,\n\t\tskinning_vertex: skinning_vertex,\n\t\tskinnormal_vertex: skinnormal_vertex,\n\t\tspecularmap_fragment: specularmap_fragment,\n\t\tspecularmap_pars_fragment: specularmap_pars_fragment,\n\t\ttonemapping_fragment: tonemapping_fragment,\n\t\ttonemapping_pars_fragment: tonemapping_pars_fragment,\n\t\tuv_pars_fragment: uv_pars_fragment,\n\t\tuv_pars_vertex: uv_pars_vertex,\n\t\tuv_vertex: uv_vertex,\n\t\tuv2_pars_fragment: uv2_pars_fragment,\n\t\tuv2_pars_vertex: uv2_pars_vertex,\n\t\tuv2_vertex: uv2_vertex,\n\t\tworldpos_vertex: worldpos_vertex,\n\n\t\tbackground_frag: background_frag,\n\t\tbackground_vert: background_vert,\n\t\tcube_frag: cube_frag,\n\t\tcube_vert: cube_vert,\n\t\tdepth_frag: depth_frag,\n\t\tdepth_vert: depth_vert,\n\t\tdistanceRGBA_frag: distanceRGBA_frag,\n\t\tdistanceRGBA_vert: distanceRGBA_vert,\n\t\tequirect_frag: equirect_frag,\n\t\tequirect_vert: equirect_vert,\n\t\tlinedashed_frag: linedashed_frag,\n\t\tlinedashed_vert: linedashed_vert,\n\t\tmeshbasic_frag: meshbasic_frag,\n\t\tmeshbasic_vert: meshbasic_vert,\n\t\tmeshlambert_frag: meshlambert_frag,\n\t\tmeshlambert_vert: meshlambert_vert,\n\t\tmeshmatcap_frag: meshmatcap_frag,\n\t\tmeshmatcap_vert: meshmatcap_vert,\n\t\tmeshtoon_frag: meshtoon_frag,\n\t\tmeshtoon_vert: meshtoon_vert,\n\t\tmeshphong_frag: meshphong_frag,\n\t\tmeshphong_vert: meshphong_vert,\n\t\tmeshphysical_frag: meshphysical_frag,\n\t\tmeshphysical_vert: meshphysical_vert,\n\t\tnormal_frag: normal_frag,\n\t\tnormal_vert: normal_vert,\n\t\tpoints_frag: points_frag,\n\t\tpoints_vert: points_vert,\n\t\tshadow_frag: shadow_frag,\n\t\tshadow_vert: shadow_vert,\n\t\tsprite_frag: sprite_frag,\n\t\tsprite_vert: sprite_vert\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t */\n\n\tvar ShaderLib = {\n\n\t\tbasic: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.specularmap,\n\t\t\t\tUniformsLib.envmap,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.fog\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshbasic_vert,\n\t\t\tfragmentShader: ShaderChunk.meshbasic_frag\n\n\t\t},\n\n\t\tlambert: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.specularmap,\n\t\t\t\tUniformsLib.envmap,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.emissivemap,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\tUniformsLib.lights,\n\t\t\t\t{\n\t\t\t\t\temissive: { value: new Color( 0x000000 ) }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshlambert_vert,\n\t\t\tfragmentShader: ShaderChunk.meshlambert_frag\n\n\t\t},\n\n\t\tphong: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.specularmap,\n\t\t\t\tUniformsLib.envmap,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.emissivemap,\n\t\t\t\tUniformsLib.bumpmap,\n\t\t\t\tUniformsLib.normalmap,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\tUniformsLib.lights,\n\t\t\t\t{\n\t\t\t\t\temissive: { value: new Color( 0x000000 ) },\n\t\t\t\t\tspecular: { value: new Color( 0x111111 ) },\n\t\t\t\t\tshininess: { value: 30 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshphong_vert,\n\t\t\tfragmentShader: ShaderChunk.meshphong_frag\n\n\t\t},\n\n\t\tstandard: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.envmap,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.emissivemap,\n\t\t\t\tUniformsLib.bumpmap,\n\t\t\t\tUniformsLib.normalmap,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\tUniformsLib.roughnessmap,\n\t\t\t\tUniformsLib.metalnessmap,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\tUniformsLib.lights,\n\t\t\t\t{\n\t\t\t\t\temissive: { value: new Color( 0x000000 ) },\n\t\t\t\t\troughness: { value: 0.5 },\n\t\t\t\t\tmetalness: { value: 0.5 },\n\t\t\t\t\tenvMapIntensity: { value: 1 } // temporary\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\n\t\t},\n\n\t\ttoon: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.specularmap,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.emissivemap,\n\t\t\t\tUniformsLib.bumpmap,\n\t\t\t\tUniformsLib.normalmap,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\tUniformsLib.gradientmap,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\tUniformsLib.lights,\n\t\t\t\t{\n\t\t\t\t\temissive: { value: new Color( 0x000000 ) },\n\t\t\t\t\tspecular: { value: new Color( 0x111111 ) },\n\t\t\t\t\tshininess: { value: 30 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshtoon_vert,\n\t\t\tfragmentShader: ShaderChunk.meshtoon_frag\n\n\t\t},\n\n\t\tmatcap: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.bumpmap,\n\t\t\t\tUniformsLib.normalmap,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\t{\n\t\t\t\t\tmatcap: { value: null }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshmatcap_vert,\n\t\t\tfragmentShader: ShaderChunk.meshmatcap_frag\n\n\t\t},\n\n\t\tpoints: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.points,\n\t\t\t\tUniformsLib.fog\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.points_vert,\n\t\t\tfragmentShader: ShaderChunk.points_frag\n\n\t\t},\n\n\t\tdashed: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\t{\n\t\t\t\t\tscale: { value: 1 },\n\t\t\t\t\tdashSize: { value: 1 },\n\t\t\t\t\ttotalSize: { value: 2 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.linedashed_vert,\n\t\t\tfragmentShader: ShaderChunk.linedashed_frag\n\n\t\t},\n\n\t\tdepth: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.displacementmap\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.depth_vert,\n\t\t\tfragmentShader: ShaderChunk.depth_frag\n\n\t\t},\n\n\t\tnormal: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.bumpmap,\n\t\t\t\tUniformsLib.normalmap,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\t{\n\t\t\t\t\topacity: { value: 1.0 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.normal_vert,\n\t\t\tfragmentShader: ShaderChunk.normal_frag\n\n\t\t},\n\n\t\tsprite: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.sprite,\n\t\t\t\tUniformsLib.fog\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.sprite_vert,\n\t\t\tfragmentShader: ShaderChunk.sprite_frag\n\n\t\t},\n\n\t\tbackground: {\n\n\t\t\tuniforms: {\n\t\t\t\tuvTransform: { value: new Matrix3() },\n\t\t\t\tt2D: { value: null },\n\t\t\t},\n\n\t\t\tvertexShader: ShaderChunk.background_vert,\n\t\t\tfragmentShader: ShaderChunk.background_frag\n\n\t\t},\n\t\t/* -------------------------------------------------------------------------\n\t\t//\tCube map shader\n\t\t ------------------------------------------------------------------------- */\n\n\t\tcube: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.envmap,\n\t\t\t\t{\n\t\t\t\t\topacity: { value: 1.0 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.cube_vert,\n\t\t\tfragmentShader: ShaderChunk.cube_frag\n\n\t\t},\n\n\t\tequirect: {\n\n\t\t\tuniforms: {\n\t\t\t\ttEquirect: { value: null },\n\t\t\t},\n\n\t\t\tvertexShader: ShaderChunk.equirect_vert,\n\t\t\tfragmentShader: ShaderChunk.equirect_frag\n\n\t\t},\n\n\t\tdistanceRGBA: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\t{\n\t\t\t\t\treferencePosition: { value: new Vector3() },\n\t\t\t\t\tnearDistance: { value: 1 },\n\t\t\t\t\tfarDistance: { value: 1000 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.distanceRGBA_vert,\n\t\t\tfragmentShader: ShaderChunk.distanceRGBA_frag\n\n\t\t},\n\n\t\tshadow: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.lights,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\t{\n\t\t\t\t\tcolor: { value: new Color( 0x00000 ) },\n\t\t\t\t\topacity: { value: 1.0 }\n\t\t\t\t} ] ),\n\n\t\t\tvertexShader: ShaderChunk.shadow_vert,\n\t\t\tfragmentShader: ShaderChunk.shadow_frag\n\n\t\t}\n\n\t};\n\n\tShaderLib.physical = {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tShaderLib.standard.uniforms,\n\t\t\t{\n\t\t\t\ttransparency: { value: 0 },\n\t\t\t\tclearcoat: { value: 0 },\n\t\t\t\tclearcoatRoughness: { value: 0 },\n\t\t\t\tsheen: { value: new Color( 0x000000 ) },\n\t\t\t\tclearcoatNormalScale: { value: new Vector2( 1, 1 ) },\n\t\t\t\tclearcoatNormalMap: { value: null },\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLBackground( renderer, state, objects, premultipliedAlpha ) {\n\n\t\tvar clearColor = new Color( 0x000000 );\n\t\tvar clearAlpha = 0;\n\n\t\tvar planeMesh;\n\t\tvar boxMesh;\n\n\t\tvar currentBackground = null;\n\t\tvar currentBackgroundVersion = 0;\n\t\tvar currentTonemapping = null;\n\n\t\tfunction render( renderList, scene, camera, forceClear ) {\n\n\t\t\tvar background = scene.background;\n\n\t\t\t// Ignore background in AR\n\t\t\t// TODO: Reconsider this.\n\n\t\t\tvar xr = renderer.xr;\n\t\t\tvar session = xr.getSession && xr.getSession();\n\n\t\t\tif ( session && session.environmentBlendMode === 'additive' ) {\n\n\t\t\t\tbackground = null;\n\n\t\t\t}\n\n\t\t\tif ( background === null ) {\n\n\t\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t\t} else if ( background && background.isColor ) {\n\n\t\t\t\tsetClear( background, 1 );\n\t\t\t\tforceClear = true;\n\n\t\t\t}\n\n\t\t\tif ( renderer.autoClear || forceClear ) {\n\n\t\t\t\trenderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\n\t\t\t}\n\n\t\t\tif ( background && ( background.isCubeTexture || background.isWebGLCubeRenderTarget || background.mapping === CubeUVReflectionMapping ) ) {\n\n\t\t\t\tif ( boxMesh === undefined ) {\n\n\t\t\t\t\tboxMesh = new Mesh(\n\t\t\t\t\t\tnew BoxBufferGeometry( 1, 1, 1 ),\n\t\t\t\t\t\tnew ShaderMaterial( {\n\t\t\t\t\t\t\ttype: 'BackgroundCubeMaterial',\n\t\t\t\t\t\t\tuniforms: cloneUniforms( ShaderLib.cube.uniforms ),\n\t\t\t\t\t\t\tvertexShader: ShaderLib.cube.vertexShader,\n\t\t\t\t\t\t\tfragmentShader: ShaderLib.cube.fragmentShader,\n\t\t\t\t\t\t\tside: BackSide,\n\t\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\t\tfog: false\n\t\t\t\t\t\t} )\n\t\t\t\t\t);\n\n\t\t\t\t\tboxMesh.geometry.deleteAttribute( 'normal' );\n\t\t\t\t\tboxMesh.geometry.deleteAttribute( 'uv' );\n\n\t\t\t\t\tboxMesh.onBeforeRender = function ( renderer, scene, camera ) {\n\n\t\t\t\t\t\tthis.matrixWorld.copyPosition( camera.matrixWorld );\n\n\t\t\t\t\t};\n\n\t\t\t\t\t// enable code injection for non-built-in material\n\t\t\t\t\tObject.defineProperty( boxMesh.material, 'envMap', {\n\n\t\t\t\t\t\tget: function () {\n\n\t\t\t\t\t\t\treturn this.uniforms.envMap.value;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\n\t\t\t\t\tobjects.update( boxMesh );\n\n\t\t\t\t}\n\n\t\t\t\tvar texture = background.isWebGLCubeRenderTarget ? background.texture : background;\n\n\t\t\t\tboxMesh.material.uniforms.envMap.value = texture;\n\t\t\t\tboxMesh.material.uniforms.flipEnvMap.value = texture.isCubeTexture ? - 1 : 1;\n\n\t\t\t\tif ( currentBackground !== background ||\n\t\t\t\t\tcurrentBackgroundVersion !== texture.version ||\n\t\t\t\t\tcurrentTonemapping !== renderer.toneMapping ) {\n\n\t\t\t\t\tboxMesh.material.needsUpdate = true;\n\n\t\t\t\t\tcurrentBackground = background;\n\t\t\t\t\tcurrentBackgroundVersion = texture.version;\n\t\t\t\t\tcurrentTonemapping = renderer.toneMapping;\n\n\t\t\t\t}\n\n\t\t\t\t// push to the pre-sorted opaque render list\n\t\t\t\trenderList.unshift( boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null );\n\n\t\t\t} else if ( background && background.isTexture ) {\n\n\t\t\t\tif ( planeMesh === undefined ) {\n\n\t\t\t\t\tplaneMesh = new Mesh(\n\t\t\t\t\t\tnew PlaneBufferGeometry( 2, 2 ),\n\t\t\t\t\t\tnew ShaderMaterial( {\n\t\t\t\t\t\t\ttype: 'BackgroundMaterial',\n\t\t\t\t\t\t\tuniforms: cloneUniforms( ShaderLib.background.uniforms ),\n\t\t\t\t\t\t\tvertexShader: ShaderLib.background.vertexShader,\n\t\t\t\t\t\t\tfragmentShader: ShaderLib.background.fragmentShader,\n\t\t\t\t\t\t\tside: FrontSide,\n\t\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\t\tfog: false\n\t\t\t\t\t\t} )\n\t\t\t\t\t);\n\n\t\t\t\t\tplaneMesh.geometry.deleteAttribute( 'normal' );\n\n\t\t\t\t\t// enable code injection for non-built-in material\n\t\t\t\t\tObject.defineProperty( planeMesh.material, 'map', {\n\n\t\t\t\t\t\tget: function () {\n\n\t\t\t\t\t\t\treturn this.uniforms.t2D.value;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\n\t\t\t\t\tobjects.update( planeMesh );\n\n\t\t\t\t}\n\n\t\t\t\tplaneMesh.material.uniforms.t2D.value = background;\n\n\t\t\t\tif ( background.matrixAutoUpdate === true ) {\n\n\t\t\t\t\tbackground.updateMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tplaneMesh.material.uniforms.uvTransform.value.copy( background.matrix );\n\n\t\t\t\tif ( currentBackground !== background ||\n\t\t\t\t\tcurrentBackgroundVersion !== background.version ||\n\t\t\t\t\tcurrentTonemapping !== renderer.toneMapping ) {\n\n\t\t\t\t\tplaneMesh.material.needsUpdate = true;\n\n\t\t\t\t\tcurrentBackground = background;\n\t\t\t\t\tcurrentBackgroundVersion = background.version;\n\t\t\t\t\tcurrentTonemapping = renderer.toneMapping;\n\n\t\t\t\t}\n\n\n\t\t\t\t// push to the pre-sorted opaque render list\n\t\t\t\trenderList.unshift( planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setClear( color, alpha ) {\n\n\t\t\tstate.buffers.color.setClear( color.r, color.g, color.b, alpha, premultipliedAlpha );\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tgetClearColor: function () {\n\n\t\t\t\treturn clearColor;\n\n\t\t\t},\n\t\t\tsetClearColor: function ( color, alpha ) {\n\n\t\t\t\tclearColor.set( color );\n\t\t\t\tclearAlpha = alpha !== undefined ? alpha : 1;\n\t\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t\t},\n\t\t\tgetClearAlpha: function () {\n\n\t\t\t\treturn clearAlpha;\n\n\t\t\t},\n\t\t\tsetClearAlpha: function ( alpha ) {\n\n\t\t\t\tclearAlpha = alpha;\n\t\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t\t},\n\t\t\trender: render\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLBufferRenderer( gl, extensions, info, capabilities ) {\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\n\t\tvar mode;\n\n\t\tfunction setMode( value ) {\n\n\t\t\tmode = value;\n\n\t\t}\n\n\t\tfunction render( start, count ) {\n\n\t\t\tgl.drawArrays( mode, start, count );\n\n\t\t\tinfo.update( count, mode );\n\n\t\t}\n\n\t\tfunction renderInstances( geometry, start, count, primcount ) {\n\n\t\t\tif ( primcount === 0 ) { return; }\n\n\t\t\tvar extension, methodName;\n\n\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\textension = gl;\n\t\t\t\tmethodName = 'drawArraysInstanced';\n\n\t\t\t} else {\n\n\t\t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\n\t\t\t\tmethodName = 'drawArraysInstancedANGLE';\n\n\t\t\t\tif ( extension === null ) {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\textension[ methodName ]( mode, start, count, primcount );\n\n\t\t\tinfo.update( count, mode, primcount );\n\n\t\t}\n\n\t\t//\n\n\t\tthis.setMode = setMode;\n\t\tthis.render = render;\n\t\tthis.renderInstances = renderInstances;\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLCapabilities( gl, extensions, parameters ) {\n\n\t\tvar maxAnisotropy;\n\n\t\tfunction getMaxAnisotropy() {\n\n\t\t\tif ( maxAnisotropy !== undefined ) { return maxAnisotropy; }\n\n\t\t\tvar extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tmaxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\n\n\t\t\t} else {\n\n\t\t\t\tmaxAnisotropy = 0;\n\n\t\t\t}\n\n\t\t\treturn maxAnisotropy;\n\n\t\t}\n\n\t\tfunction getMaxPrecision( precision ) {\n\n\t\t\tif ( precision === 'highp' ) {\n\n\t\t\t\tif ( gl.getShaderPrecisionFormat( 35633, 36338 ).precision > 0 &&\n\t\t\t\t\tgl.getShaderPrecisionFormat( 35632, 36338 ).precision > 0 ) {\n\n\t\t\t\t\treturn 'highp';\n\n\t\t\t\t}\n\n\t\t\t\tprecision = 'mediump';\n\n\t\t\t}\n\n\t\t\tif ( precision === 'mediump' ) {\n\n\t\t\t\tif ( gl.getShaderPrecisionFormat( 35633, 36337 ).precision > 0 &&\n\t\t\t\t\tgl.getShaderPrecisionFormat( 35632, 36337 ).precision > 0 ) {\n\n\t\t\t\t\treturn 'mediump';\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn 'lowp';\n\n\t\t}\n\n\t\t/* eslint-disable no-undef */\n\t\tvar isWebGL2 = ( typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext ) ||\n\t\t\t( typeof WebGL2ComputeRenderingContext !== 'undefined' && gl instanceof WebGL2ComputeRenderingContext );\n\t\t/* eslint-enable no-undef */\n\n\t\tvar precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n\t\tvar maxPrecision = getMaxPrecision( precision );\n\n\t\tif ( maxPrecision !== precision ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );\n\t\t\tprecision = maxPrecision;\n\n\t\t}\n\n\t\tvar logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\n\n\t\tvar maxTextures = gl.getParameter( 34930 );\n\t\tvar maxVertexTextures = gl.getParameter( 35660 );\n\t\tvar maxTextureSize = gl.getParameter( 3379 );\n\t\tvar maxCubemapSize = gl.getParameter( 34076 );\n\n\t\tvar maxAttributes = gl.getParameter( 34921 );\n\t\tvar maxVertexUniforms = gl.getParameter( 36347 );\n\t\tvar maxVaryings = gl.getParameter( 36348 );\n\t\tvar maxFragmentUniforms = gl.getParameter( 36349 );\n\n\t\tvar vertexTextures = maxVertexTextures > 0;\n\t\tvar floatFragmentTextures = isWebGL2 || !! extensions.get( 'OES_texture_float' );\n\t\tvar floatVertexTextures = vertexTextures && floatFragmentTextures;\n\n\t\tvar maxSamples = isWebGL2 ? gl.getParameter( 36183 ) : 0;\n\n\t\treturn {\n\n\t\t\tisWebGL2: isWebGL2,\n\n\t\t\tgetMaxAnisotropy: getMaxAnisotropy,\n\t\t\tgetMaxPrecision: getMaxPrecision,\n\n\t\t\tprecision: precision,\n\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\n\t\t\tmaxTextures: maxTextures,\n\t\t\tmaxVertexTextures: maxVertexTextures,\n\t\t\tmaxTextureSize: maxTextureSize,\n\t\t\tmaxCubemapSize: maxCubemapSize,\n\n\t\t\tmaxAttributes: maxAttributes,\n\t\t\tmaxVertexUniforms: maxVertexUniforms,\n\t\t\tmaxVaryings: maxVaryings,\n\t\t\tmaxFragmentUniforms: maxFragmentUniforms,\n\n\t\t\tvertexTextures: vertexTextures,\n\t\t\tfloatFragmentTextures: floatFragmentTextures,\n\t\t\tfloatVertexTextures: floatVertexTextures,\n\n\t\t\tmaxSamples: maxSamples\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author tschw\n\t */\n\n\tfunction WebGLClipping() {\n\n\t\tvar scope = this,\n\n\t\t\tglobalState = null,\n\t\t\tnumGlobalPlanes = 0,\n\t\t\tlocalClippingEnabled = false,\n\t\t\trenderingShadows = false,\n\n\t\t\tplane = new Plane(),\n\t\t\tviewNormalMatrix = new Matrix3(),\n\n\t\t\tuniform = { value: null, needsUpdate: false };\n\n\t\tthis.uniform = uniform;\n\t\tthis.numPlanes = 0;\n\t\tthis.numIntersection = 0;\n\n\t\tthis.init = function ( planes, enableLocalClipping, camera ) {\n\n\t\t\tvar enabled =\n\t\t\t\tplanes.length !== 0 ||\n\t\t\t\tenableLocalClipping ||\n\t\t\t\t// enable state of previous frame - the clipping code has to\n\t\t\t\t// run another frame in order to reset the state:\n\t\t\t\tnumGlobalPlanes !== 0 ||\n\t\t\t\tlocalClippingEnabled;\n\n\t\t\tlocalClippingEnabled = enableLocalClipping;\n\n\t\t\tglobalState = projectPlanes( planes, camera, 0 );\n\t\t\tnumGlobalPlanes = planes.length;\n\n\t\t\treturn enabled;\n\n\t\t};\n\n\t\tthis.beginShadows = function () {\n\n\t\t\trenderingShadows = true;\n\t\t\tprojectPlanes( null );\n\n\t\t};\n\n\t\tthis.endShadows = function () {\n\n\t\t\trenderingShadows = false;\n\t\t\tresetGlobalState();\n\n\t\t};\n\n\t\tthis.setState = function ( planes, clipIntersection, clipShadows, camera, cache, fromCache ) {\n\n\t\t\tif ( ! localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && ! clipShadows ) {\n\n\t\t\t\t// there's no local clipping\n\n\t\t\t\tif ( renderingShadows ) {\n\n\t\t\t\t\t// there's no global clipping\n\n\t\t\t\t\tprojectPlanes( null );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tresetGlobalState();\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar nGlobal = renderingShadows ? 0 : numGlobalPlanes,\n\t\t\t\t\tlGlobal = nGlobal * 4,\n\n\t\t\t\t\tdstArray = cache.clippingState || null;\n\n\t\t\t\tuniform.value = dstArray; // ensure unique state\n\n\t\t\t\tdstArray = projectPlanes( planes, camera, lGlobal, fromCache );\n\n\t\t\t\tfor ( var i = 0; i !== lGlobal; ++ i ) {\n\n\t\t\t\t\tdstArray[ i ] = globalState[ i ];\n\n\t\t\t\t}\n\n\t\t\t\tcache.clippingState = dstArray;\n\t\t\t\tthis.numIntersection = clipIntersection ? this.numPlanes : 0;\n\t\t\t\tthis.numPlanes += nGlobal;\n\n\t\t\t}\n\n\n\t\t};\n\n\t\tfunction resetGlobalState() {\n\n\t\t\tif ( uniform.value !== globalState ) {\n\n\t\t\t\tuniform.value = globalState;\n\t\t\t\tuniform.needsUpdate = numGlobalPlanes > 0;\n\n\t\t\t}\n\n\t\t\tscope.numPlanes = numGlobalPlanes;\n\t\t\tscope.numIntersection = 0;\n\n\t\t}\n\n\t\tfunction projectPlanes( planes, camera, dstOffset, skipTransform ) {\n\n\t\t\tvar nPlanes = planes !== null ? planes.length : 0,\n\t\t\t\tdstArray = null;\n\n\t\t\tif ( nPlanes !== 0 ) {\n\n\t\t\t\tdstArray = uniform.value;\n\n\t\t\t\tif ( skipTransform !== true || dstArray === null ) {\n\n\t\t\t\t\tvar flatSize = dstOffset + nPlanes * 4,\n\t\t\t\t\t\tviewMatrix = camera.matrixWorldInverse;\n\n\t\t\t\t\tviewNormalMatrix.getNormalMatrix( viewMatrix );\n\n\t\t\t\t\tif ( dstArray === null || dstArray.length < flatSize ) {\n\n\t\t\t\t\t\tdstArray = new Float32Array( flatSize );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var i = 0, i4 = dstOffset; i !== nPlanes; ++ i, i4 += 4 ) {\n\n\t\t\t\t\t\tplane.copy( planes[ i ] ).applyMatrix4( viewMatrix, viewNormalMatrix );\n\n\t\t\t\t\t\tplane.normal.toArray( dstArray, i4 );\n\t\t\t\t\t\tdstArray[ i4 + 3 ] = plane.constant;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tuniform.value = dstArray;\n\t\t\t\tuniform.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tscope.numPlanes = nPlanes;\n\n\t\t\treturn dstArray;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLExtensions( gl ) {\n\n\t\tvar extensions = {};\n\n\t\treturn {\n\n\t\t\tget: function ( name ) {\n\n\t\t\t\tif ( extensions[ name ] !== undefined ) {\n\n\t\t\t\t\treturn extensions[ name ];\n\n\t\t\t\t}\n\n\t\t\t\tvar extension;\n\n\t\t\t\tswitch ( name ) {\n\n\t\t\t\t\tcase 'WEBGL_depth_texture':\n\t\t\t\t\t\textension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'EXT_texture_filter_anisotropic':\n\t\t\t\t\t\textension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'WEBGL_compressed_texture_s3tc':\n\t\t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\n\t\t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\textension = gl.getExtension( name );\n\n\t\t\t\t}\n\n\t\t\t\tif ( extension === null ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\n\n\t\t\t\t}\n\n\t\t\t\textensions[ name ] = extension;\n\n\t\t\t\treturn extension;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLGeometries( gl, attributes, info ) {\n\n\t\tvar geometries = new WeakMap();\n\t\tvar wireframeAttributes = new WeakMap();\n\n\t\tfunction onGeometryDispose( event ) {\n\n\t\t\tvar geometry = event.target;\n\t\t\tvar buffergeometry = geometries.get( geometry );\n\n\t\t\tif ( buffergeometry.index !== null ) {\n\n\t\t\t\tattributes.remove( buffergeometry.index );\n\n\t\t\t}\n\n\t\t\tfor ( var name in buffergeometry.attributes ) {\n\n\t\t\t\tattributes.remove( buffergeometry.attributes[ name ] );\n\n\t\t\t}\n\n\t\t\tgeometry.removeEventListener( 'dispose', onGeometryDispose );\n\n\t\t\tgeometries.delete( geometry );\n\n\t\t\tvar attribute = wireframeAttributes.get( buffergeometry );\n\n\t\t\tif ( attribute ) {\n\n\t\t\t\tattributes.remove( attribute );\n\t\t\t\twireframeAttributes.delete( buffergeometry );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tinfo.memory.geometries --;\n\n\t\t}\n\n\t\tfunction get( object, geometry ) {\n\n\t\t\tvar buffergeometry = geometries.get( geometry );\n\n\t\t\tif ( buffergeometry ) { return buffergeometry; }\n\n\t\t\tgeometry.addEventListener( 'dispose', onGeometryDispose );\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tbuffergeometry = geometry;\n\n\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\tif ( geometry._bufferGeometry === undefined ) {\n\n\t\t\t\t\tgeometry._bufferGeometry = new BufferGeometry().setFromObject( object );\n\n\t\t\t\t}\n\n\t\t\t\tbuffergeometry = geometry._bufferGeometry;\n\n\t\t\t}\n\n\t\t\tgeometries.set( geometry, buffergeometry );\n\n\t\t\tinfo.memory.geometries ++;\n\n\t\t\treturn buffergeometry;\n\n\t\t}\n\n\t\tfunction update( geometry ) {\n\n\t\t\tvar index = geometry.index;\n\t\t\tvar geometryAttributes = geometry.attributes;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tattributes.update( index, 34963 );\n\n\t\t\t}\n\n\t\t\tfor ( var name in geometryAttributes ) {\n\n\t\t\t\tattributes.update( geometryAttributes[ name ], 34962 );\n\n\t\t\t}\n\n\t\t\t// morph targets\n\n\t\t\tvar morphAttributes = geometry.morphAttributes;\n\n\t\t\tfor ( var name in morphAttributes ) {\n\n\t\t\t\tvar array = morphAttributes[ name ];\n\n\t\t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\n\n\t\t\t\t\tattributes.update( array[ i ], 34962 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction updateWireframeAttribute( geometry ) {\n\n\t\t\tvar indices = [];\n\n\t\t\tvar geometryIndex = geometry.index;\n\t\t\tvar geometryPosition = geometry.attributes.position;\n\t\t\tvar version = 0;\n\n\t\t\tif ( geometryIndex !== null ) {\n\n\t\t\t\tvar array = geometryIndex.array;\n\t\t\t\tversion = geometryIndex.version;\n\n\t\t\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\t\t\tvar a = array[ i + 0 ];\n\t\t\t\t\tvar b = array[ i + 1 ];\n\t\t\t\t\tvar c = array[ i + 2 ];\n\n\t\t\t\t\tindices.push( a, b, b, c, c, a );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar array = geometryPosition.array;\n\t\t\t\tversion = geometryPosition.version;\n\n\t\t\t\tfor ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {\n\n\t\t\t\t\tvar a = i + 0;\n\t\t\t\t\tvar b = i + 1;\n\t\t\t\t\tvar c = i + 2;\n\n\t\t\t\t\tindices.push( a, b, b, c, c, a );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar attribute = new ( arrayMax( indices ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( indices, 1 );\n\t\t\tattribute.version = version;\n\n\t\t\tattributes.update( attribute, 34963 );\n\n\t\t\t//\n\n\t\t\tvar previousAttribute = wireframeAttributes.get( geometry );\n\n\t\t\tif ( previousAttribute ) { attributes.remove( previousAttribute ); }\n\n\t\t\t//\n\n\t\t\twireframeAttributes.set( geometry, attribute );\n\n\t\t}\n\n\t\tfunction getWireframeAttribute( geometry ) {\n\n\t\t\tvar currentAttribute = wireframeAttributes.get( geometry );\n\n\t\t\tif ( currentAttribute ) {\n\n\t\t\t\tvar geometryIndex = geometry.index;\n\n\t\t\t\tif ( geometryIndex !== null ) {\n\n\t\t\t\t\t// if the attribute is obsolete, create a new one\n\n\t\t\t\t\tif ( currentAttribute.version < geometryIndex.version ) {\n\n\t\t\t\t\t\tupdateWireframeAttribute( geometry );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tupdateWireframeAttribute( geometry );\n\n\t\t\t}\n\n\t\t\treturn wireframeAttributes.get( geometry );\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tget: get,\n\t\t\tupdate: update,\n\n\t\t\tgetWireframeAttribute: getWireframeAttribute\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLIndexedBufferRenderer( gl, extensions, info, capabilities ) {\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\n\t\tvar mode;\n\n\t\tfunction setMode( value ) {\n\n\t\t\tmode = value;\n\n\t\t}\n\n\t\tvar type, bytesPerElement;\n\n\t\tfunction setIndex( value ) {\n\n\t\t\ttype = value.type;\n\t\t\tbytesPerElement = value.bytesPerElement;\n\n\t\t}\n\n\t\tfunction render( start, count ) {\n\n\t\t\tgl.drawElements( mode, count, type, start * bytesPerElement );\n\n\t\t\tinfo.update( count, mode );\n\n\t\t}\n\n\t\tfunction renderInstances( geometry, start, count, primcount ) {\n\n\t\t\tif ( primcount === 0 ) { return; }\n\n\t\t\tvar extension, methodName;\n\n\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\textension = gl;\n\t\t\t\tmethodName = 'drawElementsInstanced';\n\n\t\t\t} else {\n\n\t\t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\n\t\t\t\tmethodName = 'drawElementsInstancedANGLE';\n\n\t\t\t\tif ( extension === null ) {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\textension[ methodName ]( mode, count, type, start * bytesPerElement, primcount );\n\n\t\t\tinfo.update( count, mode, primcount );\n\n\t\t}\n\n\t\t//\n\n\t\tthis.setMode = setMode;\n\t\tthis.setIndex = setIndex;\n\t\tthis.render = render;\n\t\tthis.renderInstances = renderInstances;\n\n\t}\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction WebGLInfo( gl ) {\n\n\t\tvar memory = {\n\t\t\tgeometries: 0,\n\t\t\ttextures: 0\n\t\t};\n\n\t\tvar render = {\n\t\t\tframe: 0,\n\t\t\tcalls: 0,\n\t\t\ttriangles: 0,\n\t\t\tpoints: 0,\n\t\t\tlines: 0\n\t\t};\n\n\t\tfunction update( count, mode, instanceCount ) {\n\n\t\t\tinstanceCount = instanceCount || 1;\n\n\t\t\trender.calls ++;\n\n\t\t\tswitch ( mode ) {\n\n\t\t\t\tcase 4:\n\t\t\t\t\trender.triangles += instanceCount * ( count / 3 );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1:\n\t\t\t\t\trender.lines += instanceCount * ( count / 2 );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 3:\n\t\t\t\t\trender.lines += instanceCount * ( count - 1 );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2:\n\t\t\t\t\trender.lines += instanceCount * count;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0:\n\t\t\t\t\trender.points += instanceCount * count;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.error( 'THREE.WebGLInfo: Unknown draw mode:', mode );\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction reset() {\n\n\t\t\trender.frame ++;\n\t\t\trender.calls = 0;\n\t\t\trender.triangles = 0;\n\t\t\trender.points = 0;\n\t\t\trender.lines = 0;\n\n\t\t}\n\n\t\treturn {\n\t\t\tmemory: memory,\n\t\t\trender: render,\n\t\t\tprograms: null,\n\t\t\tautoReset: true,\n\t\t\treset: reset,\n\t\t\tupdate: update\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction absNumericalSort( a, b ) {\n\n\t\treturn Math.abs( b[ 1 ] ) - Math.abs( a[ 1 ] );\n\n\t}\n\n\tfunction WebGLMorphtargets( gl ) {\n\n\t\tvar influencesList = {};\n\t\tvar morphInfluences = new Float32Array( 8 );\n\n\t\tfunction update( object, geometry, material, program ) {\n\n\t\t\tvar objectInfluences = object.morphTargetInfluences;\n\n\t\t\t// When object doesn't have morph target influences defined, we treat it as a 0-length array\n\t\t\t// This is important to make sure we set up morphTargetBaseInfluence / morphTargetInfluences\n\n\t\t\tvar length = objectInfluences === undefined ? 0 : objectInfluences.length;\n\n\t\t\tvar influences = influencesList[ geometry.id ];\n\n\t\t\tif ( influences === undefined ) {\n\n\t\t\t\t// initialise list\n\n\t\t\t\tinfluences = [];\n\n\t\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\t\tinfluences[ i ] = [ i, 0 ];\n\n\t\t\t\t}\n\n\t\t\t\tinfluencesList[ geometry.id ] = influences;\n\n\t\t\t}\n\n\t\t\tvar morphTargets = material.morphTargets && geometry.morphAttributes.position;\n\t\t\tvar morphNormals = material.morphNormals && geometry.morphAttributes.normal;\n\n\t\t\t// Remove current morphAttributes\n\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\tvar influence = influences[ i ];\n\n\t\t\t\tif ( influence[ 1 ] !== 0 ) {\n\n\t\t\t\t\tif ( morphTargets ) { geometry.deleteAttribute( 'morphTarget' + i ); }\n\t\t\t\t\tif ( morphNormals ) { geometry.deleteAttribute( 'morphNormal' + i ); }\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Collect influences\n\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\tvar influence = influences[ i ];\n\n\t\t\t\tinfluence[ 0 ] = i;\n\t\t\t\tinfluence[ 1 ] = objectInfluences[ i ];\n\n\t\t\t}\n\n\t\t\tinfluences.sort( absNumericalSort );\n\n\t\t\t// Add morphAttributes\n\n\t\t\tvar morphInfluencesSum = 0;\n\n\t\t\tfor ( var i = 0; i < 8; i ++ ) {\n\n\t\t\t\tvar influence = influences[ i ];\n\n\t\t\t\tif ( influence ) {\n\n\t\t\t\t\tvar index = influence[ 0 ];\n\t\t\t\t\tvar value = influence[ 1 ];\n\n\t\t\t\t\tif ( value ) {\n\n\t\t\t\t\t\tif ( morphTargets ) { geometry.setAttribute( 'morphTarget' + i, morphTargets[ index ] ); }\n\t\t\t\t\t\tif ( morphNormals ) { geometry.setAttribute( 'morphNormal' + i, morphNormals[ index ] ); }\n\n\t\t\t\t\t\tmorphInfluences[ i ] = value;\n\t\t\t\t\t\tmorphInfluencesSum += value;\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tmorphInfluences[ i ] = 0;\n\n\t\t\t}\n\n\t\t\t// GLSL shader uses formula baseinfluence * base + sum(target * influence)\n\t\t\t// This allows us to switch between absolute morphs and relative morphs without changing shader code\n\t\t\t// When baseinfluence = 1 - sum(influence), the above is equivalent to sum((target - base) * influence)\n\t\t\tvar morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;\n\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetBaseInfluence', morphBaseInfluence );\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetInfluences', morphInfluences );\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tupdate: update\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLObjects( gl, geometries, attributes, info ) {\n\n\t\tvar updateList = {};\n\n\t\tfunction update( object ) {\n\n\t\t\tvar frame = info.render.frame;\n\n\t\t\tvar geometry = object.geometry;\n\t\t\tvar buffergeometry = geometries.get( object, geometry );\n\n\t\t\t// Update once per frame\n\n\t\t\tif ( updateList[ buffergeometry.id ] !== frame ) {\n\n\t\t\t\tif ( geometry.isGeometry ) {\n\n\t\t\t\t\tbuffergeometry.updateFromObject( object );\n\n\t\t\t\t}\n\n\t\t\t\tgeometries.update( buffergeometry );\n\n\t\t\t\tupdateList[ buffergeometry.id ] = frame;\n\n\t\t\t}\n\n\t\t\tif ( object.isInstancedMesh ) {\n\n\t\t\t\tattributes.update( object.instanceMatrix, 34962 );\n\n\t\t\t}\n\n\t\t\treturn buffergeometry;\n\n\t\t}\n\n\t\tfunction dispose() {\n\n\t\t\tupdateList = {};\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tupdate: update,\n\t\t\tdispose: dispose\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction CubeTexture( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\n\t\timages = images !== undefined ? images : [];\n\t\tmapping = mapping !== undefined ? mapping : CubeReflectionMapping;\n\t\tformat = format !== undefined ? format : RGBFormat;\n\n\t\tTexture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\t\tthis.flipY = false;\n\n\t}\n\n\tCubeTexture.prototype = Object.create( Texture.prototype );\n\tCubeTexture.prototype.constructor = CubeTexture;\n\n\tCubeTexture.prototype.isCubeTexture = true;\n\n\tObject.defineProperty( CubeTexture.prototype, 'images', {\n\n\t\tget: function () {\n\n\t\t\treturn this.image;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis.image = value;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author Takahiro https://github.com/takahirox\n\t */\n\n\tfunction DataTexture2DArray( data, width, height, depth ) {\n\n\t\tTexture.call( this, null );\n\n\t\tthis.image = { data: data || null, width: width || 1, height: height || 1, depth: depth || 1 };\n\n\t\tthis.magFilter = NearestFilter;\n\t\tthis.minFilter = NearestFilter;\n\n\t\tthis.wrapR = ClampToEdgeWrapping;\n\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n\tDataTexture2DArray.prototype = Object.create( Texture.prototype );\n\tDataTexture2DArray.prototype.constructor = DataTexture2DArray;\n\tDataTexture2DArray.prototype.isDataTexture2DArray = true;\n\n\t/**\n\t * @author Artur Trzesiok\n\t */\n\n\tfunction DataTexture3D( data, width, height, depth ) {\n\n\t\t// We're going to add .setXXX() methods for setting properties later.\n\t\t// Users can still set in DataTexture3D directly.\n\t\t//\n\t\t//\tvar texture = new THREE.DataTexture3D( data, width, height, depth );\n\t\t// \ttexture.anisotropy = 16;\n\t\t//\n\t\t// See #14839\n\n\t\tTexture.call( this, null );\n\n\t\tthis.image = { data: data || null, width: width || 1, height: height || 1, depth: depth || 1 };\n\n\t\tthis.magFilter = NearestFilter;\n\t\tthis.minFilter = NearestFilter;\n\n\t\tthis.wrapR = ClampToEdgeWrapping;\n\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\n\t\tthis.needsUpdate = true;\n\n\n\t}\n\n\tDataTexture3D.prototype = Object.create( Texture.prototype );\n\tDataTexture3D.prototype.constructor = DataTexture3D;\n\tDataTexture3D.prototype.isDataTexture3D = true;\n\n\t/**\n\t * @author tschw\n\t * @author Mugen87 / https://github.com/Mugen87\n\t * @author mrdoob / http://mrdoob.com/\n\t *\n\t * Uniforms of a program.\n\t * Those form a tree structure with a special top-level container for the root,\n\t * which you get by calling 'new WebGLUniforms( gl, program )'.\n\t *\n\t *\n\t * Properties of inner nodes including the top-level container:\n\t *\n\t * .seq - array of nested uniforms\n\t * .map - nested uniforms by name\n\t *\n\t *\n\t * Methods of all nodes except the top-level container:\n\t *\n\t * .setValue( gl, value, [textures] )\n\t *\n\t * \t\tuploads a uniform value(s)\n\t *  \tthe 'textures' parameter is needed for sampler uniforms\n\t *\n\t *\n\t * Static methods of the top-level container (textures factorizations):\n\t *\n\t * .upload( gl, seq, values, textures )\n\t *\n\t * \t\tsets uniforms in 'seq' to 'values[id].value'\n\t *\n\t * .seqWithValue( seq, values ) : filteredSeq\n\t *\n\t * \t\tfilters 'seq' entries with corresponding entry in values\n\t *\n\t *\n\t * Methods of the top-level container (textures factorizations):\n\t *\n\t * .setValue( gl, name, value, textures )\n\t *\n\t * \t\tsets uniform with  name 'name' to 'value'\n\t *\n\t * .setOptional( gl, obj, prop )\n\t *\n\t * \t\tlike .set for an optional property of the object\n\t *\n\t */\n\n\tvar emptyTexture = new Texture();\n\tvar emptyTexture2dArray = new DataTexture2DArray();\n\tvar emptyTexture3d = new DataTexture3D();\n\tvar emptyCubeTexture = new CubeTexture();\n\n\t// --- Utilities ---\n\n\t// Array Caches (provide typed arrays for temporary by size)\n\n\tvar arrayCacheF32 = [];\n\tvar arrayCacheI32 = [];\n\n\t// Float32Array caches used for uploading Matrix uniforms\n\n\tvar mat4array = new Float32Array( 16 );\n\tvar mat3array = new Float32Array( 9 );\n\tvar mat2array = new Float32Array( 4 );\n\n\t// Flattening for arrays of vectors and matrices\n\n\tfunction flatten( array, nBlocks, blockSize ) {\n\n\t\tvar firstElem = array[ 0 ];\n\n\t\tif ( firstElem <= 0 || firstElem > 0 ) { return array; }\n\t\t// unoptimized: ! isNaN( firstElem )\n\t\t// see http://jacksondunstan.com/articles/983\n\n\t\tvar n = nBlocks * blockSize,\n\t\t\tr = arrayCacheF32[ n ];\n\n\t\tif ( r === undefined ) {\n\n\t\t\tr = new Float32Array( n );\n\t\t\tarrayCacheF32[ n ] = r;\n\n\t\t}\n\n\t\tif ( nBlocks !== 0 ) {\n\n\t\t\tfirstElem.toArray( r, 0 );\n\n\t\t\tfor ( var i = 1, offset = 0; i !== nBlocks; ++ i ) {\n\n\t\t\t\toffset += blockSize;\n\t\t\t\tarray[ i ].toArray( r, offset );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn r;\n\n\t}\n\n\tfunction arraysEqual( a, b ) {\n\n\t\tif ( a.length !== b.length ) { return false; }\n\n\t\tfor ( var i = 0, l = a.length; i < l; i ++ ) {\n\n\t\t\tif ( a[ i ] !== b[ i ] ) { return false; }\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tfunction copyArray( a, b ) {\n\n\t\tfor ( var i = 0, l = b.length; i < l; i ++ ) {\n\n\t\t\ta[ i ] = b[ i ];\n\n\t\t}\n\n\t}\n\n\t// Texture unit allocation\n\n\tfunction allocTexUnits( textures, n ) {\n\n\t\tvar r = arrayCacheI32[ n ];\n\n\t\tif ( r === undefined ) {\n\n\t\t\tr = new Int32Array( n );\n\t\t\tarrayCacheI32[ n ] = r;\n\n\t\t}\n\n\t\tfor ( var i = 0; i !== n; ++ i )\n\t\t\t{ r[ i ] = textures.allocateTextureUnit(); }\n\n\t\treturn r;\n\n\t}\n\n\t// --- Setters ---\n\n\t// Note: Defining these methods externally, because they come in a bunch\n\t// and this way their names minify.\n\n\t// Single scalar\n\n\tfunction setValueV1f( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( cache[ 0 ] === v ) { return; }\n\n\t\tgl.uniform1f( this.addr, v );\n\n\t\tcache[ 0 ] = v;\n\n\t}\n\n\t// Single float vector (from flat array or THREE.VectorN)\n\n\tfunction setValueV2f( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( v.x !== undefined ) {\n\n\t\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y ) {\n\n\t\t\t\tgl.uniform2f( this.addr, v.x, v.y );\n\n\t\t\t\tcache[ 0 ] = v.x;\n\t\t\t\tcache[ 1 ] = v.y;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\t\tgl.uniform2fv( this.addr, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t}\n\n\t}\n\n\tfunction setValueV3f( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( v.x !== undefined ) {\n\n\t\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z ) {\n\n\t\t\t\tgl.uniform3f( this.addr, v.x, v.y, v.z );\n\n\t\t\t\tcache[ 0 ] = v.x;\n\t\t\t\tcache[ 1 ] = v.y;\n\t\t\t\tcache[ 2 ] = v.z;\n\n\t\t\t}\n\n\t\t} else if ( v.r !== undefined ) {\n\n\t\t\tif ( cache[ 0 ] !== v.r || cache[ 1 ] !== v.g || cache[ 2 ] !== v.b ) {\n\n\t\t\t\tgl.uniform3f( this.addr, v.r, v.g, v.b );\n\n\t\t\t\tcache[ 0 ] = v.r;\n\t\t\t\tcache[ 1 ] = v.g;\n\t\t\t\tcache[ 2 ] = v.b;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\t\tgl.uniform3fv( this.addr, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t}\n\n\t}\n\n\tfunction setValueV4f( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( v.x !== undefined ) {\n\n\t\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z || cache[ 3 ] !== v.w ) {\n\n\t\t\t\tgl.uniform4f( this.addr, v.x, v.y, v.z, v.w );\n\n\t\t\t\tcache[ 0 ] = v.x;\n\t\t\t\tcache[ 1 ] = v.y;\n\t\t\t\tcache[ 2 ] = v.z;\n\t\t\t\tcache[ 3 ] = v.w;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\t\tgl.uniform4fv( this.addr, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t}\n\n\t}\n\n\t// Single matrix (from flat array or MatrixN)\n\n\tfunction setValueM2( gl, v ) {\n\n\t\tvar cache = this.cache;\n\t\tvar elements = v.elements;\n\n\t\tif ( elements === undefined ) {\n\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\t\tgl.uniformMatrix2fv( this.addr, false, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, elements ) ) { return; }\n\n\t\t\tmat2array.set( elements );\n\n\t\t\tgl.uniformMatrix2fv( this.addr, false, mat2array );\n\n\t\t\tcopyArray( cache, elements );\n\n\t\t}\n\n\t}\n\n\tfunction setValueM3( gl, v ) {\n\n\t\tvar cache = this.cache;\n\t\tvar elements = v.elements;\n\n\t\tif ( elements === undefined ) {\n\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\t\tgl.uniformMatrix3fv( this.addr, false, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, elements ) ) { return; }\n\n\t\t\tmat3array.set( elements );\n\n\t\t\tgl.uniformMatrix3fv( this.addr, false, mat3array );\n\n\t\t\tcopyArray( cache, elements );\n\n\t\t}\n\n\t}\n\n\tfunction setValueM4( gl, v ) {\n\n\t\tvar cache = this.cache;\n\t\tvar elements = v.elements;\n\n\t\tif ( elements === undefined ) {\n\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\t\tgl.uniformMatrix4fv( this.addr, false, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, elements ) ) { return; }\n\n\t\t\tmat4array.set( elements );\n\n\t\t\tgl.uniformMatrix4fv( this.addr, false, mat4array );\n\n\t\t\tcopyArray( cache, elements );\n\n\t\t}\n\n\t}\n\n\t// Single texture (2D / Cube)\n\n\tfunction setValueT1( gl, v, textures ) {\n\n\t\tvar cache = this.cache;\n\t\tvar unit = textures.allocateTextureUnit();\n\n\t\tif ( cache[ 0 ] !== unit ) {\n\n\t\t\tgl.uniform1i( this.addr, unit );\n\t\t\tcache[ 0 ] = unit;\n\n\t\t}\n\n\t\ttextures.safeSetTexture2D( v || emptyTexture, unit );\n\n\t}\n\n\tfunction setValueT2DArray1( gl, v, textures ) {\n\n\t\tvar cache = this.cache;\n\t\tvar unit = textures.allocateTextureUnit();\n\n\t\tif ( cache[ 0 ] !== unit ) {\n\n\t\t\tgl.uniform1i( this.addr, unit );\n\t\t\tcache[ 0 ] = unit;\n\n\t\t}\n\n\t\ttextures.setTexture2DArray( v || emptyTexture2dArray, unit );\n\n\t}\n\n\tfunction setValueT3D1( gl, v, textures ) {\n\n\t\tvar cache = this.cache;\n\t\tvar unit = textures.allocateTextureUnit();\n\n\t\tif ( cache[ 0 ] !== unit ) {\n\n\t\t\tgl.uniform1i( this.addr, unit );\n\t\t\tcache[ 0 ] = unit;\n\n\t\t}\n\n\t\ttextures.setTexture3D( v || emptyTexture3d, unit );\n\n\t}\n\n\tfunction setValueT6( gl, v, textures ) {\n\n\t\tvar cache = this.cache;\n\t\tvar unit = textures.allocateTextureUnit();\n\n\t\tif ( cache[ 0 ] !== unit ) {\n\n\t\t\tgl.uniform1i( this.addr, unit );\n\t\t\tcache[ 0 ] = unit;\n\n\t\t}\n\n\t\ttextures.safeSetTextureCube( v || emptyCubeTexture, unit );\n\n\t}\n\n\t// Integer / Boolean vectors or arrays thereof (always flat arrays)\n\n\tfunction setValueV1i( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( cache[ 0 ] === v ) { return; }\n\n\t\tgl.uniform1i( this.addr, v );\n\n\t\tcache[ 0 ] = v;\n\n\t}\n\n\tfunction setValueV2i( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\tgl.uniform2iv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n\tfunction setValueV3i( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\tgl.uniform3iv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n\tfunction setValueV4i( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\tgl.uniform4iv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n\t// uint\n\n\tfunction setValueV1ui( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( cache[ 0 ] === v ) { return; }\n\n\t\tgl.uniform1ui( this.addr, v );\n\n\t\tcache[ 0 ] = v;\n\n\t}\n\n\t// Helper to pick the right setter for the singular case\n\n\tfunction getSingularSetter( type ) {\n\n\t\tswitch ( type ) {\n\n\t\t\tcase 0x1406: return setValueV1f; // FLOAT\n\t\t\tcase 0x8b50: return setValueV2f; // _VEC2\n\t\t\tcase 0x8b51: return setValueV3f; // _VEC3\n\t\t\tcase 0x8b52: return setValueV4f; // _VEC4\n\n\t\t\tcase 0x8b5a: return setValueM2; // _MAT2\n\t\t\tcase 0x8b5b: return setValueM3; // _MAT3\n\t\t\tcase 0x8b5c: return setValueM4; // _MAT4\n\n\t\t\tcase 0x1404: case 0x8b56: return setValueV1i; // INT, BOOL\n\t\t\tcase 0x8b53: case 0x8b57: return setValueV2i; // _VEC2\n\t\t\tcase 0x8b54: case 0x8b58: return setValueV3i; // _VEC3\n\t\t\tcase 0x8b55: case 0x8b59: return setValueV4i; // _VEC4\n\n\t\t\tcase 0x1405: return setValueV1ui; // UINT\n\n\t\t\tcase 0x8b5e: // SAMPLER_2D\n\t\t\tcase 0x8d66: // SAMPLER_EXTERNAL_OES\n\t\t\tcase 0x8dca: // INT_SAMPLER_2D\n\t\t\tcase 0x8dd2: // UNSIGNED_INT_SAMPLER_2D\n\t\t\tcase 0x8b62: // SAMPLER_2D_SHADOW\n\t\t\t\treturn setValueT1;\n\n\t\t\tcase 0x8b5f: // SAMPLER_3D\n\t\t\tcase 0x8dcb: // INT_SAMPLER_3D\n\t\t\tcase 0x8dd3: // UNSIGNED_INT_SAMPLER_3D\n\t\t\t\treturn setValueT3D1;\n\n\t\t\tcase 0x8b60: // SAMPLER_CUBE\n\t\t\tcase 0x8dcc: // INT_SAMPLER_CUBE\n\t\t\tcase 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE\n\t\t\tcase 0x8dc5: // SAMPLER_CUBE_SHADOW\n\t\t\t\treturn setValueT6;\n\n\t\t\tcase 0x8dc1: // SAMPLER_2D_ARRAY\n\t\t\tcase 0x8dcf: // INT_SAMPLER_2D_ARRAY\n\t\t\tcase 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY\n\t\t\tcase 0x8dc4: // SAMPLER_2D_ARRAY_SHADOW\n\t\t\t\treturn setValueT2DArray1;\n\n\t\t}\n\n\t}\n\n\t// Array of scalars\n\tfunction setValueV1fArray( gl, v ) {\n\n\t\tgl.uniform1fv( this.addr, v );\n\n\t}\n\n\t// Integer / Boolean vectors or arrays thereof (always flat arrays)\n\tfunction setValueV1iArray( gl, v ) {\n\n\t\tgl.uniform1iv( this.addr, v );\n\n\t}\n\n\tfunction setValueV2iArray( gl, v ) {\n\n\t\tgl.uniform2iv( this.addr, v );\n\n\t}\n\n\tfunction setValueV3iArray( gl, v ) {\n\n\t\tgl.uniform3iv( this.addr, v );\n\n\t}\n\n\tfunction setValueV4iArray( gl, v ) {\n\n\t\tgl.uniform4iv( this.addr, v );\n\n\t}\n\n\n\t// Array of vectors (flat or from THREE classes)\n\n\tfunction setValueV2fArray( gl, v ) {\n\n\t\tvar data = flatten( v, this.size, 2 );\n\n\t\tgl.uniform2fv( this.addr, data );\n\n\t}\n\n\tfunction setValueV3fArray( gl, v ) {\n\n\t\tvar data = flatten( v, this.size, 3 );\n\n\t\tgl.uniform3fv( this.addr, data );\n\n\t}\n\n\tfunction setValueV4fArray( gl, v ) {\n\n\t\tvar data = flatten( v, this.size, 4 );\n\n\t\tgl.uniform4fv( this.addr, data );\n\n\t}\n\n\t// Array of matrices (flat or from THREE clases)\n\n\tfunction setValueM2Array( gl, v ) {\n\n\t\tvar data = flatten( v, this.size, 4 );\n\n\t\tgl.uniformMatrix2fv( this.addr, false, data );\n\n\t}\n\n\tfunction setValueM3Array( gl, v ) {\n\n\t\tvar data = flatten( v, this.size, 9 );\n\n\t\tgl.uniformMatrix3fv( this.addr, false, data );\n\n\t}\n\n\tfunction setValueM4Array( gl, v ) {\n\n\t\tvar data = flatten( v, this.size, 16 );\n\n\t\tgl.uniformMatrix4fv( this.addr, false, data );\n\n\t}\n\n\t// Array of textures (2D / Cube)\n\n\tfunction setValueT1Array( gl, v, textures ) {\n\n\t\tvar n = v.length;\n\n\t\tvar units = allocTexUnits( textures, n );\n\n\t\tgl.uniform1iv( this.addr, units );\n\n\t\tfor ( var i = 0; i !== n; ++ i ) {\n\n\t\t\ttextures.safeSetTexture2D( v[ i ] || emptyTexture, units[ i ] );\n\n\t\t}\n\n\t}\n\n\tfunction setValueT6Array( gl, v, textures ) {\n\n\t\tvar n = v.length;\n\n\t\tvar units = allocTexUnits( textures, n );\n\n\t\tgl.uniform1iv( this.addr, units );\n\n\t\tfor ( var i = 0; i !== n; ++ i ) {\n\n\t\t\ttextures.safeSetTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );\n\n\t\t}\n\n\t}\n\n\t// Helper to pick the right setter for a pure (bottom-level) array\n\n\tfunction getPureArraySetter( type ) {\n\n\t\tswitch ( type ) {\n\n\t\t\tcase 0x1406: return setValueV1fArray; // FLOAT\n\t\t\tcase 0x8b50: return setValueV2fArray; // _VEC2\n\t\t\tcase 0x8b51: return setValueV3fArray; // _VEC3\n\t\t\tcase 0x8b52: return setValueV4fArray; // _VEC4\n\n\t\t\tcase 0x8b5a: return setValueM2Array; // _MAT2\n\t\t\tcase 0x8b5b: return setValueM3Array; // _MAT3\n\t\t\tcase 0x8b5c: return setValueM4Array; // _MAT4\n\n\t\t\tcase 0x1404: case 0x8b56: return setValueV1iArray; // INT, BOOL\n\t\t\tcase 0x8b53: case 0x8b57: return setValueV2iArray; // _VEC2\n\t\t\tcase 0x8b54: case 0x8b58: return setValueV3iArray; // _VEC3\n\t\t\tcase 0x8b55: case 0x8b59: return setValueV4iArray; // _VEC4\n\n\t\t\tcase 0x8b5e: // SAMPLER_2D\n\t\t\tcase 0x8d66: // SAMPLER_EXTERNAL_OES\n\t\t\tcase 0x8dca: // INT_SAMPLER_2D\n\t\t\tcase 0x8dd2: // UNSIGNED_INT_SAMPLER_2D\n\t\t\tcase 0x8b62: // SAMPLER_2D_SHADOW\n\t\t\t\treturn setValueT1Array;\n\n\t\t\tcase 0x8b60: // SAMPLER_CUBE\n\t\t\tcase 0x8dcc: // INT_SAMPLER_CUBE\n\t\t\tcase 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE\n\t\t\tcase 0x8dc5: // SAMPLER_CUBE_SHADOW\n\t\t\t\treturn setValueT6Array;\n\n\t\t}\n\n\t}\n\n\t// --- Uniform Classes ---\n\n\tfunction SingleUniform( id, activeInfo, addr ) {\n\n\t\tthis.id = id;\n\t\tthis.addr = addr;\n\t\tthis.cache = [];\n\t\tthis.setValue = getSingularSetter( activeInfo.type );\n\n\t\t// this.path = activeInfo.name; // DEBUG\n\n\t}\n\n\tfunction PureArrayUniform( id, activeInfo, addr ) {\n\n\t\tthis.id = id;\n\t\tthis.addr = addr;\n\t\tthis.cache = [];\n\t\tthis.size = activeInfo.size;\n\t\tthis.setValue = getPureArraySetter( activeInfo.type );\n\n\t\t// this.path = activeInfo.name; // DEBUG\n\n\t}\n\n\tPureArrayUniform.prototype.updateCache = function ( data ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( data instanceof Float32Array && cache.length !== data.length ) {\n\n\t\t\tthis.cache = new Float32Array( data.length );\n\n\t\t}\n\n\t\tcopyArray( cache, data );\n\n\t};\n\n\tfunction StructuredUniform( id ) {\n\n\t\tthis.id = id;\n\n\t\tthis.seq = [];\n\t\tthis.map = {};\n\n\t}\n\n\tStructuredUniform.prototype.setValue = function ( gl, value, textures ) {\n\n\t\tvar seq = this.seq;\n\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tvar u = seq[ i ];\n\t\t\tu.setValue( gl, value[ u.id ], textures );\n\n\t\t}\n\n\t};\n\n\t// --- Top-level ---\n\n\t// Parser - builds up the property tree from the path strings\n\n\tvar RePathPart = /([\\w\\d_]+)(\\])?(\\[|\\.)?/g;\n\n\t// extracts\n\t// \t- the identifier (member name or array index)\n\t//  - followed by an optional right bracket (found when array index)\n\t//  - followed by an optional left bracket or dot (type of subscript)\n\t//\n\t// Note: These portions can be read in a non-overlapping fashion and\n\t// allow straightforward parsing of the hierarchy that WebGL encodes\n\t// in the uniform names.\n\n\tfunction addUniform( container, uniformObject ) {\n\n\t\tcontainer.seq.push( uniformObject );\n\t\tcontainer.map[ uniformObject.id ] = uniformObject;\n\n\t}\n\n\tfunction parseUniform( activeInfo, addr, container ) {\n\n\t\tvar path = activeInfo.name,\n\t\t\tpathLength = path.length;\n\n\t\t// reset RegExp object, because of the early exit of a previous run\n\t\tRePathPart.lastIndex = 0;\n\n\t\twhile ( true ) {\n\n\t\t\tvar match = RePathPart.exec( path ),\n\t\t\t\tmatchEnd = RePathPart.lastIndex,\n\n\t\t\t\tid = match[ 1 ],\n\t\t\t\tidIsIndex = match[ 2 ] === ']',\n\t\t\t\tsubscript = match[ 3 ];\n\n\t\t\tif ( idIsIndex ) { id = id | 0; } // convert to integer\n\n\t\t\tif ( subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength ) {\n\n\t\t\t\t// bare name or \"pure\" bottom-level array \"[0]\" suffix\n\n\t\t\t\taddUniform( container, subscript === undefined ?\n\t\t\t\t\tnew SingleUniform( id, activeInfo, addr ) :\n\t\t\t\t\tnew PureArrayUniform( id, activeInfo, addr ) );\n\n\t\t\t\tbreak;\n\n\t\t\t} else {\n\n\t\t\t\t// step into inner node / create it in case it doesn't exist\n\n\t\t\t\tvar map = container.map, next = map[ id ];\n\n\t\t\t\tif ( next === undefined ) {\n\n\t\t\t\t\tnext = new StructuredUniform( id );\n\t\t\t\t\taddUniform( container, next );\n\n\t\t\t\t}\n\n\t\t\t\tcontainer = next;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// Root Container\n\n\tfunction WebGLUniforms( gl, program ) {\n\n\t\tthis.seq = [];\n\t\tthis.map = {};\n\n\t\tvar n = gl.getProgramParameter( program, 35718 );\n\n\t\tfor ( var i = 0; i < n; ++ i ) {\n\n\t\t\tvar info = gl.getActiveUniform( program, i ),\n\t\t\t\taddr = gl.getUniformLocation( program, info.name );\n\n\t\t\tparseUniform( info, addr, this );\n\n\t\t}\n\n\t}\n\n\tWebGLUniforms.prototype.setValue = function ( gl, name, value, textures ) {\n\n\t\tvar u = this.map[ name ];\n\n\t\tif ( u !== undefined ) { u.setValue( gl, value, textures ); }\n\n\t};\n\n\tWebGLUniforms.prototype.setOptional = function ( gl, object, name ) {\n\n\t\tvar v = object[ name ];\n\n\t\tif ( v !== undefined ) { this.setValue( gl, name, v ); }\n\n\t};\n\n\n\t// Static interface\n\n\tWebGLUniforms.upload = function ( gl, seq, values, textures ) {\n\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tvar u = seq[ i ],\n\t\t\t\tv = values[ u.id ];\n\n\t\t\tif ( v.needsUpdate !== false ) {\n\n\t\t\t\t// note: always updating when .needsUpdate is undefined\n\t\t\t\tu.setValue( gl, v.value, textures );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tWebGLUniforms.seqWithValue = function ( seq, values ) {\n\n\t\tvar r = [];\n\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tvar u = seq[ i ];\n\t\t\tif ( u.id in values ) { r.push( u ); }\n\n\t\t}\n\n\t\treturn r;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLShader( gl, type, string ) {\n\n\t\tvar shader = gl.createShader( type );\n\n\t\tgl.shaderSource( shader, string );\n\t\tgl.compileShader( shader );\n\n\t\treturn shader;\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar programIdCount = 0;\n\n\tfunction addLineNumbers( string ) {\n\n\t\tvar lines = string.split( '\\n' );\n\n\t\tfor ( var i = 0; i < lines.length; i ++ ) {\n\n\t\t\tlines[ i ] = ( i + 1 ) + ': ' + lines[ i ];\n\n\t\t}\n\n\t\treturn lines.join( '\\n' );\n\n\t}\n\n\tfunction getEncodingComponents( encoding ) {\n\n\t\tswitch ( encoding ) {\n\n\t\t\tcase LinearEncoding:\n\t\t\t\treturn [ 'Linear', '( value )' ];\n\t\t\tcase sRGBEncoding:\n\t\t\t\treturn [ 'sRGB', '( value )' ];\n\t\t\tcase RGBEEncoding:\n\t\t\t\treturn [ 'RGBE', '( value )' ];\n\t\t\tcase RGBM7Encoding:\n\t\t\t\treturn [ 'RGBM', '( value, 7.0 )' ];\n\t\t\tcase RGBM16Encoding:\n\t\t\t\treturn [ 'RGBM', '( value, 16.0 )' ];\n\t\t\tcase RGBDEncoding:\n\t\t\t\treturn [ 'RGBD', '( value, 256.0 )' ];\n\t\t\tcase GammaEncoding:\n\t\t\t\treturn [ 'Gamma', '( value, float( GAMMA_FACTOR ) )' ];\n\t\t\tcase LogLuvEncoding:\n\t\t\t\treturn [ 'LogLuv', '( value )' ];\n\t\t\tdefault:\n\t\t\t\tthrow new Error( 'unsupported encoding: ' + encoding );\n\n\t\t}\n\n\t}\n\n\tfunction getShaderErrors( gl, shader, type ) {\n\n\t\tvar status = gl.getShaderParameter( shader, 35713 );\n\t\tvar log = gl.getShaderInfoLog( shader ).trim();\n\n\t\tif ( status && log === '' ) { return ''; }\n\n\t\t// --enable-privileged-webgl-extension\n\t\t// console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\n\n\t\tvar source = gl.getShaderSource( shader );\n\n\t\treturn 'THREE.WebGLShader: gl.getShaderInfoLog() ' + type + '\\n' + log + addLineNumbers( source );\n\n\t}\n\n\tfunction getTexelDecodingFunction( functionName, encoding ) {\n\n\t\tvar components = getEncodingComponents( encoding );\n\t\treturn 'vec4 ' + functionName + '( vec4 value ) { return ' + components[ 0 ] + 'ToLinear' + components[ 1 ] + '; }';\n\n\t}\n\n\tfunction getTexelEncodingFunction( functionName, encoding ) {\n\n\t\tvar components = getEncodingComponents( encoding );\n\t\treturn 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[ 0 ] + components[ 1 ] + '; }';\n\n\t}\n\n\tfunction getToneMappingFunction( functionName, toneMapping ) {\n\n\t\tvar toneMappingName;\n\n\t\tswitch ( toneMapping ) {\n\n\t\t\tcase LinearToneMapping:\n\t\t\t\ttoneMappingName = 'Linear';\n\t\t\t\tbreak;\n\n\t\t\tcase ReinhardToneMapping:\n\t\t\t\ttoneMappingName = 'Reinhard';\n\t\t\t\tbreak;\n\n\t\t\tcase Uncharted2ToneMapping:\n\t\t\t\ttoneMappingName = 'Uncharted2';\n\t\t\t\tbreak;\n\n\t\t\tcase CineonToneMapping:\n\t\t\t\ttoneMappingName = 'OptimizedCineon';\n\t\t\t\tbreak;\n\n\t\t\tcase ACESFilmicToneMapping:\n\t\t\t\ttoneMappingName = 'ACESFilmic';\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow new Error( 'unsupported toneMapping: ' + toneMapping );\n\n\t\t}\n\n\t\treturn 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';\n\n\t}\n\n\tfunction generateExtensions( parameters ) {\n\n\t\tvar chunks = [\n\t\t\t( parameters.extensionDerivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.tangentSpaceNormalMap || parameters.clearcoatNormalMap || parameters.flatShading || parameters.shaderID === 'physical' ) ? '#extension GL_OES_standard_derivatives : enable' : '',\n\t\t\t( parameters.extensionFragDepth || parameters.logarithmicDepthBuffer ) && parameters.rendererExtensionFragDepth ? '#extension GL_EXT_frag_depth : enable' : '',\n\t\t\t( parameters.extensionDrawBuffers && parameters.rendererExtensionDrawBuffers ) ? '#extension GL_EXT_draw_buffers : require' : '',\n\t\t\t( parameters.extensionShaderTextureLOD || parameters.envMap ) && parameters.rendererExtensionShaderTextureLod ? '#extension GL_EXT_shader_texture_lod : enable' : ''\n\t\t];\n\n\t\treturn chunks.filter( filterEmptyLine ).join( '\\n' );\n\n\t}\n\n\tfunction generateDefines( defines ) {\n\n\t\tvar chunks = [];\n\n\t\tfor ( var name in defines ) {\n\n\t\t\tvar value = defines[ name ];\n\n\t\t\tif ( value === false ) { continue; }\n\n\t\t\tchunks.push( '#define ' + name + ' ' + value );\n\n\t\t}\n\n\t\treturn chunks.join( '\\n' );\n\n\t}\n\n\tfunction fetchAttributeLocations( gl, program ) {\n\n\t\tvar attributes = {};\n\n\t\tvar n = gl.getProgramParameter( program, 35721 );\n\n\t\tfor ( var i = 0; i < n; i ++ ) {\n\n\t\t\tvar info = gl.getActiveAttrib( program, i );\n\t\t\tvar name = info.name;\n\n\t\t\t// console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );\n\n\t\t\tattributes[ name ] = gl.getAttribLocation( program, name );\n\n\t\t}\n\n\t\treturn attributes;\n\n\t}\n\n\tfunction filterEmptyLine( string ) {\n\n\t\treturn string !== '';\n\n\t}\n\n\tfunction replaceLightNums( string, parameters ) {\n\n\t\treturn string\n\t\t\t.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )\n\t\t\t.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )\n\t\t\t.replace( /NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights )\n\t\t\t.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )\n\t\t\t.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights )\n\t\t\t.replace( /NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows )\n\t\t\t.replace( /NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows )\n\t\t\t.replace( /NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows );\n\n\t}\n\n\tfunction replaceClippingPlaneNums( string, parameters ) {\n\n\t\treturn string\n\t\t\t.replace( /NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes )\n\t\t\t.replace( /UNION_CLIPPING_PLANES/g, ( parameters.numClippingPlanes - parameters.numClipIntersection ) );\n\n\t}\n\n\t// Resolve Includes\n\n\tvar includePattern = /^[ \\t]*#include +<([\\w\\d./]+)>/gm;\n\n\tfunction resolveIncludes( string ) {\n\n\t\treturn string.replace( includePattern, includeReplacer );\n\n\t}\n\n\tfunction includeReplacer( match, include ) {\n\n\t\tvar string = ShaderChunk[ include ];\n\n\t\tif ( string === undefined ) {\n\n\t\t\tthrow new Error( 'Can not resolve #include <' + include + '>' );\n\n\t\t}\n\n\t\treturn resolveIncludes( string );\n\n\t}\n\n\t// Unroll Loops\n\n\tvar loopPattern = /#pragma unroll_loop[\\s]+?for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\n\n\tfunction unrollLoops( string ) {\n\n\t\treturn string.replace( loopPattern, loopReplacer );\n\n\t}\n\n\tfunction loopReplacer( match, start, end, snippet ) {\n\n\t\tvar string = '';\n\n\t\tfor ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {\n\n\t\t\tstring += snippet\n\t\t\t\t.replace( /\\[ i \\]/g, '[ ' + i + ' ]' )\n\t\t\t\t.replace( /UNROLLED_LOOP_INDEX/g, i );\n\n\t\t}\n\n\t\treturn string;\n\n\t}\n\n\t//\n\n\tfunction generatePrecision( parameters ) {\n\n\t\tvar precisionstring = \"precision \" + parameters.precision + \" float;\\nprecision \" + parameters.precision + \" int;\";\n\n\t\tif ( parameters.precision === \"highp\" ) {\n\n\t\t\tprecisionstring += \"\\n#define HIGH_PRECISION\";\n\n\t\t} else if ( parameters.precision === \"mediump\" ) {\n\n\t\t\tprecisionstring += \"\\n#define MEDIUM_PRECISION\";\n\n\t\t} else if ( parameters.precision === \"lowp\" ) {\n\n\t\t\tprecisionstring += \"\\n#define LOW_PRECISION\";\n\n\t\t}\n\n\t\treturn precisionstring;\n\n\t}\n\n\tfunction generateShadowMapTypeDefine( parameters ) {\n\n\t\tvar shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\n\n\t\tif ( parameters.shadowMapType === PCFShadowMap ) {\n\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\n\n\t\t} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {\n\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\n\n\t\t} else if ( parameters.shadowMapType === VSMShadowMap ) {\n\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_VSM';\n\n\t\t}\n\n\t\treturn shadowMapTypeDefine;\n\n\t}\n\n\tfunction generateEnvMapTypeDefine( parameters ) {\n\n\t\tvar envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\n\t\tif ( parameters.envMap ) {\n\n\t\t\tswitch ( parameters.envMapMode ) {\n\n\t\t\t\tcase CubeReflectionMapping:\n\t\t\t\tcase CubeRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase CubeUVReflectionMapping:\n\t\t\t\tcase CubeUVRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase EquirectangularReflectionMapping:\n\t\t\t\tcase EquirectangularRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase SphericalReflectionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_SPHERE';\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn envMapTypeDefine;\n\n\t}\n\n\tfunction generateEnvMapModeDefine( parameters ) {\n\n\t\tvar envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\n\n\t\tif ( parameters.envMap ) {\n\n\t\t\tswitch ( parameters.envMapMode ) {\n\n\t\t\t\tcase CubeRefractionMapping:\n\t\t\t\tcase EquirectangularRefractionMapping:\n\t\t\t\t\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn envMapModeDefine;\n\n\t}\n\n\tfunction generateEnvMapBlendingDefine( parameters ) {\n\n\t\tvar envMapBlendingDefine = 'ENVMAP_BLENDING_NONE';\n\n\t\tif ( parameters.envMap ) {\n\n\t\t\tswitch ( parameters.combine ) {\n\n\t\t\t\tcase MultiplyOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MixOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase AddOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn envMapBlendingDefine;\n\n\t}\n\n\tfunction WebGLProgram( renderer, cacheKey, parameters ) {\n\n\t\tvar gl = renderer.getContext();\n\n\t\tvar defines = parameters.defines;\n\n\t\tvar vertexShader = parameters.vertexShader;\n\t\tvar fragmentShader = parameters.fragmentShader;\n\t\tvar shadowMapTypeDefine = generateShadowMapTypeDefine( parameters );\n\t\tvar envMapTypeDefine = generateEnvMapTypeDefine( parameters );\n\t\tvar envMapModeDefine = generateEnvMapModeDefine( parameters );\n\t\tvar envMapBlendingDefine = generateEnvMapBlendingDefine( parameters );\n\n\n\t\tvar gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;\n\n\t\tvar customExtensions = parameters.isWebGL2 ? '' : generateExtensions( parameters );\n\n\t\tvar customDefines = generateDefines( defines );\n\n\t\tvar program = gl.createProgram();\n\n\t\tvar prefixVertex, prefixFragment;\n\n\t\tvar numMultiviewViews = parameters.numMultiviewViews;\n\n\t\tif ( parameters.isRawShaderMaterial ) {\n\n\t\t\tprefixVertex = [\n\n\t\t\t\tcustomDefines\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t\tif ( prefixVertex.length > 0 ) {\n\n\t\t\t\tprefixVertex += '\\n';\n\n\t\t\t}\n\n\t\t\tprefixFragment = [\n\n\t\t\t\tcustomExtensions,\n\t\t\t\tcustomDefines\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t\tif ( prefixFragment.length > 0 ) {\n\n\t\t\t\tprefixFragment += '\\n';\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tprefixVertex = [\n\n\t\t\t\tgeneratePrecision( parameters ),\n\n\t\t\t\t'#define SHADER_NAME ' + parameters.shaderName,\n\n\t\t\t\tcustomDefines,\n\n\t\t\t\tparameters.instancing ? '#define USE_INSTANCING' : '',\n\t\t\t\tparameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',\n\n\t\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\n\t\t\t\t'#define MAX_BONES ' + parameters.maxBones,\n\t\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\n\t\t\t\t( parameters.useFog && parameters.fogExp2 ) ? '#define FOG_EXP2' : '',\n\n\t\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\t\t( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',\n\t\t\t\t( parameters.normalMap && parameters.tangentSpaceNormalMap ) ? '#define TANGENTSPACE_NORMALMAP' : '',\n\n\t\t\t\tparameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',\n\t\t\t\tparameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',\n\t\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\n\t\t\t\tparameters.vertexTangents ? '#define USE_TANGENT' : '',\n\t\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\t\t\t\tparameters.vertexUvs ? '#define USE_UV' : '',\n\t\t\t\tparameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',\n\n\t\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n\t\t\t\tparameters.skinning ? '#define USE_SKINNING' : '',\n\t\t\t\tparameters.useVertexTexture ? '#define BONE_TEXTURE' : '',\n\n\t\t\t\tparameters.morphTargets ? '#define USE_MORPHTARGETS' : '',\n\t\t\t\tparameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',\n\t\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n\t\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n\t\t\t\tparameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',\n\n\t\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\t\t( parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n\t\t\t\t'uniform mat4 modelMatrix;',\n\t\t\t\t'uniform mat4 modelViewMatrix;',\n\t\t\t\t'uniform mat4 projectionMatrix;',\n\t\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t\t'uniform mat3 normalMatrix;',\n\t\t\t\t'uniform vec3 cameraPosition;',\n\t\t\t\t'uniform bool isOrthographic;',\n\n\t\t\t\t'#ifdef USE_INSTANCING',\n\n\t\t\t\t' attribute mat4 instanceMatrix;',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'attribute vec3 position;',\n\t\t\t\t'attribute vec3 normal;',\n\t\t\t\t'attribute vec2 uv;',\n\n\t\t\t\t'#ifdef USE_TANGENT',\n\n\t\t\t\t'\tattribute vec4 tangent;',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'#ifdef USE_COLOR',\n\n\t\t\t\t'\tattribute vec3 color;',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'#ifdef USE_MORPHTARGETS',\n\n\t\t\t\t'\tattribute vec3 morphTarget0;',\n\t\t\t\t'\tattribute vec3 morphTarget1;',\n\t\t\t\t'\tattribute vec3 morphTarget2;',\n\t\t\t\t'\tattribute vec3 morphTarget3;',\n\n\t\t\t\t'\t#ifdef USE_MORPHNORMALS',\n\n\t\t\t\t'\t\tattribute vec3 morphNormal0;',\n\t\t\t\t'\t\tattribute vec3 morphNormal1;',\n\t\t\t\t'\t\tattribute vec3 morphNormal2;',\n\t\t\t\t'\t\tattribute vec3 morphNormal3;',\n\n\t\t\t\t'\t#else',\n\n\t\t\t\t'\t\tattribute vec3 morphTarget4;',\n\t\t\t\t'\t\tattribute vec3 morphTarget5;',\n\t\t\t\t'\t\tattribute vec3 morphTarget6;',\n\t\t\t\t'\t\tattribute vec3 morphTarget7;',\n\n\t\t\t\t'\t#endif',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'#ifdef USE_SKINNING',\n\n\t\t\t\t'\tattribute vec4 skinIndex;',\n\t\t\t\t'\tattribute vec4 skinWeight;',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'\\n'\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t\tprefixFragment = [\n\n\t\t\t\tcustomExtensions,\n\n\t\t\t\tgeneratePrecision( parameters ),\n\n\t\t\t\t'#define SHADER_NAME ' + parameters.shaderName,\n\n\t\t\t\tcustomDefines,\n\n\t\t\t\tparameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest + ( parameters.alphaTest % 1 ? '' : '.0' ) : '', // add '.0' if integer\n\n\t\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\n\t\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\n\t\t\t\t( parameters.useFog && parameters.fogExp2 ) ? '#define FOG_EXP2' : '',\n\n\t\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\t\tparameters.matcap ? '#define USE_MATCAP' : '',\n\t\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapTypeDefine : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapBlendingDefine : '',\n\t\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\t\t( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',\n\t\t\t\t( parameters.normalMap && parameters.tangentSpaceNormalMap ) ? '#define TANGENTSPACE_NORMALMAP' : '',\n\t\t\t\tparameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',\n\t\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\n\t\t\t\tparameters.sheen ? '#define USE_SHEEN' : '',\n\n\t\t\t\tparameters.vertexTangents ? '#define USE_TANGENT' : '',\n\t\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\t\t\t\tparameters.vertexUvs ? '#define USE_UV' : '',\n\t\t\t\tparameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',\n\n\t\t\t\tparameters.gradientMap ? '#define USE_GRADIENTMAP' : '',\n\n\t\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n\t\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n\t\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n\t\t\t\tparameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '',\n\n\t\t\t\tparameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '',\n\n\t\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\t\t( parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n\t\t\t\t( ( parameters.extensionShaderTextureLOD || parameters.envMap ) && parameters.rendererExtensionShaderTextureLod ) ? '#define TEXTURE_LOD_EXT' : '',\n\n\t\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t\t'uniform vec3 cameraPosition;',\n\t\t\t\t'uniform bool isOrthographic;',\n\n\t\t\t\t( parameters.toneMapping !== NoToneMapping ) ? '#define TONE_MAPPING' : '',\n\t\t\t\t( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '', // this code is required here because it is used by the toneMapping() function defined below\n\t\t\t\t( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( 'toneMapping', parameters.toneMapping ) : '',\n\n\t\t\t\tparameters.dithering ? '#define DITHERING' : '',\n\n\t\t\t\t( parameters.outputEncoding || parameters.mapEncoding || parameters.matcapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding || parameters.lightMapEncoding ) ?\n\t\t\t\t\tShaderChunk[ 'encodings_pars_fragment' ] : '', // this code is required here because it is used by the various encoding/decoding function defined below\n\t\t\t\tparameters.mapEncoding ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',\n\t\t\t\tparameters.matcapEncoding ? getTexelDecodingFunction( 'matcapTexelToLinear', parameters.matcapEncoding ) : '',\n\t\t\t\tparameters.envMapEncoding ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',\n\t\t\t\tparameters.emissiveMapEncoding ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',\n\t\t\t\tparameters.lightMapEncoding ? getTexelDecodingFunction( 'lightMapTexelToLinear', parameters.lightMapEncoding ) : '',\n\t\t\t\tparameters.outputEncoding ? getTexelEncodingFunction( 'linearToOutputTexel', parameters.outputEncoding ) : '',\n\n\t\t\t\tparameters.depthPacking ? '#define DEPTH_PACKING ' + parameters.depthPacking : '',\n\n\t\t\t\t'\\n'\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t}\n\n\t\tvertexShader = resolveIncludes( vertexShader );\n\t\tvertexShader = replaceLightNums( vertexShader, parameters );\n\t\tvertexShader = replaceClippingPlaneNums( vertexShader, parameters );\n\n\t\tfragmentShader = resolveIncludes( fragmentShader );\n\t\tfragmentShader = replaceLightNums( fragmentShader, parameters );\n\t\tfragmentShader = replaceClippingPlaneNums( fragmentShader, parameters );\n\n\t\tvertexShader = unrollLoops( vertexShader );\n\t\tfragmentShader = unrollLoops( fragmentShader );\n\n\t\tif ( parameters.isWebGL2 && ! parameters.isRawShaderMaterial ) {\n\n\t\t\tvar isGLSL3ShaderMaterial = false;\n\n\t\t\tvar versionRegex = /^\\s*#version\\s+300\\s+es\\s*\\n/;\n\n\t\t\tif ( parameters.isShaderMaterial &&\n\t\t\t\tvertexShader.match( versionRegex ) !== null &&\n\t\t\t\tfragmentShader.match( versionRegex ) !== null ) {\n\n\t\t\t\tisGLSL3ShaderMaterial = true;\n\n\t\t\t\tvertexShader = vertexShader.replace( versionRegex, '' );\n\t\t\t\tfragmentShader = fragmentShader.replace( versionRegex, '' );\n\n\t\t\t}\n\n\t\t\t// GLSL 3.0 conversion\n\n\t\t\tprefixVertex = [\n\t\t\t\t'#version 300 es\\n',\n\t\t\t\t'#define attribute in',\n\t\t\t\t'#define varying out',\n\t\t\t\t'#define texture2D texture'\n\t\t\t].join( '\\n' ) + '\\n' + prefixVertex;\n\n\t\t\tprefixFragment = [\n\t\t\t\t'#version 300 es\\n',\n\t\t\t\t'#define varying in',\n\t\t\t\tisGLSL3ShaderMaterial ? '' : 'out highp vec4 pc_fragColor;',\n\t\t\t\tisGLSL3ShaderMaterial ? '' : '#define gl_FragColor pc_fragColor',\n\t\t\t\t'#define gl_FragDepthEXT gl_FragDepth',\n\t\t\t\t'#define texture2D texture',\n\t\t\t\t'#define textureCube texture',\n\t\t\t\t'#define texture2DProj textureProj',\n\t\t\t\t'#define texture2DLodEXT textureLod',\n\t\t\t\t'#define texture2DProjLodEXT textureProjLod',\n\t\t\t\t'#define textureCubeLodEXT textureLod',\n\t\t\t\t'#define texture2DGradEXT textureGrad',\n\t\t\t\t'#define texture2DProjGradEXT textureProjGrad',\n\t\t\t\t'#define textureCubeGradEXT textureGrad'\n\t\t\t].join( '\\n' ) + '\\n' + prefixFragment;\n\n\t\t\t// Multiview\n\n\t\t\tif ( numMultiviewViews > 0 ) {\n\n\t\t\t\tprefixVertex = prefixVertex.replace(\n\t\t\t\t\t'#version 300 es\\n',\n\t\t\t\t\t[\n\t\t\t\t\t\t'#version 300 es\\n',\n\t\t\t\t\t\t'#extension GL_OVR_multiview2 : require',\n\t\t\t\t\t\t'layout(num_views = ' + numMultiviewViews + ') in;',\n\t\t\t\t\t\t'#define VIEW_ID gl_ViewID_OVR'\n\t\t\t\t\t].join( '\\n' )\n\t\t\t\t);\n\n\t\t\t\tprefixVertex = prefixVertex.replace(\n\t\t\t\t\t[\n\t\t\t\t\t\t'uniform mat4 modelViewMatrix;',\n\t\t\t\t\t\t'uniform mat4 projectionMatrix;',\n\t\t\t\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t\t\t\t'uniform mat3 normalMatrix;'\n\t\t\t\t\t].join( '\\n' ),\n\t\t\t\t\t[\n\t\t\t\t\t\t'uniform mat4 modelViewMatrices[' + numMultiviewViews + '];',\n\t\t\t\t\t\t'uniform mat4 projectionMatrices[' + numMultiviewViews + '];',\n\t\t\t\t\t\t'uniform mat4 viewMatrices[' + numMultiviewViews + '];',\n\t\t\t\t\t\t'uniform mat3 normalMatrices[' + numMultiviewViews + '];',\n\n\t\t\t\t\t\t'#define modelViewMatrix modelViewMatrices[VIEW_ID]',\n\t\t\t\t\t\t'#define projectionMatrix projectionMatrices[VIEW_ID]',\n\t\t\t\t\t\t'#define viewMatrix viewMatrices[VIEW_ID]',\n\t\t\t\t\t\t'#define normalMatrix normalMatrices[VIEW_ID]'\n\t\t\t\t\t].join( '\\n' )\n\t\t\t\t);\n\n\t\t\t\tprefixFragment = prefixFragment.replace(\n\t\t\t\t\t'#version 300 es\\n',\n\t\t\t\t\t[\n\t\t\t\t\t\t'#version 300 es\\n',\n\t\t\t\t\t\t'#extension GL_OVR_multiview2 : require',\n\t\t\t\t\t\t'#define VIEW_ID gl_ViewID_OVR'\n\t\t\t\t\t].join( '\\n' )\n\t\t\t\t);\n\n\t\t\t\tprefixFragment = prefixFragment.replace(\n\t\t\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t\t\t[\n\t\t\t\t\t\t'uniform mat4 viewMatrices[' + numMultiviewViews + '];',\n\t\t\t\t\t\t'#define viewMatrix viewMatrices[VIEW_ID]'\n\t\t\t\t\t].join( '\\n' )\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar vertexGlsl = prefixVertex + vertexShader;\n\t\tvar fragmentGlsl = prefixFragment + fragmentShader;\n\n\t\t// console.log( '*VERTEX*', vertexGlsl );\n\t\t// console.log( '*FRAGMENT*', fragmentGlsl );\n\n\t\tvar glVertexShader = WebGLShader( gl, 35633, vertexGlsl );\n\t\tvar glFragmentShader = WebGLShader( gl, 35632, fragmentGlsl );\n\n\t\tgl.attachShader( program, glVertexShader );\n\t\tgl.attachShader( program, glFragmentShader );\n\n\t\t// Force a particular attribute to index 0.\n\n\t\tif ( parameters.index0AttributeName !== undefined ) {\n\n\t\t\tgl.bindAttribLocation( program, 0, parameters.index0AttributeName );\n\n\t\t} else if ( parameters.morphTargets === true ) {\n\n\t\t\t// programs with morphTargets displace position out of attribute 0\n\t\t\tgl.bindAttribLocation( program, 0, 'position' );\n\n\t\t}\n\n\t\tgl.linkProgram( program );\n\n\t\t// check for link errors\n\t\tif ( renderer.debug.checkShaderErrors ) {\n\n\t\t\tvar programLog = gl.getProgramInfoLog( program ).trim();\n\t\t\tvar vertexLog = gl.getShaderInfoLog( glVertexShader ).trim();\n\t\t\tvar fragmentLog = gl.getShaderInfoLog( glFragmentShader ).trim();\n\n\t\t\tvar runnable = true;\n\t\t\tvar haveDiagnostics = true;\n\n\t\t\tif ( gl.getProgramParameter( program, 35714 ) === false ) {\n\n\t\t\t\trunnable = false;\n\n\t\t\t\tvar vertexErrors = getShaderErrors( gl, glVertexShader, 'vertex' );\n\t\t\t\tvar fragmentErrors = getShaderErrors( gl, glFragmentShader, 'fragment' );\n\n\t\t\t\tconsole.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), '35715', gl.getProgramParameter( program, 35715 ), 'gl.getProgramInfoLog', programLog, vertexErrors, fragmentErrors );\n\n\t\t\t} else if ( programLog !== '' ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );\n\n\t\t\t} else if ( vertexLog === '' || fragmentLog === '' ) {\n\n\t\t\t\thaveDiagnostics = false;\n\n\t\t\t}\n\n\t\t\tif ( haveDiagnostics ) {\n\n\t\t\t\tthis.diagnostics = {\n\n\t\t\t\t\trunnable: runnable,\n\n\t\t\t\t\tprogramLog: programLog,\n\n\t\t\t\t\tvertexShader: {\n\n\t\t\t\t\t\tlog: vertexLog,\n\t\t\t\t\t\tprefix: prefixVertex\n\n\t\t\t\t\t},\n\n\t\t\t\t\tfragmentShader: {\n\n\t\t\t\t\t\tlog: fragmentLog,\n\t\t\t\t\t\tprefix: prefixFragment\n\n\t\t\t\t\t}\n\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t}\n\n\t\t// clean up\n\n\t\tgl.deleteShader( glVertexShader );\n\t\tgl.deleteShader( glFragmentShader );\n\n\t\t// set up caching for uniform locations\n\n\t\tvar cachedUniforms;\n\n\t\tthis.getUniforms = function () {\n\n\t\t\tif ( cachedUniforms === undefined ) {\n\n\t\t\t\tcachedUniforms = new WebGLUniforms( gl, program );\n\n\t\t\t}\n\n\t\t\treturn cachedUniforms;\n\n\t\t};\n\n\t\t// set up caching for attribute locations\n\n\t\tvar cachedAttributes;\n\n\t\tthis.getAttributes = function () {\n\n\t\t\tif ( cachedAttributes === undefined ) {\n\n\t\t\t\tcachedAttributes = fetchAttributeLocations( gl, program );\n\n\t\t\t}\n\n\t\t\treturn cachedAttributes;\n\n\t\t};\n\n\t\t// free resource\n\n\t\tthis.destroy = function () {\n\n\t\t\tgl.deleteProgram( program );\n\t\t\tthis.program = undefined;\n\n\t\t};\n\n\t\t//\n\n\t\tthis.name = parameters.shaderName;\n\t\tthis.id = programIdCount ++;\n\t\tthis.cacheKey = cacheKey;\n\t\tthis.usedTimes = 1;\n\t\tthis.program = program;\n\t\tthis.vertexShader = glVertexShader;\n\t\tthis.fragmentShader = glFragmentShader;\n\t\tthis.numMultiviewViews = numMultiviewViews;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLPrograms( renderer, extensions, capabilities ) {\n\n\t\tvar programs = [];\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\t\tvar logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;\n\t\tvar floatVertexTextures = capabilities.floatVertexTextures;\n\t\tvar precision = capabilities.precision;\n\t\tvar maxVertexUniforms = capabilities.maxVertexUniforms;\n\t\tvar vertexTextures = capabilities.vertexTextures;\n\n\t\tvar shaderIDs = {\n\t\t\tMeshDepthMaterial: 'depth',\n\t\t\tMeshDistanceMaterial: 'distanceRGBA',\n\t\t\tMeshNormalMaterial: 'normal',\n\t\t\tMeshBasicMaterial: 'basic',\n\t\t\tMeshLambertMaterial: 'lambert',\n\t\t\tMeshPhongMaterial: 'phong',\n\t\t\tMeshToonMaterial: 'toon',\n\t\t\tMeshStandardMaterial: 'physical',\n\t\t\tMeshPhysicalMaterial: 'physical',\n\t\t\tMeshMatcapMaterial: 'matcap',\n\t\t\tLineBasicMaterial: 'basic',\n\t\t\tLineDashedMaterial: 'dashed',\n\t\t\tPointsMaterial: 'points',\n\t\t\tShadowMaterial: 'shadow',\n\t\t\tSpriteMaterial: 'sprite'\n\t\t};\n\n\t\tvar parameterNames = [\n\t\t\t\"precision\", \"isWebGL2\", \"supportsVertexTextures\", \"outputEncoding\", \"instancing\", \"numMultiviewViews\",\n\t\t\t\"map\", \"mapEncoding\", \"matcap\", \"matcapEncoding\", \"envMap\", \"envMapMode\", \"envMapEncoding\", \"envMapCubeUV\",\n\t\t\t\"lightMap\", \"lightMapEncoding\", \"aoMap\", \"emissiveMap\", \"emissiveMapEncoding\", \"bumpMap\", \"normalMap\", \"objectSpaceNormalMap\", \"tangentSpaceNormalMap\", \"clearcoatNormalMap\", \"displacementMap\", \"specularMap\",\n\t\t\t\"roughnessMap\", \"metalnessMap\", \"gradientMap\",\n\t\t\t\"alphaMap\", \"combine\", \"vertexColors\", \"vertexTangents\", \"vertexUvs\", \"uvsVertexOnly\", \"fog\", \"useFog\", \"fogExp2\",\n\t\t\t\"flatShading\", \"sizeAttenuation\", \"logarithmicDepthBuffer\", \"skinning\",\n\t\t\t\"maxBones\", \"useVertexTexture\", \"morphTargets\", \"morphNormals\",\n\t\t\t\"maxMorphTargets\", \"maxMorphNormals\", \"premultipliedAlpha\",\n\t\t\t\"numDirLights\", \"numPointLights\", \"numSpotLights\", \"numHemiLights\", \"numRectAreaLights\",\n\t\t\t\"numDirLightShadows\", \"numPointLightShadows\", \"numSpotLightShadows\",\n\t\t\t\"shadowMapEnabled\", \"shadowMapType\", \"toneMapping\", 'physicallyCorrectLights',\n\t\t\t\"alphaTest\", \"doubleSided\", \"flipSided\", \"numClippingPlanes\", \"numClipIntersection\", \"depthPacking\", \"dithering\",\n\t\t\t\"sheen\"\n\t\t];\n\n\t\tfunction getShaderObject( material, shaderID ) {\n\n\t\t\tvar shaderobject;\n\n\t\t\tif ( shaderID ) {\n\n\t\t\t\tvar shader = ShaderLib[ shaderID ];\n\n\t\t\t\tshaderobject = {\n\t\t\t\t\tname: material.type,\n\t\t\t\t\tuniforms: UniformsUtils.clone( shader.uniforms ),\n\t\t\t\t\tvertexShader: shader.vertexShader,\n\t\t\t\t\tfragmentShader: shader.fragmentShader\n\t\t\t\t};\n\n\t\t\t} else {\n\n\t\t\t\tshaderobject = {\n\t\t\t\t\tname: material.type,\n\t\t\t\t\tuniforms: material.uniforms,\n\t\t\t\t\tvertexShader: material.vertexShader,\n\t\t\t\t\tfragmentShader: material.fragmentShader\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\treturn shaderobject;\n\n\t\t}\n\n\t\tfunction allocateBones( object ) {\n\n\t\t\tvar skeleton = object.skeleton;\n\t\t\tvar bones = skeleton.bones;\n\n\t\t\tif ( floatVertexTextures ) {\n\n\t\t\t\treturn 1024;\n\n\t\t\t} else {\n\n\t\t\t\t// default for when object is not specified\n\t\t\t\t// ( for example when prebuilding shader to be used with multiple objects )\n\t\t\t\t//\n\t\t\t\t//  - leave some extra space for other uniforms\n\t\t\t\t//  - limit here is ANGLE's 254 max uniform vectors\n\t\t\t\t//    (up to 54 should be safe)\n\n\t\t\t\tvar nVertexUniforms = maxVertexUniforms;\n\t\t\t\tvar nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );\n\n\t\t\t\tvar maxBones = Math.min( nVertexMatrices, bones.length );\n\n\t\t\t\tif ( maxBones < bones.length ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.' );\n\t\t\t\t\treturn 0;\n\n\t\t\t\t}\n\n\t\t\t\treturn maxBones;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction getTextureEncodingFromMap( map ) {\n\n\t\t\tvar encoding;\n\n\t\t\tif ( ! map ) {\n\n\t\t\t\tencoding = LinearEncoding;\n\n\t\t\t} else if ( map.isTexture ) {\n\n\t\t\t\tencoding = map.encoding;\n\n\t\t\t} else if ( map.isWebGLRenderTarget ) {\n\n\t\t\t\tconsole.warn( \"THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.\" );\n\t\t\t\tencoding = map.texture.encoding;\n\n\t\t\t}\n\n\t\t\treturn encoding;\n\n\t\t}\n\n\t\tthis.getParameters = function ( material, lights, shadows, scene, nClipPlanes, nClipIntersection, object ) {\n\n\t\t\tvar fog = scene.fog;\n\t\t\tvar environment = material.isMeshStandardMaterial ? scene.environment : null;\n\n\t\t\tvar envMap = material.envMap || environment;\n\n\t\t\tvar shaderID = shaderIDs[ material.type ];\n\n\t\t\t// heuristics to create shader parameters according to lights in the scene\n\t\t\t// (not to blow over maxLights budget)\n\n\t\t\tvar maxBones = object.isSkinnedMesh ? allocateBones( object ) : 0;\n\n\t\t\tif ( material.precision !== null ) {\n\n\t\t\t\tprecision = capabilities.getMaxPrecision( material.precision );\n\n\t\t\t\tif ( precision !== material.precision ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar shaderobject = getShaderObject( material, shaderID );\n\t\t\tmaterial.onBeforeCompile( shaderobject, renderer );\n\n\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\t\t\tvar numMultiviewViews = currentRenderTarget && currentRenderTarget.isWebGLMultiviewRenderTarget ? currentRenderTarget.numViews : 0;\n\n\t\t\tvar parameters = {\n\n\t\t\t\tisWebGL2: isWebGL2,\n\n\t\t\t\tshaderID: shaderID,\n\t\t\t\tshaderName: shaderobject.name,\n\n\t\t\t\tuniforms: shaderobject.uniforms,\n\t\t\t\tvertexShader: shaderobject.vertexShader,\n\t\t\t\tfragmentShader: shaderobject.fragmentShader,\n\t\t\t\tdefines: material.defines,\n\n\t\t\t\tisRawShaderMaterial: material.isRawShaderMaterial,\n\t\t\t\tisShaderMaterial: material.isShaderMaterial,\n\n\t\t\t\tprecision: precision,\n\n\t\t\t\tinstancing: object.isInstancedMesh === true,\n\n\t\t\t\tsupportsVertexTextures: vertexTextures,\n\t\t\t\tnumMultiviewViews: numMultiviewViews,\n\t\t\t\toutputEncoding: ( currentRenderTarget !== null ) ? getTextureEncodingFromMap( currentRenderTarget.texture ) : renderer.outputEncoding,\n\t\t\t\tmap: !! material.map,\n\t\t\t\tmapEncoding: getTextureEncodingFromMap( material.map ),\n\t\t\t\tmatcap: !! material.matcap,\n\t\t\t\tmatcapEncoding: getTextureEncodingFromMap( material.matcap ),\n\t\t\t\tenvMap: !! envMap,\n\t\t\t\tenvMapMode: envMap && envMap.mapping,\n\t\t\t\tenvMapEncoding: getTextureEncodingFromMap( envMap ),\n\t\t\t\tenvMapCubeUV: ( !! envMap ) && ( ( envMap.mapping === CubeUVReflectionMapping ) || ( envMap.mapping === CubeUVRefractionMapping ) ),\n\t\t\t\tlightMap: !! material.lightMap,\n\t\t\t\tlightMapEncoding: getTextureEncodingFromMap( material.lightMap ),\n\t\t\t\taoMap: !! material.aoMap,\n\t\t\t\temissiveMap: !! material.emissiveMap,\n\t\t\t\temissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap ),\n\t\t\t\tbumpMap: !! material.bumpMap,\n\t\t\t\tnormalMap: !! material.normalMap,\n\t\t\t\tobjectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,\n\t\t\t\ttangentSpaceNormalMap: material.normalMapType === TangentSpaceNormalMap,\n\t\t\t\tclearcoatNormalMap: !! material.clearcoatNormalMap,\n\t\t\t\tdisplacementMap: !! material.displacementMap,\n\t\t\t\troughnessMap: !! material.roughnessMap,\n\t\t\t\tmetalnessMap: !! material.metalnessMap,\n\t\t\t\tspecularMap: !! material.specularMap,\n\t\t\t\talphaMap: !! material.alphaMap,\n\n\t\t\t\tgradientMap: !! material.gradientMap,\n\n\t\t\t\tsheen: !! material.sheen,\n\n\t\t\t\tcombine: material.combine,\n\n\t\t\t\tvertexTangents: ( material.normalMap && material.vertexTangents ),\n\t\t\t\tvertexColors: material.vertexColors,\n\t\t\t\tvertexUvs: !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatNormalMap || !! material.displacementMap,\n\t\t\t\tuvsVertexOnly: ! ( !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatNormalMap ) && !! material.displacementMap,\n\n\t\t\t\tfog: !! fog,\n\t\t\t\tuseFog: material.fog,\n\t\t\t\tfogExp2: ( fog && fog.isFogExp2 ),\n\n\t\t\t\tflatShading: material.flatShading,\n\n\t\t\t\tsizeAttenuation: material.sizeAttenuation,\n\t\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\n\t\t\t\tskinning: material.skinning && maxBones > 0,\n\t\t\t\tmaxBones: maxBones,\n\t\t\t\tuseVertexTexture: floatVertexTextures,\n\n\t\t\t\tmorphTargets: material.morphTargets,\n\t\t\t\tmorphNormals: material.morphNormals,\n\t\t\t\tmaxMorphTargets: renderer.maxMorphTargets,\n\t\t\t\tmaxMorphNormals: renderer.maxMorphNormals,\n\n\t\t\t\tnumDirLights: lights.directional.length,\n\t\t\t\tnumPointLights: lights.point.length,\n\t\t\t\tnumSpotLights: lights.spot.length,\n\t\t\t\tnumRectAreaLights: lights.rectArea.length,\n\t\t\t\tnumHemiLights: lights.hemi.length,\n\n\t\t\t\tnumDirLightShadows: lights.directionalShadowMap.length,\n\t\t\t\tnumPointLightShadows: lights.pointShadowMap.length,\n\t\t\t\tnumSpotLightShadows: lights.spotShadowMap.length,\n\n\t\t\t\tnumClippingPlanes: nClipPlanes,\n\t\t\t\tnumClipIntersection: nClipIntersection,\n\n\t\t\t\tdithering: material.dithering,\n\n\t\t\t\tshadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,\n\t\t\t\tshadowMapType: renderer.shadowMap.type,\n\n\t\t\t\ttoneMapping: material.toneMapped ? renderer.toneMapping : NoToneMapping,\n\t\t\t\tphysicallyCorrectLights: renderer.physicallyCorrectLights,\n\n\t\t\t\tpremultipliedAlpha: material.premultipliedAlpha,\n\n\t\t\t\talphaTest: material.alphaTest,\n\t\t\t\tdoubleSided: material.side === DoubleSide,\n\t\t\t\tflipSided: material.side === BackSide,\n\n\t\t\t\tdepthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false,\n\n\t\t\t\tindex0AttributeName: material.index0AttributeName,\n\n\t\t\t\textensionDerivatives: material.extensions && material.extensions.derivatives,\n\t\t\t\textensionFragDepth: material.extensions && material.extensions.frawbuffers,\n\t\t\t\textensionDrawbuffers: material.extensions && material.extensions.drawbuffers,\n\t\t\t\textensionShaderTextureLOD: material.extensions && material.extensions.shaderTextureLOD,\n\n\t\t\t\trendererExtensionFragDepth: isWebGL2 || extensions.get( 'EXT_frag_depth' ) !== null,\n\t\t\t\trendererExtensionDrawBuffers: isWebGL2 || extensions.get( 'WEBGL_draw_buffers' ) !== null,\n\t\t\t\trendererExtensionShaderTextureLod: isWebGL2 || extensions.get( 'EXT_shader_texture_lod' ) !== null,\n\n\t\t\t\tonBeforeCompile: material.onBeforeCompile\n\n\t\t\t};\n\n\t\t\treturn parameters;\n\n\t\t};\n\n\t\tthis.getProgramCacheKey = function ( parameters ) {\n\n\t\t\tvar array = [];\n\n\t\t\tif ( parameters.shaderID ) {\n\n\t\t\t\tarray.push( parameters.shaderID );\n\n\t\t\t} else {\n\n\t\t\t\tarray.push( parameters.fragmentShader );\n\t\t\t\tarray.push( parameters.vertexShader );\n\n\t\t\t}\n\n\t\t\tif ( parameters.defines !== undefined ) {\n\n\t\t\t\tfor ( var name in parameters.defines ) {\n\n\t\t\t\t\tarray.push( name );\n\t\t\t\t\tarray.push( parameters.defines[ name ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( parameters.isRawShaderMaterial === undefined ) {\n\n\t\t\t\tfor ( var i = 0; i < parameterNames.length; i ++ ) {\n\n\t\t\t\t\tarray.push( parameters[ parameterNames[ i ] ] );\n\n\t\t\t\t}\n\n\t\t\t\tarray.push( renderer.outputEncoding );\n\t\t\t\tarray.push( renderer.gammaFactor );\n\n\t\t\t}\n\n\t\t\tarray.push( parameters.onBeforeCompile.toString() );\n\n\t\t\treturn array.join();\n\n\t\t};\n\n\t\tthis.acquireProgram = function ( parameters, cacheKey ) {\n\n\t\t\tvar program;\n\n\t\t\t// Check if code has been already compiled\n\t\t\tfor ( var p = 0, pl = programs.length; p < pl; p ++ ) {\n\n\t\t\t\tvar preexistingProgram = programs[ p ];\n\n\t\t\t\tif ( preexistingProgram.cacheKey === cacheKey ) {\n\n\t\t\t\t\tprogram = preexistingProgram;\n\t\t\t\t\t++ program.usedTimes;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( program === undefined ) {\n\n\t\t\t\tprogram = new WebGLProgram( renderer, cacheKey, parameters );\n\t\t\t\tprograms.push( program );\n\n\t\t\t}\n\n\t\t\treturn program;\n\n\t\t};\n\n\t\tthis.releaseProgram = function ( program ) {\n\n\t\t\tif ( -- program.usedTimes === 0 ) {\n\n\t\t\t\t// Remove from unordered set\n\t\t\t\tvar i = programs.indexOf( program );\n\t\t\t\tprograms[ i ] = programs[ programs.length - 1 ];\n\t\t\t\tprograms.pop();\n\n\t\t\t\t// Free WebGL resources\n\t\t\t\tprogram.destroy();\n\n\t\t\t}\n\n\t\t};\n\n\t\t// Exposed for resource monitoring & error feedback via renderer.info:\n\t\tthis.programs = programs;\n\n\t}\n\n\t/**\n\t * @author fordacious / fordacious.github.io\n\t */\n\n\tfunction WebGLProperties() {\n\n\t\tvar properties = new WeakMap();\n\n\t\tfunction get( object ) {\n\n\t\t\tvar map = properties.get( object );\n\n\t\t\tif ( map === undefined ) {\n\n\t\t\t\tmap = {};\n\t\t\t\tproperties.set( object, map );\n\n\t\t\t}\n\n\t\t\treturn map;\n\n\t\t}\n\n\t\tfunction remove( object ) {\n\n\t\t\tproperties.delete( object );\n\n\t\t}\n\n\t\tfunction update( object, key, value ) {\n\n\t\t\tproperties.get( object )[ key ] = value;\n\n\t\t}\n\n\t\tfunction dispose() {\n\n\t\t\tproperties = new WeakMap();\n\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tremove: remove,\n\t\t\tupdate: update,\n\t\t\tdispose: dispose\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction painterSortStable( a, b ) {\n\n\t\tif ( a.groupOrder !== b.groupOrder ) {\n\n\t\t\treturn a.groupOrder - b.groupOrder;\n\n\t\t} else if ( a.renderOrder !== b.renderOrder ) {\n\n\t\t\treturn a.renderOrder - b.renderOrder;\n\n\t\t} else if ( a.program !== b.program ) {\n\n\t\t\treturn a.program.id - b.program.id;\n\n\t\t} else if ( a.material.id !== b.material.id ) {\n\n\t\t\treturn a.material.id - b.material.id;\n\n\t\t} else if ( a.z !== b.z ) {\n\n\t\t\treturn a.z - b.z;\n\n\t\t} else {\n\n\t\t\treturn a.id - b.id;\n\n\t\t}\n\n\t}\n\n\tfunction reversePainterSortStable( a, b ) {\n\n\t\tif ( a.groupOrder !== b.groupOrder ) {\n\n\t\t\treturn a.groupOrder - b.groupOrder;\n\n\t\t} else if ( a.renderOrder !== b.renderOrder ) {\n\n\t\t\treturn a.renderOrder - b.renderOrder;\n\n\t\t} else if ( a.z !== b.z ) {\n\n\t\t\treturn b.z - a.z;\n\n\t\t} else {\n\n\t\t\treturn a.id - b.id;\n\n\t\t}\n\n\t}\n\n\n\tfunction WebGLRenderList() {\n\n\t\tvar renderItems = [];\n\t\tvar renderItemsIndex = 0;\n\n\t\tvar opaque = [];\n\t\tvar transparent = [];\n\n\t\tvar defaultProgram = { id: - 1 };\n\n\t\tfunction init() {\n\n\t\t\trenderItemsIndex = 0;\n\n\t\t\topaque.length = 0;\n\t\t\ttransparent.length = 0;\n\n\t\t}\n\n\t\tfunction getNextRenderItem( object, geometry, material, groupOrder, z, group ) {\n\n\t\t\tvar renderItem = renderItems[ renderItemsIndex ];\n\n\t\t\tif ( renderItem === undefined ) {\n\n\t\t\t\trenderItem = {\n\t\t\t\t\tid: object.id,\n\t\t\t\t\tobject: object,\n\t\t\t\t\tgeometry: geometry,\n\t\t\t\t\tmaterial: material,\n\t\t\t\t\tprogram: material.program || defaultProgram,\n\t\t\t\t\tgroupOrder: groupOrder,\n\t\t\t\t\trenderOrder: object.renderOrder,\n\t\t\t\t\tz: z,\n\t\t\t\t\tgroup: group\n\t\t\t\t};\n\n\t\t\t\trenderItems[ renderItemsIndex ] = renderItem;\n\n\t\t\t} else {\n\n\t\t\t\trenderItem.id = object.id;\n\t\t\t\trenderItem.object = object;\n\t\t\t\trenderItem.geometry = geometry;\n\t\t\t\trenderItem.material = material;\n\t\t\t\trenderItem.program = material.program || defaultProgram;\n\t\t\t\trenderItem.groupOrder = groupOrder;\n\t\t\t\trenderItem.renderOrder = object.renderOrder;\n\t\t\t\trenderItem.z = z;\n\t\t\t\trenderItem.group = group;\n\n\t\t\t}\n\n\t\t\trenderItemsIndex ++;\n\n\t\t\treturn renderItem;\n\n\t\t}\n\n\t\tfunction push( object, geometry, material, groupOrder, z, group ) {\n\n\t\t\tvar renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );\n\n\t\t\t( material.transparent === true ? transparent : opaque ).push( renderItem );\n\n\t\t}\n\n\t\tfunction unshift( object, geometry, material, groupOrder, z, group ) {\n\n\t\t\tvar renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );\n\n\t\t\t( material.transparent === true ? transparent : opaque ).unshift( renderItem );\n\n\t\t}\n\n\t\tfunction sort( customOpaqueSort, customTransparentSort ) {\n\n\t\t\tif ( opaque.length > 1 ) { opaque.sort( customOpaqueSort || painterSortStable ); }\n\t\t\tif ( transparent.length > 1 ) { transparent.sort( customTransparentSort || reversePainterSortStable ); }\n\n\t\t}\n\n\t\treturn {\n\t\t\topaque: opaque,\n\t\t\ttransparent: transparent,\n\n\t\t\tinit: init,\n\t\t\tpush: push,\n\t\t\tunshift: unshift,\n\n\t\t\tsort: sort\n\t\t};\n\n\t}\n\n\tfunction WebGLRenderLists() {\n\n\t\tvar lists = new WeakMap();\n\n\t\tfunction onSceneDispose( event ) {\n\n\t\t\tvar scene = event.target;\n\n\t\t\tscene.removeEventListener( 'dispose', onSceneDispose );\n\n\t\t\tlists.delete( scene );\n\n\t\t}\n\n\t\tfunction get( scene, camera ) {\n\n\t\t\tvar cameras = lists.get( scene );\n\t\t\tvar list;\n\t\t\tif ( cameras === undefined ) {\n\n\t\t\t\tlist = new WebGLRenderList();\n\t\t\t\tlists.set( scene, new WeakMap() );\n\t\t\t\tlists.get( scene ).set( camera, list );\n\n\t\t\t\tscene.addEventListener( 'dispose', onSceneDispose );\n\n\t\t\t} else {\n\n\t\t\t\tlist = cameras.get( camera );\n\t\t\t\tif ( list === undefined ) {\n\n\t\t\t\t\tlist = new WebGLRenderList();\n\t\t\t\t\tcameras.set( camera, list );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn list;\n\n\t\t}\n\n\t\tfunction dispose() {\n\n\t\t\tlists = new WeakMap();\n\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tdispose: dispose\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction UniformsCache() {\n\n\t\tvar lights = {};\n\n\t\treturn {\n\n\t\t\tget: function ( light ) {\n\n\t\t\t\tif ( lights[ light.id ] !== undefined ) {\n\n\t\t\t\t\treturn lights[ light.id ];\n\n\t\t\t\t}\n\n\t\t\t\tvar uniforms;\n\n\t\t\t\tswitch ( light.type ) {\n\n\t\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color(),\n\n\t\t\t\t\t\t\tshadow: false,\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SpotLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\t\tconeCos: 0,\n\t\t\t\t\t\t\tpenumbraCos: 0,\n\t\t\t\t\t\t\tdecay: 0,\n\n\t\t\t\t\t\t\tshadow: false,\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PointLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\t\tdecay: 0,\n\n\t\t\t\t\t\t\tshadow: false,\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2(),\n\t\t\t\t\t\t\tshadowCameraNear: 1,\n\t\t\t\t\t\t\tshadowCameraFar: 1000\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'HemisphereLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tskyColor: new Color(),\n\t\t\t\t\t\t\tgroundColor: new Color()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'RectAreaLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\thalfWidth: new Vector3(),\n\t\t\t\t\t\t\thalfHeight: new Vector3()\n\t\t\t\t\t\t\t// TODO (abelnation): set RectAreaLight shadow uniforms\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tlights[ light.id ] = uniforms;\n\n\t\t\t\treturn uniforms;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\tvar nextVersion = 0;\n\n\tfunction shadowCastingLightsFirst( lightA, lightB ) {\n\n\t\treturn ( lightB.castShadow ? 1 : 0 ) - ( lightA.castShadow ? 1 : 0 );\n\n\t}\n\n\tfunction WebGLLights() {\n\n\t\tvar cache = new UniformsCache();\n\n\t\tvar state = {\n\n\t\t\tversion: 0,\n\n\t\t\thash: {\n\t\t\t\tdirectionalLength: - 1,\n\t\t\t\tpointLength: - 1,\n\t\t\t\tspotLength: - 1,\n\t\t\t\trectAreaLength: - 1,\n\t\t\t\themiLength: - 1,\n\n\t\t\t\tnumDirectionalShadows: - 1,\n\t\t\t\tnumPointShadows: - 1,\n\t\t\t\tnumSpotShadows: - 1,\n\t\t\t},\n\n\t\t\tambient: [ 0, 0, 0 ],\n\t\t\tprobe: [],\n\t\t\tdirectional: [],\n\t\t\tdirectionalShadowMap: [],\n\t\t\tdirectionalShadowMatrix: [],\n\t\t\tspot: [],\n\t\t\tspotShadowMap: [],\n\t\t\tspotShadowMatrix: [],\n\t\t\trectArea: [],\n\t\t\tpoint: [],\n\t\t\tpointShadowMap: [],\n\t\t\tpointShadowMatrix: [],\n\t\t\themi: [],\n\n\t\t\tnumDirectionalShadows: - 1,\n\t\t\tnumPointShadows: - 1,\n\t\t\tnumSpotShadows: - 1\n\n\t\t};\n\n\t\tfor ( var i = 0; i < 9; i ++ ) { state.probe.push( new Vector3() ); }\n\n\t\tvar vector3 = new Vector3();\n\t\tvar matrix4 = new Matrix4();\n\t\tvar matrix42 = new Matrix4();\n\n\t\tfunction setup( lights, shadows, camera ) {\n\n\t\t\tvar r = 0, g = 0, b = 0;\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) { state.probe[ i ].set( 0, 0, 0 ); }\n\n\t\t\tvar directionalLength = 0;\n\t\t\tvar pointLength = 0;\n\t\t\tvar spotLength = 0;\n\t\t\tvar rectAreaLength = 0;\n\t\t\tvar hemiLength = 0;\n\n\t\t\tvar numDirectionalShadows = 0;\n\t\t\tvar numPointShadows = 0;\n\t\t\tvar numSpotShadows = 0;\n\n\t\t\tvar viewMatrix = camera.matrixWorldInverse;\n\n\t\t\tlights.sort( shadowCastingLightsFirst );\n\n\t\t\tfor ( var i = 0, l = lights.length; i < l; i ++ ) {\n\n\t\t\t\tvar light = lights[ i ];\n\n\t\t\t\tvar color = light.color;\n\t\t\t\tvar intensity = light.intensity;\n\t\t\t\tvar distance = light.distance;\n\n\t\t\t\tvar shadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;\n\n\t\t\t\tif ( light.isAmbientLight ) {\n\n\t\t\t\t\tr += color.r * intensity;\n\t\t\t\t\tg += color.g * intensity;\n\t\t\t\t\tb += color.b * intensity;\n\n\t\t\t\t} else if ( light.isLightProbe ) {\n\n\t\t\t\t\tfor ( var j = 0; j < 9; j ++ ) {\n\n\t\t\t\t\t\tstate.probe[ j ].addScaledVector( light.sh.coefficients[ j ], intensity );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( light.isDirectionalLight ) {\n\n\t\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tvector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\t\tuniforms.direction.sub( vector3 );\n\t\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\t\tuniforms.shadow = light.castShadow;\n\n\t\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\t\tvar shadow = light.shadow;\n\n\t\t\t\t\t\tuniforms.shadowBias = shadow.bias;\n\t\t\t\t\t\tuniforms.shadowRadius = shadow.radius;\n\t\t\t\t\t\tuniforms.shadowMapSize = shadow.mapSize;\n\n\t\t\t\t\t\tstate.directionalShadowMap[ directionalLength ] = shadowMap;\n\t\t\t\t\t\tstate.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;\n\n\t\t\t\t\t\tnumDirectionalShadows ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.directional[ directionalLength ] = uniforms;\n\n\t\t\t\t\tdirectionalLength ++;\n\n\t\t\t\t} else if ( light.isSpotLight ) {\n\n\t\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\n\t\t\t\t\tuniforms.distance = distance;\n\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tvector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\t\tuniforms.direction.sub( vector3 );\n\t\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\t\tuniforms.coneCos = Math.cos( light.angle );\n\t\t\t\t\tuniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );\n\t\t\t\t\tuniforms.decay = light.decay;\n\n\t\t\t\t\tuniforms.shadow = light.castShadow;\n\n\t\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\t\tvar shadow = light.shadow;\n\n\t\t\t\t\t\tuniforms.shadowBias = shadow.bias;\n\t\t\t\t\t\tuniforms.shadowRadius = shadow.radius;\n\t\t\t\t\t\tuniforms.shadowMapSize = shadow.mapSize;\n\n\t\t\t\t\t\tstate.spotShadowMap[ spotLength ] = shadowMap;\n\t\t\t\t\t\tstate.spotShadowMatrix[ spotLength ] = light.shadow.matrix;\n\n\t\t\t\t\t\tnumSpotShadows ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.spot[ spotLength ] = uniforms;\n\n\t\t\t\t\tspotLength ++;\n\n\t\t\t\t} else if ( light.isRectAreaLight ) {\n\n\t\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\t\t// (a) intensity is the total visible light emitted\n\t\t\t\t\t//uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );\n\n\t\t\t\t\t// (b) intensity is the brightness of the light\n\t\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\n\n\t\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\t\t// extract local rotation of light to derive width/height half vectors\n\t\t\t\t\tmatrix42.identity();\n\t\t\t\t\tmatrix4.copy( light.matrixWorld );\n\t\t\t\t\tmatrix4.premultiply( viewMatrix );\n\t\t\t\t\tmatrix42.extractRotation( matrix4 );\n\n\t\t\t\t\tuniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );\n\t\t\t\t\tuniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );\n\n\t\t\t\t\tuniforms.halfWidth.applyMatrix4( matrix42 );\n\t\t\t\t\tuniforms.halfHeight.applyMatrix4( matrix42 );\n\n\t\t\t\t\t// TODO (abelnation): RectAreaLight distance?\n\t\t\t\t\t// uniforms.distance = distance;\n\n\t\t\t\t\tstate.rectArea[ rectAreaLength ] = uniforms;\n\n\t\t\t\t\trectAreaLength ++;\n\n\t\t\t\t} else if ( light.isPointLight ) {\n\n\t\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n\t\t\t\t\tuniforms.distance = light.distance;\n\t\t\t\t\tuniforms.decay = light.decay;\n\n\t\t\t\t\tuniforms.shadow = light.castShadow;\n\n\t\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\t\tvar shadow = light.shadow;\n\n\t\t\t\t\t\tuniforms.shadowBias = shadow.bias;\n\t\t\t\t\t\tuniforms.shadowRadius = shadow.radius;\n\t\t\t\t\t\tuniforms.shadowMapSize = shadow.mapSize;\n\t\t\t\t\t\tuniforms.shadowCameraNear = shadow.camera.near;\n\t\t\t\t\t\tuniforms.shadowCameraFar = shadow.camera.far;\n\n\t\t\t\t\t\tstate.pointShadowMap[ pointLength ] = shadowMap;\n\t\t\t\t\t\tstate.pointShadowMatrix[ pointLength ] = light.shadow.matrix;\n\n\t\t\t\t\t\tnumPointShadows ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.point[ pointLength ] = uniforms;\n\n\t\t\t\t\tpointLength ++;\n\n\t\t\t\t} else if ( light.isHemisphereLight ) {\n\n\t\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\t\t\t\t\tuniforms.direction.normalize();\n\n\t\t\t\t\tuniforms.skyColor.copy( light.color ).multiplyScalar( intensity );\n\t\t\t\t\tuniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );\n\n\t\t\t\t\tstate.hemi[ hemiLength ] = uniforms;\n\n\t\t\t\t\themiLength ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.ambient[ 0 ] = r;\n\t\t\tstate.ambient[ 1 ] = g;\n\t\t\tstate.ambient[ 2 ] = b;\n\n\t\t\tvar hash = state.hash;\n\n\t\t\tif ( hash.directionalLength !== directionalLength ||\n\t\t\t\thash.pointLength !== pointLength ||\n\t\t\t\thash.spotLength !== spotLength ||\n\t\t\t\thash.rectAreaLength !== rectAreaLength ||\n\t\t\t\thash.hemiLength !== hemiLength ||\n\t\t\t\thash.numDirectionalShadows !== numDirectionalShadows ||\n\t\t\t\thash.numPointShadows !== numPointShadows ||\n\t\t\t\thash.numSpotShadows !== numSpotShadows ) {\n\n\t\t\t\tstate.directional.length = directionalLength;\n\t\t\t\tstate.spot.length = spotLength;\n\t\t\t\tstate.rectArea.length = rectAreaLength;\n\t\t\t\tstate.point.length = pointLength;\n\t\t\t\tstate.hemi.length = hemiLength;\n\n\t\t\t\tstate.directionalShadowMap.length = numDirectionalShadows;\n\t\t\t\tstate.pointShadowMap.length = numPointShadows;\n\t\t\t\tstate.spotShadowMap.length = numSpotShadows;\n\t\t\t\tstate.directionalShadowMatrix.length = numDirectionalShadows;\n\t\t\t\tstate.pointShadowMatrix.length = numPointShadows;\n\t\t\t\tstate.spotShadowMatrix.length = numSpotShadows;\n\n\t\t\t\thash.directionalLength = directionalLength;\n\t\t\t\thash.pointLength = pointLength;\n\t\t\t\thash.spotLength = spotLength;\n\t\t\t\thash.rectAreaLength = rectAreaLength;\n\t\t\t\thash.hemiLength = hemiLength;\n\n\t\t\t\thash.numDirectionalShadows = numDirectionalShadows;\n\t\t\t\thash.numPointShadows = numPointShadows;\n\t\t\t\thash.numSpotShadows = numSpotShadows;\n\n\t\t\t\tstate.version = nextVersion ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\t\t\tsetup: setup,\n\t\t\tstate: state\n\t\t};\n\n\t}\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction WebGLRenderState() {\n\n\t\tvar lights = new WebGLLights();\n\n\t\tvar lightsArray = [];\n\t\tvar shadowsArray = [];\n\n\t\tfunction init() {\n\n\t\t\tlightsArray.length = 0;\n\t\t\tshadowsArray.length = 0;\n\n\t\t}\n\n\t\tfunction pushLight( light ) {\n\n\t\t\tlightsArray.push( light );\n\n\t\t}\n\n\t\tfunction pushShadow( shadowLight ) {\n\n\t\t\tshadowsArray.push( shadowLight );\n\n\t\t}\n\n\t\tfunction setupLights( camera ) {\n\n\t\t\tlights.setup( lightsArray, shadowsArray, camera );\n\n\t\t}\n\n\t\tvar state = {\n\t\t\tlightsArray: lightsArray,\n\t\t\tshadowsArray: shadowsArray,\n\n\t\t\tlights: lights\n\t\t};\n\n\t\treturn {\n\t\t\tinit: init,\n\t\t\tstate: state,\n\t\t\tsetupLights: setupLights,\n\n\t\t\tpushLight: pushLight,\n\t\t\tpushShadow: pushShadow\n\t\t};\n\n\t}\n\n\tfunction WebGLRenderStates() {\n\n\t\tvar renderStates = new WeakMap();\n\n\t\tfunction onSceneDispose( event ) {\n\n\t\t\tvar scene = event.target;\n\n\t\t\tscene.removeEventListener( 'dispose', onSceneDispose );\n\n\t\t\trenderStates.delete( scene );\n\n\t\t}\n\n\t\tfunction get( scene, camera ) {\n\n\t\t\tvar renderState;\n\n\t\t\tif ( renderStates.has( scene ) === false ) {\n\n\t\t\t\trenderState = new WebGLRenderState();\n\t\t\t\trenderStates.set( scene, new WeakMap() );\n\t\t\t\trenderStates.get( scene ).set( camera, renderState );\n\n\t\t\t\tscene.addEventListener( 'dispose', onSceneDispose );\n\n\t\t\t} else {\n\n\t\t\t\tif ( renderStates.get( scene ).has( camera ) === false ) {\n\n\t\t\t\t\trenderState = new WebGLRenderState();\n\t\t\t\t\trenderStates.get( scene ).set( camera, renderState );\n\n\t\t\t\t} else {\n\n\t\t\t\t\trenderState = renderStates.get( scene ).get( camera );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn renderState;\n\n\t\t}\n\n\t\tfunction dispose() {\n\n\t\t\trenderStates = new WeakMap();\n\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tdispose: dispose\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author bhouston / https://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>\n\t * }\n\t */\n\n\tfunction MeshDepthMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshDepthMaterial';\n\n\t\tthis.depthPacking = BasicDepthPacking;\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.fog = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshDepthMaterial.prototype = Object.create( Material.prototype );\n\tMeshDepthMaterial.prototype.constructor = MeshDepthMaterial;\n\n\tMeshDepthMaterial.prototype.isMeshDepthMaterial = true;\n\n\tMeshDepthMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.depthPacking = source.depthPacking;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *\n\t *  referencePosition: <float>,\n\t *  nearDistance: <float>,\n\t *  farDistance: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>\n\t *\n\t * }\n\t */\n\n\tfunction MeshDistanceMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshDistanceMaterial';\n\n\t\tthis.referencePosition = new Vector3();\n\t\tthis.nearDistance = 1;\n\t\tthis.farDistance = 1000;\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.fog = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshDistanceMaterial.prototype = Object.create( Material.prototype );\n\tMeshDistanceMaterial.prototype.constructor = MeshDistanceMaterial;\n\n\tMeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;\n\n\tMeshDistanceMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.referencePosition.copy( source.referencePosition );\n\t\tthis.nearDistance = source.nearDistance;\n\t\tthis.farDistance = source.farDistance;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\treturn this;\n\n\t};\n\n\tvar vsm_frag = \"uniform sampler2D shadow_pass;\\nuniform vec2 resolution;\\nuniform float radius;\\n#include <packing>\\nvoid main() {\\n  float mean = 0.0;\\n  float squared_mean = 0.0;\\n\\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy  ) / resolution ) );\\n  for ( float i = -1.0; i < 1.0 ; i += SAMPLE_RATE) {\\n    #ifdef HORIZONAL_PASS\\n      vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );\\n      mean += distribution.x;\\n      squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\\n    #else\\n      float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0,  i )  * radius ) / resolution ) );\\n      mean += depth;\\n      squared_mean += depth * depth;\\n    #endif\\n  }\\n  mean = mean * HALF_SAMPLE_RATE;\\n  squared_mean = squared_mean * HALF_SAMPLE_RATE;\\n  float std_dev = sqrt( squared_mean - mean * mean );\\n  gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\\n}\";\n\n\tvar vsm_vert = \"void main() {\\n\\tgl_Position = vec4( position, 1.0 );\\n}\";\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLShadowMap( _renderer, _objects, maxTextureSize ) {\n\n\t\tvar _frustum = new Frustum(),\n\n\t\t\t_shadowMapSize = new Vector2(),\n\t\t\t_viewportSize = new Vector2(),\n\n\t\t\t_viewport = new Vector4(),\n\n\t\t\t_depthMaterials = [],\n\t\t\t_distanceMaterials = [],\n\n\t\t\t_materialCache = {};\n\n\t\tvar shadowSide = { 0: BackSide, 1: FrontSide, 2: DoubleSide };\n\n\t\tvar shadowMaterialVertical = new ShaderMaterial( {\n\n\t\t\tdefines: {\n\t\t\t\tSAMPLE_RATE: 2.0 / 8.0,\n\t\t\t\tHALF_SAMPLE_RATE: 1.0 / 8.0\n\t\t\t},\n\n\t\t\tuniforms: {\n\t\t\t\tshadow_pass: { value: null },\n\t\t\t\tresolution: { value: new Vector2() },\n\t\t\t\tradius: { value: 4.0 }\n\t\t\t},\n\n\t\t\tvertexShader: vsm_vert,\n\n\t\t\tfragmentShader: vsm_frag\n\n\t\t} );\n\n\t\tvar shadowMaterialHorizonal = shadowMaterialVertical.clone();\n\t\tshadowMaterialHorizonal.defines.HORIZONAL_PASS = 1;\n\n\t\tvar fullScreenTri = new BufferGeometry();\n\t\tfullScreenTri.setAttribute(\n\t\t\t\"position\",\n\t\t\tnew BufferAttribute(\n\t\t\t\tnew Float32Array( [ - 1, - 1, 0.5, 3, - 1, 0.5, - 1, 3, 0.5 ] ),\n\t\t\t\t3\n\t\t\t)\n\t\t);\n\n\t\tvar fullScreenMesh = new Mesh( fullScreenTri, shadowMaterialVertical );\n\n\t\tvar scope = this;\n\n\t\tthis.enabled = false;\n\n\t\tthis.autoUpdate = true;\n\t\tthis.needsUpdate = false;\n\n\t\tthis.type = PCFShadowMap;\n\n\t\tthis.render = function ( lights, scene, camera ) {\n\n\t\t\tif ( scope.enabled === false ) { return; }\n\t\t\tif ( scope.autoUpdate === false && scope.needsUpdate === false ) { return; }\n\n\t\t\tif ( lights.length === 0 ) { return; }\n\n\t\t\tvar currentRenderTarget = _renderer.getRenderTarget();\n\t\t\tvar activeCubeFace = _renderer.getActiveCubeFace();\n\t\t\tvar activeMipmapLevel = _renderer.getActiveMipmapLevel();\n\n\t\t\tvar _state = _renderer.state;\n\n\t\t\t// Set GL state for depth map.\n\t\t\t_state.setBlending( NoBlending );\n\t\t\t_state.buffers.color.setClear( 1, 1, 1, 1 );\n\t\t\t_state.buffers.depth.setTest( true );\n\t\t\t_state.setScissorTest( false );\n\n\t\t\t// render depth map\n\n\t\t\tfor ( var i = 0, il = lights.length; i < il; i ++ ) {\n\n\t\t\t\tvar light = lights[ i ];\n\t\t\t\tvar shadow = light.shadow;\n\n\t\t\t\tif ( shadow === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\t_shadowMapSize.copy( shadow.mapSize );\n\n\t\t\t\tvar shadowFrameExtents = shadow.getFrameExtents();\n\n\t\t\t\t_shadowMapSize.multiply( shadowFrameExtents );\n\n\t\t\t\t_viewportSize.copy( shadow.mapSize );\n\n\t\t\t\tif ( _shadowMapSize.x > maxTextureSize || _shadowMapSize.y > maxTextureSize ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap:', light, 'has shadow exceeding max texture size, reducing' );\n\n\t\t\t\t\tif ( _shadowMapSize.x > maxTextureSize ) {\n\n\t\t\t\t\t\t_viewportSize.x = Math.floor( maxTextureSize / shadowFrameExtents.x );\n\t\t\t\t\t\t_shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;\n\t\t\t\t\t\tshadow.mapSize.x = _viewportSize.x;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( _shadowMapSize.y > maxTextureSize ) {\n\n\t\t\t\t\t\t_viewportSize.y = Math.floor( maxTextureSize / shadowFrameExtents.y );\n\t\t\t\t\t\t_shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;\n\t\t\t\t\t\tshadow.mapSize.y = _viewportSize.y;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( shadow.map === null && ! shadow.isPointLightShadow && this.type === VSMShadowMap ) {\n\n\t\t\t\t\tvar pars = { minFilter: LinearFilter, magFilter: LinearFilter, format: RGBAFormat };\n\n\t\t\t\t\tshadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n\t\t\t\t\tshadow.map.texture.name = light.name + \".shadowMap\";\n\n\t\t\t\t\tshadow.mapPass = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n\n\t\t\t\t\tshadow.camera.updateProjectionMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tif ( shadow.map === null ) {\n\n\t\t\t\t\tvar pars = { minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat };\n\n\t\t\t\t\tshadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n\t\t\t\t\tshadow.map.texture.name = light.name + \".shadowMap\";\n\n\t\t\t\t\tshadow.camera.updateProjectionMatrix();\n\n\t\t\t\t}\n\n\t\t\t\t_renderer.setRenderTarget( shadow.map );\n\t\t\t\t_renderer.clear();\n\n\t\t\t\tvar viewportCount = shadow.getViewportCount();\n\n\t\t\t\tfor ( var vp = 0; vp < viewportCount; vp ++ ) {\n\n\t\t\t\t\tvar viewport = shadow.getViewport( vp );\n\n\t\t\t\t\t_viewport.set(\n\t\t\t\t\t\t_viewportSize.x * viewport.x,\n\t\t\t\t\t\t_viewportSize.y * viewport.y,\n\t\t\t\t\t\t_viewportSize.x * viewport.z,\n\t\t\t\t\t\t_viewportSize.y * viewport.w\n\t\t\t\t\t);\n\n\t\t\t\t\t_state.viewport( _viewport );\n\n\t\t\t\t\tshadow.updateMatrices( light, vp );\n\n\t\t\t\t\t_frustum = shadow.getFrustum();\n\n\t\t\t\t\trenderObject( scene, camera, shadow.camera, light, this.type );\n\n\t\t\t\t}\n\n\t\t\t\t// do blur pass for VSM\n\n\t\t\t\tif ( ! shadow.isPointLightShadow && this.type === VSMShadowMap ) {\n\n\t\t\t\t\tVSMPass( shadow, camera );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tscope.needsUpdate = false;\n\n\t\t\t_renderer.setRenderTarget( currentRenderTarget, activeCubeFace, activeMipmapLevel );\n\n\t\t};\n\n\t\tfunction VSMPass( shadow, camera ) {\n\n\t\t\tvar geometry = _objects.update( fullScreenMesh );\n\n\t\t\t// vertical pass\n\n\t\t\tshadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;\n\t\t\tshadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;\n\t\t\tshadowMaterialVertical.uniforms.radius.value = shadow.radius;\n\t\t\t_renderer.setRenderTarget( shadow.mapPass );\n\t\t\t_renderer.clear();\n\t\t\t_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null );\n\n\t\t\t// horizonal pass\n\n\t\t\tshadowMaterialHorizonal.uniforms.shadow_pass.value = shadow.mapPass.texture;\n\t\t\tshadowMaterialHorizonal.uniforms.resolution.value = shadow.mapSize;\n\t\t\tshadowMaterialHorizonal.uniforms.radius.value = shadow.radius;\n\t\t\t_renderer.setRenderTarget( shadow.map );\n\t\t\t_renderer.clear();\n\t\t\t_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialHorizonal, fullScreenMesh, null );\n\n\t\t}\n\n\t\tfunction getDepthMaterialVariant( useMorphing, useSkinning, useInstancing ) {\n\n\t\t\tvar index = useMorphing << 0 | useSkinning << 1 | useInstancing << 2;\n\n\t\t\tvar material = _depthMaterials[ index ];\n\n\t\t\tif ( material === undefined ) {\n\n\t\t\t\tmaterial = new MeshDepthMaterial( {\n\n\t\t\t\t\tdepthPacking: RGBADepthPacking,\n\n\t\t\t\t\tmorphTargets: useMorphing,\n\t\t\t\t\tskinning: useSkinning\n\n\t\t\t\t} );\n\n\t\t\t\t_depthMaterials[ index ] = material;\n\n\t\t\t}\n\n\t\t\treturn material;\n\n\t\t}\n\n\t\tfunction getDistanceMaterialVariant( useMorphing, useSkinning, useInstancing ) {\n\n\t\t\tvar index = useMorphing << 0 | useSkinning << 1 | useInstancing << 2;\n\n\t\t\tvar material = _distanceMaterials[ index ];\n\n\t\t\tif ( material === undefined ) {\n\n\t\t\t\tmaterial = new MeshDistanceMaterial( {\n\n\t\t\t\t\tmorphTargets: useMorphing,\n\t\t\t\t\tskinning: useSkinning\n\n\t\t\t\t} );\n\n\t\t\t\t_distanceMaterials[ index ] = material;\n\n\t\t\t}\n\n\t\t\treturn material;\n\n\t\t}\n\n\t\tfunction getDepthMaterial( object, material, light, shadowCameraNear, shadowCameraFar, type ) {\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tvar result = null;\n\n\t\t\tvar getMaterialVariant = getDepthMaterialVariant;\n\t\t\tvar customMaterial = object.customDepthMaterial;\n\n\t\t\tif ( light.isPointLight === true ) {\n\n\t\t\t\tgetMaterialVariant = getDistanceMaterialVariant;\n\t\t\t\tcustomMaterial = object.customDistanceMaterial;\n\n\t\t\t}\n\n\t\t\tif ( customMaterial === undefined ) {\n\n\t\t\t\tvar useMorphing = false;\n\n\t\t\t\tif ( material.morphTargets === true ) {\n\n\t\t\t\t\tif ( geometry.isBufferGeometry === true ) {\n\n\t\t\t\t\t\tuseMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;\n\n\t\t\t\t\t} else if ( geometry.isGeometry === true ) {\n\n\t\t\t\t\t\tuseMorphing = geometry.morphTargets && geometry.morphTargets.length > 0;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar useSkinning = false;\n\n\t\t\t\tif ( object.isSkinnedMesh === true ) {\n\n\t\t\t\t\tif ( material.skinning === true ) {\n\n\t\t\t\t\t\tuseSkinning = true;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:', object );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar useInstancing = object.isInstancedMesh === true;\n\n\t\t\t\tresult = getMaterialVariant( useMorphing, useSkinning, useInstancing );\n\n\t\t\t} else {\n\n\t\t\t\tresult = customMaterial;\n\n\t\t\t}\n\n\t\t\tif ( _renderer.localClippingEnabled &&\n\t\t\t\t\tmaterial.clipShadows === true &&\n\t\t\t\t\tmaterial.clippingPlanes.length !== 0 ) {\n\n\t\t\t\t// in this case we need a unique material instance reflecting the\n\t\t\t\t// appropriate state\n\n\t\t\t\tvar keyA = result.uuid, keyB = material.uuid;\n\n\t\t\t\tvar materialsForVariant = _materialCache[ keyA ];\n\n\t\t\t\tif ( materialsForVariant === undefined ) {\n\n\t\t\t\t\tmaterialsForVariant = {};\n\t\t\t\t\t_materialCache[ keyA ] = materialsForVariant;\n\n\t\t\t\t}\n\n\t\t\t\tvar cachedMaterial = materialsForVariant[ keyB ];\n\n\t\t\t\tif ( cachedMaterial === undefined ) {\n\n\t\t\t\t\tcachedMaterial = result.clone();\n\t\t\t\t\tmaterialsForVariant[ keyB ] = cachedMaterial;\n\n\t\t\t\t}\n\n\t\t\t\tresult = cachedMaterial;\n\n\t\t\t}\n\n\t\t\tresult.visible = material.visible;\n\t\t\tresult.wireframe = material.wireframe;\n\n\t\t\tif ( type === VSMShadowMap ) {\n\n\t\t\t\tresult.side = ( material.shadowSide !== null ) ? material.shadowSide : material.side;\n\n\t\t\t} else {\n\n\t\t\t\tresult.side = ( material.shadowSide !== null ) ? material.shadowSide : shadowSide[ material.side ];\n\n\t\t\t}\n\n\t\t\tresult.clipShadows = material.clipShadows;\n\t\t\tresult.clippingPlanes = material.clippingPlanes;\n\t\t\tresult.clipIntersection = material.clipIntersection;\n\n\t\t\tresult.wireframeLinewidth = material.wireframeLinewidth;\n\t\t\tresult.linewidth = material.linewidth;\n\n\t\t\tif ( light.isPointLight === true && result.isMeshDistanceMaterial === true ) {\n\n\t\t\t\tresult.referencePosition.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tresult.nearDistance = shadowCameraNear;\n\t\t\t\tresult.farDistance = shadowCameraFar;\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\t\tfunction renderObject( object, camera, shadowCamera, light, type ) {\n\n\t\t\tif ( object.visible === false ) { return; }\n\n\t\t\tvar visible = object.layers.test( camera.layers );\n\n\t\t\tif ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {\n\n\t\t\t\tif ( ( object.castShadow || ( object.receiveShadow && type === VSMShadowMap ) ) && ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) ) {\n\n\t\t\t\t\tobject.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );\n\n\t\t\t\t\tvar geometry = _objects.update( object );\n\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\tvar groups = geometry.groups;\n\n\t\t\t\t\t\tfor ( var k = 0, kl = groups.length; k < kl; k ++ ) {\n\n\t\t\t\t\t\t\tvar group = groups[ k ];\n\t\t\t\t\t\t\tvar groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\n\n\t\t\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, groupMaterial, light, shadowCamera.near, shadowCamera.far, type );\n\n\t\t\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( material.visible ) {\n\n\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, material, light, shadowCamera.near, shadowCamera.far, type );\n\n\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\trenderObject( children[ i ], camera, shadowCamera, light, type );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLState( gl, extensions, capabilities ) {\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\n\t\tfunction ColorBuffer() {\n\n\t\t\tvar locked = false;\n\n\t\t\tvar color = new Vector4();\n\t\t\tvar currentColorMask = null;\n\t\t\tvar currentColorClear = new Vector4( 0, 0, 0, 0 );\n\n\t\t\treturn {\n\n\t\t\t\tsetMask: function ( colorMask ) {\n\n\t\t\t\t\tif ( currentColorMask !== colorMask && ! locked ) {\n\n\t\t\t\t\t\tgl.colorMask( colorMask, colorMask, colorMask, colorMask );\n\t\t\t\t\t\tcurrentColorMask = colorMask;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\t\tlocked = lock;\n\n\t\t\t\t},\n\n\t\t\t\tsetClear: function ( r, g, b, a, premultipliedAlpha ) {\n\n\t\t\t\t\tif ( premultipliedAlpha === true ) {\n\n\t\t\t\t\t\tr *= a; g *= a; b *= a;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcolor.set( r, g, b, a );\n\n\t\t\t\t\tif ( currentColorClear.equals( color ) === false ) {\n\n\t\t\t\t\t\tgl.clearColor( r, g, b, a );\n\t\t\t\t\t\tcurrentColorClear.copy( color );\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\treset: function () {\n\n\t\t\t\t\tlocked = false;\n\n\t\t\t\t\tcurrentColorMask = null;\n\t\t\t\t\tcurrentColorClear.set( - 1, 0, 0, 0 ); // set to invalid state\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t\tfunction DepthBuffer() {\n\n\t\t\tvar locked = false;\n\n\t\t\tvar currentDepthMask = null;\n\t\t\tvar currentDepthFunc = null;\n\t\t\tvar currentDepthClear = null;\n\n\t\t\treturn {\n\n\t\t\t\tsetTest: function ( depthTest ) {\n\n\t\t\t\t\tif ( depthTest ) {\n\n\t\t\t\t\t\tenable( 2929 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tdisable( 2929 );\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetMask: function ( depthMask ) {\n\n\t\t\t\t\tif ( currentDepthMask !== depthMask && ! locked ) {\n\n\t\t\t\t\t\tgl.depthMask( depthMask );\n\t\t\t\t\t\tcurrentDepthMask = depthMask;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetFunc: function ( depthFunc ) {\n\n\t\t\t\t\tif ( currentDepthFunc !== depthFunc ) {\n\n\t\t\t\t\t\tif ( depthFunc ) {\n\n\t\t\t\t\t\t\tswitch ( depthFunc ) {\n\n\t\t\t\t\t\t\t\tcase NeverDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 512 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase AlwaysDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 519 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase LessDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 513 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase LessEqualDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 515 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase EqualDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 514 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase GreaterEqualDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 518 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase GreaterDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 516 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase NotEqualDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 517 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 515 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tgl.depthFunc( 515 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcurrentDepthFunc = depthFunc;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\t\tlocked = lock;\n\n\t\t\t\t},\n\n\t\t\t\tsetClear: function ( depth ) {\n\n\t\t\t\t\tif ( currentDepthClear !== depth ) {\n\n\t\t\t\t\t\tgl.clearDepth( depth );\n\t\t\t\t\t\tcurrentDepthClear = depth;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\treset: function () {\n\n\t\t\t\t\tlocked = false;\n\n\t\t\t\t\tcurrentDepthMask = null;\n\t\t\t\t\tcurrentDepthFunc = null;\n\t\t\t\t\tcurrentDepthClear = null;\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t\tfunction StencilBuffer() {\n\n\t\t\tvar locked = false;\n\n\t\t\tvar currentStencilMask = null;\n\t\t\tvar currentStencilFunc = null;\n\t\t\tvar currentStencilRef = null;\n\t\t\tvar currentStencilFuncMask = null;\n\t\t\tvar currentStencilFail = null;\n\t\t\tvar currentStencilZFail = null;\n\t\t\tvar currentStencilZPass = null;\n\t\t\tvar currentStencilClear = null;\n\n\t\t\treturn {\n\n\t\t\t\tsetTest: function ( stencilTest ) {\n\n\t\t\t\t\tif ( ! locked ) {\n\n\t\t\t\t\t\tif ( stencilTest ) {\n\n\t\t\t\t\t\t\tenable( 2960 );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tdisable( 2960 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetMask: function ( stencilMask ) {\n\n\t\t\t\t\tif ( currentStencilMask !== stencilMask && ! locked ) {\n\n\t\t\t\t\t\tgl.stencilMask( stencilMask );\n\t\t\t\t\t\tcurrentStencilMask = stencilMask;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetFunc: function ( stencilFunc, stencilRef, stencilMask ) {\n\n\t\t\t\t\tif ( currentStencilFunc !== stencilFunc ||\n\t\t\t\t\t     currentStencilRef \t!== stencilRef \t||\n\t\t\t\t\t     currentStencilFuncMask !== stencilMask ) {\n\n\t\t\t\t\t\tgl.stencilFunc( stencilFunc, stencilRef, stencilMask );\n\n\t\t\t\t\t\tcurrentStencilFunc = stencilFunc;\n\t\t\t\t\t\tcurrentStencilRef = stencilRef;\n\t\t\t\t\t\tcurrentStencilFuncMask = stencilMask;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetOp: function ( stencilFail, stencilZFail, stencilZPass ) {\n\n\t\t\t\t\tif ( currentStencilFail\t !== stencilFail \t||\n\t\t\t\t\t     currentStencilZFail !== stencilZFail ||\n\t\t\t\t\t     currentStencilZPass !== stencilZPass ) {\n\n\t\t\t\t\t\tgl.stencilOp( stencilFail, stencilZFail, stencilZPass );\n\n\t\t\t\t\t\tcurrentStencilFail = stencilFail;\n\t\t\t\t\t\tcurrentStencilZFail = stencilZFail;\n\t\t\t\t\t\tcurrentStencilZPass = stencilZPass;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\t\tlocked = lock;\n\n\t\t\t\t},\n\n\t\t\t\tsetClear: function ( stencil ) {\n\n\t\t\t\t\tif ( currentStencilClear !== stencil ) {\n\n\t\t\t\t\t\tgl.clearStencil( stencil );\n\t\t\t\t\t\tcurrentStencilClear = stencil;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\treset: function () {\n\n\t\t\t\t\tlocked = false;\n\n\t\t\t\t\tcurrentStencilMask = null;\n\t\t\t\t\tcurrentStencilFunc = null;\n\t\t\t\t\tcurrentStencilRef = null;\n\t\t\t\t\tcurrentStencilFuncMask = null;\n\t\t\t\t\tcurrentStencilFail = null;\n\t\t\t\t\tcurrentStencilZFail = null;\n\t\t\t\t\tcurrentStencilZPass = null;\n\t\t\t\t\tcurrentStencilClear = null;\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t\t//\n\n\t\tvar colorBuffer = new ColorBuffer();\n\t\tvar depthBuffer = new DepthBuffer();\n\t\tvar stencilBuffer = new StencilBuffer();\n\n\t\tvar maxVertexAttributes = gl.getParameter( 34921 );\n\t\tvar newAttributes = new Uint8Array( maxVertexAttributes );\n\t\tvar enabledAttributes = new Uint8Array( maxVertexAttributes );\n\t\tvar attributeDivisors = new Uint8Array( maxVertexAttributes );\n\n\t\tvar enabledCapabilities = {};\n\n\t\tvar currentProgram = null;\n\n\t\tvar currentBlendingEnabled = null;\n\t\tvar currentBlending = null;\n\t\tvar currentBlendEquation = null;\n\t\tvar currentBlendSrc = null;\n\t\tvar currentBlendDst = null;\n\t\tvar currentBlendEquationAlpha = null;\n\t\tvar currentBlendSrcAlpha = null;\n\t\tvar currentBlendDstAlpha = null;\n\t\tvar currentPremultipledAlpha = false;\n\n\t\tvar currentFlipSided = null;\n\t\tvar currentCullFace = null;\n\n\t\tvar currentLineWidth = null;\n\n\t\tvar currentPolygonOffsetFactor = null;\n\t\tvar currentPolygonOffsetUnits = null;\n\n\t\tvar maxTextures = gl.getParameter( 35661 );\n\n\t\tvar lineWidthAvailable = false;\n\t\tvar version = 0;\n\t\tvar glVersion = gl.getParameter( 7938 );\n\n\t\tif ( glVersion.indexOf( 'WebGL' ) !== - 1 ) {\n\n\t\t\tversion = parseFloat( /^WebGL\\ ([0-9])/.exec( glVersion )[ 1 ] );\n\t\t\tlineWidthAvailable = ( version >= 1.0 );\n\n\t\t} else if ( glVersion.indexOf( 'OpenGL ES' ) !== - 1 ) {\n\n\t\t\tversion = parseFloat( /^OpenGL\\ ES\\ ([0-9])/.exec( glVersion )[ 1 ] );\n\t\t\tlineWidthAvailable = ( version >= 2.0 );\n\n\t\t}\n\n\t\tvar currentTextureSlot = null;\n\t\tvar currentBoundTextures = {};\n\n\t\tvar currentScissor = new Vector4();\n\t\tvar currentViewport = new Vector4();\n\n\t\tfunction createTexture( type, target, count ) {\n\n\t\t\tvar data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.\n\t\t\tvar texture = gl.createTexture();\n\n\t\t\tgl.bindTexture( type, texture );\n\t\t\tgl.texParameteri( type, 10241, 9728 );\n\t\t\tgl.texParameteri( type, 10240, 9728 );\n\n\t\t\tfor ( var i = 0; i < count; i ++ ) {\n\n\t\t\t\tgl.texImage2D( target + i, 0, 6408, 1, 1, 0, 6408, 5121, data );\n\n\t\t\t}\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t\tvar emptyTextures = {};\n\t\temptyTextures[ 3553 ] = createTexture( 3553, 3553, 1 );\n\t\temptyTextures[ 34067 ] = createTexture( 34067, 34069, 6 );\n\n\t\t// init\n\n\t\tcolorBuffer.setClear( 0, 0, 0, 1 );\n\t\tdepthBuffer.setClear( 1 );\n\t\tstencilBuffer.setClear( 0 );\n\n\t\tenable( 2929 );\n\t\tdepthBuffer.setFunc( LessEqualDepth );\n\n\t\tsetFlipSided( false );\n\t\tsetCullFace( CullFaceBack );\n\t\tenable( 2884 );\n\n\t\tsetBlending( NoBlending );\n\n\t\t//\n\n\t\tfunction initAttributes() {\n\n\t\t\tfor ( var i = 0, l = newAttributes.length; i < l; i ++ ) {\n\n\t\t\t\tnewAttributes[ i ] = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction enableAttribute( attribute ) {\n\n\t\t\tenableAttributeAndDivisor( attribute, 0 );\n\n\t\t}\n\n\t\tfunction enableAttributeAndDivisor( attribute, meshPerAttribute ) {\n\n\t\t\tnewAttributes[ attribute ] = 1;\n\n\t\t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\n\t\t\t\tgl.enableVertexAttribArray( attribute );\n\t\t\t\tenabledAttributes[ attribute ] = 1;\n\n\t\t\t}\n\n\t\t\tif ( attributeDivisors[ attribute ] !== meshPerAttribute ) {\n\n\t\t\t\tvar extension = isWebGL2 ? gl : extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\t\textension[ isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE' ]( attribute, meshPerAttribute );\n\t\t\t\tattributeDivisors[ attribute ] = meshPerAttribute;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction disableUnusedAttributes() {\n\n\t\t\tfor ( var i = 0, l = enabledAttributes.length; i !== l; ++ i ) {\n\n\t\t\t\tif ( enabledAttributes[ i ] !== newAttributes[ i ] ) {\n\n\t\t\t\t\tgl.disableVertexAttribArray( i );\n\t\t\t\t\tenabledAttributes[ i ] = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction enable( id ) {\n\n\t\t\tif ( enabledCapabilities[ id ] !== true ) {\n\n\t\t\t\tgl.enable( id );\n\t\t\t\tenabledCapabilities[ id ] = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction disable( id ) {\n\n\t\t\tif ( enabledCapabilities[ id ] !== false ) {\n\n\t\t\t\tgl.disable( id );\n\t\t\t\tenabledCapabilities[ id ] = false;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction useProgram( program ) {\n\n\t\t\tif ( currentProgram !== program ) {\n\n\t\t\t\tgl.useProgram( program );\n\n\t\t\t\tcurrentProgram = program;\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\tvar equationToGL = {};\n\t\tequationToGL[ AddEquation ] = 32774;\n\t\tequationToGL[ SubtractEquation ] = 32778;\n\t\tequationToGL[ ReverseSubtractEquation ] = 32779;\n\n\t\tif ( isWebGL2 ) {\n\n\t\t\tequationToGL[ MinEquation ] = 32775;\n\t\t\tequationToGL[ MaxEquation ] = 32776;\n\n\t\t} else {\n\n\t\t\tvar extension = extensions.get( 'EXT_blend_minmax' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tequationToGL[ MinEquation ] = extension.MIN_EXT;\n\t\t\t\tequationToGL[ MaxEquation ] = extension.MAX_EXT;\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar factorToGL = {};\n\t\tfactorToGL[ ZeroFactor ] = 0;\n\t\tfactorToGL[ OneFactor ] = 1;\n\t\tfactorToGL[ SrcColorFactor ] = 768;\n\t\tfactorToGL[ SrcAlphaFactor ] = 770;\n\t\tfactorToGL[ SrcAlphaSaturateFactor ] = 776;\n\t\tfactorToGL[ DstColorFactor ] = 774;\n\t\tfactorToGL[ DstAlphaFactor ] = 772;\n\t\tfactorToGL[ OneMinusSrcColorFactor ] = 769;\n\t\tfactorToGL[ OneMinusSrcAlphaFactor ] = 771;\n\t\tfactorToGL[ OneMinusDstColorFactor ] = 775;\n\t\tfactorToGL[ OneMinusDstAlphaFactor ] = 773;\n\n\t\tfunction setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {\n\n\t\t\tif ( blending === NoBlending ) {\n\n\t\t\t\tif ( currentBlendingEnabled ) {\n\n\t\t\t\t\tdisable( 3042 );\n\t\t\t\t\tcurrentBlendingEnabled = false;\n\n\t\t\t\t}\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( ! currentBlendingEnabled ) {\n\n\t\t\t\tenable( 3042 );\n\t\t\t\tcurrentBlendingEnabled = true;\n\n\t\t\t}\n\n\t\t\tif ( blending !== CustomBlending ) {\n\n\t\t\t\tif ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {\n\n\t\t\t\t\tif ( currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation ) {\n\n\t\t\t\t\t\tgl.blendEquation( 32774 );\n\n\t\t\t\t\t\tcurrentBlendEquation = AddEquation;\n\t\t\t\t\t\tcurrentBlendEquationAlpha = AddEquation;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\t\tswitch ( blending ) {\n\n\t\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate( 1, 771, 1, 771 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc( 1, 1 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate( 0, 0, 769, 771 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate( 0, 768, 0, 770 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tconsole.error( 'THREE.WebGLState: Invalid blending: ', blending );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tswitch ( blending ) {\n\n\t\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate( 770, 771, 1, 771 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc( 770, 1 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc( 0, 769 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc( 0, 768 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tconsole.error( 'THREE.WebGLState: Invalid blending: ', blending );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentBlendSrc = null;\n\t\t\t\t\tcurrentBlendDst = null;\n\t\t\t\t\tcurrentBlendSrcAlpha = null;\n\t\t\t\t\tcurrentBlendDstAlpha = null;\n\n\t\t\t\t\tcurrentBlending = blending;\n\t\t\t\t\tcurrentPremultipledAlpha = premultipliedAlpha;\n\n\t\t\t\t}\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t// custom blending\n\n\t\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\n\t\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\n\t\t\tblendDstAlpha = blendDstAlpha || blendDst;\n\n\t\t\tif ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {\n\n\t\t\t\tgl.blendEquationSeparate( equationToGL[ blendEquation ], equationToGL[ blendEquationAlpha ] );\n\n\t\t\t\tcurrentBlendEquation = blendEquation;\n\t\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\n\n\t\t\t}\n\n\t\t\tif ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {\n\n\t\t\t\tgl.blendFuncSeparate( factorToGL[ blendSrc ], factorToGL[ blendDst ], factorToGL[ blendSrcAlpha ], factorToGL[ blendDstAlpha ] );\n\n\t\t\t\tcurrentBlendSrc = blendSrc;\n\t\t\t\tcurrentBlendDst = blendDst;\n\t\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\n\t\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\n\n\t\t\t}\n\n\t\t\tcurrentBlending = blending;\n\t\t\tcurrentPremultipledAlpha = null;\n\n\t\t}\n\n\t\tfunction setMaterial( material, frontFaceCW ) {\n\n\t\t\tmaterial.side === DoubleSide\n\t\t\t\t? disable( 2884 )\n\t\t\t\t: enable( 2884 );\n\n\t\t\tvar flipSided = ( material.side === BackSide );\n\t\t\tif ( frontFaceCW ) { flipSided = ! flipSided; }\n\n\t\t\tsetFlipSided( flipSided );\n\n\t\t\t( material.blending === NormalBlending && material.transparent === false )\n\t\t\t\t? setBlending( NoBlending )\n\t\t\t\t: setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );\n\n\t\t\tdepthBuffer.setFunc( material.depthFunc );\n\t\t\tdepthBuffer.setTest( material.depthTest );\n\t\t\tdepthBuffer.setMask( material.depthWrite );\n\t\t\tcolorBuffer.setMask( material.colorWrite );\n\n\t\t\tvar stencilWrite = material.stencilWrite;\n\t\t\tstencilBuffer.setTest( stencilWrite );\n\t\t\tif ( stencilWrite ) {\n\n\t\t\t\tstencilBuffer.setMask( material.stencilWriteMask );\n\t\t\t\tstencilBuffer.setFunc( material.stencilFunc, material.stencilRef, material.stencilFuncMask );\n\t\t\t\tstencilBuffer.setOp( material.stencilFail, material.stencilZFail, material.stencilZPass );\n\n\t\t\t}\n\n\t\t\tsetPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\n\n\t\t}\n\n\t\t//\n\n\t\tfunction setFlipSided( flipSided ) {\n\n\t\t\tif ( currentFlipSided !== flipSided ) {\n\n\t\t\t\tif ( flipSided ) {\n\n\t\t\t\t\tgl.frontFace( 2304 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.frontFace( 2305 );\n\n\t\t\t\t}\n\n\t\t\t\tcurrentFlipSided = flipSided;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setCullFace( cullFace ) {\n\n\t\t\tif ( cullFace !== CullFaceNone ) {\n\n\t\t\t\tenable( 2884 );\n\n\t\t\t\tif ( cullFace !== currentCullFace ) {\n\n\t\t\t\t\tif ( cullFace === CullFaceBack ) {\n\n\t\t\t\t\t\tgl.cullFace( 1029 );\n\n\t\t\t\t\t} else if ( cullFace === CullFaceFront ) {\n\n\t\t\t\t\t\tgl.cullFace( 1028 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tgl.cullFace( 1032 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tdisable( 2884 );\n\n\t\t\t}\n\n\t\t\tcurrentCullFace = cullFace;\n\n\t\t}\n\n\t\tfunction setLineWidth( width ) {\n\n\t\t\tif ( width !== currentLineWidth ) {\n\n\t\t\t\tif ( lineWidthAvailable ) { gl.lineWidth( width ); }\n\n\t\t\t\tcurrentLineWidth = width;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setPolygonOffset( polygonOffset, factor, units ) {\n\n\t\t\tif ( polygonOffset ) {\n\n\t\t\t\tenable( 32823 );\n\n\t\t\t\tif ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {\n\n\t\t\t\t\tgl.polygonOffset( factor, units );\n\n\t\t\t\t\tcurrentPolygonOffsetFactor = factor;\n\t\t\t\t\tcurrentPolygonOffsetUnits = units;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tdisable( 32823 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setScissorTest( scissorTest ) {\n\n\t\t\tif ( scissorTest ) {\n\n\t\t\t\tenable( 3089 );\n\n\t\t\t} else {\n\n\t\t\t\tdisable( 3089 );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// texture\n\n\t\tfunction activeTexture( webglSlot ) {\n\n\t\t\tif ( webglSlot === undefined ) { webglSlot = 33984 + maxTextures - 1; }\n\n\t\t\tif ( currentTextureSlot !== webglSlot ) {\n\n\t\t\t\tgl.activeTexture( webglSlot );\n\t\t\t\tcurrentTextureSlot = webglSlot;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction bindTexture( webglType, webglTexture ) {\n\n\t\t\tif ( currentTextureSlot === null ) {\n\n\t\t\t\tactiveTexture();\n\n\t\t\t}\n\n\t\t\tvar boundTexture = currentBoundTextures[ currentTextureSlot ];\n\n\t\t\tif ( boundTexture === undefined ) {\n\n\t\t\t\tboundTexture = { type: undefined, texture: undefined };\n\t\t\t\tcurrentBoundTextures[ currentTextureSlot ] = boundTexture;\n\n\t\t\t}\n\n\t\t\tif ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {\n\n\t\t\t\tgl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );\n\n\t\t\t\tboundTexture.type = webglType;\n\t\t\t\tboundTexture.texture = webglTexture;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction unbindTexture() {\n\n\t\t\tvar boundTexture = currentBoundTextures[ currentTextureSlot ];\n\n\t\t\tif ( boundTexture !== undefined && boundTexture.type !== undefined ) {\n\n\t\t\t\tgl.bindTexture( boundTexture.type, null );\n\n\t\t\t\tboundTexture.type = undefined;\n\t\t\t\tboundTexture.texture = undefined;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction compressedTexImage2D() {\n\n\t\t\ttry {\n\n\t\t\t\tgl.compressedTexImage2D.apply( gl, arguments );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction texImage2D() {\n\n\t\t\ttry {\n\n\t\t\t\tgl.texImage2D.apply( gl, arguments );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction texImage3D() {\n\n\t\t\ttry {\n\n\t\t\t\tgl.texImage3D.apply( gl, arguments );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tfunction scissor( scissor ) {\n\n\t\t\tif ( currentScissor.equals( scissor ) === false ) {\n\n\t\t\t\tgl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );\n\t\t\t\tcurrentScissor.copy( scissor );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction viewport( viewport ) {\n\n\t\t\tif ( currentViewport.equals( viewport ) === false ) {\n\n\t\t\t\tgl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );\n\t\t\t\tcurrentViewport.copy( viewport );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tfunction reset() {\n\n\t\t\tfor ( var i = 0; i < enabledAttributes.length; i ++ ) {\n\n\t\t\t\tif ( enabledAttributes[ i ] === 1 ) {\n\n\t\t\t\t\tgl.disableVertexAttribArray( i );\n\t\t\t\t\tenabledAttributes[ i ] = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tenabledCapabilities = {};\n\n\t\t\tcurrentTextureSlot = null;\n\t\t\tcurrentBoundTextures = {};\n\n\t\t\tcurrentProgram = null;\n\n\t\t\tcurrentBlending = null;\n\n\t\t\tcurrentFlipSided = null;\n\t\t\tcurrentCullFace = null;\n\n\t\t\tcolorBuffer.reset();\n\t\t\tdepthBuffer.reset();\n\t\t\tstencilBuffer.reset();\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tbuffers: {\n\t\t\t\tcolor: colorBuffer,\n\t\t\t\tdepth: depthBuffer,\n\t\t\t\tstencil: stencilBuffer\n\t\t\t},\n\n\t\t\tinitAttributes: initAttributes,\n\t\t\tenableAttribute: enableAttribute,\n\t\t\tenableAttributeAndDivisor: enableAttributeAndDivisor,\n\t\t\tdisableUnusedAttributes: disableUnusedAttributes,\n\t\t\tenable: enable,\n\t\t\tdisable: disable,\n\n\t\t\tuseProgram: useProgram,\n\n\t\t\tsetBlending: setBlending,\n\t\t\tsetMaterial: setMaterial,\n\n\t\t\tsetFlipSided: setFlipSided,\n\t\t\tsetCullFace: setCullFace,\n\n\t\t\tsetLineWidth: setLineWidth,\n\t\t\tsetPolygonOffset: setPolygonOffset,\n\n\t\t\tsetScissorTest: setScissorTest,\n\n\t\t\tactiveTexture: activeTexture,\n\t\t\tbindTexture: bindTexture,\n\t\t\tunbindTexture: unbindTexture,\n\t\t\tcompressedTexImage2D: compressedTexImage2D,\n\t\t\ttexImage2D: texImage2D,\n\t\t\ttexImage3D: texImage3D,\n\n\t\t\tscissor: scissor,\n\t\t\tviewport: viewport,\n\n\t\t\treset: reset\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info ) {\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\t\tvar maxTextures = capabilities.maxTextures;\n\t\tvar maxCubemapSize = capabilities.maxCubemapSize;\n\t\tvar maxTextureSize = capabilities.maxTextureSize;\n\t\tvar maxSamples = capabilities.maxSamples;\n\n\t\tvar _videoTextures = new WeakMap();\n\t\tvar _canvas;\n\n\t\t// cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,\n\t\t// also OffscreenCanvas.getContext(\"webgl\"), but not OffscreenCanvas.getContext(\"2d\")!\n\t\t// Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).\n\n\t\tvar useOffscreenCanvas = false;\n\n\t\ttry {\n\n\t\t\tuseOffscreenCanvas = typeof OffscreenCanvas !== 'undefined'\n\t\t\t\t&& ( new OffscreenCanvas( 1, 1 ).getContext( \"2d\" ) ) !== null;\n\n\t\t} catch ( err ) {\n\n\t\t\t// Ignore any errors\n\n\t\t}\n\n\t\tfunction createCanvas( width, height ) {\n\n\t\t\t// Use OffscreenCanvas when available. Specially needed in web workers\n\n\t\t\treturn useOffscreenCanvas ?\n\t\t\t\tnew OffscreenCanvas( width, height ) :\n\t\t\t\tdocument.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\n\t\t}\n\n\t\tfunction resizeImage( image, needsPowerOfTwo, needsNewCanvas, maxSize ) {\n\n\t\t\tvar scale = 1;\n\n\t\t\t// handle case if texture exceeds max size\n\n\t\t\tif ( image.width > maxSize || image.height > maxSize ) {\n\n\t\t\t\tscale = maxSize / Math.max( image.width, image.height );\n\n\t\t\t}\n\n\t\t\t// only perform resize if necessary\n\n\t\t\tif ( scale < 1 || needsPowerOfTwo === true ) {\n\n\t\t\t\t// only perform resize for certain image types\n\n\t\t\t\tif ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||\n\t\t\t\t\t( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||\n\t\t\t\t\t( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {\n\n\t\t\t\t\tvar floor = needsPowerOfTwo ? MathUtils.floorPowerOfTwo : Math.floor;\n\n\t\t\t\t\tvar width = floor( scale * image.width );\n\t\t\t\t\tvar height = floor( scale * image.height );\n\n\t\t\t\t\tif ( _canvas === undefined ) { _canvas = createCanvas( width, height ); }\n\n\t\t\t\t\t// cube textures can't reuse the same canvas\n\n\t\t\t\t\tvar canvas = needsNewCanvas ? createCanvas( width, height ) : _canvas;\n\n\t\t\t\t\tcanvas.width = width;\n\t\t\t\t\tcanvas.height = height;\n\n\t\t\t\t\tvar context = canvas.getContext( '2d' );\n\t\t\t\t\tcontext.drawImage( image, 0, 0, width, height );\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').' );\n\n\t\t\t\t\treturn canvas;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( 'data' in image ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn image;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn image;\n\n\t\t}\n\n\t\tfunction isPowerOfTwo( image ) {\n\n\t\t\treturn MathUtils.isPowerOfTwo( image.width ) && MathUtils.isPowerOfTwo( image.height );\n\n\t\t}\n\n\t\tfunction textureNeedsPowerOfTwo( texture ) {\n\n\t\t\tif ( isWebGL2 ) { return false; }\n\n\t\t\treturn ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) ||\n\t\t\t\t( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter );\n\n\t\t}\n\n\t\tfunction textureNeedsGenerateMipmaps( texture, supportsMips ) {\n\n\t\t\treturn texture.generateMipmaps && supportsMips &&\n\t\t\t\ttexture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n\n\t\t}\n\n\t\tfunction generateMipmap( target, texture, width, height ) {\n\n\t\t\t_gl.generateMipmap( target );\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\t// Note: Math.log( x ) * Math.LOG2E used instead of Math.log2( x ) which is not supported by IE11\n\t\t\ttextureProperties.__maxMipLevel = Math.log( Math.max( width, height ) ) * Math.LOG2E;\n\n\t\t}\n\n\t\tfunction getInternalFormat( internalFormatName, glFormat, glType ) {\n\n\t\t\tif ( isWebGL2 === false ) { return glFormat; }\n\n\t\t\tif ( internalFormatName !== null ) {\n\n\t\t\t\tif ( _gl[ internalFormatName ] !== undefined ) { return _gl[ internalFormatName ]; }\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \\'' + internalFormatName + '\\'' );\n\n\t\t\t}\n\n\t\t\tvar internalFormat = glFormat;\n\n\t\t\tif ( glFormat === 6403 ) {\n\n\t\t\t\tif ( glType === 5126 ) { internalFormat = 33326; }\n\t\t\t\tif ( glType === 5131 ) { internalFormat = 33325; }\n\t\t\t\tif ( glType === 5121 ) { internalFormat = 33321; }\n\n\t\t\t}\n\n\t\t\tif ( glFormat === 6407 ) {\n\n\t\t\t\tif ( glType === 5126 ) { internalFormat = 34837; }\n\t\t\t\tif ( glType === 5131 ) { internalFormat = 34843; }\n\t\t\t\tif ( glType === 5121 ) { internalFormat = 32849; }\n\n\t\t\t}\n\n\t\t\tif ( glFormat === 6408 ) {\n\n\t\t\t\tif ( glType === 5126 ) { internalFormat = 34836; }\n\t\t\t\tif ( glType === 5131 ) { internalFormat = 34842; }\n\t\t\t\tif ( glType === 5121 ) { internalFormat = 32856; }\n\n\t\t\t}\n\n\t\t\tif ( internalFormat === 33325 || internalFormat === 33326 ||\n\t\t\t\tinternalFormat === 34842 || internalFormat === 34836 ) {\n\n\t\t\t\textensions.get( 'EXT_color_buffer_float' );\n\n\t\t\t} else if ( internalFormat === 34843 || internalFormat === 34837 ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Floating point textures with RGB format not supported. Please use RGBA instead.' );\n\n\t\t\t}\n\n\t\t\treturn internalFormat;\n\n\t\t}\n\n\t\t// Fallback filters for non-power-of-2 textures\n\n\t\tfunction filterFallback( f ) {\n\n\t\t\tif ( f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter ) {\n\n\t\t\t\treturn 9728;\n\n\t\t\t}\n\n\t\t\treturn 9729;\n\n\t\t}\n\n\t\t//\n\n\t\tfunction onTextureDispose( event ) {\n\n\t\t\tvar texture = event.target;\n\n\t\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\n\t\t\tdeallocateTexture( texture );\n\n\t\t\tif ( texture.isVideoTexture ) {\n\n\t\t\t\t_videoTextures.delete( texture );\n\n\t\t\t}\n\n\t\t\tinfo.memory.textures --;\n\n\t\t}\n\n\t\tfunction onRenderTargetDispose( event ) {\n\n\t\t\tvar renderTarget = event.target;\n\n\t\t\trenderTarget.removeEventListener( 'dispose', onRenderTargetDispose );\n\n\t\t\tdeallocateRenderTarget( renderTarget );\n\n\t\t\tinfo.memory.textures --;\n\n\t\t}\n\n\t\t//\n\n\t\tfunction deallocateTexture( texture ) {\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( textureProperties.__webglInit === undefined ) { return; }\n\n\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\t\tproperties.remove( texture );\n\n\t\t}\n\n\t\tfunction deallocateRenderTarget( renderTarget ) {\n\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\n\t\t\tif ( ! renderTarget ) { return; }\n\n\t\t\tif ( textureProperties.__webglTexture !== undefined ) {\n\n\t\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\t\t}\n\n\t\t\tif ( renderTarget.depthTexture ) {\n\n\t\t\t\trenderTarget.depthTexture.dispose();\n\n\t\t\t}\n\n\t\t\tif ( renderTarget.isWebGLCubeRenderTarget ) {\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) { _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] ); }\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );\n\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) { _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer ); }\n\n\t\t\t}\n\n\t\t\tif ( renderTarget.isWebGLMultiviewRenderTarget ) {\n\n\t\t\t\t_gl.deleteTexture( renderTargetProperties.__webglColorTexture );\n\t\t\t\t_gl.deleteTexture( renderTargetProperties.__webglDepthStencilTexture );\n\n\t\t\t\tinfo.memory.textures -= 2;\n\n\t\t\t\tfor ( var i = 0, il = renderTargetProperties.__webglViewFramebuffers.length; i < il; i ++ ) {\n\n\t\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglViewFramebuffers[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tproperties.remove( renderTarget.texture );\n\t\t\tproperties.remove( renderTarget );\n\n\t\t}\n\n\t\t//\n\n\t\tvar textureUnits = 0;\n\n\t\tfunction resetTextureUnits() {\n\n\t\t\ttextureUnits = 0;\n\n\t\t}\n\n\t\tfunction allocateTextureUnit() {\n\n\t\t\tvar textureUnit = textureUnits;\n\n\t\t\tif ( textureUnit >= maxTextures ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + maxTextures );\n\n\t\t\t}\n\n\t\t\ttextureUnits += 1;\n\n\t\t\treturn textureUnit;\n\n\t\t}\n\n\t\t//\n\n\t\tfunction setTexture2D( texture, slot ) {\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( texture.isVideoTexture ) { updateVideoTexture( texture ); }\n\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\t\tvar image = texture.image;\n\n\t\t\t\tif ( image === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined' );\n\n\t\t\t\t} else if ( image.complete === false ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete' );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\tstate.bindTexture( 3553, textureProperties.__webglTexture );\n\n\t\t}\n\n\t\tfunction setTexture2DArray( texture, slot ) {\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\tstate.bindTexture( 35866, textureProperties.__webglTexture );\n\n\t\t}\n\n\t\tfunction setTexture3D( texture, slot ) {\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\tstate.bindTexture( 32879, textureProperties.__webglTexture );\n\n\t\t}\n\n\t\tfunction setTextureCube( texture, slot ) {\n\n\t\t\tif ( texture.image.length !== 6 ) { return; }\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\t\tinitTexture( textureProperties, texture );\n\n\t\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\t\tstate.bindTexture( 34067, textureProperties.__webglTexture );\n\n\t\t\t\t_gl.pixelStorei( 37440, texture.flipY );\n\n\t\t\t\tvar isCompressed = ( texture && ( texture.isCompressedTexture || texture.image[ 0 ].isCompressedTexture ) );\n\t\t\t\tvar isDataTexture = ( texture.image[ 0 ] && texture.image[ 0 ].isDataTexture );\n\n\t\t\t\tvar cubeImage = [];\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tif ( ! isCompressed && ! isDataTexture ) {\n\n\t\t\t\t\t\tcubeImage[ i ] = resizeImage( texture.image[ i ], false, true, maxCubemapSize );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tcubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar image = cubeImage[ 0 ],\n\t\t\t\t\tsupportsMips = isPowerOfTwo( image ) || isWebGL2,\n\t\t\t\t\tglFormat = utils.convert( texture.format ),\n\t\t\t\t\tglType = utils.convert( texture.type ),\n\t\t\t\t\tglInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType );\n\n\t\t\t\tsetTextureParameters( 34067, texture, supportsMips );\n\n\t\t\t\tvar mipmaps;\n\n\t\t\t\tif ( isCompressed ) {\n\n\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t\tmipmaps = cubeImage[ i ].mipmaps;\n\n\t\t\t\t\t\tfor ( var j = 0; j < mipmaps.length; j ++ ) {\n\n\t\t\t\t\t\t\tvar mipmap = mipmaps[ j ];\n\n\t\t\t\t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n\n\t\t\t\t\t\t\t\tif ( glFormat !== null ) {\n\n\t\t\t\t\t\t\t\t\tstate.compressedTexImage2D( 34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()' );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.texImage2D( 34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tmipmaps = texture.mipmaps;\n\n\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t\tif ( isDataTexture ) {\n\n\t\t\t\t\t\t\tstate.texImage2D( 34069 + i, 0, glInternalFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );\n\n\t\t\t\t\t\t\tfor ( var j = 0; j < mipmaps.length; j ++ ) {\n\n\t\t\t\t\t\t\t\tvar mipmap = mipmaps[ j ];\n\t\t\t\t\t\t\t\tvar mipmapImage = mipmap.image[ i ].image;\n\n\t\t\t\t\t\t\t\tstate.texImage2D( 34069 + i, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.texImage2D( 34069 + i, 0, glInternalFormat, glFormat, glType, cubeImage[ i ] );\n\n\t\t\t\t\t\t\tfor ( var j = 0; j < mipmaps.length; j ++ ) {\n\n\t\t\t\t\t\t\t\tvar mipmap = mipmaps[ j ];\n\n\t\t\t\t\t\t\t\tstate.texImage2D( 34069 + i, j + 1, glInternalFormat, glFormat, glType, mipmap.image[ i ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length;\n\n\t\t\t\t}\n\n\t\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\t\t// We assume images for cube map have the same size.\n\t\t\t\t\tgenerateMipmap( 34067, texture, image.width, image.height );\n\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__version = texture.version;\n\n\t\t\t\tif ( texture.onUpdate ) { texture.onUpdate( texture ); }\n\n\t\t\t} else {\n\n\t\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\t\tstate.bindTexture( 34067, textureProperties.__webglTexture );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setTextureCubeDynamic( texture, slot ) {\n\n\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\tstate.bindTexture( 34067, properties.get( texture ).__webglTexture );\n\n\t\t}\n\n\t\tvar wrappingToGL = {};\n\t\twrappingToGL[ RepeatWrapping ] = 10497;\n\t\twrappingToGL[ ClampToEdgeWrapping ] = 33071;\n\t\twrappingToGL[ MirroredRepeatWrapping ] = 33648;\n\n\t\tvar filterToGL = {};\n\t\tfilterToGL[ NearestFilter ] = 9728;\n\t\tfilterToGL[ NearestMipmapNearestFilter ] = 9984;\n\t\tfilterToGL[ NearestMipmapLinearFilter ] = 9986;\n\t\tfilterToGL[ LinearFilter ] = 9729;\n\t\tfilterToGL[ LinearMipmapNearestFilter ] = 9985;\n\t\tfilterToGL[ LinearMipmapLinearFilter ] = 9987;\n\n\t\tfunction setTextureParameters( textureType, texture, supportsMips ) {\n\n\t\t\tif ( supportsMips ) {\n\n\t\t\t\t_gl.texParameteri( textureType, 10242, wrappingToGL[ texture.wrapS ] );\n\t\t\t\t_gl.texParameteri( textureType, 10243, wrappingToGL[ texture.wrapT ] );\n\n\t\t\t\tif ( textureType === 32879 || textureType === 35866 ) {\n\n\t\t\t\t\t_gl.texParameteri( textureType, 32882, wrappingToGL[ texture.wrapR ] );\n\n\t\t\t\t}\n\n\t\t\t\t_gl.texParameteri( textureType, 10240, filterToGL[ texture.magFilter ] );\n\t\t\t\t_gl.texParameteri( textureType, 10241, filterToGL[ texture.minFilter ] );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.texParameteri( textureType, 10242, 33071 );\n\t\t\t\t_gl.texParameteri( textureType, 10243, 33071 );\n\n\t\t\t\tif ( textureType === 32879 || textureType === 35866 ) {\n\n\t\t\t\t\t_gl.texParameteri( textureType, 32882, 33071 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.' );\n\n\t\t\t\t}\n\n\t\t\t\t_gl.texParameteri( textureType, 10240, filterFallback( texture.magFilter ) );\n\t\t\t\t_gl.texParameteri( textureType, 10241, filterFallback( texture.minFilter ) );\n\n\t\t\t\tif ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\t\tif ( extension ) {\n\n\t\t\t\tif ( texture.type === FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) { return; }\n\t\t\t\tif ( texture.type === HalfFloatType && ( isWebGL2 || extensions.get( 'OES_texture_half_float_linear' ) ) === null ) { return; }\n\n\t\t\t\tif ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {\n\n\t\t\t\t\t_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );\n\t\t\t\t\tproperties.get( texture ).__currentAnisotropy = texture.anisotropy;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction initTexture( textureProperties, texture ) {\n\n\t\t\tif ( textureProperties.__webglInit === undefined ) {\n\n\t\t\t\ttextureProperties.__webglInit = true;\n\n\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n\t\t\t\tinfo.memory.textures ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction uploadTexture( textureProperties, texture, slot ) {\n\n\t\t\tvar textureType = 3553;\n\n\t\t\tif ( texture.isDataTexture2DArray ) { textureType = 35866; }\n\t\t\tif ( texture.isDataTexture3D ) { textureType = 32879; }\n\n\t\t\tinitTexture( textureProperties, texture );\n\n\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\tstate.bindTexture( textureType, textureProperties.__webglTexture );\n\n\t\t\t_gl.pixelStorei( 37440, texture.flipY );\n\t\t\t_gl.pixelStorei( 37441, texture.premultiplyAlpha );\n\t\t\t_gl.pixelStorei( 3317, texture.unpackAlignment );\n\n\t\t\tvar needsPowerOfTwo = textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( texture.image ) === false;\n\t\t\tvar image = resizeImage( texture.image, needsPowerOfTwo, false, maxTextureSize );\n\n\t\t\tvar supportsMips = isPowerOfTwo( image ) || isWebGL2,\n\t\t\t\tglFormat = utils.convert( texture.format ),\n\t\t\t\tglType = utils.convert( texture.type ),\n\t\t\t\tglInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType );\n\n\t\t\tsetTextureParameters( textureType, texture, supportsMips );\n\n\t\t\tvar mipmap, mipmaps = texture.mipmaps;\n\n\t\t\tif ( texture.isDepthTexture ) {\n\n\t\t\t\t// populate depth texture with dummy data\n\n\t\t\t\tglInternalFormat = 6402;\n\n\t\t\t\tif ( texture.type === FloatType ) {\n\n\t\t\t\t\tif ( isWebGL2 === false ) { throw new Error( 'Float Depth Texture only supported in WebGL2.0' ); }\n\t\t\t\t\tglInternalFormat = 36012;\n\n\t\t\t\t} else if ( isWebGL2 ) {\n\n\t\t\t\t\t// WebGL 2.0 requires signed internalformat for glTexImage2D\n\t\t\t\t\tglInternalFormat = 33189;\n\n\t\t\t\t}\n\n\t\t\t\tif ( texture.format === DepthFormat && glInternalFormat === 6402 ) {\n\n\t\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t\t// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tif ( texture.type !== UnsignedShortType && texture.type !== UnsignedIntType ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.' );\n\n\t\t\t\t\t\ttexture.type = UnsignedShortType;\n\t\t\t\t\t\tglType = utils.convert( texture.type );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// Depth stencil textures need the DEPTH_STENCIL internal format\n\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\tif ( texture.format === DepthStencilFormat ) {\n\n\t\t\t\t\tglInternalFormat = 34041;\n\n\t\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t\t// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tif ( texture.type !== UnsignedInt248Type ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.' );\n\n\t\t\t\t\t\ttexture.type = UnsignedInt248Type;\n\t\t\t\t\t\tglType = utils.convert( texture.type );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tstate.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null );\n\n\t\t\t} else if ( texture.isDataTexture ) {\n\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\t\tif ( mipmaps.length > 0 && supportsMips ) {\n\n\t\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\n\t\t\t\t\t\tstate.texImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data );\n\t\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t\t\t}\n\n\t\t\t} else if ( texture.isCompressedTexture ) {\n\n\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\tmipmap = mipmaps[ i ];\n\n\t\t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n\n\t\t\t\t\t\tif ( glFormat !== null ) {\n\n\t\t\t\t\t\t\tstate.compressedTexImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tstate.texImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t\t} else if ( texture.isDataTexture2DArray ) {\n\n\t\t\t\tstate.texImage3D( 35866, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );\n\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t\t} else if ( texture.isDataTexture3D ) {\n\n\t\t\t\tstate.texImage3D( 32879, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );\n\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t\t} else {\n\n\t\t\t\t// regular Texture (image, video, canvas)\n\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\t\tif ( mipmaps.length > 0 && supportsMips ) {\n\n\t\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\n\t\t\t\t\t\tstate.texImage2D( 3553, i, glInternalFormat, glFormat, glType, mipmap );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage2D( 3553, 0, glInternalFormat, glFormat, glType, image );\n\t\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\tgenerateMipmap( textureType, texture, image.width, image.height );\n\n\t\t\t}\n\n\t\t\ttextureProperties.__version = texture.version;\n\n\t\t\tif ( texture.onUpdate ) { texture.onUpdate( texture ); }\n\n\t\t}\n\n\t\t// Render targets\n\n\t\t// Setup storage for target texture and bind it to correct framebuffer\n\t\tfunction setupFrameBufferTexture( framebuffer, renderTarget, attachment, textureTarget ) {\n\n\t\t\tvar glFormat = utils.convert( renderTarget.texture.format );\n\t\t\tvar glType = utils.convert( renderTarget.texture.type );\n\t\t\tvar glInternalFormat = getInternalFormat( renderTarget.texture.internalFormat, glFormat, glType );\n\t\t\tstate.texImage2D( textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\n\t\t\t_gl.bindFramebuffer( 36160, framebuffer );\n\t\t\t_gl.framebufferTexture2D( 36160, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );\n\t\t\t_gl.bindFramebuffer( 36160, null );\n\n\t\t}\n\n\t\t// Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n\t\tfunction setupRenderBufferStorage( renderbuffer, renderTarget, isMultisample ) {\n\n\t\t\t_gl.bindRenderbuffer( 36161, renderbuffer );\n\n\t\t\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\n\n\t\t\t\tif ( isMultisample ) {\n\n\t\t\t\t\tvar samples = getRenderTargetSamples( renderTarget );\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, 33189, renderTarget.width, renderTarget.height );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.renderbufferStorage( 36161, 33189, renderTarget.width, renderTarget.height );\n\n\t\t\t\t}\n\n\t\t\t\t_gl.framebufferRenderbuffer( 36160, 36096, 36161, renderbuffer );\n\n\t\t\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\n\n\t\t\t\tif ( isMultisample ) {\n\n\t\t\t\t\tvar samples = getRenderTargetSamples( renderTarget );\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, 35056, renderTarget.width, renderTarget.height );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.renderbufferStorage( 36161, 34041, renderTarget.width, renderTarget.height );\n\n\t\t\t\t}\n\n\n\t\t\t\t_gl.framebufferRenderbuffer( 36160, 33306, 36161, renderbuffer );\n\n\t\t\t} else {\n\n\t\t\t\tvar glFormat = utils.convert( renderTarget.texture.format );\n\t\t\t\tvar glType = utils.convert( renderTarget.texture.type );\n\t\t\t\tvar glInternalFormat = getInternalFormat( renderTarget.texture.internalFormat, glFormat, glType );\n\n\t\t\t\tif ( isMultisample ) {\n\n\t\t\t\t\tvar samples = getRenderTargetSamples( renderTarget );\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.renderbufferStorage( 36161, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_gl.bindRenderbuffer( 36161, null );\n\n\t\t}\n\n\t\t// Setup resources for a Depth Texture for a FBO (needs an extension)\n\t\tfunction setupDepthTexture( framebuffer, renderTarget ) {\n\n\t\t\tvar isCube = ( renderTarget && renderTarget.isWebGLCubeRenderTarget );\n\t\t\tif ( isCube ) { throw new Error( 'Depth Texture with cube render targets is not supported' ); }\n\n\t\t\t_gl.bindFramebuffer( 36160, framebuffer );\n\n\t\t\tif ( ! ( renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture ) ) {\n\n\t\t\t\tthrow new Error( 'renderTarget.depthTexture must be an instance of THREE.DepthTexture' );\n\n\t\t\t}\n\n\t\t\t// upload an empty depth texture with framebuffer size\n\t\t\tif ( ! properties.get( renderTarget.depthTexture ).__webglTexture ||\n\t\t\t\t\trenderTarget.depthTexture.image.width !== renderTarget.width ||\n\t\t\t\t\trenderTarget.depthTexture.image.height !== renderTarget.height ) {\n\n\t\t\t\trenderTarget.depthTexture.image.width = renderTarget.width;\n\t\t\t\trenderTarget.depthTexture.image.height = renderTarget.height;\n\t\t\t\trenderTarget.depthTexture.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tsetTexture2D( renderTarget.depthTexture, 0 );\n\n\t\t\tvar webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;\n\n\t\t\tif ( renderTarget.depthTexture.format === DepthFormat ) {\n\n\t\t\t\t_gl.framebufferTexture2D( 36160, 36096, 3553, webglDepthTexture, 0 );\n\n\t\t\t} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {\n\n\t\t\t\t_gl.framebufferTexture2D( 36160, 33306, 3553, webglDepthTexture, 0 );\n\n\t\t\t} else {\n\n\t\t\t\tthrow new Error( 'Unknown depthTexture format' );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Setup GL resources for a non-texture depth buffer\n\t\tfunction setupDepthRenderbuffer( renderTarget ) {\n\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\n\t\t\tvar isCube = ( renderTarget.isWebGLCubeRenderTarget === true );\n\n\t\t\tif ( renderTarget.depthTexture ) {\n\n\t\t\t\tif ( isCube ) { throw new Error( 'target.depthTexture not supported in Cube render targets' ); }\n\n\t\t\t\tsetupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );\n\n\t\t\t} else {\n\n\t\t\t\tif ( isCube ) {\n\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\n\n\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t\t_gl.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\t\t\trenderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();\n\t\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer );\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_gl.bindFramebuffer( 36160, null );\n\n\t\t}\n\n\t\t// Set up GL resources for the render target\n\t\tfunction setupRenderTarget( renderTarget ) {\n\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\n\t\t\trenderTarget.addEventListener( 'dispose', onRenderTargetDispose );\n\n\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n\t\t\tinfo.memory.textures ++;\n\n\t\t\tvar isCube = ( renderTarget.isWebGLCubeRenderTarget === true );\n\t\t\tvar isMultisample = ( renderTarget.isWebGLMultisampleRenderTarget === true );\n\t\t\tvar isMultiview = ( renderTarget.isWebGLMultiviewRenderTarget === true );\n\t\t\tvar supportsMips = isPowerOfTwo( renderTarget ) || isWebGL2;\n\n\t\t\t// Setup framebuffer\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\trenderTargetProperties.__webglFramebuffer = [];\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\trenderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n\n\t\t\t\tif ( isMultisample ) {\n\n\t\t\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t\t\trenderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();\n\t\t\t\t\t\trenderTargetProperties.__webglColorRenderbuffer = _gl.createRenderbuffer();\n\n\t\t\t\t\t\t_gl.bindRenderbuffer( 36161, renderTargetProperties.__webglColorRenderbuffer );\n\n\t\t\t\t\t\tvar glFormat = utils.convert( renderTarget.texture.format );\n\t\t\t\t\t\tvar glType = utils.convert( renderTarget.texture.type );\n\t\t\t\t\t\tvar glInternalFormat = getInternalFormat( renderTarget.texture.internalFormat, glFormat, glType );\n\t\t\t\t\t\tvar samples = getRenderTargetSamples( renderTarget );\n\t\t\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t\t\t_gl.bindFramebuffer( 36160, renderTargetProperties.__webglMultisampledFramebuffer );\n\t\t\t\t\t\t_gl.framebufferRenderbuffer( 36160, 36064, 36161, renderTargetProperties.__webglColorRenderbuffer );\n\t\t\t\t\t\t_gl.bindRenderbuffer( 36161, null );\n\n\t\t\t\t\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\t\t\t\t\trenderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();\n\t\t\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_gl.bindFramebuffer( 36160, null );\n\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( isMultiview ) {\n\n\t\t\t\t\tvar width = renderTarget.width;\n\t\t\t\t\tvar height = renderTarget.height;\n\t\t\t\t\tvar numViews = renderTarget.numViews;\n\n\t\t\t\t\t_gl.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer );\n\n\t\t\t\t\tvar ext = extensions.get( 'OVR_multiview2' );\n\n\t\t\t\t\tinfo.memory.textures += 2;\n\n\t\t\t\t\tvar colorTexture = _gl.createTexture();\n\t\t\t\t\t_gl.bindTexture( 35866, colorTexture );\n\t\t\t\t\t_gl.texParameteri( 35866, 10240, 9728 );\n\t\t\t\t\t_gl.texParameteri( 35866, 10241, 9728 );\n\t\t\t\t\t_gl.texImage3D( 35866, 0, 32856, width, height, numViews, 0, 6408, 5121, null );\n\t\t\t\t\text.framebufferTextureMultiviewOVR( 36160, 36064, colorTexture, 0, 0, numViews );\n\n\t\t\t\t\tvar depthStencilTexture = _gl.createTexture();\n\t\t\t\t\t_gl.bindTexture( 35866, depthStencilTexture );\n\t\t\t\t\t_gl.texParameteri( 35866, 10240, 9728 );\n\t\t\t\t\t_gl.texParameteri( 35866, 10241, 9728 );\n\t\t\t\t\t_gl.texImage3D( 35866, 0, 35056, width, height, numViews, 0, 34041, 34042, null );\n\t\t\t\t\text.framebufferTextureMultiviewOVR( 36160, 33306, depthStencilTexture, 0, 0, numViews );\n\n\t\t\t\t\tvar viewFramebuffers = new Array( numViews );\n\t\t\t\t\tfor ( var i = 0; i < numViews; ++ i ) {\n\n\t\t\t\t\t\tviewFramebuffers[ i ] = _gl.createFramebuffer();\n\t\t\t\t\t\t_gl.bindFramebuffer( 36160, viewFramebuffers[ i ] );\n\t\t\t\t\t\t_gl.framebufferTextureLayer( 36160, 36064, colorTexture, 0, i );\n\n\t\t\t\t\t}\n\n\t\t\t\t\trenderTargetProperties.__webglColorTexture = colorTexture;\n\t\t\t\t\trenderTargetProperties.__webglDepthStencilTexture = depthStencilTexture;\n\t\t\t\t\trenderTargetProperties.__webglViewFramebuffers = viewFramebuffers;\n\n\t\t\t\t\t_gl.bindFramebuffer( 36160, null );\n\t\t\t\t\t_gl.bindTexture( 35866, null );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Setup color buffer\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\tstate.bindTexture( 34067, textureProperties.__webglTexture );\n\t\t\t\tsetTextureParameters( 34067, renderTarget.texture, supportsMips );\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, 36064, 34069 + i );\n\n\t\t\t\t}\n\n\t\t\t\tif ( textureNeedsGenerateMipmaps( renderTarget.texture, supportsMips ) ) {\n\n\t\t\t\t\tgenerateMipmap( 34067, renderTarget.texture, renderTarget.width, renderTarget.height );\n\n\t\t\t\t}\n\n\t\t\t\tstate.bindTexture( 34067, null );\n\n\t\t\t} else if ( ! isMultiview ) {\n\n\t\t\t\tstate.bindTexture( 3553, textureProperties.__webglTexture );\n\t\t\t\tsetTextureParameters( 3553, renderTarget.texture, supportsMips );\n\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, 36064, 3553 );\n\n\t\t\t\tif ( textureNeedsGenerateMipmaps( renderTarget.texture, supportsMips ) ) {\n\n\t\t\t\t\tgenerateMipmap( 3553, renderTarget.texture, renderTarget.width, renderTarget.height );\n\n\t\t\t\t}\n\n\t\t\t\tstate.bindTexture( 3553, null );\n\n\t\t\t}\n\n\t\t\t// Setup depth and stencil buffers\n\n\t\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\t\tsetupDepthRenderbuffer( renderTarget );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction updateRenderTargetMipmap( renderTarget ) {\n\n\t\t\tvar texture = renderTarget.texture;\n\t\t\tvar supportsMips = isPowerOfTwo( renderTarget ) || isWebGL2;\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\tvar target = renderTarget.isWebGLCubeRenderTarget ? 34067 : 3553;\n\t\t\t\tvar webglTexture = properties.get( texture ).__webglTexture;\n\n\t\t\t\tstate.bindTexture( target, webglTexture );\n\t\t\t\tgenerateMipmap( target, texture, renderTarget.width, renderTarget.height );\n\t\t\t\tstate.bindTexture( target, null );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction updateMultisampleRenderTarget( renderTarget ) {\n\n\t\t\tif ( renderTarget.isWebGLMultisampleRenderTarget ) {\n\n\t\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\n\t\t\t\t\t_gl.bindFramebuffer( 36008, renderTargetProperties.__webglMultisampledFramebuffer );\n\t\t\t\t\t_gl.bindFramebuffer( 36009, renderTargetProperties.__webglFramebuffer );\n\n\t\t\t\t\tvar width = renderTarget.width;\n\t\t\t\t\tvar height = renderTarget.height;\n\t\t\t\t\tvar mask = 16384;\n\n\t\t\t\t\tif ( renderTarget.depthBuffer ) { mask |= 256; }\n\t\t\t\t\tif ( renderTarget.stencilBuffer ) { mask |= 1024; }\n\n\t\t\t\t\t_gl.blitFramebuffer( 0, 0, width, height, 0, 0, width, height, mask, 9728 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction getRenderTargetSamples( renderTarget ) {\n\n\t\t\treturn ( isWebGL2 && renderTarget.isWebGLMultisampleRenderTarget ) ?\n\t\t\t\tMath.min( maxSamples, renderTarget.samples ) : 0;\n\n\t\t}\n\n\t\tfunction updateVideoTexture( texture ) {\n\n\t\t\tvar frame = info.render.frame;\n\n\t\t\t// Check the last frame we updated the VideoTexture\n\n\t\t\tif ( _videoTextures.get( texture ) !== frame ) {\n\n\t\t\t\t_videoTextures.set( texture, frame );\n\t\t\t\ttexture.update();\n\n\t\t\t}\n\n\t\t}\n\n\t\t// backwards compatibility\n\n\t\tvar warnedTexture2D = false;\n\t\tvar warnedTextureCube = false;\n\n\t\tfunction safeSetTexture2D( texture, slot ) {\n\n\t\t\tif ( texture && texture.isWebGLRenderTarget ) {\n\n\t\t\t\tif ( warnedTexture2D === false ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead.\" );\n\t\t\t\t\twarnedTexture2D = true;\n\n\t\t\t\t}\n\n\t\t\t\ttexture = texture.texture;\n\n\t\t\t}\n\n\t\t\tsetTexture2D( texture, slot );\n\n\t\t}\n\n\t\tfunction safeSetTextureCube( texture, slot ) {\n\n\t\t\tif ( texture && texture.isWebGLCubeRenderTarget ) {\n\n\t\t\t\tif ( warnedTextureCube === false ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead.\" );\n\t\t\t\t\twarnedTextureCube = true;\n\n\t\t\t\t}\n\n\t\t\t\ttexture = texture.texture;\n\n\t\t\t}\n\n\t\t\t// currently relying on the fact that WebGLCubeRenderTarget.texture is a Texture and NOT a CubeTexture\n\t\t\t// TODO: unify these code paths\n\t\t\tif ( ( texture && texture.isCubeTexture ) ||\n\t\t\t\t( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {\n\n\t\t\t\t// CompressedTexture can have Array in image :/\n\n\t\t\t\t// this function alone should take care of cube textures\n\t\t\t\tsetTextureCube( texture, slot );\n\n\t\t\t} else {\n\n\t\t\t\t// assumed: texture property of THREE.WebGLCubeRenderTarget\n\t\t\t\tsetTextureCubeDynamic( texture, slot );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tthis.allocateTextureUnit = allocateTextureUnit;\n\t\tthis.resetTextureUnits = resetTextureUnits;\n\n\t\tthis.setTexture2D = setTexture2D;\n\t\tthis.setTexture2DArray = setTexture2DArray;\n\t\tthis.setTexture3D = setTexture3D;\n\t\tthis.setTextureCube = setTextureCube;\n\t\tthis.setTextureCubeDynamic = setTextureCubeDynamic;\n\t\tthis.setupRenderTarget = setupRenderTarget;\n\t\tthis.updateRenderTargetMipmap = updateRenderTargetMipmap;\n\t\tthis.updateMultisampleRenderTarget = updateMultisampleRenderTarget;\n\n\t\tthis.safeSetTexture2D = safeSetTexture2D;\n\t\tthis.safeSetTextureCube = safeSetTextureCube;\n\n\t}\n\n\t/**\n\t * @author thespite / http://www.twitter.com/thespite\n\t */\n\n\tfunction WebGLUtils( gl, extensions, capabilities ) {\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\n\t\tfunction convert( p ) {\n\n\t\t\tvar extension;\n\n\t\t\tif ( p === UnsignedByteType ) { return 5121; }\n\t\t\tif ( p === UnsignedShort4444Type ) { return 32819; }\n\t\t\tif ( p === UnsignedShort5551Type ) { return 32820; }\n\t\t\tif ( p === UnsignedShort565Type ) { return 33635; }\n\n\t\t\tif ( p === ByteType ) { return 5120; }\n\t\t\tif ( p === ShortType ) { return 5122; }\n\t\t\tif ( p === UnsignedShortType ) { return 5123; }\n\t\t\tif ( p === IntType ) { return 5124; }\n\t\t\tif ( p === UnsignedIntType ) { return 5125; }\n\t\t\tif ( p === FloatType ) { return 5126; }\n\n\t\t\tif ( p === HalfFloatType ) {\n\n\t\t\t\tif ( isWebGL2 ) { return 5131; }\n\n\t\t\t\textension = extensions.get( 'OES_texture_half_float' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\treturn extension.HALF_FLOAT_OES;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === AlphaFormat ) { return 6406; }\n\t\t\tif ( p === RGBFormat ) { return 6407; }\n\t\t\tif ( p === RGBAFormat ) { return 6408; }\n\t\t\tif ( p === LuminanceFormat ) { return 6409; }\n\t\t\tif ( p === LuminanceAlphaFormat ) { return 6410; }\n\t\t\tif ( p === DepthFormat ) { return 6402; }\n\t\t\tif ( p === DepthStencilFormat ) { return 34041; }\n\t\t\tif ( p === RedFormat ) { return 6403; }\n\n\t\t\t// WebGL2 formats.\n\n\t\t\tif ( p === RedIntegerFormat ) { return 36244; }\n\t\t\tif ( p === RGFormat ) { return 33319; }\n\t\t\tif ( p === RGIntegerFormat ) { return 33320; }\n\t\t\tif ( p === RGBIntegerFormat ) { return 36248; }\n\t\t\tif ( p === RGBAIntegerFormat ) { return 36249; }\n\n\t\t\tif ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format ||\n\t\t\t\tp === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\tif ( p === RGB_S3TC_DXT1_Format ) { return extension.COMPRESSED_RGB_S3TC_DXT1_EXT; }\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT1_Format ) { return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT; }\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT3_Format ) { return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT; }\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT5_Format ) { return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT; }\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format ||\n\t\t\t\tp === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\tif ( p === RGB_PVRTC_4BPPV1_Format ) { return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG; }\n\t\t\t\t\tif ( p === RGB_PVRTC_2BPPV1_Format ) { return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG; }\n\t\t\t\t\tif ( p === RGBA_PVRTC_4BPPV1_Format ) { return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG; }\n\t\t\t\t\tif ( p === RGBA_PVRTC_2BPPV1_Format ) { return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG; }\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === RGB_ETC1_Format ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_etc1' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\treturn extension.COMPRESSED_RGB_ETC1_WEBGL;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format ||\n\t\t\t\tp === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format ||\n\t\t\t\tp === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format ||\n\t\t\t\tp === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format ||\n\t\t\t\tp === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_astc' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\t// TODO Complete?\n\n\t\t\t\t\treturn p;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === UnsignedInt248Type ) {\n\n\t\t\t\tif ( isWebGL2 ) { return 34042; }\n\n\t\t\t\textension = extensions.get( 'WEBGL_depth_texture' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\treturn extension.UNSIGNED_INT_24_8_WEBGL;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn { convert: convert };\n\n\t}\n\n\t/**\n\t * @author fernandojsg / http://fernandojsg.com\n\t * @author Takahiro https://github.com/takahirox\n\t */\n\n\tfunction WebGLMultiviewRenderTarget( width, height, numViews, options ) {\n\n\t\tWebGLRenderTarget.call( this, width, height, options );\n\n\t\tthis.depthBuffer = false;\n\t\tthis.stencilBuffer = false;\n\n\t\tthis.numViews = numViews;\n\n\t}\n\n\tWebGLMultiviewRenderTarget.prototype = Object.assign( Object.create( WebGLRenderTarget.prototype ), {\n\n\t\tconstructor: WebGLMultiviewRenderTarget,\n\n\t\tisWebGLMultiviewRenderTarget: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tWebGLRenderTarget.prototype.copy.call( this, source );\n\n\t\t\tthis.numViews = source.numViews;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetNumViews: function ( numViews ) {\n\n\t\t\tif ( this.numViews !== numViews ) {\n\n\t\t\t\tthis.numViews = numViews;\n\t\t\t\tthis.dispose();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author fernandojsg / http://fernandojsg.com\n\t * @author Takahiro https://github.com/takahirox\n\t */\n\n\tfunction WebGLMultiview( renderer, gl ) {\n\n\t\tvar DEFAULT_NUMVIEWS = 2;\n\n\t\tvar extensions = renderer.extensions;\n\t\tvar properties = renderer.properties;\n\n\t\tvar renderTarget, currentRenderTarget;\n\t\tvar mat3, mat4, cameraArray, renderSize;\n\n\t\tvar available;\n\t\tvar maxNumViews = 0;\n\n\t\t//\n\n\t\tfunction isAvailable() {\n\n\t\t\tif ( available === undefined ) {\n\n\t\t\t\tvar extension = extensions.get( 'OVR_multiview2' );\n\n\t\t\t\tavailable = extension !== null && gl.getContextAttributes().antialias === false;\n\n\t\t\t\tif ( available ) {\n\n\t\t\t\t\tmaxNumViews = gl.getParameter( extension.MAX_VIEWS_OVR );\n\t\t\t\t\trenderTarget = new WebGLMultiviewRenderTarget( 0, 0, DEFAULT_NUMVIEWS );\n\n\t\t\t\t\trenderSize = new Vector2();\n\t\t\t\t\tmat4 = [];\n\t\t\t\t\tmat3 = [];\n\t\t\t\t\tcameraArray = [];\n\n\t\t\t\t\tfor ( var i = 0; i < maxNumViews; i ++ ) {\n\n\t\t\t\t\t\tmat4[ i ] = new Matrix4();\n\t\t\t\t\t\tmat3[ i ] = new Matrix3();\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn available;\n\n\t\t}\n\n\t\tfunction getCameraArray( camera ) {\n\n\t\t\tif ( camera.isArrayCamera ) { return camera.cameras; }\n\n\t\t\tcameraArray[ 0 ] = camera;\n\n\t\t\treturn cameraArray;\n\n\t\t}\n\n\t\tfunction updateCameraProjectionMatricesUniform( camera, uniforms ) {\n\n\t\t\tvar cameras = getCameraArray( camera );\n\n\t\t\tfor ( var i = 0; i < cameras.length; i ++ ) {\n\n\t\t\t\tmat4[ i ].copy( cameras[ i ].projectionMatrix );\n\n\t\t\t}\n\n\t\t\tuniforms.setValue( gl, 'projectionMatrices', mat4 );\n\n\t\t}\n\n\t\tfunction updateCameraViewMatricesUniform( camera, uniforms ) {\n\n\t\t\tvar cameras = getCameraArray( camera );\n\n\t\t\tfor ( var i = 0; i < cameras.length; i ++ ) {\n\n\t\t\t\tmat4[ i ].copy( cameras[ i ].matrixWorldInverse );\n\n\t\t\t}\n\n\t\t\tuniforms.setValue( gl, 'viewMatrices', mat4 );\n\n\t\t}\n\n\t\tfunction updateObjectMatricesUniforms( object, camera, uniforms ) {\n\n\t\t\tvar cameras = getCameraArray( camera );\n\n\t\t\tfor ( var i = 0; i < cameras.length; i ++ ) {\n\n\t\t\t\tmat4[ i ].multiplyMatrices( cameras[ i ].matrixWorldInverse, object.matrixWorld );\n\t\t\t\tmat3[ i ].getNormalMatrix( mat4[ i ] );\n\n\t\t\t}\n\n\t\t\tuniforms.setValue( gl, 'modelViewMatrices', mat4 );\n\t\t\tuniforms.setValue( gl, 'normalMatrices', mat3 );\n\n\t\t}\n\n\t\tfunction isMultiviewCompatible( camera ) {\n\n\t\t\tif ( camera.isArrayCamera === undefined ) { return true; }\n\n\t\t\tvar cameras = camera.cameras;\n\n\t\t\tif ( cameras.length > maxNumViews ) { return false; }\n\n\t\t\tfor ( var i = 1, il = cameras.length; i < il; i ++ ) {\n\n\t\t\t\tif ( cameras[ 0 ].viewport.z !== cameras[ i ].viewport.z ||\n\t\t\t\t\tcameras[ 0 ].viewport.w !== cameras[ i ].viewport.w ) { return false; }\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\tfunction resizeRenderTarget( camera ) {\n\n\t\t\tif ( currentRenderTarget ) {\n\n\t\t\t\trenderSize.set( currentRenderTarget.width, currentRenderTarget.height );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.getDrawingBufferSize( renderSize );\n\n\t\t\t}\n\n\t\t\tif ( camera.isArrayCamera ) {\n\n\t\t\t\tvar viewport = camera.cameras[ 0 ].viewport;\n\n\t\t\t\trenderTarget.setSize( viewport.z, viewport.w );\n\t\t\t\trenderTarget.setNumViews( camera.cameras.length );\n\n\t\t\t} else {\n\n\t\t\t\trenderTarget.setSize( renderSize.x, renderSize.y );\n\t\t\t\trenderTarget.setNumViews( DEFAULT_NUMVIEWS );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction attachCamera( camera ) {\n\n\t\t\tif ( isMultiviewCompatible( camera ) === false ) { return; }\n\n\t\t\tcurrentRenderTarget = renderer.getRenderTarget();\n\t\t\tresizeRenderTarget( camera );\n\t\t\trenderer.setRenderTarget( renderTarget );\n\n\t\t}\n\n\t\tfunction detachCamera( camera ) {\n\n\t\t\tif ( renderTarget !== renderer.getRenderTarget() ) { return; }\n\n\t\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t\t\tflush( camera );\n\n\t\t}\n\n\t\tfunction flush( camera ) {\n\n\t\t\tvar srcRenderTarget = renderTarget;\n\t\t\tvar numViews = srcRenderTarget.numViews;\n\n\t\t\tvar srcFramebuffers = properties.get( srcRenderTarget ).__webglViewFramebuffers;\n\n\t\t\tvar viewWidth = srcRenderTarget.width;\n\t\t\tvar viewHeight = srcRenderTarget.height;\n\n\t\t\tif ( camera.isArrayCamera ) {\n\n\t\t\t\tfor ( var i = 0; i < numViews; i ++ ) {\n\n\t\t\t\t\tvar viewport = camera.cameras[ i ].viewport;\n\n\t\t\t\t\tvar x1 = viewport.x;\n\t\t\t\t\tvar y1 = viewport.y;\n\t\t\t\t\tvar x2 = x1 + viewport.z;\n\t\t\t\t\tvar y2 = y1 + viewport.w;\n\n\t\t\t\t\tgl.bindFramebuffer( 36008, srcFramebuffers[ i ] );\n\t\t\t\t\tgl.blitFramebuffer( 0, 0, viewWidth, viewHeight, x1, y1, x2, y2, 16384, 9728 );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tgl.bindFramebuffer( 36008, srcFramebuffers[ 0 ] );\n\t\t\t\tgl.blitFramebuffer( 0, 0, viewWidth, viewHeight, 0, 0, renderSize.x, renderSize.y, 16384, 9728 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.isAvailable = isAvailable;\n\t\tthis.attachCamera = attachCamera;\n\t\tthis.detachCamera = detachCamera;\n\t\tthis.updateCameraProjectionMatricesUniform = updateCameraProjectionMatricesUniform;\n\t\tthis.updateCameraViewMatricesUniform = updateCameraViewMatricesUniform;\n\t\tthis.updateObjectMatricesUniforms = updateObjectMatricesUniforms;\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction ArrayCamera( array ) {\n\n\t\tPerspectiveCamera.call( this );\n\n\t\tthis.cameras = array || [];\n\n\t}\n\n\tArrayCamera.prototype = Object.assign( Object.create( PerspectiveCamera.prototype ), {\n\n\t\tconstructor: ArrayCamera,\n\n\t\tisArrayCamera: true\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Group() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Group';\n\n\t}\n\n\tGroup.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Group,\n\n\t\tisGroup: true\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebXRManager( renderer, gl ) {\n\n\t\tvar scope = this;\n\n\t\tvar session = null;\n\n\t\t// var framebufferScaleFactor = 1.0;\n\n\t\tvar referenceSpace = null;\n\t\tvar referenceSpaceType = 'local-floor';\n\n\t\tvar pose = null;\n\n\t\tvar controllers = [];\n\t\tvar inputSourcesMap = new Map();\n\n\t\t//\n\n\t\tvar cameraL = new PerspectiveCamera();\n\t\tcameraL.layers.enable( 1 );\n\t\tcameraL.viewport = new Vector4();\n\n\t\tvar cameraR = new PerspectiveCamera();\n\t\tcameraR.layers.enable( 2 );\n\t\tcameraR.viewport = new Vector4();\n\n\t\tvar cameraVR = new ArrayCamera( [ cameraL, cameraR ] );\n\t\tcameraVR.layers.enable( 1 );\n\t\tcameraVR.layers.enable( 2 );\n\n\t\tvar _currentDepthNear = null;\n\t\tvar _currentDepthFar = null;\n\n\t\t//\n\n\t\tthis.enabled = false;\n\n\t\tthis.isPresenting = false;\n\n\t\tthis.getController = function ( id ) {\n\n\t\t\tvar controller = controllers[ id ];\n\n\t\t\tif ( controller === undefined ) {\n\n\t\t\t\tcontroller = {};\n\t\t\t\tcontrollers[ id ] = controller;\n\n\t\t\t}\n\n\t\t\tif ( controller.targetRay === undefined ) {\n\n\t\t\t\tcontroller.targetRay = new Group();\n\t\t\t\tcontroller.targetRay.matrixAutoUpdate = false;\n\t\t\t\tcontroller.targetRay.visible = false;\n\n\t\t\t}\n\n\t\t\treturn controller.targetRay;\n\n\t\t};\n\n\t\tthis.getControllerGrip = function ( id ) {\n\n\t\t\tvar controller = controllers[ id ];\n\n\t\t\tif ( controller === undefined ) {\n\n\t\t\t\tcontroller = {};\n\t\t\t\tcontrollers[ id ] = controller;\n\n\t\t\t}\n\n\t\t\tif ( controller.grip === undefined ) {\n\n\t\t\t\tcontroller.grip = new Group();\n\t\t\t\tcontroller.grip.matrixAutoUpdate = false;\n\t\t\t\tcontroller.grip.visible = false;\n\n\t\t\t}\n\n\t\t\treturn controller.grip;\n\n\t\t};\n\n\t\t//\n\n\t\tfunction onSessionEvent( event ) {\n\n\t\t\tvar controller = inputSourcesMap.get( event.inputSource );\n\n\t\t\tif ( controller ) {\n\n\t\t\t\tif ( controller.targetRay ) {\n\n\t\t\t\t\tcontroller.targetRay.dispatchEvent( { type: event.type } );\n\n\t\t\t\t}\n\n\t\t\t\tif ( controller.grip ) {\n\n\t\t\t\t\tcontroller.grip.dispatchEvent( { type: event.type } );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction onSessionEnd() {\n\n\t\t\tinputSourcesMap.forEach( function ( controller, inputSource ) {\n\n\t\t\t\tif ( controller.targetRay ) {\n\n\t\t\t\t\tcontroller.targetRay.dispatchEvent( { type: 'disconnected', data: inputSource } );\n\t\t\t\t\tcontroller.targetRay.visible = false;\n\n\t\t\t\t}\n\n\t\t\t\tif ( controller.grip ) {\n\n\t\t\t\t\tcontroller.grip.dispatchEvent( { type: 'disconnected', data: inputSource } );\n\t\t\t\t\tcontroller.grip.visible = false;\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\tinputSourcesMap.clear();\n\n\t\t\t//\n\n\t\t\trenderer.setFramebuffer( null );\n\t\t\trenderer.setRenderTarget( renderer.getRenderTarget() ); // Hack #15830\n\t\t\tanimation.stop();\n\n\t\t\tscope.isPresenting = false;\n\n\t\t\tscope.dispatchEvent( { type: 'sessionend' } );\n\n\t\t}\n\n\t\tfunction onRequestReferenceSpace( value ) {\n\n\t\t\treferenceSpace = value;\n\n\t\t\tanimation.setContext( session );\n\t\t\tanimation.start();\n\n\t\t\tscope.isPresenting = true;\n\n\t\t\tscope.dispatchEvent( { type: 'sessionstart' } );\n\n\t\t}\n\n\t\tthis.setFramebufferScaleFactor = function ( /* value */ ) {\n\n\t\t\t// framebufferScaleFactor = value;\n\n\t\t};\n\n\t\tthis.setReferenceSpaceType = function ( value ) {\n\n\t\t\treferenceSpaceType = value;\n\n\t\t};\n\n\t\tthis.getReferenceSpace = function () {\n\n\t\t\treturn referenceSpace;\n\n\t\t};\n\n\t\tthis.getSession = function () {\n\n\t\t\treturn session;\n\n\t\t};\n\n\t\tthis.setSession = function ( value ) {\n\n\t\t\tsession = value;\n\n\t\t\tif ( session !== null ) {\n\n\t\t\t\tsession.addEventListener( 'select', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'selectstart', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'selectend', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'squeeze', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'squeezestart', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'squeezeend', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'end', onSessionEnd );\n\n\t\t\t\tvar attributes = gl.getContextAttributes();\n\n\t\t\t\tvar layerInit = {\n\t\t\t\t\tantialias: attributes.antialias,\n\t\t\t\t\talpha: attributes.alpha,\n\t\t\t\t\tdepth: attributes.depth,\n\t\t\t\t\tstencil: attributes.stencil\n\t\t\t\t};\n\n\t\t\t\t// eslint-disable-next-line no-undef\n\t\t\t\tvar baseLayer = new XRWebGLLayer( session, gl, layerInit );\n\n\t\t\t\tsession.updateRenderState( { baseLayer: baseLayer } );\n\n\t\t\t\tsession.requestReferenceSpace( referenceSpaceType ).then( onRequestReferenceSpace );\n\n\t\t\t\t//\n\n\t\t\t\tsession.addEventListener( 'inputsourceschange', updateInputSources );\n\n\t\t\t}\n\n\t\t};\n\n\t\tfunction updateInputSources( event ) {\n\n\t\t\tvar inputSources = session.inputSources;\n\n\t\t\t// Assign inputSources to available controllers\n\n\t\t\tfor ( var i = 0; i < controllers.length; i ++ ) {\n\n\t\t\t\tinputSourcesMap.set( inputSources[ i ], controllers[ i ] );\n\n\t\t\t}\n\n\t\t\t// Notify disconnected\n\n\t\t\tfor ( var i = 0; i < event.removed.length; i ++ ) {\n\n\t\t\t\tvar inputSource = event.removed[ i ];\n\t\t\t\tvar controller = inputSourcesMap.get( inputSource );\n\n\t\t\t\tif ( controller ) {\n\n\t\t\t\t\tif ( controller.targetRay ) {\n\n\t\t\t\t\t\tcontroller.targetRay.dispatchEvent( { type: 'disconnected', data: inputSource } );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( controller.grip ) {\n\n\t\t\t\t\t\tcontroller.grip.dispatchEvent( { type: 'disconnected', data: inputSource } );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tinputSourcesMap.delete( inputSource );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Notify connected\n\n\t\t\tfor ( var i = 0; i < event.added.length; i ++ ) {\n\n\t\t\t\tvar inputSource = event.added[ i ];\n\t\t\t\tvar controller = inputSourcesMap.get( inputSource );\n\n\t\t\t\tif ( controller ) {\n\n\t\t\t\t\tif ( controller.targetRay ) {\n\n\t\t\t\t\t\tcontroller.targetRay.dispatchEvent( { type: 'connected', data: inputSource } );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( controller.grip ) {\n\n\t\t\t\t\t\tcontroller.grip.dispatchEvent( { type: 'connected', data: inputSource } );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tvar cameraLPos = new Vector3();\n\t\tvar cameraRPos = new Vector3();\n\n\t\t/**\n\t\t * @author jsantell / https://www.jsantell.com/\n\t\t *\n\t\t * Assumes 2 cameras that are parallel and share an X-axis, and that\n\t\t * the cameras' projection and world matrices have already been set.\n\t\t * And that near and far planes are identical for both cameras.\n\t\t * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765\n\t\t */\n\t\tfunction setProjectionFromUnion( camera, cameraL, cameraR ) {\n\n\t\t\tcameraLPos.setFromMatrixPosition( cameraL.matrixWorld );\n\t\t\tcameraRPos.setFromMatrixPosition( cameraR.matrixWorld );\n\n\t\t\tvar ipd = cameraLPos.distanceTo( cameraRPos );\n\n\t\t\tvar projL = cameraL.projectionMatrix.elements;\n\t\t\tvar projR = cameraR.projectionMatrix.elements;\n\n\t\t\t// VR systems will have identical far and near planes, and\n\t\t\t// most likely identical top and bottom frustum extents.\n\t\t\t// Use the left camera for these values.\n\t\t\tvar near = projL[ 14 ] / ( projL[ 10 ] - 1 );\n\t\t\tvar far = projL[ 14 ] / ( projL[ 10 ] + 1 );\n\t\t\tvar topFov = ( projL[ 9 ] + 1 ) / projL[ 5 ];\n\t\t\tvar bottomFov = ( projL[ 9 ] - 1 ) / projL[ 5 ];\n\n\t\t\tvar leftFov = ( projL[ 8 ] - 1 ) / projL[ 0 ];\n\t\t\tvar rightFov = ( projR[ 8 ] + 1 ) / projR[ 0 ];\n\t\t\tvar left = near * leftFov;\n\t\t\tvar right = near * rightFov;\n\n\t\t\t// Calculate the new camera's position offset from the\n\t\t\t// left camera. xOffset should be roughly half `ipd`.\n\t\t\tvar zOffset = ipd / ( - leftFov + rightFov );\n\t\t\tvar xOffset = zOffset * - leftFov;\n\n\t\t\t// TODO: Better way to apply this offset?\n\t\t\tcameraL.matrixWorld.decompose( camera.position, camera.quaternion, camera.scale );\n\t\t\tcamera.translateX( xOffset );\n\t\t\tcamera.translateZ( zOffset );\n\t\t\tcamera.matrixWorld.compose( camera.position, camera.quaternion, camera.scale );\n\t\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\n\n\t\t\t// Find the union of the frustum values of the cameras and scale\n\t\t\t// the values so that the near plane's position does not change in world space,\n\t\t\t// although must now be relative to the new union camera.\n\t\t\tvar near2 = near + zOffset;\n\t\t\tvar far2 = far + zOffset;\n\t\t\tvar left2 = left - xOffset;\n\t\t\tvar right2 = right + ( ipd - xOffset );\n\t\t\tvar top2 = topFov * far / far2 * near2;\n\t\t\tvar bottom2 = bottomFov * far / far2 * near2;\n\n\t\t\tcamera.projectionMatrix.makePerspective( left2, right2, top2, bottom2, near2, far2 );\n\n\t\t}\n\n\t\tfunction updateCamera( camera, parent ) {\n\n\t\t\tif ( parent === null ) {\n\n\t\t\t\tcamera.matrixWorld.copy( camera.matrix );\n\n\t\t\t} else {\n\n\t\t\t\tcamera.matrixWorld.multiplyMatrices( parent.matrixWorld, camera.matrix );\n\n\t\t\t}\n\n\t\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\n\n\t\t}\n\n\t\tthis.getCamera = function ( camera ) {\n\n\t\t\tcameraVR.near = cameraR.near = cameraL.near = camera.near;\n\t\t\tcameraVR.far = cameraR.far = cameraL.far = camera.far;\n\n\t\t\tif ( _currentDepthNear !== cameraVR.near || _currentDepthFar !== cameraVR.far ) {\n\n\t\t\t\t// Note that the new renderState won't apply until the next frame. See #18320\n\n\t\t\t\tsession.updateRenderState( {\n\t\t\t\t\tdepthNear: cameraVR.near,\n\t\t\t\t\tdepthFar: cameraVR.far\n\t\t\t\t} );\n\n\t\t\t\t_currentDepthNear = cameraVR.near;\n\t\t\t\t_currentDepthFar = cameraVR.far;\n\n\t\t\t}\n\n\t\t\tvar parent = camera.parent;\n\t\t\tvar cameras = cameraVR.cameras;\n\n\t\t\tupdateCamera( cameraVR, parent );\n\n\t\t\tfor ( var i = 0; i < cameras.length; i ++ ) {\n\n\t\t\t\tupdateCamera( cameras[ i ], parent );\n\n\t\t\t}\n\n\t\t\t// update camera and its children\n\n\t\t\tcamera.matrixWorld.copy( cameraVR.matrixWorld );\n\n\t\t\tvar children = camera.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].updateMatrixWorld( true );\n\n\t\t\t}\n\n\t\t\tsetProjectionFromUnion( cameraVR, cameraL, cameraR );\n\n\t\t\treturn cameraVR;\n\n\t\t};\n\n\t\t// Animation Loop\n\n\t\tvar onAnimationFrameCallback = null;\n\n\t\tfunction onAnimationFrame( time, frame ) {\n\n\t\t\tpose = frame.getViewerPose( referenceSpace );\n\n\t\t\tif ( pose !== null ) {\n\n\t\t\t\tvar views = pose.views;\n\t\t\t\tvar baseLayer = session.renderState.baseLayer;\n\n\t\t\t\trenderer.setFramebuffer( baseLayer.framebuffer );\n\n\t\t\t\tfor ( var i = 0; i < views.length; i ++ ) {\n\n\t\t\t\t\tvar view = views[ i ];\n\t\t\t\t\tvar viewport = baseLayer.getViewport( view );\n\n\t\t\t\t\tvar camera = cameraVR.cameras[ i ];\n\t\t\t\t\tcamera.matrix.fromArray( view.transform.matrix );\n\t\t\t\t\tcamera.projectionMatrix.fromArray( view.projectionMatrix );\n\t\t\t\t\tcamera.viewport.set( viewport.x, viewport.y, viewport.width, viewport.height );\n\n\t\t\t\t\tif ( i === 0 ) {\n\n\t\t\t\t\t\tcameraVR.matrix.copy( camera.matrix );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar inputSources = session.inputSources;\n\n\t\t\tfor ( var i = 0; i < controllers.length; i ++ ) {\n\n\t\t\t\tvar controller = controllers[ i ];\n\n\t\t\t\tvar inputSource = inputSources[ i ];\n\n\t\t\t\tvar inputPose = null;\n\t\t\t\tvar gripPose = null;\n\n\t\t\t\tif ( inputSource ) {\n\n\t\t\t\t\tif ( controller.targetRay ) {\n\n\t\t\t\t\t\tinputPose = frame.getPose( inputSource.targetRaySpace, referenceSpace );\n\n\t\t\t\t\t\tif ( inputPose !== null ) {\n\n\t\t\t\t\t\t\tcontroller.targetRay.matrix.fromArray( inputPose.transform.matrix );\n\t\t\t\t\t\t\tcontroller.targetRay.matrix.decompose( controller.targetRay.position, controller.targetRay.rotation, controller.targetRay.scale );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( controller.grip && inputSource.gripSpace ) {\n\n\t\t\t\t\t\tgripPose = frame.getPose( inputSource.gripSpace, referenceSpace );\n\n\t\t\t\t\t\tif ( gripPose !== null ) {\n\n\t\t\t\t\t\t\tcontroller.grip.matrix.fromArray( gripPose.transform.matrix );\n\t\t\t\t\t\t\tcontroller.grip.matrix.decompose( controller.grip.position, controller.grip.rotation, controller.grip.scale );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( controller.targetRay ) {\n\n\t\t\t\t\tcontroller.targetRay.visible = inputPose !== null;\n\n\t\t\t\t}\n\n\t\t\t\tif ( controller.grip ) {\n\n\t\t\t\t\tcontroller.grip.visible = gripPose !== null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( onAnimationFrameCallback ) { onAnimationFrameCallback( time, frame ); }\n\n\t\t}\n\n\t\tvar animation = new WebGLAnimation();\n\t\tanimation.setAnimationLoop( onAnimationFrame );\n\n\t\tthis.setAnimationLoop = function ( callback ) {\n\n\t\t\tonAnimationFrameCallback = callback;\n\n\t\t};\n\n\t\tthis.dispose = function () {};\n\n\t}\n\n\tObject.assign( WebXRManager.prototype, EventDispatcher.prototype );\n\n\t/**\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author szimek / https://github.com/szimek/\n\t * @author tschw\n\t */\n\n\tfunction WebGLRenderer( parameters ) {\n\n\t\tparameters = parameters || {};\n\n\t\tvar _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ),\n\t\t\t_context = parameters.context !== undefined ? parameters.context : null,\n\n\t\t\t_alpha = parameters.alpha !== undefined ? parameters.alpha : false,\n\t\t\t_depth = parameters.depth !== undefined ? parameters.depth : true,\n\t\t\t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\n\t\t\t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\n\t\t\t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\n\t\t\t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,\n\t\t\t_powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default',\n\t\t\t_failIfMajorPerformanceCaveat = parameters.failIfMajorPerformanceCaveat !== undefined ? parameters.failIfMajorPerformanceCaveat : false;\n\n\t\tvar currentRenderList = null;\n\t\tvar currentRenderState = null;\n\n\t\t// public properties\n\n\t\tthis.domElement = _canvas;\n\n\t\t// Debug configuration container\n\t\tthis.debug = {\n\n\t\t\t/**\n\t\t\t * Enables error checking and reporting when shader programs are being compiled\n\t\t\t * @type {boolean}\n\t\t\t */\n\t\t\tcheckShaderErrors: true\n\t\t};\n\n\t\t// clearing\n\n\t\tthis.autoClear = true;\n\t\tthis.autoClearColor = true;\n\t\tthis.autoClearDepth = true;\n\t\tthis.autoClearStencil = true;\n\n\t\t// scene graph\n\n\t\tthis.sortObjects = true;\n\n\t\t// user-defined clipping\n\n\t\tthis.clippingPlanes = [];\n\t\tthis.localClippingEnabled = false;\n\n\t\t// physically based shading\n\n\t\tthis.gammaFactor = 2.0;\t// for backwards compatibility\n\t\tthis.outputEncoding = LinearEncoding;\n\n\t\t// physical lights\n\n\t\tthis.physicallyCorrectLights = false;\n\n\t\t// tone mapping\n\n\t\tthis.toneMapping = LinearToneMapping;\n\t\tthis.toneMappingExposure = 1.0;\n\t\tthis.toneMappingWhitePoint = 1.0;\n\n\t\t// morphs\n\n\t\tthis.maxMorphTargets = 8;\n\t\tthis.maxMorphNormals = 4;\n\n\t\t// internal properties\n\n\t\tvar _this = this,\n\n\t\t\t_isContextLost = false,\n\n\t\t\t// internal state cache\n\n\t\t\t_framebuffer = null,\n\n\t\t\t_currentActiveCubeFace = 0,\n\t\t\t_currentActiveMipmapLevel = 0,\n\t\t\t_currentRenderTarget = null,\n\t\t\t_currentFramebuffer = null,\n\t\t\t_currentMaterialId = - 1,\n\n\t\t\t// geometry and program caching\n\n\t\t\t_currentGeometryProgram = {\n\t\t\t\tgeometry: null,\n\t\t\t\tprogram: null,\n\t\t\t\twireframe: false\n\t\t\t},\n\n\t\t\t_currentCamera = null,\n\t\t\t_currentArrayCamera = null,\n\n\t\t\t_currentViewport = new Vector4(),\n\t\t\t_currentScissor = new Vector4(),\n\t\t\t_currentScissorTest = null,\n\n\t\t\t//\n\n\t\t\t_width = _canvas.width,\n\t\t\t_height = _canvas.height,\n\n\t\t\t_pixelRatio = 1,\n\t\t\t_opaqueSort = null,\n\t\t\t_transparentSort = null,\n\n\t\t\t_viewport = new Vector4( 0, 0, _width, _height ),\n\t\t\t_scissor = new Vector4( 0, 0, _width, _height ),\n\t\t\t_scissorTest = false,\n\n\t\t\t// frustum\n\n\t\t\t_frustum = new Frustum(),\n\n\t\t\t// clipping\n\n\t\t\t_clipping = new WebGLClipping(),\n\t\t\t_clippingEnabled = false,\n\t\t\t_localClippingEnabled = false,\n\n\t\t\t// camera matrices cache\n\n\t\t\t_projScreenMatrix = new Matrix4(),\n\n\t\t\t_vector3 = new Vector3();\n\n\t\tfunction getTargetPixelRatio() {\n\n\t\t\treturn _currentRenderTarget === null ? _pixelRatio : 1;\n\n\t\t}\n\n\t\t// initialize\n\n\t\tvar _gl;\n\n\t\ttry {\n\n\t\t\tvar contextAttributes = {\n\t\t\t\talpha: _alpha,\n\t\t\t\tdepth: _depth,\n\t\t\t\tstencil: _stencil,\n\t\t\t\tantialias: _antialias,\n\t\t\t\tpremultipliedAlpha: _premultipliedAlpha,\n\t\t\t\tpreserveDrawingBuffer: _preserveDrawingBuffer,\n\t\t\t\tpowerPreference: _powerPreference,\n\t\t\t\tfailIfMajorPerformanceCaveat: _failIfMajorPerformanceCaveat,\n\t\t\t\txrCompatible: true\n\t\t\t};\n\n\t\t\t// event listeners must be registered before WebGL context is created, see #12753\n\n\t\t\t_canvas.addEventListener( 'webglcontextlost', onContextLost, false );\n\t\t\t_canvas.addEventListener( 'webglcontextrestored', onContextRestore, false );\n\n\t\t\t_gl = _context || _canvas.getContext( 'webgl', contextAttributes ) || _canvas.getContext( 'experimental-webgl', contextAttributes );\n\n\t\t\tif ( _gl === null ) {\n\n\t\t\t\tif ( _canvas.getContext( 'webgl' ) !== null ) {\n\n\t\t\t\t\tthrow new Error( 'Error creating WebGL context with your selected attributes.' );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow new Error( 'Error creating WebGL context.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Some experimental-webgl implementations do not have getShaderPrecisionFormat\n\n\t\t\tif ( _gl.getShaderPrecisionFormat === undefined ) {\n\n\t\t\t\t_gl.getShaderPrecisionFormat = function () {\n\n\t\t\t\t\treturn { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };\n\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLRenderer: ' + error.message );\n\t\t\tthrow error;\n\n\t\t}\n\n\t\tvar extensions, capabilities, state, info;\n\t\tvar properties, textures, attributes, geometries, objects;\n\t\tvar programCache, renderLists, renderStates;\n\n\t\tvar background, morphtargets, bufferRenderer, indexedBufferRenderer;\n\n\t\tvar utils;\n\n\t\tfunction initGLContext() {\n\n\t\t\textensions = new WebGLExtensions( _gl );\n\n\t\t\tcapabilities = new WebGLCapabilities( _gl, extensions, parameters );\n\n\t\t\tif ( capabilities.isWebGL2 === false ) {\n\n\t\t\t\textensions.get( 'WEBGL_depth_texture' );\n\t\t\t\textensions.get( 'OES_texture_float' );\n\t\t\t\textensions.get( 'OES_texture_half_float' );\n\t\t\t\textensions.get( 'OES_texture_half_float_linear' );\n\t\t\t\textensions.get( 'OES_standard_derivatives' );\n\t\t\t\textensions.get( 'OES_element_index_uint' );\n\t\t\t\textensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\t}\n\n\t\t\textensions.get( 'OES_texture_float_linear' );\n\n\t\t\tutils = new WebGLUtils( _gl, extensions, capabilities );\n\n\t\t\tstate = new WebGLState( _gl, extensions, capabilities );\n\t\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor() );\n\t\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor() );\n\n\t\t\tinfo = new WebGLInfo( _gl );\n\t\t\tproperties = new WebGLProperties();\n\t\t\ttextures = new WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info );\n\t\t\tattributes = new WebGLAttributes( _gl, capabilities );\n\t\t\tgeometries = new WebGLGeometries( _gl, attributes, info );\n\t\t\tobjects = new WebGLObjects( _gl, geometries, attributes, info );\n\t\t\tmorphtargets = new WebGLMorphtargets( _gl );\n\t\t\tprogramCache = new WebGLPrograms( _this, extensions, capabilities );\n\t\t\trenderLists = new WebGLRenderLists();\n\t\t\trenderStates = new WebGLRenderStates();\n\n\t\t\tbackground = new WebGLBackground( _this, state, objects, _premultipliedAlpha );\n\n\t\t\tbufferRenderer = new WebGLBufferRenderer( _gl, extensions, info, capabilities );\n\t\t\tindexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, info, capabilities );\n\n\t\t\tinfo.programs = programCache.programs;\n\n\t\t\t_this.capabilities = capabilities;\n\t\t\t_this.extensions = extensions;\n\t\t\t_this.properties = properties;\n\t\t\t_this.renderLists = renderLists;\n\t\t\t_this.state = state;\n\t\t\t_this.info = info;\n\n\t\t}\n\n\t\tinitGLContext();\n\n\t\t// xr\n\n\t\tvar xr = new WebXRManager( _this, _gl );\n\n\t\tthis.xr = xr;\n\n\t\t// Multiview\n\n\t\tvar multiview = new WebGLMultiview( _this, _gl );\n\n\t\t// shadow map\n\n\t\tvar shadowMap = new WebGLShadowMap( _this, objects, capabilities.maxTextureSize );\n\n\t\tthis.shadowMap = shadowMap;\n\n\t\t// API\n\n\t\tthis.getContext = function () {\n\n\t\t\treturn _gl;\n\n\t\t};\n\n\t\tthis.getContextAttributes = function () {\n\n\t\t\treturn _gl.getContextAttributes();\n\n\t\t};\n\n\t\tthis.forceContextLoss = function () {\n\n\t\t\tvar extension = extensions.get( 'WEBGL_lose_context' );\n\t\t\tif ( extension ) { extension.loseContext(); }\n\n\t\t};\n\n\t\tthis.forceContextRestore = function () {\n\n\t\t\tvar extension = extensions.get( 'WEBGL_lose_context' );\n\t\t\tif ( extension ) { extension.restoreContext(); }\n\n\t\t};\n\n\t\tthis.getPixelRatio = function () {\n\n\t\t\treturn _pixelRatio;\n\n\t\t};\n\n\t\tthis.setPixelRatio = function ( value ) {\n\n\t\t\tif ( value === undefined ) { return; }\n\n\t\t\t_pixelRatio = value;\n\n\t\t\tthis.setSize( _width, _height, false );\n\n\t\t};\n\n\t\tthis.getSize = function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'WebGLRenderer: .getsize() now requires a Vector2 as an argument' );\n\n\t\t\t\ttarget = new Vector2();\n\n\t\t\t}\n\n\t\t\treturn target.set( _width, _height );\n\n\t\t};\n\n\t\tthis.setSize = function ( width, height, updateStyle ) {\n\n\t\t\tif ( xr.isPresenting ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Can\\'t change size while VR device is presenting.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t_width = width;\n\t\t\t_height = height;\n\n\t\t\t_canvas.width = Math.floor( width * _pixelRatio );\n\t\t\t_canvas.height = Math.floor( height * _pixelRatio );\n\n\t\t\tif ( updateStyle !== false ) {\n\n\t\t\t\t_canvas.style.width = width + 'px';\n\t\t\t\t_canvas.style.height = height + 'px';\n\n\t\t\t}\n\n\t\t\tthis.setViewport( 0, 0, width, height );\n\n\t\t};\n\n\t\tthis.getDrawingBufferSize = function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument' );\n\n\t\t\t\ttarget = new Vector2();\n\n\t\t\t}\n\n\t\t\treturn target.set( _width * _pixelRatio, _height * _pixelRatio ).floor();\n\n\t\t};\n\n\t\tthis.setDrawingBufferSize = function ( width, height, pixelRatio ) {\n\n\t\t\t_width = width;\n\t\t\t_height = height;\n\n\t\t\t_pixelRatio = pixelRatio;\n\n\t\t\t_canvas.width = Math.floor( width * pixelRatio );\n\t\t\t_canvas.height = Math.floor( height * pixelRatio );\n\n\t\t\tthis.setViewport( 0, 0, width, height );\n\n\t\t};\n\n\t\tthis.getCurrentViewport = function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument' );\n\n\t\t\t\ttarget = new Vector4();\n\n\t\t\t}\n\n\t\t\treturn target.copy( _currentViewport );\n\n\t\t};\n\n\t\tthis.getViewport = function ( target ) {\n\n\t\t\treturn target.copy( _viewport );\n\n\t\t};\n\n\t\tthis.setViewport = function ( x, y, width, height ) {\n\n\t\t\tif ( x.isVector4 ) {\n\n\t\t\t\t_viewport.set( x.x, x.y, x.z, x.w );\n\n\t\t\t} else {\n\n\t\t\t\t_viewport.set( x, y, width, height );\n\n\t\t\t}\n\n\t\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor() );\n\n\t\t};\n\n\t\tthis.getScissor = function ( target ) {\n\n\t\t\treturn target.copy( _scissor );\n\n\t\t};\n\n\t\tthis.setScissor = function ( x, y, width, height ) {\n\n\t\t\tif ( x.isVector4 ) {\n\n\t\t\t\t_scissor.set( x.x, x.y, x.z, x.w );\n\n\t\t\t} else {\n\n\t\t\t\t_scissor.set( x, y, width, height );\n\n\t\t\t}\n\n\t\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor() );\n\n\t\t};\n\n\t\tthis.getScissorTest = function () {\n\n\t\t\treturn _scissorTest;\n\n\t\t};\n\n\t\tthis.setScissorTest = function ( boolean ) {\n\n\t\t\tstate.setScissorTest( _scissorTest = boolean );\n\n\t\t};\n\n\t\tthis.setOpaqueSort = function ( method ) {\n\n\t\t\t_opaqueSort = method;\n\n\t\t};\n\n\t\tthis.setTransparentSort = function ( method ) {\n\n\t\t\t_transparentSort = method;\n\n\t\t};\n\n\t\t// Clearing\n\n\t\tthis.getClearColor = function () {\n\n\t\t\treturn background.getClearColor();\n\n\t\t};\n\n\t\tthis.setClearColor = function () {\n\n\t\t\tbackground.setClearColor.apply( background, arguments );\n\n\t\t};\n\n\t\tthis.getClearAlpha = function () {\n\n\t\t\treturn background.getClearAlpha();\n\n\t\t};\n\n\t\tthis.setClearAlpha = function () {\n\n\t\t\tbackground.setClearAlpha.apply( background, arguments );\n\n\t\t};\n\n\t\tthis.clear = function ( color, depth, stencil ) {\n\n\t\t\tvar bits = 0;\n\n\t\t\tif ( color === undefined || color ) { bits |= 16384; }\n\t\t\tif ( depth === undefined || depth ) { bits |= 256; }\n\t\t\tif ( stencil === undefined || stencil ) { bits |= 1024; }\n\n\t\t\t_gl.clear( bits );\n\n\t\t};\n\n\t\tthis.clearColor = function () {\n\n\t\t\tthis.clear( true, false, false );\n\n\t\t};\n\n\t\tthis.clearDepth = function () {\n\n\t\t\tthis.clear( false, true, false );\n\n\t\t};\n\n\t\tthis.clearStencil = function () {\n\n\t\t\tthis.clear( false, false, true );\n\n\t\t};\n\n\t\t//\n\n\t\tthis.dispose = function () {\n\n\t\t\t_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );\n\t\t\t_canvas.removeEventListener( 'webglcontextrestored', onContextRestore, false );\n\n\t\t\trenderLists.dispose();\n\t\t\trenderStates.dispose();\n\t\t\tproperties.dispose();\n\t\t\tobjects.dispose();\n\n\t\t\txr.dispose();\n\n\t\t\tanimation.stop();\n\n\t\t};\n\n\t\t// Events\n\n\t\tfunction onContextLost( event ) {\n\n\t\t\tevent.preventDefault();\n\n\t\t\tconsole.log( 'THREE.WebGLRenderer: Context Lost.' );\n\n\t\t\t_isContextLost = true;\n\n\t\t}\n\n\t\tfunction onContextRestore( /* event */ ) {\n\n\t\t\tconsole.log( 'THREE.WebGLRenderer: Context Restored.' );\n\n\t\t\t_isContextLost = false;\n\n\t\t\tinitGLContext();\n\n\t\t}\n\n\t\tfunction onMaterialDispose( event ) {\n\n\t\t\tvar material = event.target;\n\n\t\t\tmaterial.removeEventListener( 'dispose', onMaterialDispose );\n\n\t\t\tdeallocateMaterial( material );\n\n\t\t}\n\n\t\t// Buffer deallocation\n\n\t\tfunction deallocateMaterial( material ) {\n\n\t\t\treleaseMaterialProgramReference( material );\n\n\t\t\tproperties.remove( material );\n\n\t\t}\n\n\n\t\tfunction releaseMaterialProgramReference( material ) {\n\n\t\t\tvar programInfo = properties.get( material ).program;\n\n\t\t\tmaterial.program = undefined;\n\n\t\t\tif ( programInfo !== undefined ) {\n\n\t\t\t\tprogramCache.releaseProgram( programInfo );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Buffer rendering\n\n\t\tfunction renderObjectImmediate( object, program ) {\n\n\t\t\tobject.render( function ( object ) {\n\n\t\t\t\t_this.renderBufferImmediate( object, program );\n\n\t\t\t} );\n\n\t\t}\n\n\t\tthis.renderBufferImmediate = function ( object, program ) {\n\n\t\t\tstate.initAttributes();\n\n\t\t\tvar buffers = properties.get( object );\n\n\t\t\tif ( object.hasPositions && ! buffers.position ) { buffers.position = _gl.createBuffer(); }\n\t\t\tif ( object.hasNormals && ! buffers.normal ) { buffers.normal = _gl.createBuffer(); }\n\t\t\tif ( object.hasUvs && ! buffers.uv ) { buffers.uv = _gl.createBuffer(); }\n\t\t\tif ( object.hasColors && ! buffers.color ) { buffers.color = _gl.createBuffer(); }\n\n\t\t\tvar programAttributes = program.getAttributes();\n\n\t\t\tif ( object.hasPositions ) {\n\n\t\t\t\t_gl.bindBuffer( 34962, buffers.position );\n\t\t\t\t_gl.bufferData( 34962, object.positionArray, 35048 );\n\n\t\t\t\tstate.enableAttribute( programAttributes.position );\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.position, 3, 5126, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( object.hasNormals ) {\n\n\t\t\t\t_gl.bindBuffer( 34962, buffers.normal );\n\t\t\t\t_gl.bufferData( 34962, object.normalArray, 35048 );\n\n\t\t\t\tstate.enableAttribute( programAttributes.normal );\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.normal, 3, 5126, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( object.hasUvs ) {\n\n\t\t\t\t_gl.bindBuffer( 34962, buffers.uv );\n\t\t\t\t_gl.bufferData( 34962, object.uvArray, 35048 );\n\n\t\t\t\tstate.enableAttribute( programAttributes.uv );\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.uv, 2, 5126, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( object.hasColors ) {\n\n\t\t\t\t_gl.bindBuffer( 34962, buffers.color );\n\t\t\t\t_gl.bufferData( 34962, object.colorArray, 35048 );\n\n\t\t\t\tstate.enableAttribute( programAttributes.color );\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.color, 3, 5126, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\tstate.disableUnusedAttributes();\n\n\t\t\t_gl.drawArrays( 4, 0, object.count );\n\n\t\t\tobject.count = 0;\n\n\t\t};\n\n\t\tvar tempScene = new Scene();\n\n\t\tthis.renderBufferDirect = function ( camera, scene, geometry, material, object, group ) {\n\n\t\t\tif ( scene === null ) { scene = tempScene; } // renderBufferDirect second parameter used to be fog (could be null)\n\n\t\t\tvar frontFaceCW = ( object.isMesh && object.matrixWorld.determinant() < 0 );\n\n\t\t\tvar program = setProgram( camera, scene, material, object );\n\n\t\t\tstate.setMaterial( material, frontFaceCW );\n\n\t\t\tvar updateBuffers = false;\n\n\t\t\tif ( _currentGeometryProgram.geometry !== geometry.id ||\n\t\t\t\t_currentGeometryProgram.program !== program.id ||\n\t\t\t\t_currentGeometryProgram.wireframe !== ( material.wireframe === true ) ) {\n\n\t\t\t\t_currentGeometryProgram.geometry = geometry.id;\n\t\t\t\t_currentGeometryProgram.program = program.id;\n\t\t\t\t_currentGeometryProgram.wireframe = material.wireframe === true;\n\t\t\t\tupdateBuffers = true;\n\n\t\t\t}\n\n\t\t\tif ( material.morphTargets || material.morphNormals ) {\n\n\t\t\t\tmorphtargets.update( object, geometry, material, program );\n\n\t\t\t\tupdateBuffers = true;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar index = geometry.index;\n\t\t\tvar position = geometry.attributes.position;\n\n\t\t\t//\n\n\t\t\tif ( index === null ) {\n\n\t\t\t\tif ( position === undefined || position.count === 0 ) { return; }\n\n\t\t\t} else if ( index.count === 0 ) {\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar rangeFactor = 1;\n\n\t\t\tif ( material.wireframe === true ) {\n\n\t\t\t\tindex = geometries.getWireframeAttribute( geometry );\n\t\t\t\trangeFactor = 2;\n\n\t\t\t}\n\n\t\t\tvar attribute;\n\t\t\tvar renderer = bufferRenderer;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tattribute = attributes.get( index );\n\n\t\t\t\trenderer = indexedBufferRenderer;\n\t\t\t\trenderer.setIndex( attribute );\n\n\t\t\t}\n\n\t\t\tif ( updateBuffers ) {\n\n\t\t\t\tsetupVertexAttributes( object, geometry, material, program );\n\n\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\t_gl.bindBuffer( 34963, attribute.buffer );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar dataCount = ( index !== null ) ? index.count : position.count;\n\n\t\t\tvar rangeStart = geometry.drawRange.start * rangeFactor;\n\t\t\tvar rangeCount = geometry.drawRange.count * rangeFactor;\n\n\t\t\tvar groupStart = group !== null ? group.start * rangeFactor : 0;\n\t\t\tvar groupCount = group !== null ? group.count * rangeFactor : Infinity;\n\n\t\t\tvar drawStart = Math.max( rangeStart, groupStart );\n\t\t\tvar drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;\n\n\t\t\tvar drawCount = Math.max( 0, drawEnd - drawStart + 1 );\n\n\t\t\tif ( drawCount === 0 ) { return; }\n\n\t\t\t//\n\n\t\t\tif ( object.isMesh ) {\n\n\t\t\t\tif ( material.wireframe === true ) {\n\n\t\t\t\t\tstate.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );\n\t\t\t\t\trenderer.setMode( 1 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\trenderer.setMode( 4 );\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isLine ) {\n\n\t\t\t\tvar lineWidth = material.linewidth;\n\n\t\t\t\tif ( lineWidth === undefined ) { lineWidth = 1; } // Not using Line*Material\n\n\t\t\t\tstate.setLineWidth( lineWidth * getTargetPixelRatio() );\n\n\t\t\t\tif ( object.isLineSegments ) {\n\n\t\t\t\t\trenderer.setMode( 1 );\n\n\t\t\t\t} else if ( object.isLineLoop ) {\n\n\t\t\t\t\trenderer.setMode( 2 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\trenderer.setMode( 3 );\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isPoints ) {\n\n\t\t\t\trenderer.setMode( 0 );\n\n\t\t\t} else if ( object.isSprite ) {\n\n\t\t\t\trenderer.setMode( 4 );\n\n\t\t\t}\n\n\t\t\tif ( object.isInstancedMesh ) {\n\n\t\t\t\trenderer.renderInstances( geometry, drawStart, drawCount, object.count );\n\n\t\t\t} else if ( geometry.isInstancedBufferGeometry ) {\n\n\t\t\t\trenderer.renderInstances( geometry, drawStart, drawCount, geometry.maxInstancedCount );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.render( drawStart, drawCount );\n\n\t\t\t}\n\n\t\t};\n\n\t\tfunction setupVertexAttributes( object, geometry, material, program ) {\n\n\t\t\tif ( capabilities.isWebGL2 === false && ( object.isInstancedMesh || geometry.isInstancedBufferGeometry ) ) {\n\n\t\t\t\tif ( extensions.get( 'ANGLE_instanced_arrays' ) === null ) { return; }\n\n\t\t\t}\n\n\t\t\tstate.initAttributes();\n\n\t\t\tvar geometryAttributes = geometry.attributes;\n\n\t\t\tvar programAttributes = program.getAttributes();\n\n\t\t\tvar materialDefaultAttributeValues = material.defaultAttributeValues;\n\n\t\t\tfor ( var name in programAttributes ) {\n\n\t\t\t\tvar programAttribute = programAttributes[ name ];\n\n\t\t\t\tif ( programAttribute >= 0 ) {\n\n\t\t\t\t\tvar geometryAttribute = geometryAttributes[ name ];\n\n\t\t\t\t\tif ( geometryAttribute !== undefined ) {\n\n\t\t\t\t\t\tvar normalized = geometryAttribute.normalized;\n\t\t\t\t\t\tvar size = geometryAttribute.itemSize;\n\n\t\t\t\t\t\tvar attribute = attributes.get( geometryAttribute );\n\n\t\t\t\t\t\t// TODO Attribute may not be available on context restore\n\n\t\t\t\t\t\tif ( attribute === undefined ) { continue; }\n\n\t\t\t\t\t\tvar buffer = attribute.buffer;\n\t\t\t\t\t\tvar type = attribute.type;\n\t\t\t\t\t\tvar bytesPerElement = attribute.bytesPerElement;\n\n\t\t\t\t\t\tif ( geometryAttribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\t\t\t\tvar data = geometryAttribute.data;\n\t\t\t\t\t\t\tvar stride = data.stride;\n\t\t\t\t\t\t\tvar offset = geometryAttribute.offset;\n\n\t\t\t\t\t\t\tif ( data && data.isInstancedInterleavedBuffer ) {\n\n\t\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute );\n\n\t\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\n\n\t\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = data.meshPerAttribute * data.count;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t_gl.bindBuffer( 34962, buffer );\n\t\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, stride * bytesPerElement, offset * bytesPerElement );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( geometryAttribute.isInstancedBufferAttribute ) {\n\n\t\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute );\n\n\t\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\n\n\t\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t_gl.bindBuffer( 34962, buffer );\n\t\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, 0, 0 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( name === 'instanceMatrix' ) {\n\n\t\t\t\t\t\tvar attribute = attributes.get( object.instanceMatrix );\n\n\t\t\t\t\t\t// TODO Attribute may not be available on context restore\n\n\t\t\t\t\t\tif ( attribute === undefined ) { continue; }\n\n\t\t\t\t\t\tvar buffer = attribute.buffer;\n\t\t\t\t\t\tvar type = attribute.type;\n\n\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute + 0, 1 );\n\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute + 1, 1 );\n\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute + 2, 1 );\n\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute + 3, 1 );\n\n\t\t\t\t\t\t_gl.bindBuffer( 34962, buffer );\n\n\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute + 0, 4, type, false, 64, 0 );\n\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute + 1, 4, type, false, 64, 16 );\n\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute + 2, 4, type, false, 64, 32 );\n\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute + 3, 4, type, false, 64, 48 );\n\n\t\t\t\t\t} else if ( materialDefaultAttributeValues !== undefined ) {\n\n\t\t\t\t\t\tvar value = materialDefaultAttributeValues[ name ];\n\n\t\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\t\tswitch ( value.length ) {\n\n\t\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib2fv( programAttribute, value );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib3fv( programAttribute, value );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib4fv( programAttribute, value );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib1fv( programAttribute, value );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.disableUnusedAttributes();\n\n\t\t}\n\n\t\t// Compile\n\n\t\tthis.compile = function ( scene, camera ) {\n\n\t\t\tcurrentRenderState = renderStates.get( scene, camera );\n\t\t\tcurrentRenderState.init();\n\n\t\t\tscene.traverse( function ( object ) {\n\n\t\t\t\tif ( object.isLight ) {\n\n\t\t\t\t\tcurrentRenderState.pushLight( object );\n\n\t\t\t\t\tif ( object.castShadow ) {\n\n\t\t\t\t\t\tcurrentRenderState.pushShadow( object );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\tcurrentRenderState.setupLights( camera );\n\n\t\t\tvar compiled = {};\n\n\t\t\tscene.traverse( function ( object ) {\n\n\t\t\t\tif ( object.material ) {\n\n\t\t\t\t\tif ( Array.isArray( object.material ) ) {\n\n\t\t\t\t\t\tfor ( var i = 0; i < object.material.length; i ++ ) {\n\n\t\t\t\t\t\t\tif ( object.material[ i ].uuid in compiled === false ) {\n\n\t\t\t\t\t\t\t\tinitMaterial( object.material[ i ], scene, object );\n\t\t\t\t\t\t\t\tcompiled[ object.material[ i ].uuid ] = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( object.material.uuid in compiled === false ) {\n\n\t\t\t\t\t\tinitMaterial( object.material, scene, object );\n\t\t\t\t\t\tcompiled[ object.material.uuid ] = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t};\n\n\t\t// Animation Loop\n\n\t\tvar onAnimationFrameCallback = null;\n\n\t\tfunction onAnimationFrame( time ) {\n\n\t\t\tif ( xr.isPresenting ) { return; }\n\t\t\tif ( onAnimationFrameCallback ) { onAnimationFrameCallback( time ); }\n\n\t\t}\n\n\t\tvar animation = new WebGLAnimation();\n\t\tanimation.setAnimationLoop( onAnimationFrame );\n\n\t\tif ( typeof window !== 'undefined' ) { animation.setContext( window ); }\n\n\t\tthis.setAnimationLoop = function ( callback ) {\n\n\t\t\tonAnimationFrameCallback = callback;\n\t\t\txr.setAnimationLoop( callback );\n\n\t\t\tanimation.start();\n\n\t\t};\n\n\t\t// Rendering\n\n\t\tthis.render = function ( scene, camera ) {\n\n\t\t\tvar renderTarget, forceClear;\n\n\t\t\tif ( arguments[ 2 ] !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead.' );\n\t\t\t\trenderTarget = arguments[ 2 ];\n\n\t\t\t}\n\n\t\t\tif ( arguments[ 3 ] !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead.' );\n\t\t\t\tforceClear = arguments[ 3 ];\n\n\t\t\t}\n\n\t\t\tif ( ! ( camera && camera.isCamera ) ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( _isContextLost ) { return; }\n\n\t\t\t// reset caching for this frame\n\n\t\t\t_currentGeometryProgram.geometry = null;\n\t\t\t_currentGeometryProgram.program = null;\n\t\t\t_currentGeometryProgram.wireframe = false;\n\t\t\t_currentMaterialId = - 1;\n\t\t\t_currentCamera = null;\n\n\t\t\t// update scene graph\n\n\t\t\tif ( scene.autoUpdate === true ) { scene.updateMatrixWorld(); }\n\n\t\t\t// update camera matrices and frustum\n\n\t\t\tif ( camera.parent === null ) { camera.updateMatrixWorld(); }\n\n\t\t\tif ( xr.enabled && xr.isPresenting ) {\n\n\t\t\t\tcamera = xr.getCamera( camera );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tcurrentRenderState = renderStates.get( scene, camera );\n\t\t\tcurrentRenderState.init();\n\n\t\t\tscene.onBeforeRender( _this, scene, camera, renderTarget || _currentRenderTarget );\n\n\t\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t\t\t_frustum.setFromProjectionMatrix( _projScreenMatrix );\n\n\t\t\t_localClippingEnabled = this.localClippingEnabled;\n\t\t\t_clippingEnabled = _clipping.init( this.clippingPlanes, _localClippingEnabled, camera );\n\n\t\t\tcurrentRenderList = renderLists.get( scene, camera );\n\t\t\tcurrentRenderList.init();\n\n\t\t\tprojectObject( scene, camera, 0, _this.sortObjects );\n\n\t\t\tif ( _this.sortObjects === true ) {\n\n\t\t\t\tcurrentRenderList.sort( _opaqueSort, _transparentSort );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( _clippingEnabled ) { _clipping.beginShadows(); }\n\n\t\t\tvar shadowsArray = currentRenderState.state.shadowsArray;\n\n\t\t\tshadowMap.render( shadowsArray, scene, camera );\n\n\t\t\tcurrentRenderState.setupLights( camera );\n\n\t\t\tif ( _clippingEnabled ) { _clipping.endShadows(); }\n\n\t\t\t//\n\n\t\t\tif ( this.info.autoReset ) { this.info.reset(); }\n\n\t\t\tif ( renderTarget !== undefined ) {\n\n\t\t\t\tthis.setRenderTarget( renderTarget );\n\n\t\t\t}\n\n\t\t\tif ( xr.enabled && multiview.isAvailable() ) {\n\n\t\t\t\tmultiview.attachCamera( camera );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tbackground.render( currentRenderList, scene, camera, forceClear );\n\n\t\t\t// render scene\n\n\t\t\tvar opaqueObjects = currentRenderList.opaque;\n\t\t\tvar transparentObjects = currentRenderList.transparent;\n\n\t\t\tif ( scene.overrideMaterial ) {\n\n\t\t\t\tvar overrideMaterial = scene.overrideMaterial;\n\n\t\t\t\tif ( opaqueObjects.length ) { renderObjects( opaqueObjects, scene, camera, overrideMaterial ); }\n\t\t\t\tif ( transparentObjects.length ) { renderObjects( transparentObjects, scene, camera, overrideMaterial ); }\n\n\t\t\t} else {\n\n\t\t\t\t// opaque pass (front-to-back order)\n\n\t\t\t\tif ( opaqueObjects.length ) { renderObjects( opaqueObjects, scene, camera ); }\n\n\t\t\t\t// transparent pass (back-to-front order)\n\n\t\t\t\tif ( transparentObjects.length ) { renderObjects( transparentObjects, scene, camera ); }\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tscene.onAfterRender( _this, scene, camera );\n\n\t\t\t//\n\n\t\t\tif ( _currentRenderTarget !== null ) {\n\n\t\t\t\t// Generate mipmap if we're using any kind of mipmap filtering\n\n\t\t\t\ttextures.updateRenderTargetMipmap( _currentRenderTarget );\n\n\t\t\t\t// resolve multisample renderbuffers to a single-sample texture if necessary\n\n\t\t\t\ttextures.updateMultisampleRenderTarget( _currentRenderTarget );\n\n\t\t\t}\n\n\t\t\t// Ensure depth buffer writing is enabled so it can be cleared on next render\n\n\t\t\tstate.buffers.depth.setTest( true );\n\t\t\tstate.buffers.depth.setMask( true );\n\t\t\tstate.buffers.color.setMask( true );\n\n\t\t\tstate.setPolygonOffset( false );\n\n\t\t\tif ( xr.enabled ) {\n\n\t\t\t\tif ( multiview.isAvailable() ) {\n\n\t\t\t\t\tmultiview.detachCamera( camera );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// _gl.finish();\n\n\t\t\tcurrentRenderList = null;\n\t\t\tcurrentRenderState = null;\n\n\t\t};\n\n\t\tfunction projectObject( object, camera, groupOrder, sortObjects ) {\n\n\t\t\tif ( object.visible === false ) { return; }\n\n\t\t\tvar visible = object.layers.test( camera.layers );\n\n\t\t\tif ( visible ) {\n\n\t\t\t\tif ( object.isGroup ) {\n\n\t\t\t\t\tgroupOrder = object.renderOrder;\n\n\t\t\t\t} else if ( object.isLOD ) {\n\n\t\t\t\t\tif ( object.autoUpdate === true ) { object.update( camera ); }\n\n\t\t\t\t} else if ( object.isLight ) {\n\n\t\t\t\t\tcurrentRenderState.pushLight( object );\n\n\t\t\t\t\tif ( object.castShadow ) {\n\n\t\t\t\t\t\tcurrentRenderState.pushShadow( object );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( object.isSprite ) {\n\n\t\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsSprite( object ) ) {\n\n\t\t\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar geometry = objects.update( object );\n\t\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\t\tif ( material.visible ) {\n\n\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( object.isImmediateRenderObject ) {\n\n\t\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentRenderList.push( object, null, object.material, groupOrder, _vector3.z, null );\n\n\t\t\t\t} else if ( object.isMesh || object.isLine || object.isPoints ) {\n\n\t\t\t\t\tif ( object.isSkinnedMesh ) {\n\n\t\t\t\t\t\t// update skeleton only once in a frame\n\n\t\t\t\t\t\tif ( object.skeleton.frame !== info.render.frame ) {\n\n\t\t\t\t\t\t\tobject.skeleton.update();\n\t\t\t\t\t\t\tobject.skeleton.frame = info.render.frame;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) {\n\n\t\t\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar geometry = objects.update( object );\n\t\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\t\tvar groups = geometry.groups;\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\t\tvar group = groups[ i ];\n\t\t\t\t\t\t\t\tvar groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\n\n\t\t\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry, groupMaterial, groupOrder, _vector3.z, group );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else if ( material.visible ) {\n\n\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tprojectObject( children[ i ], camera, groupOrder, sortObjects );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction renderObjects( renderList, scene, camera, overrideMaterial ) {\n\n\t\t\tfor ( var i = 0, l = renderList.length; i < l; i ++ ) {\n\n\t\t\t\tvar renderItem = renderList[ i ];\n\n\t\t\t\tvar object = renderItem.object;\n\t\t\t\tvar geometry = renderItem.geometry;\n\t\t\t\tvar material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;\n\t\t\t\tvar group = renderItem.group;\n\n\t\t\t\tif ( camera.isArrayCamera ) {\n\n\t\t\t\t\t_currentArrayCamera = camera;\n\n\t\t\t\t\tif ( xr.enabled && multiview.isAvailable() ) {\n\n\t\t\t\t\t\trenderObject( object, scene, camera, geometry, material, group );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tvar cameras = camera.cameras;\n\n\t\t\t\t\t\tfor ( var j = 0, jl = cameras.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\tvar camera2 = cameras[ j ];\n\n\t\t\t\t\t\t\tif ( object.layers.test( camera2.layers ) ) {\n\n\t\t\t\t\t\t\t\tstate.viewport( _currentViewport.copy( camera2.viewport ) );\n\n\t\t\t\t\t\t\t\tcurrentRenderState.setupLights( camera2 );\n\n\t\t\t\t\t\t\t\trenderObject( object, scene, camera2, geometry, material, group );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_currentArrayCamera = null;\n\n\t\t\t\t\trenderObject( object, scene, camera, geometry, material, group );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction renderObject( object, scene, camera, geometry, material, group ) {\n\n\t\t\tobject.onBeforeRender( _this, scene, camera, geometry, material, group );\n\t\t\tcurrentRenderState = renderStates.get( scene, _currentArrayCamera || camera );\n\n\t\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\n\t\t\tobject.normalMatrix.getNormalMatrix( object.modelViewMatrix );\n\n\t\t\tif ( object.isImmediateRenderObject ) {\n\n\t\t\t\tvar program = setProgram( camera, scene, material, object );\n\n\t\t\t\tstate.setMaterial( material );\n\n\t\t\t\t_currentGeometryProgram.geometry = null;\n\t\t\t\t_currentGeometryProgram.program = null;\n\t\t\t\t_currentGeometryProgram.wireframe = false;\n\n\t\t\t\trenderObjectImmediate( object, program );\n\n\t\t\t} else {\n\n\t\t\t\t_this.renderBufferDirect( camera, scene, geometry, material, object, group );\n\n\t\t\t}\n\n\t\t\tobject.onAfterRender( _this, scene, camera, geometry, material, group );\n\t\t\tcurrentRenderState = renderStates.get( scene, _currentArrayCamera || camera );\n\n\t\t}\n\n\t\tfunction initMaterial( material, scene, object ) {\n\n\t\t\tvar materialProperties = properties.get( material );\n\n\t\t\tvar lights = currentRenderState.state.lights;\n\t\t\tvar shadowsArray = currentRenderState.state.shadowsArray;\n\n\t\t\tvar lightsStateVersion = lights.state.version;\n\n\t\t\tvar parameters = programCache.getParameters( material, lights.state, shadowsArray, scene, _clipping.numPlanes, _clipping.numIntersection, object );\n\t\t\tvar programCacheKey = programCache.getProgramCacheKey( parameters );\n\n\t\t\tvar program = materialProperties.program;\n\t\t\tvar programChange = true;\n\n\t\t\tif ( program === undefined ) {\n\n\t\t\t\t// new material\n\t\t\t\tmaterial.addEventListener( 'dispose', onMaterialDispose );\n\n\t\t\t} else if ( program.cacheKey !== programCacheKey ) {\n\n\t\t\t\t// changed glsl or parameters\n\t\t\t\treleaseMaterialProgramReference( material );\n\n\t\t\t} else if ( materialProperties.lightsStateVersion !== lightsStateVersion ) {\n\n\t\t\t\tmaterialProperties.lightsStateVersion = lightsStateVersion;\n\n\t\t\t\tprogramChange = false;\n\n\t\t\t} else if ( parameters.shaderID !== undefined ) {\n\n\t\t\t\t// same glsl and uniform list\n\t\t\t\treturn;\n\n\t\t\t} else {\n\n\t\t\t\t// only rebuild uniform list\n\t\t\t\tprogramChange = false;\n\n\t\t\t}\n\n\t\t\tif ( programChange ) {\n\n\t\t\t\tprogram = programCache.acquireProgram( parameters, programCacheKey );\n\n\t\t\t\tmaterialProperties.program = program;\n\t\t\t\tmaterialProperties.uniforms = parameters.uniforms;\n\t\t\t\tmaterialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\t\t\tmaterialProperties.outputEncoding = _this.outputEncoding;\n\t\t\t\tmaterial.program = program;\n\n\t\t\t}\n\n\t\t\tvar programAttributes = program.getAttributes();\n\n\t\t\tif ( material.morphTargets ) {\n\n\t\t\t\tmaterial.numSupportedMorphTargets = 0;\n\n\t\t\t\tfor ( var i = 0; i < _this.maxMorphTargets; i ++ ) {\n\n\t\t\t\t\tif ( programAttributes[ 'morphTarget' + i ] >= 0 ) {\n\n\t\t\t\t\t\tmaterial.numSupportedMorphTargets ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material.morphNormals ) {\n\n\t\t\t\tmaterial.numSupportedMorphNormals = 0;\n\n\t\t\t\tfor ( var i = 0; i < _this.maxMorphNormals; i ++ ) {\n\n\t\t\t\t\tif ( programAttributes[ 'morphNormal' + i ] >= 0 ) {\n\n\t\t\t\t\t\tmaterial.numSupportedMorphNormals ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar uniforms = materialProperties.uniforms;\n\n\t\t\tif ( ! material.isShaderMaterial &&\n\t\t\t\t! material.isRawShaderMaterial ||\n\t\t\t\tmaterial.clipping === true ) {\n\n\t\t\t\tmaterialProperties.numClippingPlanes = _clipping.numPlanes;\n\t\t\t\tmaterialProperties.numIntersection = _clipping.numIntersection;\n\t\t\t\tuniforms.clippingPlanes = _clipping.uniform;\n\n\t\t\t}\n\n\t\t\tmaterialProperties.fog = scene.fog;\n\n\t\t\t// store the light setup it was created for\n\n\t\t\tmaterialProperties.needsLights = materialNeedsLights( material );\n\t\t\tmaterialProperties.lightsStateVersion = lightsStateVersion;\n\n\t\t\tif ( materialProperties.needsLights ) {\n\n\t\t\t\t// wire up the material to this renderer's lighting state\n\n\t\t\t\tuniforms.ambientLightColor.value = lights.state.ambient;\n\t\t\t\tuniforms.lightProbe.value = lights.state.probe;\n\t\t\t\tuniforms.directionalLights.value = lights.state.directional;\n\t\t\t\tuniforms.spotLights.value = lights.state.spot;\n\t\t\t\tuniforms.rectAreaLights.value = lights.state.rectArea;\n\t\t\t\tuniforms.pointLights.value = lights.state.point;\n\t\t\t\tuniforms.hemisphereLights.value = lights.state.hemi;\n\n\t\t\t\tuniforms.directionalShadowMap.value = lights.state.directionalShadowMap;\n\t\t\t\tuniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;\n\t\t\t\tuniforms.spotShadowMap.value = lights.state.spotShadowMap;\n\t\t\t\tuniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;\n\t\t\t\tuniforms.pointShadowMap.value = lights.state.pointShadowMap;\n\t\t\t\tuniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;\n\t\t\t\t// TODO (abelnation): add area lights shadow info to uniforms\n\n\t\t\t}\n\n\t\t\tvar progUniforms = materialProperties.program.getUniforms(),\n\t\t\t\tuniformsList =\n\t\t\t\t\tWebGLUniforms.seqWithValue( progUniforms.seq, uniforms );\n\n\t\t\tmaterialProperties.uniformsList = uniformsList;\n\n\t\t}\n\n\t\tfunction setProgram( camera, scene, material, object ) {\n\n\t\t\ttextures.resetTextureUnits();\n\n\t\t\tvar fog = scene.fog;\n\t\t\tvar environment = material.isMeshStandardMaterial ? scene.environment : null;\n\n\t\t\tvar materialProperties = properties.get( material );\n\t\t\tvar lights = currentRenderState.state.lights;\n\n\t\t\tif ( _clippingEnabled ) {\n\n\t\t\t\tif ( _localClippingEnabled || camera !== _currentCamera ) {\n\n\t\t\t\t\tvar useCache =\n\t\t\t\t\t\tcamera === _currentCamera &&\n\t\t\t\t\t\tmaterial.id === _currentMaterialId;\n\n\t\t\t\t\t// we might want to call this function with some ClippingGroup\n\t\t\t\t\t// object instead of the material, once it becomes feasible\n\t\t\t\t\t// (#8465, #8379)\n\t\t\t\t\t_clipping.setState(\n\t\t\t\t\t\tmaterial.clippingPlanes, material.clipIntersection, material.clipShadows,\n\t\t\t\t\t\tcamera, materialProperties, useCache );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material.version === materialProperties.__version ) {\n\n\t\t\t\tif ( materialProperties.program === undefined ) {\n\n\t\t\t\t\tinitMaterial( material, scene, object );\n\n\t\t\t\t} else if ( material.fog && materialProperties.fog !== fog ) {\n\n\t\t\t\t\tinitMaterial( material, scene, object );\n\n\t\t\t\t} else if ( materialProperties.environment !== environment ) {\n\n\t\t\t\t\tinitMaterial( material, scene, object );\n\n\t\t\t\t} else if ( materialProperties.needsLights && ( materialProperties.lightsStateVersion !== lights.state.version ) ) {\n\n\t\t\t\t\tinitMaterial( material, scene, object );\n\n\t\t\t\t} else if ( materialProperties.numClippingPlanes !== undefined &&\n\t\t\t\t\t( materialProperties.numClippingPlanes !== _clipping.numPlanes ||\n\t\t\t\t\tmaterialProperties.numIntersection !== _clipping.numIntersection ) ) {\n\n\t\t\t\t\tinitMaterial( material, scene, object );\n\n\t\t\t\t} else if ( materialProperties.outputEncoding !== _this.outputEncoding ) {\n\n\t\t\t\t\tinitMaterial( material, scene, object );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tinitMaterial( material, scene, object );\n\t\t\t\tmaterialProperties.__version = material.version;\n\n\t\t\t}\n\n\t\t\tvar refreshProgram = false;\n\t\t\tvar refreshMaterial = false;\n\t\t\tvar refreshLights = false;\n\n\t\t\tvar program = materialProperties.program,\n\t\t\t\tp_uniforms = program.getUniforms(),\n\t\t\t\tm_uniforms = materialProperties.uniforms;\n\n\t\t\tif ( state.useProgram( program.program ) ) {\n\n\t\t\t\trefreshProgram = true;\n\t\t\t\trefreshMaterial = true;\n\t\t\t\trefreshLights = true;\n\n\t\t\t}\n\n\t\t\tif ( material.id !== _currentMaterialId ) {\n\n\t\t\t\t_currentMaterialId = material.id;\n\n\t\t\t\trefreshMaterial = true;\n\n\t\t\t}\n\n\t\t\tif ( refreshProgram || _currentCamera !== camera ) {\n\n\t\t\t\tif ( program.numMultiviewViews > 0 ) {\n\n\t\t\t\t\tmultiview.updateCameraProjectionMatricesUniform( camera, p_uniforms );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tp_uniforms.setValue( _gl, 'projectionMatrix', camera.projectionMatrix );\n\n\t\t\t\t}\n\n\t\t\t\tif ( capabilities.logarithmicDepthBuffer ) {\n\n\t\t\t\t\tp_uniforms.setValue( _gl, 'logDepthBufFC',\n\t\t\t\t\t\t2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( _currentCamera !== camera ) {\n\n\t\t\t\t\t_currentCamera = camera;\n\n\t\t\t\t\t// lighting uniforms depend on the camera so enforce an update\n\t\t\t\t\t// now, in case this material supports lights - or later, when\n\t\t\t\t\t// the next material that does gets activated:\n\n\t\t\t\t\trefreshMaterial = true;\t\t// set to true on material change\n\t\t\t\t\trefreshLights = true;\t\t// remains set until update done\n\n\t\t\t\t}\n\n\t\t\t\t// load material specific uniforms\n\t\t\t\t// (shader material also gets them for the sake of genericity)\n\n\t\t\t\tif ( material.isShaderMaterial ||\n\t\t\t\t\tmaterial.isMeshPhongMaterial ||\n\t\t\t\t\tmaterial.isMeshToonMaterial ||\n\t\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\t\tmaterial.envMap ) {\n\n\t\t\t\t\tvar uCamPos = p_uniforms.map.cameraPosition;\n\n\t\t\t\t\tif ( uCamPos !== undefined ) {\n\n\t\t\t\t\t\tuCamPos.setValue( _gl,\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( camera.matrixWorld ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( material.isMeshPhongMaterial ||\n\t\t\t\t\tmaterial.isMeshToonMaterial ||\n\t\t\t\t\tmaterial.isMeshLambertMaterial ||\n\t\t\t\t\tmaterial.isMeshBasicMaterial ||\n\t\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\t\tmaterial.isShaderMaterial ) {\n\n\t\t\t\t\tp_uniforms.setValue( _gl, 'isOrthographic', camera.isOrthographicCamera === true );\n\n\t\t\t\t}\n\n\t\t\t\tif ( material.isMeshPhongMaterial ||\n\t\t\t\t\tmaterial.isMeshToonMaterial ||\n\t\t\t\t\tmaterial.isMeshLambertMaterial ||\n\t\t\t\t\tmaterial.isMeshBasicMaterial ||\n\t\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\t\tmaterial.isShaderMaterial ||\n\t\t\t\t\tmaterial.skinning ) {\n\n\t\t\t\t\tif ( program.numMultiviewViews > 0 ) {\n\n\t\t\t\t\t\tmultiview.updateCameraViewMatricesUniform( camera, p_uniforms );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tp_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// skinning uniforms must be set even if material didn't change\n\t\t\t// auto-setting of texture unit for bone texture must go before other textures\n\t\t\t// not sure why, but otherwise weird things happen\n\n\t\t\tif ( material.skinning ) {\n\n\t\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrix' );\n\t\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );\n\n\t\t\t\tvar skeleton = object.skeleton;\n\n\t\t\t\tif ( skeleton ) {\n\n\t\t\t\t\tvar bones = skeleton.bones;\n\n\t\t\t\t\tif ( capabilities.floatVertexTextures ) {\n\n\t\t\t\t\t\tif ( skeleton.boneTexture === undefined ) {\n\n\t\t\t\t\t\t\t// layout (1 matrix = 4 pixels)\n\t\t\t\t\t\t\t//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n\t\t\t\t\t\t\t//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\n\t\t\t\t\t\t\t//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\n\t\t\t\t\t\t\t//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\n\t\t\t\t\t\t\t//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n\n\n\t\t\t\t\t\t\tvar size = Math.sqrt( bones.length * 4 ); // 4 pixels needed for 1 matrix\n\t\t\t\t\t\t\tsize = MathUtils.ceilPowerOfTwo( size );\n\t\t\t\t\t\t\tsize = Math.max( size, 4 );\n\n\t\t\t\t\t\t\tvar boneMatrices = new Float32Array( size * size * 4 ); // 4 floats per RGBA pixel\n\t\t\t\t\t\t\tboneMatrices.set( skeleton.boneMatrices ); // copy current values\n\n\t\t\t\t\t\t\tvar boneTexture = new DataTexture( boneMatrices, size, size, RGBAFormat, FloatType );\n\n\t\t\t\t\t\t\tskeleton.boneMatrices = boneMatrices;\n\t\t\t\t\t\t\tskeleton.boneTexture = boneTexture;\n\t\t\t\t\t\t\tskeleton.boneTextureSize = size;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tp_uniforms.setValue( _gl, 'boneTexture', skeleton.boneTexture, textures );\n\t\t\t\t\t\tp_uniforms.setValue( _gl, 'boneTextureSize', skeleton.boneTextureSize );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tp_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow ) {\n\n\t\t\t\tmaterialProperties.receiveShadow = object.receiveShadow;\n\t\t\t\tp_uniforms.setValue( _gl, 'receiveShadow', object.receiveShadow );\n\n\t\t\t}\n\n\t\t\tif ( refreshMaterial ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'toneMappingExposure', _this.toneMappingExposure );\n\t\t\t\tp_uniforms.setValue( _gl, 'toneMappingWhitePoint', _this.toneMappingWhitePoint );\n\n\t\t\t\tif ( materialProperties.needsLights ) {\n\n\t\t\t\t\t// the current material requires lighting info\n\n\t\t\t\t\t// note: all lighting uniforms are always set correctly\n\t\t\t\t\t// they simply reference the renderer's state for their\n\t\t\t\t\t// values\n\t\t\t\t\t//\n\t\t\t\t\t// use the current material's .needsUpdate flags to set\n\t\t\t\t\t// the GL state when required\n\n\t\t\t\t\tmarkUniformsLightsNeedsUpdate( m_uniforms, refreshLights );\n\n\t\t\t\t}\n\n\t\t\t\t// refresh uniforms common to several materials\n\n\t\t\t\tif ( fog && material.fog ) {\n\n\t\t\t\t\trefreshUniformsFog( m_uniforms, fog );\n\n\t\t\t\t}\n\n\t\t\t\tif ( material.isMeshBasicMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshLambertMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\t\trefreshUniformsLambert( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshToonMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\t\trefreshUniformsToon( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshPhongMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\t\trefreshUniformsPhong( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshStandardMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material, environment );\n\n\t\t\t\t\tif ( material.isMeshPhysicalMaterial ) {\n\n\t\t\t\t\t\trefreshUniformsPhysical( m_uniforms, material, environment );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\trefreshUniformsStandard( m_uniforms, material, environment );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( material.isMeshMatcapMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\t\trefreshUniformsMatcap( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshDepthMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\t\trefreshUniformsDepth( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshDistanceMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\t\trefreshUniformsDistance( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshNormalMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\t\trefreshUniformsNormal( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isLineBasicMaterial ) {\n\n\t\t\t\t\trefreshUniformsLine( m_uniforms, material );\n\n\t\t\t\t\tif ( material.isLineDashedMaterial ) {\n\n\t\t\t\t\t\trefreshUniformsDash( m_uniforms, material );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( material.isPointsMaterial ) {\n\n\t\t\t\t\trefreshUniformsPoints( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isSpriteMaterial ) {\n\n\t\t\t\t\trefreshUniformsSprites( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isShadowMaterial ) {\n\n\t\t\t\t\tm_uniforms.color.value.copy( material.color );\n\t\t\t\t\tm_uniforms.opacity.value = material.opacity;\n\n\t\t\t\t}\n\n\t\t\t\t// RectAreaLight Texture\n\t\t\t\t// TODO (mrdoob): Find a nicer implementation\n\n\t\t\t\tif ( m_uniforms.ltc_1 !== undefined ) { m_uniforms.ltc_1.value = UniformsLib.LTC_1; }\n\t\t\t\tif ( m_uniforms.ltc_2 !== undefined ) { m_uniforms.ltc_2.value = UniformsLib.LTC_2; }\n\n\t\t\t\tWebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );\n\n\t\t\t\tif ( material.isShaderMaterial ) {\n\n\t\t\t\t\tmaterial.uniformsNeedUpdate = false; // #15581\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material.isShaderMaterial && material.uniformsNeedUpdate === true ) {\n\n\t\t\t\tWebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );\n\t\t\t\tmaterial.uniformsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( material.isSpriteMaterial ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'center', object.center );\n\n\t\t\t}\n\n\t\t\t// common matrices\n\n\t\t\tif ( program.numMultiviewViews > 0 ) {\n\n\t\t\t\tmultiview.updateObjectMatricesUniforms( object, camera, p_uniforms );\n\n\t\t\t} else {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'modelViewMatrix', object.modelViewMatrix );\n\t\t\t\tp_uniforms.setValue( _gl, 'normalMatrix', object.normalMatrix );\n\n\t\t\t}\n\n\t\t\tp_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );\n\n\t\t\treturn program;\n\n\t\t}\n\n\t\t// Uniforms (refresh uniforms objects)\n\n\t\tfunction refreshUniformsCommon( uniforms, material, environment ) {\n\n\t\t\tuniforms.opacity.value = material.opacity;\n\n\t\t\tif ( material.color ) {\n\n\t\t\t\tuniforms.diffuse.value.copy( material.color );\n\n\t\t\t}\n\n\t\t\tif ( material.emissive ) {\n\n\t\t\t\tuniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );\n\n\t\t\t}\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\tuniforms.map.value = material.map;\n\n\t\t\t}\n\n\t\t\tif ( material.alphaMap ) {\n\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t\t}\n\n\t\t\tif ( material.specularMap ) {\n\n\t\t\t\tuniforms.specularMap.value = material.specularMap;\n\n\t\t\t}\n\n\t\t\tvar envMap = material.envMap || environment;\n\n\t\t\tif ( envMap ) {\n\n\t\t\t\tuniforms.envMap.value = envMap;\n\n\t\t\t\tuniforms.flipEnvMap.value = envMap.isCubeTexture ? - 1 : 1;\n\n\t\t\t\tuniforms.reflectivity.value = material.reflectivity;\n\t\t\t\tuniforms.refractionRatio.value = material.refractionRatio;\n\n\t\t\t\tuniforms.maxMipLevel.value = properties.get( envMap ).__maxMipLevel;\n\n\t\t\t}\n\n\t\t\tif ( material.lightMap ) {\n\n\t\t\t\tuniforms.lightMap.value = material.lightMap;\n\t\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\n\t\t\t}\n\n\t\t\tif ( material.aoMap ) {\n\n\t\t\t\tuniforms.aoMap.value = material.aoMap;\n\t\t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\n\n\t\t\t}\n\n\t\t\t// uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. specular map\n\t\t\t// 3. normal map\n\t\t\t// 4. bump map\n\t\t\t// 5. alpha map\n\t\t\t// 6. emissive map\n\n\t\t\tvar uvScaleMap;\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\tuvScaleMap = material.map;\n\n\t\t\t} else if ( material.specularMap ) {\n\n\t\t\t\tuvScaleMap = material.specularMap;\n\n\t\t\t} else if ( material.displacementMap ) {\n\n\t\t\t\tuvScaleMap = material.displacementMap;\n\n\t\t\t} else if ( material.normalMap ) {\n\n\t\t\t\tuvScaleMap = material.normalMap;\n\n\t\t\t} else if ( material.bumpMap ) {\n\n\t\t\t\tuvScaleMap = material.bumpMap;\n\n\t\t\t} else if ( material.roughnessMap ) {\n\n\t\t\t\tuvScaleMap = material.roughnessMap;\n\n\t\t\t} else if ( material.metalnessMap ) {\n\n\t\t\t\tuvScaleMap = material.metalnessMap;\n\n\t\t\t} else if ( material.alphaMap ) {\n\n\t\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t\t} else if ( material.emissiveMap ) {\n\n\t\t\t\tuvScaleMap = material.emissiveMap;\n\n\t\t\t}\n\n\t\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\t\t// backwards compatibility\n\t\t\t\tif ( uvScaleMap.isWebGLRenderTarget ) {\n\n\t\t\t\t\tuvScaleMap = uvScaleMap.texture;\n\n\t\t\t\t}\n\n\t\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\n\n\t\t\t}\n\n\t\t\t// uv repeat and offset setting priorities for uv2\n\t\t\t// 1. ao map\n\t\t\t// 2. light map\n\n\t\t\tvar uv2ScaleMap;\n\n\t\t\tif ( material.aoMap ) {\n\n\t\t\t\tuv2ScaleMap = material.aoMap;\n\n\t\t\t} else if ( material.lightMap ) {\n\n\t\t\t\tuv2ScaleMap = material.lightMap;\n\n\t\t\t}\n\n\t\t\tif ( uv2ScaleMap !== undefined ) {\n\n\t\t\t\t// backwards compatibility\n\t\t\t\tif ( uv2ScaleMap.isWebGLRenderTarget ) {\n\n\t\t\t\t\tuv2ScaleMap = uv2ScaleMap.texture;\n\n\t\t\t\t}\n\n\t\t\t\tif ( uv2ScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\t\tuv2ScaleMap.updateMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tuniforms.uv2Transform.value.copy( uv2ScaleMap.matrix );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsLine( uniforms, material ) {\n\n\t\t\tuniforms.diffuse.value.copy( material.color );\n\t\t\tuniforms.opacity.value = material.opacity;\n\n\t\t}\n\n\t\tfunction refreshUniformsDash( uniforms, material ) {\n\n\t\t\tuniforms.dashSize.value = material.dashSize;\n\t\t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\n\t\t\tuniforms.scale.value = material.scale;\n\n\t\t}\n\n\t\tfunction refreshUniformsPoints( uniforms, material ) {\n\n\t\t\tuniforms.diffuse.value.copy( material.color );\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\t\tuniforms.size.value = material.size * _pixelRatio;\n\t\t\tuniforms.scale.value = _height * 0.5;\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\tuniforms.map.value = material.map;\n\n\t\t\t}\n\n\t\t\tif ( material.alphaMap ) {\n\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t\t}\n\n\t\t\t// uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. alpha map\n\n\t\t\tvar uvScaleMap;\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\tuvScaleMap = material.map;\n\n\t\t\t} else if ( material.alphaMap ) {\n\n\t\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t\t}\n\n\t\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsSprites( uniforms, material ) {\n\n\t\t\tuniforms.diffuse.value.copy( material.color );\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\t\tuniforms.rotation.value = material.rotation;\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\tuniforms.map.value = material.map;\n\n\t\t\t}\n\n\t\t\tif ( material.alphaMap ) {\n\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t\t}\n\n\t\t\t// uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. alpha map\n\n\t\t\tvar uvScaleMap;\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\tuvScaleMap = material.map;\n\n\t\t\t} else if ( material.alphaMap ) {\n\n\t\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t\t}\n\n\t\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsFog( uniforms, fog ) {\n\n\t\t\tuniforms.fogColor.value.copy( fog.color );\n\n\t\t\tif ( fog.isFog ) {\n\n\t\t\t\tuniforms.fogNear.value = fog.near;\n\t\t\t\tuniforms.fogFar.value = fog.far;\n\n\t\t\t} else if ( fog.isFogExp2 ) {\n\n\t\t\t\tuniforms.fogDensity.value = fog.density;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsLambert( uniforms, material ) {\n\n\t\t\tif ( material.emissiveMap ) {\n\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsPhong( uniforms, material ) {\n\n\t\t\tuniforms.specular.value.copy( material.specular );\n\t\t\tuniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\n\n\t\t\tif ( material.emissiveMap ) {\n\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t\t}\n\n\t\t\tif ( material.bumpMap ) {\n\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }\n\n\t\t\t}\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\t\tif ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }\n\n\t\t\t}\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsToon( uniforms, material ) {\n\n\t\t\tuniforms.specular.value.copy( material.specular );\n\t\t\tuniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\n\n\t\t\tif ( material.gradientMap ) {\n\n\t\t\t\tuniforms.gradientMap.value = material.gradientMap;\n\n\t\t\t}\n\n\t\t\tif ( material.emissiveMap ) {\n\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t\t}\n\n\t\t\tif ( material.bumpMap ) {\n\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }\n\n\t\t\t}\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\t\tif ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }\n\n\t\t\t}\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsStandard( uniforms, material, environment ) {\n\n\t\t\tuniforms.roughness.value = material.roughness;\n\t\t\tuniforms.metalness.value = material.metalness;\n\n\t\t\tif ( material.roughnessMap ) {\n\n\t\t\t\tuniforms.roughnessMap.value = material.roughnessMap;\n\n\t\t\t}\n\n\t\t\tif ( material.metalnessMap ) {\n\n\t\t\t\tuniforms.metalnessMap.value = material.metalnessMap;\n\n\t\t\t}\n\n\t\t\tif ( material.emissiveMap ) {\n\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t\t}\n\n\t\t\tif ( material.bumpMap ) {\n\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }\n\n\t\t\t}\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\t\tif ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }\n\n\t\t\t}\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t\tif ( material.envMap || environment ) {\n\n\t\t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\n\t\t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsPhysical( uniforms, material, environment ) {\n\n\t\t\trefreshUniformsStandard( uniforms, material, environment );\n\n\t\t\tuniforms.reflectivity.value = material.reflectivity; // also part of uniforms common\n\n\t\t\tuniforms.clearcoat.value = material.clearcoat;\n\t\t\tuniforms.clearcoatRoughness.value = material.clearcoatRoughness;\n\t\t\tif ( material.sheen ) { uniforms.sheen.value.copy( material.sheen ); }\n\n\t\t\tif ( material.clearcoatNormalMap ) {\n\n\t\t\t\tuniforms.clearcoatNormalScale.value.copy( material.clearcoatNormalScale );\n\t\t\t\tuniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;\n\n\t\t\t\tif ( material.side === BackSide ) {\n\n\t\t\t\t\tuniforms.clearcoatNormalScale.value.negate();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tuniforms.transparency.value = material.transparency;\n\n\t\t}\n\n\t\tfunction refreshUniformsMatcap( uniforms, material ) {\n\n\t\t\tif ( material.matcap ) {\n\n\t\t\t\tuniforms.matcap.value = material.matcap;\n\n\t\t\t}\n\n\t\t\tif ( material.bumpMap ) {\n\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }\n\n\t\t\t}\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\t\tif ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }\n\n\t\t\t}\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsDepth( uniforms, material ) {\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsDistance( uniforms, material ) {\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t\tuniforms.referencePosition.value.copy( material.referencePosition );\n\t\t\tuniforms.nearDistance.value = material.nearDistance;\n\t\t\tuniforms.farDistance.value = material.farDistance;\n\n\t\t}\n\n\t\tfunction refreshUniformsNormal( uniforms, material ) {\n\n\t\t\tif ( material.bumpMap ) {\n\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }\n\n\t\t\t}\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\t\tif ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }\n\n\t\t\t}\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// If uniforms are marked as clean, they don't need to be loaded to the GPU.\n\n\t\tfunction markUniformsLightsNeedsUpdate( uniforms, value ) {\n\n\t\t\tuniforms.ambientLightColor.needsUpdate = value;\n\t\t\tuniforms.lightProbe.needsUpdate = value;\n\n\t\t\tuniforms.directionalLights.needsUpdate = value;\n\t\t\tuniforms.pointLights.needsUpdate = value;\n\t\t\tuniforms.spotLights.needsUpdate = value;\n\t\t\tuniforms.rectAreaLights.needsUpdate = value;\n\t\t\tuniforms.hemisphereLights.needsUpdate = value;\n\n\t\t}\n\n\t\tfunction materialNeedsLights( material ) {\n\n\t\t\treturn material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial ||\n\t\t\t\tmaterial.isMeshStandardMaterial || material.isShadowMaterial ||\n\t\t\t\t( material.isShaderMaterial && material.lights === true );\n\n\t\t}\n\n\t\t//\n\t\tthis.setFramebuffer = function ( value ) {\n\n\t\t\tif ( _framebuffer !== value && _currentRenderTarget === null ) { _gl.bindFramebuffer( 36160, value ); }\n\n\t\t\t_framebuffer = value;\n\n\t\t};\n\n\t\tthis.getActiveCubeFace = function () {\n\n\t\t\treturn _currentActiveCubeFace;\n\n\t\t};\n\n\t\tthis.getActiveMipmapLevel = function () {\n\n\t\t\treturn _currentActiveMipmapLevel;\n\n\t\t};\n\n\t\tthis.getRenderTarget = function () {\n\n\t\t\treturn _currentRenderTarget;\n\n\t\t};\n\n\t\tthis.setRenderTarget = function ( renderTarget, activeCubeFace, activeMipmapLevel ) {\n\n\t\t\t_currentRenderTarget = renderTarget;\n\t\t\t_currentActiveCubeFace = activeCubeFace;\n\t\t\t_currentActiveMipmapLevel = activeMipmapLevel;\n\n\t\t\tif ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {\n\n\t\t\t\ttextures.setupRenderTarget( renderTarget );\n\n\t\t\t}\n\n\t\t\tvar framebuffer = _framebuffer;\n\t\t\tvar isCube = false;\n\n\t\t\tif ( renderTarget ) {\n\n\t\t\t\tvar __webglFramebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\n\t\t\t\tif ( renderTarget.isWebGLCubeRenderTarget ) {\n\n\t\t\t\t\tframebuffer = __webglFramebuffer[ activeCubeFace || 0 ];\n\t\t\t\t\tisCube = true;\n\n\t\t\t\t} else if ( renderTarget.isWebGLMultisampleRenderTarget ) {\n\n\t\t\t\t\tframebuffer = properties.get( renderTarget ).__webglMultisampledFramebuffer;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tframebuffer = __webglFramebuffer;\n\n\t\t\t\t}\n\n\t\t\t\t_currentViewport.copy( renderTarget.viewport );\n\t\t\t\t_currentScissor.copy( renderTarget.scissor );\n\t\t\t\t_currentScissorTest = renderTarget.scissorTest;\n\n\t\t\t} else {\n\n\t\t\t\t_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor();\n\t\t\t\t_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor();\n\t\t\t\t_currentScissorTest = _scissorTest;\n\n\t\t\t}\n\n\t\t\tif ( _currentFramebuffer !== framebuffer ) {\n\n\t\t\t\t_gl.bindFramebuffer( 36160, framebuffer );\n\t\t\t\t_currentFramebuffer = framebuffer;\n\n\t\t\t}\n\n\t\t\tstate.viewport( _currentViewport );\n\t\t\tstate.scissor( _currentScissor );\n\t\t\tstate.setScissorTest( _currentScissorTest );\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\t\t\t\t_gl.framebufferTexture2D( 36160, 36064, 34069 + ( activeCubeFace || 0 ), textureProperties.__webglTexture, activeMipmapLevel || 0 );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer, activeCubeFaceIndex ) {\n\n\t\t\tif ( ! ( renderTarget && renderTarget.isWebGLRenderTarget ) ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar framebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\n\t\t\tif ( renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== undefined ) {\n\n\t\t\t\tframebuffer = framebuffer[ activeCubeFaceIndex ];\n\n\t\t\t}\n\n\t\t\tif ( framebuffer ) {\n\n\t\t\t\tvar restore = false;\n\n\t\t\t\tif ( framebuffer !== _currentFramebuffer ) {\n\n\t\t\t\t\t_gl.bindFramebuffer( 36160, framebuffer );\n\n\t\t\t\t\trestore = true;\n\n\t\t\t\t}\n\n\t\t\t\ttry {\n\n\t\t\t\t\tvar texture = renderTarget.texture;\n\t\t\t\t\tvar textureFormat = texture.format;\n\t\t\t\t\tvar textureType = texture.type;\n\n\t\t\t\t\tif ( textureFormat !== RGBAFormat && utils.convert( textureFormat ) !== _gl.getParameter( 35739 ) ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( textureType !== UnsignedByteType && utils.convert( textureType ) !== _gl.getParameter( 35738 ) && // IE11, Edge and Chrome Mac < 52 (#9513)\n\t\t\t\t\t\t! ( textureType === FloatType && ( capabilities.isWebGL2 || extensions.get( 'OES_texture_float' ) || extensions.get( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox\n\t\t\t\t\t\t! ( textureType === HalfFloatType && ( capabilities.isWebGL2 ? extensions.get( 'EXT_color_buffer_float' ) : extensions.get( 'EXT_color_buffer_half_float' ) ) ) ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( _gl.checkFramebufferStatus( 36160 ) === 36053 ) {\n\n\t\t\t\t\t\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n\n\t\t\t\t\t\tif ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {\n\n\t\t\t\t\t\t\t_gl.readPixels( x, y, width, height, utils.convert( textureFormat ), utils.convert( textureType ), buffer );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t} finally {\n\n\t\t\t\t\tif ( restore ) {\n\n\t\t\t\t\t\t_gl.bindFramebuffer( 36160, _currentFramebuffer );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.copyFramebufferToTexture = function ( position, texture, level ) {\n\n\t\t\tif ( level === undefined ) { level = 0; }\n\n\t\t\tvar levelScale = Math.pow( 2, - level );\n\t\t\tvar width = Math.floor( texture.image.width * levelScale );\n\t\t\tvar height = Math.floor( texture.image.height * levelScale );\n\t\t\tvar glFormat = utils.convert( texture.format );\n\n\t\t\ttextures.setTexture2D( texture, 0 );\n\n\t\t\t_gl.copyTexImage2D( 3553, level, glFormat, position.x, position.y, width, height, 0 );\n\n\t\t\tstate.unbindTexture();\n\n\t\t};\n\n\t\tthis.copyTextureToTexture = function ( position, srcTexture, dstTexture, level ) {\n\n\t\t\tvar width = srcTexture.image.width;\n\t\t\tvar height = srcTexture.image.height;\n\t\t\tvar glFormat = utils.convert( dstTexture.format );\n\t\t\tvar glType = utils.convert( dstTexture.type );\n\n\t\t\ttextures.setTexture2D( dstTexture, 0 );\n\n\t\t\tif ( srcTexture.isDataTexture ) {\n\n\t\t\t\t_gl.texSubImage2D( 3553, level || 0, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.texSubImage2D( 3553, level || 0, position.x, position.y, glFormat, glType, srcTexture.image );\n\n\t\t\t}\n\n\t\t\tstate.unbindTexture();\n\n\t\t};\n\n\t\tthis.initTexture = function ( texture ) {\n\n\t\t\ttextures.setTexture2D( texture, 0 );\n\n\t\t\tstate.unbindTexture();\n\n\t\t};\n\n\t\tif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n\n\t\t\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) ); // eslint-disable-line no-undef\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction FogExp2( color, density ) {\n\n\t\tthis.name = '';\n\n\t\tthis.color = new Color( color );\n\t\tthis.density = ( density !== undefined ) ? density : 0.00025;\n\n\t}\n\n\tObject.assign( FogExp2.prototype, {\n\n\t\tisFogExp2: true,\n\n\t\tclone: function () {\n\n\t\t\treturn new FogExp2( this.color, this.density );\n\n\t\t},\n\n\t\ttoJSON: function ( /* meta */ ) {\n\n\t\t\treturn {\n\t\t\t\ttype: 'FogExp2',\n\t\t\t\tcolor: this.color.getHex(),\n\t\t\t\tdensity: this.density\n\t\t\t};\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Fog( color, near, far ) {\n\n\t\tthis.name = '';\n\n\t\tthis.color = new Color( color );\n\n\t\tthis.near = ( near !== undefined ) ? near : 1;\n\t\tthis.far = ( far !== undefined ) ? far : 1000;\n\n\t}\n\n\tObject.assign( Fog.prototype, {\n\n\t\tisFog: true,\n\n\t\tclone: function () {\n\n\t\t\treturn new Fog( this.color, this.near, this.far );\n\n\t\t},\n\n\t\ttoJSON: function ( /* meta */ ) {\n\n\t\t\treturn {\n\t\t\t\ttype: 'Fog',\n\t\t\t\tcolor: this.color.getHex(),\n\t\t\t\tnear: this.near,\n\t\t\t\tfar: this.far\n\t\t\t};\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tfunction InterleavedBuffer( array, stride ) {\n\n\t\tthis.array = array;\n\t\tthis.stride = stride;\n\t\tthis.count = array !== undefined ? array.length / stride : 0;\n\n\t\tthis.usage = StaticDrawUsage;\n\t\tthis.updateRange = { offset: 0, count: - 1 };\n\n\t\tthis.version = 0;\n\n\t}\n\n\tObject.defineProperty( InterleavedBuffer.prototype, 'needsUpdate', {\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value === true ) { this.version ++; }\n\n\t\t}\n\n\t} );\n\n\tObject.assign( InterleavedBuffer.prototype, {\n\n\t\tisInterleavedBuffer: true,\n\n\t\tonUploadCallback: function () {},\n\n\t\tsetUsage: function ( value ) {\n\n\t\t\tthis.usage = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.array = new source.array.constructor( source.array );\n\t\t\tthis.count = source.count;\n\t\t\tthis.stride = source.stride;\n\t\t\tthis.usage = source.usage;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyAt: function ( index1, attribute, index2 ) {\n\n\t\t\tindex1 *= this.stride;\n\t\t\tindex2 *= attribute.stride;\n\n\t\t\tfor ( var i = 0, l = this.stride; i < l; i ++ ) {\n\n\t\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tset: function ( value, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tthis.array.set( value, offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tonUpload: function ( callback ) {\n\n\t\t\tthis.onUploadCallback = callback;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tvar _vector$6 = new Vector3();\n\n\tfunction InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, normalized ) {\n\n\t\tthis.data = interleavedBuffer;\n\t\tthis.itemSize = itemSize;\n\t\tthis.offset = offset;\n\n\t\tthis.normalized = normalized === true;\n\n\t}\n\n\tObject.defineProperties( InterleavedBufferAttribute.prototype, {\n\n\t\tcount: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.data.count;\n\n\t\t\t}\n\n\t\t},\n\n\t\tarray: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.data.array;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tObject.assign( InterleavedBufferAttribute.prototype, {\n\n\t\tisInterleavedBufferAttribute: true,\n\n\t\tapplyMatrix4: function ( m ) {\n\n\t\t\tfor ( var i = 0, l = this.data.count; i < l; i ++ ) {\n\n\t\t\t\t_vector$6.x = this.getX( i );\n\t\t\t\t_vector$6.y = this.getY( i );\n\t\t\t\t_vector$6.z = this.getZ( i );\n\n\t\t\t\t_vector$6.applyMatrix4( m );\n\n\t\t\t\tthis.setXYZ( i, _vector$6.x, _vector$6.y, _vector$6.z );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetX: function ( index, x ) {\n\n\t\t\tthis.data.array[ index * this.data.stride + this.offset ] = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetY: function ( index, y ) {\n\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 1 ] = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetZ: function ( index, z ) {\n\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 2 ] = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetW: function ( index, w ) {\n\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 3 ] = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetX: function ( index ) {\n\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset ];\n\n\t\t},\n\n\t\tgetY: function ( index ) {\n\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 1 ];\n\n\t\t},\n\n\t\tgetZ: function ( index ) {\n\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 2 ];\n\n\t\t},\n\n\t\tgetW: function ( index ) {\n\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 3 ];\n\n\t\t},\n\n\t\tsetXY: function ( index, x, y ) {\n\n\t\t\tindex = index * this.data.stride + this.offset;\n\n\t\t\tthis.data.array[ index + 0 ] = x;\n\t\t\tthis.data.array[ index + 1 ] = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXYZ: function ( index, x, y, z ) {\n\n\t\t\tindex = index * this.data.stride + this.offset;\n\n\t\t\tthis.data.array[ index + 0 ] = x;\n\t\t\tthis.data.array[ index + 1 ] = y;\n\t\t\tthis.data.array[ index + 2 ] = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXYZW: function ( index, x, y, z, w ) {\n\n\t\t\tindex = index * this.data.stride + this.offset;\n\n\t\t\tthis.data.array[ index + 0 ] = x;\n\t\t\tthis.data.array[ index + 1 ] = y;\n\t\t\tthis.data.array[ index + 2 ] = z;\n\t\t\tthis.data.array[ index + 3 ] = w;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  map: new THREE.Texture( <Image> ),\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *  rotation: <float>,\n\t *  sizeAttenuation: <bool>\n\t * }\n\t */\n\n\tfunction SpriteMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'SpriteMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.rotation = 0;\n\n\t\tthis.sizeAttenuation = true;\n\n\t\tthis.transparent = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tSpriteMaterial.prototype = Object.create( Material.prototype );\n\tSpriteMaterial.prototype.constructor = SpriteMaterial;\n\tSpriteMaterial.prototype.isSpriteMaterial = true;\n\n\tSpriteMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.rotation = source.rotation;\n\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tvar _geometry;\n\n\tvar _intersectPoint = new Vector3();\n\tvar _worldScale = new Vector3();\n\tvar _mvPosition = new Vector3();\n\n\tvar _alignedPosition = new Vector2();\n\tvar _rotatedPosition = new Vector2();\n\tvar _viewWorldMatrix = new Matrix4();\n\n\tvar _vA$1 = new Vector3();\n\tvar _vB$1 = new Vector3();\n\tvar _vC$1 = new Vector3();\n\n\tvar _uvA$1 = new Vector2();\n\tvar _uvB$1 = new Vector2();\n\tvar _uvC$1 = new Vector2();\n\n\tfunction Sprite( material ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Sprite';\n\n\t\tif ( _geometry === undefined ) {\n\n\t\t\t_geometry = new BufferGeometry();\n\n\t\t\tvar float32Array = new Float32Array( [\n\t\t\t\t- 0.5, - 0.5, 0, 0, 0,\n\t\t\t\t0.5, - 0.5, 0, 1, 0,\n\t\t\t\t0.5, 0.5, 0, 1, 1,\n\t\t\t\t- 0.5, 0.5, 0, 0, 1\n\t\t\t] );\n\n\t\t\tvar interleavedBuffer = new InterleavedBuffer( float32Array, 5 );\n\n\t\t\t_geometry.setIndex( [ 0, 1, 2,\t0, 2, 3 ] );\n\t\t\t_geometry.setAttribute( 'position', new InterleavedBufferAttribute( interleavedBuffer, 3, 0, false ) );\n\t\t\t_geometry.setAttribute( 'uv', new InterleavedBufferAttribute( interleavedBuffer, 2, 3, false ) );\n\n\t\t}\n\n\t\tthis.geometry = _geometry;\n\t\tthis.material = ( material !== undefined ) ? material : new SpriteMaterial();\n\n\t\tthis.center = new Vector2( 0.5, 0.5 );\n\n\t}\n\n\tSprite.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Sprite,\n\n\t\tisSprite: true,\n\n\t\traycast: function ( raycaster, intersects ) {\n\n\t\t\tif ( raycaster.camera === null ) {\n\n\t\t\t\tconsole.error( 'THREE.Sprite: \"Raycaster.camera\" needs to be set in order to raycast against sprites.' );\n\n\t\t\t}\n\n\t\t\t_worldScale.setFromMatrixScale( this.matrixWorld );\n\n\t\t\t_viewWorldMatrix.copy( raycaster.camera.matrixWorld );\n\t\t\tthis.modelViewMatrix.multiplyMatrices( raycaster.camera.matrixWorldInverse, this.matrixWorld );\n\n\t\t\t_mvPosition.setFromMatrixPosition( this.modelViewMatrix );\n\n\t\t\tif ( raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false ) {\n\n\t\t\t\t_worldScale.multiplyScalar( - _mvPosition.z );\n\n\t\t\t}\n\n\t\t\tvar rotation = this.material.rotation;\n\t\t\tvar sin, cos;\n\t\t\tif ( rotation !== 0 ) {\n\n\t\t\t\tcos = Math.cos( rotation );\n\t\t\t\tsin = Math.sin( rotation );\n\n\t\t\t}\n\n\t\t\tvar center = this.center;\n\n\t\t\ttransformVertex( _vA$1.set( - 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\t\ttransformVertex( _vB$1.set( 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\t\ttransformVertex( _vC$1.set( 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\n\t\t\t_uvA$1.set( 0, 0 );\n\t\t\t_uvB$1.set( 1, 0 );\n\t\t\t_uvC$1.set( 1, 1 );\n\n\t\t\t// check first triangle\n\t\t\tvar intersect = raycaster.ray.intersectTriangle( _vA$1, _vB$1, _vC$1, false, _intersectPoint );\n\n\t\t\tif ( intersect === null ) {\n\n\t\t\t\t// check second triangle\n\t\t\t\ttransformVertex( _vB$1.set( - 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\t\t\t_uvB$1.set( 0, 1 );\n\n\t\t\t\tintersect = raycaster.ray.intersectTriangle( _vA$1, _vC$1, _vB$1, false, _intersectPoint );\n\t\t\t\tif ( intersect === null ) {\n\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar distance = raycaster.ray.origin.distanceTo( _intersectPoint );\n\n\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) { return; }\n\n\t\t\tintersects.push( {\n\n\t\t\t\tdistance: distance,\n\t\t\t\tpoint: _intersectPoint.clone(),\n\t\t\t\tuv: Triangle.getUV( _intersectPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2() ),\n\t\t\t\tface: null,\n\t\t\t\tobject: this\n\n\t\t\t} );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.material ).copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source );\n\n\t\t\tif ( source.center !== undefined ) { this.center.copy( source.center ); }\n\n\t\t\treturn this;\n\n\t\t}\n\n\n\t} );\n\n\tfunction transformVertex( vertexPosition, mvPosition, center, scale, sin, cos ) {\n\n\t\t// compute position in camera space\n\t\t_alignedPosition.subVectors( vertexPosition, center ).addScalar( 0.5 ).multiply( scale );\n\n\t\t// to check if rotation is not zero\n\t\tif ( sin !== undefined ) {\n\n\t\t\t_rotatedPosition.x = ( cos * _alignedPosition.x ) - ( sin * _alignedPosition.y );\n\t\t\t_rotatedPosition.y = ( sin * _alignedPosition.x ) + ( cos * _alignedPosition.y );\n\n\t\t} else {\n\n\t\t\t_rotatedPosition.copy( _alignedPosition );\n\n\t\t}\n\n\n\t\tvertexPosition.copy( mvPosition );\n\t\tvertexPosition.x += _rotatedPosition.x;\n\t\tvertexPosition.y += _rotatedPosition.y;\n\n\t\t// transform to world space\n\t\tvertexPosition.applyMatrix4( _viewWorldMatrix );\n\n\t}\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _v1$4 = new Vector3();\n\tvar _v2$2 = new Vector3();\n\n\tfunction LOD() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'LOD';\n\n\t\tObject.defineProperties( this, {\n\t\t\tlevels: {\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: []\n\t\t\t}\n\t\t} );\n\n\t\tthis.autoUpdate = true;\n\n\t}\n\n\tLOD.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: LOD,\n\n\t\tisLOD: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source, false );\n\n\t\t\tvar levels = source.levels;\n\n\t\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\tvar level = levels[ i ];\n\n\t\t\t\tthis.addLevel( level.object.clone(), level.distance );\n\n\t\t\t}\n\n\t\t\tthis.autoUpdate = source.autoUpdate;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddLevel: function ( object, distance ) {\n\n\t\t\tif ( distance === undefined ) { distance = 0; }\n\n\t\t\tdistance = Math.abs( distance );\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\n\t\t\t\tif ( distance < levels[ l ].distance ) {\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tlevels.splice( l, 0, { distance: distance, object: object } );\n\n\t\t\tthis.add( object );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetObjectForDistance: function ( distance ) {\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tif ( levels.length > 0 ) {\n\n\t\t\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\t\tif ( distance < levels[ i ].distance ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn levels[ i - 1 ].object;\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t},\n\n\t\traycast: function ( raycaster, intersects ) {\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tif ( levels.length > 0 ) {\n\n\t\t\t\t_v1$4.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( _v1$4 );\n\n\t\t\t\tthis.getObjectForDistance( distance ).raycast( raycaster, intersects );\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdate: function ( camera ) {\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tif ( levels.length > 1 ) {\n\n\t\t\t\t_v1$4.setFromMatrixPosition( camera.matrixWorld );\n\t\t\t\t_v2$2.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\t\tvar distance = _v1$4.distanceTo( _v2$2 );\n\n\t\t\t\tlevels[ 0 ].object.visible = true;\n\n\t\t\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\t\tif ( distance >= levels[ i ].distance ) {\n\n\t\t\t\t\t\tlevels[ i - 1 ].object.visible = false;\n\t\t\t\t\t\tlevels[ i ].object.visible = true;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tfor ( ; i < l; i ++ ) {\n\n\t\t\t\t\tlevels[ i ].object.visible = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tif ( this.autoUpdate === false ) { data.object.autoUpdate = false; }\n\n\t\t\tdata.object.levels = [];\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\tvar level = levels[ i ];\n\n\t\t\t\tdata.object.levels.push( {\n\t\t\t\t\tobject: level.object.uuid,\n\t\t\t\t\tdistance: level.distance\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author ikerr / http://verold.com\n\t */\n\n\tfunction SkinnedMesh( geometry, material ) {\n\n\t\tif ( geometry && geometry.isGeometry ) {\n\n\t\t\tconsole.error( 'THREE.SkinnedMesh no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );\n\n\t\t}\n\n\t\tMesh.call( this, geometry, material );\n\n\t\tthis.type = 'SkinnedMesh';\n\n\t\tthis.bindMode = 'attached';\n\t\tthis.bindMatrix = new Matrix4();\n\t\tthis.bindMatrixInverse = new Matrix4();\n\n\t}\n\n\tSkinnedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {\n\n\t\tconstructor: SkinnedMesh,\n\n\t\tisSkinnedMesh: true,\n\n\t\tbind: function ( skeleton, bindMatrix ) {\n\n\t\t\tthis.skeleton = skeleton;\n\n\t\t\tif ( bindMatrix === undefined ) {\n\n\t\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\t\tthis.skeleton.calculateInverses();\n\n\t\t\t\tbindMatrix = this.matrixWorld;\n\n\t\t\t}\n\n\t\t\tthis.bindMatrix.copy( bindMatrix );\n\t\t\tthis.bindMatrixInverse.getInverse( bindMatrix );\n\n\t\t},\n\n\t\tpose: function () {\n\n\t\t\tthis.skeleton.pose();\n\n\t\t},\n\n\t\tnormalizeSkinWeights: function () {\n\n\t\t\tvar vector = new Vector4();\n\n\t\t\tvar skinWeight = this.geometry.attributes.skinWeight;\n\n\t\t\tfor ( var i = 0, l = skinWeight.count; i < l; i ++ ) {\n\n\t\t\t\tvector.x = skinWeight.getX( i );\n\t\t\t\tvector.y = skinWeight.getY( i );\n\t\t\t\tvector.z = skinWeight.getZ( i );\n\t\t\t\tvector.w = skinWeight.getW( i );\n\n\t\t\t\tvar scale = 1.0 / vector.manhattanLength();\n\n\t\t\t\tif ( scale !== Infinity ) {\n\n\t\t\t\t\tvector.multiplyScalar( scale );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvector.set( 1, 0, 0, 0 ); // do something reasonable\n\n\t\t\t\t}\n\n\t\t\t\tskinWeight.setXYZW( i, vector.x, vector.y, vector.z, vector.w );\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdateMatrixWorld: function ( force ) {\n\n\t\t\tMesh.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\tif ( this.bindMode === 'attached' ) {\n\n\t\t\t\tthis.bindMatrixInverse.getInverse( this.matrixWorld );\n\n\t\t\t} else if ( this.bindMode === 'detached' ) {\n\n\t\t\t\tthis.bindMatrixInverse.getInverse( this.bindMatrix );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode );\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author michael guerrero / http://realitymeltdown.com\n\t * @author ikerr / http://verold.com\n\t */\n\n\tvar _offsetMatrix = new Matrix4();\n\tvar _identityMatrix = new Matrix4();\n\n\tfunction Skeleton( bones, boneInverses ) {\n\n\t\t// copy the bone array\n\n\t\tbones = bones || [];\n\n\t\tthis.bones = bones.slice( 0 );\n\t\tthis.boneMatrices = new Float32Array( this.bones.length * 16 );\n\n\t\tthis.frame = - 1;\n\n\t\t// use the supplied bone inverses or calculate the inverses\n\n\t\tif ( boneInverses === undefined ) {\n\n\t\t\tthis.calculateInverses();\n\n\t\t} else {\n\n\t\t\tif ( this.bones.length === boneInverses.length ) {\n\n\t\t\t\tthis.boneInverses = boneInverses.slice( 0 );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.Skeleton boneInverses is the wrong length.' );\n\n\t\t\t\tthis.boneInverses = [];\n\n\t\t\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\t\tthis.boneInverses.push( new Matrix4() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tObject.assign( Skeleton.prototype, {\n\n\t\tcalculateInverses: function () {\n\n\t\t\tthis.boneInverses = [];\n\n\t\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\tvar inverse = new Matrix4();\n\n\t\t\t\tif ( this.bones[ i ] ) {\n\n\t\t\t\t\tinverse.getInverse( this.bones[ i ].matrixWorld );\n\n\t\t\t\t}\n\n\t\t\t\tthis.boneInverses.push( inverse );\n\n\t\t\t}\n\n\t\t},\n\n\t\tpose: function () {\n\n\t\t\tvar bone, i, il;\n\n\t\t\t// recover the bind-time world matrices\n\n\t\t\tfor ( i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\tbone = this.bones[ i ];\n\n\t\t\t\tif ( bone ) {\n\n\t\t\t\t\tbone.matrixWorld.getInverse( this.boneInverses[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// compute the local matrices, positions, rotations and scales\n\n\t\t\tfor ( i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\tbone = this.bones[ i ];\n\n\t\t\t\tif ( bone ) {\n\n\t\t\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\t\t\tbone.matrix.getInverse( bone.parent.matrixWorld );\n\t\t\t\t\t\tbone.matrix.multiply( bone.matrixWorld );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tbone.matrix.copy( bone.matrixWorld );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbone.matrix.decompose( bone.position, bone.quaternion, bone.scale );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdate: function () {\n\n\t\t\tvar bones = this.bones;\n\t\t\tvar boneInverses = this.boneInverses;\n\t\t\tvar boneMatrices = this.boneMatrices;\n\t\t\tvar boneTexture = this.boneTexture;\n\n\t\t\t// flatten bone matrices to array\n\n\t\t\tfor ( var i = 0, il = bones.length; i < il; i ++ ) {\n\n\t\t\t\t// compute the offset between the current and the original transform\n\n\t\t\t\tvar matrix = bones[ i ] ? bones[ i ].matrixWorld : _identityMatrix;\n\n\t\t\t\t_offsetMatrix.multiplyMatrices( matrix, boneInverses[ i ] );\n\t\t\t\t_offsetMatrix.toArray( boneMatrices, i * 16 );\n\n\t\t\t}\n\n\t\t\tif ( boneTexture !== undefined ) {\n\n\t\t\t\tboneTexture.needsUpdate = true;\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new Skeleton( this.bones, this.boneInverses );\n\n\t\t},\n\n\t\tgetBoneByName: function ( name ) {\n\n\t\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\tvar bone = this.bones[ i ];\n\n\t\t\t\tif ( bone.name === name ) {\n\n\t\t\t\t\treturn bone;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn undefined;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author ikerr / http://verold.com\n\t */\n\n\tfunction Bone() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Bone';\n\n\t}\n\n\tBone.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Bone,\n\n\t\tisBone: true\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _instanceLocalMatrix = new Matrix4();\n\tvar _instanceWorldMatrix = new Matrix4();\n\n\tvar _instanceIntersects = [];\n\n\tvar _mesh = new Mesh();\n\n\tfunction InstancedMesh( geometry, material, count ) {\n\n\t\tMesh.call( this, geometry, material );\n\n\t\tthis.instanceMatrix = new BufferAttribute( new Float32Array( count * 16 ), 16 );\n\n\t\tthis.count = count;\n\n\t\tthis.frustumCulled = false;\n\n\t}\n\n\tInstancedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {\n\n\t\tconstructor: InstancedMesh,\n\n\t\tisInstancedMesh: true,\n\n\t\tgetMatrixAt: function ( index, matrix ) {\n\n\t\t\tmatrix.fromArray( this.instanceMatrix.array, index * 16 );\n\n\t\t},\n\n\t\traycast: function ( raycaster, intersects ) {\n\n\t\t\tvar matrixWorld = this.matrixWorld;\n\t\t\tvar raycastTimes = this.count;\n\n\t\t\t_mesh.geometry = this.geometry;\n\t\t\t_mesh.material = this.material;\n\n\t\t\tif ( _mesh.material === undefined ) { return; }\n\n\t\t\tfor ( var instanceId = 0; instanceId < raycastTimes; instanceId ++ ) {\n\n\t\t\t\t// calculate the world matrix for each instance\n\n\t\t\t\tthis.getMatrixAt( instanceId, _instanceLocalMatrix );\n\n\t\t\t\t_instanceWorldMatrix.multiplyMatrices( matrixWorld, _instanceLocalMatrix );\n\n\t\t\t\t// the mesh represents this single instance\n\n\t\t\t\t_mesh.matrixWorld = _instanceWorldMatrix;\n\n\t\t\t\t_mesh.raycast( raycaster, _instanceIntersects );\n\n\t\t\t\t// process the result of raycast\n\n\t\t\t\tif ( _instanceIntersects.length > 0 ) {\n\n\t\t\t\t\t_instanceIntersects[ 0 ].instanceId = instanceId;\n\t\t\t\t\t_instanceIntersects[ 0 ].object = this;\n\n\t\t\t\t\tintersects.push( _instanceIntersects[ 0 ] );\n\n\t\t\t\t\t_instanceIntersects.length = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tsetMatrixAt: function ( index, matrix ) {\n\n\t\t\tmatrix.toArray( this.instanceMatrix.array, index * 16 );\n\n\t\t},\n\n\t\tupdateMorphTargets: function () {\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *\n\t *  linewidth: <float>,\n\t *  linecap: \"round\",\n\t *  linejoin: \"round\"\n\t * }\n\t */\n\n\tfunction LineBasicMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'LineBasicMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.linewidth = 1;\n\t\tthis.linecap = 'round';\n\t\tthis.linejoin = 'round';\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tLineBasicMaterial.prototype = Object.create( Material.prototype );\n\tLineBasicMaterial.prototype.constructor = LineBasicMaterial;\n\n\tLineBasicMaterial.prototype.isLineBasicMaterial = true;\n\n\tLineBasicMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.linewidth = source.linewidth;\n\t\tthis.linecap = source.linecap;\n\t\tthis.linejoin = source.linejoin;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _start = new Vector3();\n\tvar _end = new Vector3();\n\tvar _inverseMatrix$1 = new Matrix4();\n\tvar _ray$1 = new Ray();\n\tvar _sphere$2 = new Sphere();\n\n\tfunction Line( geometry, material, mode ) {\n\n\t\tif ( mode === 1 ) {\n\n\t\t\tconsole.error( 'THREE.Line: parameter THREE.LinePieces no longer supported. Use THREE.LineSegments instead.' );\n\n\t\t}\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Line';\n\n\t\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\t\tthis.material = material !== undefined ? material : new LineBasicMaterial();\n\n\t}\n\n\tLine.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Line,\n\n\t\tisLine: true,\n\n\t\tcomputeLineDistances: function () {\n\n\t\t\tvar geometry = this.geometry;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\t// we assume non-indexed geometry\n\n\t\t\t\tif ( geometry.index === null ) {\n\n\t\t\t\t\tvar positionAttribute = geometry.attributes.position;\n\t\t\t\t\tvar lineDistances = [ 0 ];\n\n\t\t\t\t\tfor ( var i = 1, l = positionAttribute.count; i < l; i ++ ) {\n\n\t\t\t\t\t\t_start.fromBufferAttribute( positionAttribute, i - 1 );\n\t\t\t\t\t\t_end.fromBufferAttribute( positionAttribute, i );\n\n\t\t\t\t\t\tlineDistances[ i ] = lineDistances[ i - 1 ];\n\t\t\t\t\t\tlineDistances[ i ] += _start.distanceTo( _end );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );\n\n\t\t\t\t}\n\n\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\tvar lineDistances = geometry.lineDistances;\n\n\t\t\t\tlineDistances[ 0 ] = 0;\n\n\t\t\t\tfor ( var i = 1, l = vertices.length; i < l; i ++ ) {\n\n\t\t\t\t\tlineDistances[ i ] = lineDistances[ i - 1 ];\n\t\t\t\t\tlineDistances[ i ] += vertices[ i - 1 ].distanceTo( vertices[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\traycast: function ( raycaster, intersects ) {\n\n\t\t\tvar precision = raycaster.linePrecision;\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar matrixWorld = this.matrixWorld;\n\n\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\tif ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }\n\n\t\t\t_sphere$2.copy( geometry.boundingSphere );\n\t\t\t_sphere$2.applyMatrix4( matrixWorld );\n\t\t\t_sphere$2.radius += precision;\n\n\t\t\tif ( raycaster.ray.intersectsSphere( _sphere$2 ) === false ) { return; }\n\n\t\t\t//\n\n\t\t\t_inverseMatrix$1.getInverse( matrixWorld );\n\t\t\t_ray$1.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$1 );\n\n\t\t\tvar localPrecision = precision / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n\t\t\tvar localPrecisionSq = localPrecision * localPrecision;\n\n\t\t\tvar vStart = new Vector3();\n\t\t\tvar vEnd = new Vector3();\n\t\t\tvar interSegment = new Vector3();\n\t\t\tvar interRay = new Vector3();\n\t\t\tvar step = ( this && this.isLineSegments ) ? 2 : 1;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\tfor ( var i = 0, l = indices.length - 1; i < l; i += step ) {\n\n\t\t\t\t\t\tvar a = indices[ i ];\n\t\t\t\t\t\tvar b = indices[ i + 1 ];\n\n\t\t\t\t\t\tvStart.fromArray( positions, a * 3 );\n\t\t\t\t\t\tvEnd.fromArray( positions, b * 3 );\n\n\t\t\t\t\t\tvar distSq = _ray$1.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n\t\t\t\t\t\tif ( distSq > localPrecisionSq ) { continue; }\n\n\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) { continue; }\n\n\t\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfor ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {\n\n\t\t\t\t\t\tvStart.fromArray( positions, 3 * i );\n\t\t\t\t\t\tvEnd.fromArray( positions, 3 * i + 3 );\n\n\t\t\t\t\t\tvar distSq = _ray$1.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n\t\t\t\t\t\tif ( distSq > localPrecisionSq ) { continue; }\n\n\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) { continue; }\n\n\t\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\tvar nbVertices = vertices.length;\n\n\t\t\t\tfor ( var i = 0; i < nbVertices - 1; i += step ) {\n\n\t\t\t\t\tvar distSq = _ray$1.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );\n\n\t\t\t\t\tif ( distSq > localPrecisionSq ) { continue; }\n\n\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) { continue; }\n\n\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\tface: null,\n\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _start$1 = new Vector3();\n\tvar _end$1 = new Vector3();\n\n\tfunction LineSegments( geometry, material ) {\n\n\t\tLine.call( this, geometry, material );\n\n\t\tthis.type = 'LineSegments';\n\n\t}\n\n\tLineSegments.prototype = Object.assign( Object.create( Line.prototype ), {\n\n\t\tconstructor: LineSegments,\n\n\t\tisLineSegments: true,\n\n\t\tcomputeLineDistances: function () {\n\n\t\t\tvar geometry = this.geometry;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\t// we assume non-indexed geometry\n\n\t\t\t\tif ( geometry.index === null ) {\n\n\t\t\t\t\tvar positionAttribute = geometry.attributes.position;\n\t\t\t\t\tvar lineDistances = [];\n\n\t\t\t\t\tfor ( var i = 0, l = positionAttribute.count; i < l; i += 2 ) {\n\n\t\t\t\t\t\t_start$1.fromBufferAttribute( positionAttribute, i );\n\t\t\t\t\t\t_end$1.fromBufferAttribute( positionAttribute, i + 1 );\n\n\t\t\t\t\t\tlineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];\n\t\t\t\t\t\tlineDistances[ i + 1 ] = lineDistances[ i ] + _start$1.distanceTo( _end$1 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );\n\n\t\t\t\t}\n\n\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\tvar lineDistances = geometry.lineDistances;\n\n\t\t\t\tfor ( var i = 0, l = vertices.length; i < l; i += 2 ) {\n\n\t\t\t\t\t_start$1.copy( vertices[ i ] );\n\t\t\t\t\t_end$1.copy( vertices[ i + 1 ] );\n\n\t\t\t\t\tlineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];\n\t\t\t\t\tlineDistances[ i + 1 ] = lineDistances[ i ] + _start$1.distanceTo( _end$1 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mgreter / http://github.com/mgreter\n\t */\n\n\tfunction LineLoop( geometry, material ) {\n\n\t\tLine.call( this, geometry, material );\n\n\t\tthis.type = 'LineLoop';\n\n\t}\n\n\tLineLoop.prototype = Object.assign( Object.create( Line.prototype ), {\n\n\t\tconstructor: LineLoop,\n\n\t\tisLineLoop: true,\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *  map: new THREE.Texture( <Image> ),\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  size: <float>,\n\t *  sizeAttenuation: <bool>\n\t *\n\t *  morphTargets: <bool>\n\t * }\n\t */\n\n\tfunction PointsMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'PointsMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.size = 1;\n\t\tthis.sizeAttenuation = true;\n\n\t\tthis.morphTargets = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tPointsMaterial.prototype = Object.create( Material.prototype );\n\tPointsMaterial.prototype.constructor = PointsMaterial;\n\n\tPointsMaterial.prototype.isPointsMaterial = true;\n\n\tPointsMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.size = source.size;\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\n\t\tthis.morphTargets = source.morphTargets;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tvar _inverseMatrix$2 = new Matrix4();\n\tvar _ray$2 = new Ray();\n\tvar _sphere$3 = new Sphere();\n\tvar _position$1 = new Vector3();\n\n\tfunction Points( geometry, material ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Points';\n\n\t\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\t\tthis.material = material !== undefined ? material : new PointsMaterial();\n\n\t\tthis.updateMorphTargets();\n\n\t}\n\n\tPoints.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Points,\n\n\t\tisPoints: true,\n\n\t\traycast: function ( raycaster, intersects ) {\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar matrixWorld = this.matrixWorld;\n\t\t\tvar threshold = raycaster.params.Points.threshold;\n\n\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\tif ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }\n\n\t\t\t_sphere$3.copy( geometry.boundingSphere );\n\t\t\t_sphere$3.applyMatrix4( matrixWorld );\n\t\t\t_sphere$3.radius += threshold;\n\n\t\t\tif ( raycaster.ray.intersectsSphere( _sphere$3 ) === false ) { return; }\n\n\t\t\t//\n\n\t\t\t_inverseMatrix$2.getInverse( matrixWorld );\n\t\t\t_ray$2.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$2 );\n\n\t\t\tvar localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n\t\t\tvar localThresholdSq = localThreshold * localThreshold;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\tfor ( var i = 0, il = indices.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar a = indices[ i ];\n\n\t\t\t\t\t\t_position$1.fromArray( positions, a * 3 );\n\n\t\t\t\t\t\ttestPoint( _position$1, a, localThresholdSq, matrixWorld, raycaster, intersects, this );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfor ( var i = 0, l = positions.length / 3; i < l; i ++ ) {\n\n\t\t\t\t\t\t_position$1.fromArray( positions, i * 3 );\n\n\t\t\t\t\t\ttestPoint( _position$1, i, localThresholdSq, matrixWorld, raycaster, intersects, this );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar vertices = geometry.vertices;\n\n\t\t\t\tfor ( var i = 0, l = vertices.length; i < l; i ++ ) {\n\n\t\t\t\t\ttestPoint( vertices[ i ], i, localThresholdSq, matrixWorld, raycaster, intersects, this );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdateMorphTargets: function () {\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar m, ml, name;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tvar morphAttributes = geometry.morphAttributes;\n\t\t\t\tvar keys = Object.keys( morphAttributes );\n\n\t\t\t\tif ( keys.length > 0 ) {\n\n\t\t\t\t\tvar morphAttribute = morphAttributes[ keys[ 0 ] ];\n\n\t\t\t\t\tif ( morphAttribute !== undefined ) {\n\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\t\tfor ( m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n\n\t\t\t\t\t\t\tname = morphAttribute[ m ].name || String( m );\n\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar morphTargets = geometry.morphTargets;\n\n\t\t\t\tif ( morphTargets !== undefined && morphTargets.length > 0 ) {\n\n\t\t\t\t\tconsole.error( 'THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t\t}\n\n\t} );\n\n\tfunction testPoint( point, index, localThresholdSq, matrixWorld, raycaster, intersects, object ) {\n\n\t\tvar rayPointDistanceSq = _ray$2.distanceSqToPoint( point );\n\n\t\tif ( rayPointDistanceSq < localThresholdSq ) {\n\n\t\t\tvar intersectPoint = new Vector3();\n\n\t\t\t_ray$2.closestPointToPoint( point, intersectPoint );\n\t\t\tintersectPoint.applyMatrix4( matrixWorld );\n\n\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectPoint );\n\n\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) { return; }\n\n\t\t\tintersects.push( {\n\n\t\t\t\tdistance: distance,\n\t\t\t\tdistanceToRay: Math.sqrt( rayPointDistanceSq ),\n\t\t\t\tpoint: intersectPoint,\n\t\t\t\tindex: index,\n\t\t\t\tface: null,\n\t\t\t\tobject: object\n\n\t\t\t} );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction VideoTexture( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\t\tTexture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.format = format !== undefined ? format : RGBFormat;\n\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : LinearFilter;\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\n\n\t\tthis.generateMipmaps = false;\n\n\t}\n\n\tVideoTexture.prototype = Object.assign( Object.create( Texture.prototype ), {\n\n\t\tconstructor: VideoTexture,\n\n\t\tisVideoTexture: true,\n\n\t\tupdate: function () {\n\n\t\t\tvar video = this.image;\n\n\t\t\tif ( video.readyState >= video.HAVE_CURRENT_DATA ) {\n\n\t\t\t\tthis.needsUpdate = true;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction CompressedTexture( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\n\t\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\t\tthis.image = { width: width, height: height };\n\t\tthis.mipmaps = mipmaps;\n\n\t\t// no flipping for cube textures\n\t\t// (also flipping doesn't work for compressed textures )\n\n\t\tthis.flipY = false;\n\n\t\t// can't generate mipmaps for compressed textures\n\t\t// mips must be embedded in DDS files\n\n\t\tthis.generateMipmaps = false;\n\n\t}\n\n\tCompressedTexture.prototype = Object.create( Texture.prototype );\n\tCompressedTexture.prototype.constructor = CompressedTexture;\n\n\tCompressedTexture.prototype.isCompressedTexture = true;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction CanvasTexture( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\t\tTexture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n\tCanvasTexture.prototype = Object.create( Texture.prototype );\n\tCanvasTexture.prototype.constructor = CanvasTexture;\n\tCanvasTexture.prototype.isCanvasTexture = true;\n\n\t/**\n\t * @author Matt DesLauriers / @mattdesl\n\t * @author atix / arthursilber.de\n\t */\n\n\tfunction DepthTexture( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {\n\n\t\tformat = format !== undefined ? format : DepthFormat;\n\n\t\tif ( format !== DepthFormat && format !== DepthStencilFormat ) {\n\n\t\t\tthrow new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' );\n\n\t\t}\n\n\t\tif ( type === undefined && format === DepthFormat ) { type = UnsignedShortType; }\n\t\tif ( type === undefined && format === DepthStencilFormat ) { type = UnsignedInt248Type; }\n\n\t\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.image = { width: width, height: height };\n\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\n\t\tthis.flipY = false;\n\t\tthis.generateMipmaps\t= false;\n\n\t}\n\n\tDepthTexture.prototype = Object.create( Texture.prototype );\n\tDepthTexture.prototype.constructor = DepthTexture;\n\tDepthTexture.prototype.isDepthTexture = true;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction WireframeGeometry( geometry ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'WireframeGeometry';\n\n\t\t// buffer\n\n\t\tvar vertices = [];\n\n\t\t// helper variables\n\n\t\tvar i, j, l, o, ol;\n\t\tvar edge = [ 0, 0 ], edges = {}, e, edge1, edge2;\n\t\tvar key, keys = [ 'a', 'b', 'c' ];\n\t\tvar vertex;\n\n\t\t// different logic for Geometry and BufferGeometry\n\n\t\tif ( geometry && geometry.isGeometry ) {\n\n\t\t\t// create a data structure that contains all edges without duplicates\n\n\t\t\tvar faces = geometry.faces;\n\n\t\t\tfor ( i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\tedge1 = face[ keys[ j ] ];\n\t\t\t\t\tedge2 = face[ keys[ ( j + 1 ) % 3 ] ];\n\t\t\t\t\tedge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates\n\t\t\t\t\tedge[ 1 ] = Math.max( edge1, edge2 );\n\n\t\t\t\t\tkey = edge[ 0 ] + ',' + edge[ 1 ];\n\n\t\t\t\t\tif ( edges[ key ] === undefined ) {\n\n\t\t\t\t\t\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// generate vertices\n\n\t\t\tfor ( key in edges ) {\n\n\t\t\t\te = edges[ key ];\n\n\t\t\t\tvertex = geometry.vertices[ e.index1 ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\tvertex = geometry.vertices[ e.index2 ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t} else if ( geometry && geometry.isBufferGeometry ) {\n\n\t\t\tvar position, indices, groups;\n\t\t\tvar group, start, count;\n\t\t\tvar index1, index2;\n\n\t\t\tvertex = new Vector3();\n\n\t\t\tif ( geometry.index !== null ) {\n\n\t\t\t\t// indexed BufferGeometry\n\n\t\t\t\tposition = geometry.attributes.position;\n\t\t\t\tindices = geometry.index;\n\t\t\t\tgroups = geometry.groups;\n\n\t\t\t\tif ( groups.length === 0 ) {\n\n\t\t\t\t\tgroups = [ { start: 0, count: indices.count, materialIndex: 0 } ];\n\n\t\t\t\t}\n\n\t\t\t\t// create a data structure that contains all eges without duplicates\n\n\t\t\t\tfor ( o = 0, ol = groups.length; o < ol; ++ o ) {\n\n\t\t\t\t\tgroup = groups[ o ];\n\n\t\t\t\t\tstart = group.start;\n\t\t\t\t\tcount = group.count;\n\n\t\t\t\t\tfor ( i = start, l = ( start + count ); i < l; i += 3 ) {\n\n\t\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\t\tedge1 = indices.getX( i + j );\n\t\t\t\t\t\t\tedge2 = indices.getX( i + ( j + 1 ) % 3 );\n\t\t\t\t\t\t\tedge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates\n\t\t\t\t\t\t\tedge[ 1 ] = Math.max( edge1, edge2 );\n\n\t\t\t\t\t\t\tkey = edge[ 0 ] + ',' + edge[ 1 ];\n\n\t\t\t\t\t\t\tif ( edges[ key ] === undefined ) {\n\n\t\t\t\t\t\t\t\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// generate vertices\n\n\t\t\t\tfor ( key in edges ) {\n\n\t\t\t\t\te = edges[ key ];\n\n\t\t\t\t\tvertex.fromBufferAttribute( position, e.index1 );\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\tvertex.fromBufferAttribute( position, e.index2 );\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// non-indexed BufferGeometry\n\n\t\t\t\tposition = geometry.attributes.position;\n\n\t\t\t\tfor ( i = 0, l = ( position.count / 3 ); i < l; i ++ ) {\n\n\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\t// three edges per triangle, an edge is represented as (index1, index2)\n\t\t\t\t\t\t// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)\n\n\t\t\t\t\t\tindex1 = 3 * i + j;\n\t\t\t\t\t\tvertex.fromBufferAttribute( position, index1 );\n\t\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\t\tindex2 = 3 * i + ( ( j + 1 ) % 3 );\n\t\t\t\t\t\tvertex.fromBufferAttribute( position, index2 );\n\t\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\n\t}\n\n\tWireframeGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tWireframeGeometry.prototype.constructor = WireframeGeometry;\n\n\t/**\n\t * @author zz85 / https://github.com/zz85\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t * Parametric Surfaces Geometry\n\t * based on the brilliant article by @prideout https://prideout.net/blog/old/blog/index.html@p=44.html\n\t */\n\n\t// ParametricGeometry\n\n\tfunction ParametricGeometry( func, slices, stacks ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'ParametricGeometry';\n\n\t\tthis.parameters = {\n\t\t\tfunc: func,\n\t\t\tslices: slices,\n\t\t\tstacks: stacks\n\t\t};\n\n\t\tthis.fromBufferGeometry( new ParametricBufferGeometry( func, slices, stacks ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tParametricGeometry.prototype = Object.create( Geometry.prototype );\n\tParametricGeometry.prototype.constructor = ParametricGeometry;\n\n\t// ParametricBufferGeometry\n\n\tfunction ParametricBufferGeometry( func, slices, stacks ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'ParametricBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tfunc: func,\n\t\t\tslices: slices,\n\t\t\tstacks: stacks\n\t\t};\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\tvar EPS = 0.00001;\n\n\t\tvar normal = new Vector3();\n\n\t\tvar p0 = new Vector3(), p1 = new Vector3();\n\t\tvar pu = new Vector3(), pv = new Vector3();\n\n\t\tvar i, j;\n\n\t\tif ( func.length < 3 ) {\n\n\t\t\tconsole.error( 'THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.' );\n\n\t\t}\n\n\t\t// generate vertices, normals and uvs\n\n\t\tvar sliceCount = slices + 1;\n\n\t\tfor ( i = 0; i <= stacks; i ++ ) {\n\n\t\t\tvar v = i / stacks;\n\n\t\t\tfor ( j = 0; j <= slices; j ++ ) {\n\n\t\t\t\tvar u = j / slices;\n\n\t\t\t\t// vertex\n\n\t\t\t\tfunc( u, v, p0 );\n\t\t\t\tvertices.push( p0.x, p0.y, p0.z );\n\n\t\t\t\t// normal\n\n\t\t\t\t// approximate tangent vectors via finite differences\n\n\t\t\t\tif ( u - EPS >= 0 ) {\n\n\t\t\t\t\tfunc( u - EPS, v, p1 );\n\t\t\t\t\tpu.subVectors( p0, p1 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfunc( u + EPS, v, p1 );\n\t\t\t\t\tpu.subVectors( p1, p0 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( v - EPS >= 0 ) {\n\n\t\t\t\t\tfunc( u, v - EPS, p1 );\n\t\t\t\t\tpv.subVectors( p0, p1 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfunc( u, v + EPS, p1 );\n\t\t\t\t\tpv.subVectors( p1, p0 );\n\n\t\t\t\t}\n\n\t\t\t\t// cross product of tangent vectors returns surface normal\n\n\t\t\t\tnormal.crossVectors( pu, pv ).normalize();\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( u, v );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( i = 0; i < stacks; i ++ ) {\n\n\t\t\tfor ( j = 0; j < slices; j ++ ) {\n\n\t\t\t\tvar a = i * sliceCount + j;\n\t\t\t\tvar b = i * sliceCount + j + 1;\n\t\t\t\tvar c = ( i + 1 ) * sliceCount + j + 1;\n\t\t\t\tvar d = ( i + 1 ) * sliceCount + j;\n\n\t\t\t\t// faces one and two\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tParametricBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tParametricBufferGeometry.prototype.constructor = ParametricBufferGeometry;\n\n\t/**\n\t * @author clockworkgeek / https://github.com/clockworkgeek\n\t * @author timothypratley / https://github.com/timothypratley\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// PolyhedronGeometry\n\n\tfunction PolyhedronGeometry( vertices, indices, radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'PolyhedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tvertices: vertices,\n\t\t\tindices: indices,\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new PolyhedronBufferGeometry( vertices, indices, radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tPolyhedronGeometry.prototype = Object.create( Geometry.prototype );\n\tPolyhedronGeometry.prototype.constructor = PolyhedronGeometry;\n\n\t// PolyhedronBufferGeometry\n\n\tfunction PolyhedronBufferGeometry( vertices, indices, radius, detail ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'PolyhedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tvertices: vertices,\n\t\t\tindices: indices,\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tradius = radius || 1;\n\t\tdetail = detail || 0;\n\n\t\t// default buffer data\n\n\t\tvar vertexBuffer = [];\n\t\tvar uvBuffer = [];\n\n\t\t// the subdivision creates the vertex buffer data\n\n\t\tsubdivide( detail );\n\n\t\t// all vertices should lie on a conceptual sphere with a given radius\n\n\t\tapplyRadius( radius );\n\n\t\t// finally, create the uv data\n\n\t\tgenerateUVs();\n\n\t\t// build non-indexed geometry\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertexBuffer, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( vertexBuffer.slice(), 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvBuffer, 2 ) );\n\n\t\tif ( detail === 0 ) {\n\n\t\t\tthis.computeVertexNormals(); // flat normals\n\n\t\t} else {\n\n\t\t\tthis.normalizeNormals(); // smooth normals\n\n\t\t}\n\n\t\t// helper functions\n\n\t\tfunction subdivide( detail ) {\n\n\t\t\tvar a = new Vector3();\n\t\t\tvar b = new Vector3();\n\t\t\tvar c = new Vector3();\n\n\t\t\t// iterate over all faces and apply a subdivison with the given detail value\n\n\t\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\n\n\t\t\t\t// get the vertices of the face\n\n\t\t\t\tgetVertexByIndex( indices[ i + 0 ], a );\n\t\t\t\tgetVertexByIndex( indices[ i + 1 ], b );\n\t\t\t\tgetVertexByIndex( indices[ i + 2 ], c );\n\n\t\t\t\t// perform subdivision\n\n\t\t\t\tsubdivideFace( a, b, c, detail );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction subdivideFace( a, b, c, detail ) {\n\n\t\t\tvar cols = Math.pow( 2, detail );\n\n\t\t\t// we use this multidimensional array as a data structure for creating the subdivision\n\n\t\t\tvar v = [];\n\n\t\t\tvar i, j;\n\n\t\t\t// construct all of the vertices for this subdivision\n\n\t\t\tfor ( i = 0; i <= cols; i ++ ) {\n\n\t\t\t\tv[ i ] = [];\n\n\t\t\t\tvar aj = a.clone().lerp( c, i / cols );\n\t\t\t\tvar bj = b.clone().lerp( c, i / cols );\n\n\t\t\t\tvar rows = cols - i;\n\n\t\t\t\tfor ( j = 0; j <= rows; j ++ ) {\n\n\t\t\t\t\tif ( j === 0 && i === cols ) {\n\n\t\t\t\t\t\tv[ i ][ j ] = aj;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tv[ i ][ j ] = aj.clone().lerp( bj, j / rows );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// construct all of the faces\n\n\t\t\tfor ( i = 0; i < cols; i ++ ) {\n\n\t\t\t\tfor ( j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {\n\n\t\t\t\t\tvar k = Math.floor( j / 2 );\n\n\t\t\t\t\tif ( j % 2 === 0 ) {\n\n\t\t\t\t\t\tpushVertex( v[ i ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k ] );\n\t\t\t\t\t\tpushVertex( v[ i ][ k ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tpushVertex( v[ i ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction applyRadius( radius ) {\n\n\t\t\tvar vertex = new Vector3();\n\n\t\t\t// iterate over the entire buffer and apply the radius to each vertex\n\n\t\t\tfor ( var i = 0; i < vertexBuffer.length; i += 3 ) {\n\n\t\t\t\tvertex.x = vertexBuffer[ i + 0 ];\n\t\t\t\tvertex.y = vertexBuffer[ i + 1 ];\n\t\t\t\tvertex.z = vertexBuffer[ i + 2 ];\n\n\t\t\t\tvertex.normalize().multiplyScalar( radius );\n\n\t\t\t\tvertexBuffer[ i + 0 ] = vertex.x;\n\t\t\t\tvertexBuffer[ i + 1 ] = vertex.y;\n\t\t\t\tvertexBuffer[ i + 2 ] = vertex.z;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateUVs() {\n\n\t\t\tvar vertex = new Vector3();\n\n\t\t\tfor ( var i = 0; i < vertexBuffer.length; i += 3 ) {\n\n\t\t\t\tvertex.x = vertexBuffer[ i + 0 ];\n\t\t\t\tvertex.y = vertexBuffer[ i + 1 ];\n\t\t\t\tvertex.z = vertexBuffer[ i + 2 ];\n\n\t\t\t\tvar u = azimuth( vertex ) / 2 / Math.PI + 0.5;\n\t\t\t\tvar v = inclination( vertex ) / Math.PI + 0.5;\n\t\t\t\tuvBuffer.push( u, 1 - v );\n\n\t\t\t}\n\n\t\t\tcorrectUVs();\n\n\t\t\tcorrectSeam();\n\n\t\t}\n\n\t\tfunction correctSeam() {\n\n\t\t\t// handle case when face straddles the seam, see #3269\n\n\t\t\tfor ( var i = 0; i < uvBuffer.length; i += 6 ) {\n\n\t\t\t\t// uv data of a single face\n\n\t\t\t\tvar x0 = uvBuffer[ i + 0 ];\n\t\t\t\tvar x1 = uvBuffer[ i + 2 ];\n\t\t\t\tvar x2 = uvBuffer[ i + 4 ];\n\n\t\t\t\tvar max = Math.max( x0, x1, x2 );\n\t\t\t\tvar min = Math.min( x0, x1, x2 );\n\n\t\t\t\t// 0.9 is somewhat arbitrary\n\n\t\t\t\tif ( max > 0.9 && min < 0.1 ) {\n\n\t\t\t\t\tif ( x0 < 0.2 ) { uvBuffer[ i + 0 ] += 1; }\n\t\t\t\t\tif ( x1 < 0.2 ) { uvBuffer[ i + 2 ] += 1; }\n\t\t\t\t\tif ( x2 < 0.2 ) { uvBuffer[ i + 4 ] += 1; }\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction pushVertex( vertex ) {\n\n\t\t\tvertexBuffer.push( vertex.x, vertex.y, vertex.z );\n\n\t\t}\n\n\t\tfunction getVertexByIndex( index, vertex ) {\n\n\t\t\tvar stride = index * 3;\n\n\t\t\tvertex.x = vertices[ stride + 0 ];\n\t\t\tvertex.y = vertices[ stride + 1 ];\n\t\t\tvertex.z = vertices[ stride + 2 ];\n\n\t\t}\n\n\t\tfunction correctUVs() {\n\n\t\t\tvar a = new Vector3();\n\t\t\tvar b = new Vector3();\n\t\t\tvar c = new Vector3();\n\n\t\t\tvar centroid = new Vector3();\n\n\t\t\tvar uvA = new Vector2();\n\t\t\tvar uvB = new Vector2();\n\t\t\tvar uvC = new Vector2();\n\n\t\t\tfor ( var i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6 ) {\n\n\t\t\t\ta.set( vertexBuffer[ i + 0 ], vertexBuffer[ i + 1 ], vertexBuffer[ i + 2 ] );\n\t\t\t\tb.set( vertexBuffer[ i + 3 ], vertexBuffer[ i + 4 ], vertexBuffer[ i + 5 ] );\n\t\t\t\tc.set( vertexBuffer[ i + 6 ], vertexBuffer[ i + 7 ], vertexBuffer[ i + 8 ] );\n\n\t\t\t\tuvA.set( uvBuffer[ j + 0 ], uvBuffer[ j + 1 ] );\n\t\t\t\tuvB.set( uvBuffer[ j + 2 ], uvBuffer[ j + 3 ] );\n\t\t\t\tuvC.set( uvBuffer[ j + 4 ], uvBuffer[ j + 5 ] );\n\n\t\t\t\tcentroid.copy( a ).add( b ).add( c ).divideScalar( 3 );\n\n\t\t\t\tvar azi = azimuth( centroid );\n\n\t\t\t\tcorrectUV( uvA, j + 0, a, azi );\n\t\t\t\tcorrectUV( uvB, j + 2, b, azi );\n\t\t\t\tcorrectUV( uvC, j + 4, c, azi );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction correctUV( uv, stride, vector, azimuth ) {\n\n\t\t\tif ( ( azimuth < 0 ) && ( uv.x === 1 ) ) {\n\n\t\t\t\tuvBuffer[ stride ] = uv.x - 1;\n\n\t\t\t}\n\n\t\t\tif ( ( vector.x === 0 ) && ( vector.z === 0 ) ) {\n\n\t\t\t\tuvBuffer[ stride ] = azimuth / 2 / Math.PI + 0.5;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Angle around the Y axis, counter-clockwise when looking from above.\n\n\t\tfunction azimuth( vector ) {\n\n\t\t\treturn Math.atan2( vector.z, - vector.x );\n\n\t\t}\n\n\n\t\t// Angle above the XZ plane.\n\n\t\tfunction inclination( vector ) {\n\n\t\t\treturn Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );\n\n\t\t}\n\n\t}\n\n\tPolyhedronBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tPolyhedronBufferGeometry.prototype.constructor = PolyhedronBufferGeometry;\n\n\t/**\n\t * @author timothypratley / https://github.com/timothypratley\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// TetrahedronGeometry\n\n\tfunction TetrahedronGeometry( radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TetrahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new TetrahedronBufferGeometry( radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTetrahedronGeometry.prototype = Object.create( Geometry.prototype );\n\tTetrahedronGeometry.prototype.constructor = TetrahedronGeometry;\n\n\t// TetrahedronBufferGeometry\n\n\tfunction TetrahedronBufferGeometry( radius, detail ) {\n\n\t\tvar vertices = [\n\t\t\t1, 1, 1, \t- 1, - 1, 1, \t- 1, 1, - 1, \t1, - 1, - 1\n\t\t];\n\n\t\tvar indices = [\n\t\t\t2, 1, 0, \t0, 3, 2,\t1, 3, 0,\t2, 3, 1\n\t\t];\n\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\t\tthis.type = 'TetrahedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tTetrahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\n\tTetrahedronBufferGeometry.prototype.constructor = TetrahedronBufferGeometry;\n\n\t/**\n\t * @author timothypratley / https://github.com/timothypratley\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// OctahedronGeometry\n\n\tfunction OctahedronGeometry( radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'OctahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new OctahedronBufferGeometry( radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tOctahedronGeometry.prototype = Object.create( Geometry.prototype );\n\tOctahedronGeometry.prototype.constructor = OctahedronGeometry;\n\n\t// OctahedronBufferGeometry\n\n\tfunction OctahedronBufferGeometry( radius, detail ) {\n\n\t\tvar vertices = [\n\t\t\t1, 0, 0, \t- 1, 0, 0,\t0, 1, 0,\n\t\t\t0, - 1, 0, \t0, 0, 1,\t0, 0, - 1\n\t\t];\n\n\t\tvar indices = [\n\t\t\t0, 2, 4,\t0, 4, 3,\t0, 3, 5,\n\t\t\t0, 5, 2,\t1, 2, 5,\t1, 5, 3,\n\t\t\t1, 3, 4,\t1, 4, 2\n\t\t];\n\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\t\tthis.type = 'OctahedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tOctahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\n\tOctahedronBufferGeometry.prototype.constructor = OctahedronBufferGeometry;\n\n\t/**\n\t * @author timothypratley / https://github.com/timothypratley\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// IcosahedronGeometry\n\n\tfunction IcosahedronGeometry( radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'IcosahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new IcosahedronBufferGeometry( radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tIcosahedronGeometry.prototype = Object.create( Geometry.prototype );\n\tIcosahedronGeometry.prototype.constructor = IcosahedronGeometry;\n\n\t// IcosahedronBufferGeometry\n\n\tfunction IcosahedronBufferGeometry( radius, detail ) {\n\n\t\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\n\t\tvar vertices = [\n\t\t\t- 1, t, 0, \t1, t, 0, \t- 1, - t, 0, \t1, - t, 0,\n\t\t\t 0, - 1, t, \t0, 1, t,\t0, - 1, - t, \t0, 1, - t,\n\t\t\t t, 0, - 1, \tt, 0, 1, \t- t, 0, - 1, \t- t, 0, 1\n\t\t];\n\n\t\tvar indices = [\n\t\t\t 0, 11, 5, \t0, 5, 1, \t0, 1, 7, \t0, 7, 10, \t0, 10, 11,\n\t\t\t 1, 5, 9, \t5, 11, 4,\t11, 10, 2,\t10, 7, 6,\t7, 1, 8,\n\t\t\t 3, 9, 4, \t3, 4, 2,\t3, 2, 6,\t3, 6, 8,\t3, 8, 9,\n\t\t\t 4, 9, 5, \t2, 4, 11,\t6, 2, 10,\t8, 6, 7,\t9, 8, 1\n\t\t];\n\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\t\tthis.type = 'IcosahedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tIcosahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\n\tIcosahedronBufferGeometry.prototype.constructor = IcosahedronBufferGeometry;\n\n\t/**\n\t * @author Abe Pazos / https://hamoid.com\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// DodecahedronGeometry\n\n\tfunction DodecahedronGeometry( radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'DodecahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new DodecahedronBufferGeometry( radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tDodecahedronGeometry.prototype = Object.create( Geometry.prototype );\n\tDodecahedronGeometry.prototype.constructor = DodecahedronGeometry;\n\n\t// DodecahedronBufferGeometry\n\n\tfunction DodecahedronBufferGeometry( radius, detail ) {\n\n\t\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\t\tvar r = 1 / t;\n\n\t\tvar vertices = [\n\n\t\t\t// (±1, ±1, ±1)\n\t\t\t- 1, - 1, - 1,\t- 1, - 1, 1,\n\t\t\t- 1, 1, - 1, - 1, 1, 1,\n\t\t\t1, - 1, - 1, 1, - 1, 1,\n\t\t\t1, 1, - 1, 1, 1, 1,\n\n\t\t\t// (0, ±1/φ, ±φ)\n\t\t\t 0, - r, - t, 0, - r, t,\n\t\t\t 0, r, - t, 0, r, t,\n\n\t\t\t// (±1/φ, ±φ, 0)\n\t\t\t- r, - t, 0, - r, t, 0,\n\t\t\t r, - t, 0, r, t, 0,\n\n\t\t\t// (±φ, 0, ±1/φ)\n\t\t\t- t, 0, - r, t, 0, - r,\n\t\t\t- t, 0, r, t, 0, r\n\t\t];\n\n\t\tvar indices = [\n\t\t\t3, 11, 7, \t3, 7, 15, \t3, 15, 13,\n\t\t\t7, 19, 17, \t7, 17, 6, \t7, 6, 15,\n\t\t\t17, 4, 8, \t17, 8, 10, \t17, 10, 6,\n\t\t\t8, 0, 16, \t8, 16, 2, \t8, 2, 10,\n\t\t\t0, 12, 1, \t0, 1, 18, \t0, 18, 16,\n\t\t\t6, 10, 2, \t6, 2, 13, \t6, 13, 15,\n\t\t\t2, 16, 18, \t2, 18, 3, \t2, 3, 13,\n\t\t\t18, 1, 9, \t18, 9, 11, \t18, 11, 3,\n\t\t\t4, 14, 12, \t4, 12, 0, \t4, 0, 8,\n\t\t\t11, 9, 5, \t11, 5, 19, \t11, 19, 7,\n\t\t\t19, 5, 14, \t19, 14, 4, \t19, 4, 17,\n\t\t\t1, 12, 14, \t1, 14, 5, \t1, 5, 9\n\t\t];\n\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\t\tthis.type = 'DodecahedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tDodecahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\n\tDodecahedronBufferGeometry.prototype.constructor = DodecahedronBufferGeometry;\n\n\t/**\n\t * @author oosmoxiecode / https://github.com/oosmoxiecode\n\t * @author WestLangley / https://github.com/WestLangley\n\t * @author zz85 / https://github.com/zz85\n\t * @author miningold / https://github.com/miningold\n\t * @author jonobr1 / https://github.com/jonobr1\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t */\n\n\t// TubeGeometry\n\n\tfunction TubeGeometry( path, tubularSegments, radius, radialSegments, closed, taper ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TubeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpath: path,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradius: radius,\n\t\t\tradialSegments: radialSegments,\n\t\t\tclosed: closed\n\t\t};\n\n\t\tif ( taper !== undefined ) { console.warn( 'THREE.TubeGeometry: taper has been removed.' ); }\n\n\t\tvar bufferGeometry = new TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed );\n\n\t\t// expose internals\n\n\t\tthis.tangents = bufferGeometry.tangents;\n\t\tthis.normals = bufferGeometry.normals;\n\t\tthis.binormals = bufferGeometry.binormals;\n\n\t\t// create geometry\n\n\t\tthis.fromBufferGeometry( bufferGeometry );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTubeGeometry.prototype = Object.create( Geometry.prototype );\n\tTubeGeometry.prototype.constructor = TubeGeometry;\n\n\t// TubeBufferGeometry\n\n\tfunction TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'TubeBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpath: path,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradius: radius,\n\t\t\tradialSegments: radialSegments,\n\t\t\tclosed: closed\n\t\t};\n\n\t\ttubularSegments = tubularSegments || 64;\n\t\tradius = radius || 1;\n\t\tradialSegments = radialSegments || 8;\n\t\tclosed = closed || false;\n\n\t\tvar frames = path.computeFrenetFrames( tubularSegments, closed );\n\n\t\t// expose internals\n\n\t\tthis.tangents = frames.tangents;\n\t\tthis.normals = frames.normals;\n\t\tthis.binormals = frames.binormals;\n\n\t\t// helper variables\n\n\t\tvar vertex = new Vector3();\n\t\tvar normal = new Vector3();\n\t\tvar uv = new Vector2();\n\t\tvar P = new Vector3();\n\n\t\tvar i, j;\n\n\t\t// buffer\n\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\t\tvar indices = [];\n\n\t\t// create buffer data\n\n\t\tgenerateBufferData();\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t// functions\n\n\t\tfunction generateBufferData() {\n\n\t\t\tfor ( i = 0; i < tubularSegments; i ++ ) {\n\n\t\t\t\tgenerateSegment( i );\n\n\t\t\t}\n\n\t\t\t// if the geometry is not closed, generate the last row of vertices and normals\n\t\t\t// at the regular position on the given path\n\t\t\t//\n\t\t\t// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)\n\n\t\t\tgenerateSegment( ( closed === false ) ? tubularSegments : 0 );\n\n\t\t\t// uvs are generated in a separate function.\n\t\t\t// this makes it easy compute correct values for closed geometries\n\n\t\t\tgenerateUVs();\n\n\t\t\t// finally create faces\n\n\t\t\tgenerateIndices();\n\n\t\t}\n\n\t\tfunction generateSegment( i ) {\n\n\t\t\t// we use getPointAt to sample evenly distributed points from the given path\n\n\t\t\tP = path.getPointAt( i / tubularSegments, P );\n\n\t\t\t// retrieve corresponding normal and binormal\n\n\t\t\tvar N = frames.normals[ i ];\n\t\t\tvar B = frames.binormals[ i ];\n\n\t\t\t// generate normals and vertices for the current segment\n\n\t\t\tfor ( j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\n\t\t\t\tvar sin = Math.sin( v );\n\t\t\t\tvar cos = - Math.cos( v );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormal.x = ( cos * N.x + sin * B.x );\n\t\t\t\tnormal.y = ( cos * N.y + sin * B.y );\n\t\t\t\tnormal.z = ( cos * N.z + sin * B.z );\n\t\t\t\tnormal.normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = P.x + radius * normal.x;\n\t\t\t\tvertex.y = P.y + radius * normal.y;\n\t\t\t\tvertex.z = P.z + radius * normal.z;\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateIndices() {\n\n\t\t\tfor ( j = 1; j <= tubularSegments; j ++ ) {\n\n\t\t\t\tfor ( i = 1; i <= radialSegments; i ++ ) {\n\n\t\t\t\t\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n\t\t\t\t\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\n\t\t\t\t\tvar c = ( radialSegments + 1 ) * j + i;\n\t\t\t\t\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateUVs() {\n\n\t\t\tfor ( i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\t\tfor ( j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\t\t\tuv.x = i / tubularSegments;\n\t\t\t\t\tuv.y = j / radialSegments;\n\n\t\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tTubeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tTubeBufferGeometry.prototype.constructor = TubeBufferGeometry;\n\n\tTubeBufferGeometry.prototype.toJSON = function () {\n\n\t\tvar data = BufferGeometry.prototype.toJSON.call( this );\n\n\t\tdata.path = this.parameters.path.toJSON();\n\n\t\treturn data;\n\n\t};\n\n\t/**\n\t * @author oosmoxiecode\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t * based on http://www.blackpawn.com/texts/pqtorus/\n\t */\n\n\t// TorusKnotGeometry\n\n\tfunction TorusKnotGeometry( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TorusKnotGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradialSegments: radialSegments,\n\t\t\tp: p,\n\t\t\tq: q\n\t\t};\n\n\t\tif ( heightScale !== undefined ) { console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' ); }\n\n\t\tthis.fromBufferGeometry( new TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTorusKnotGeometry.prototype = Object.create( Geometry.prototype );\n\tTorusKnotGeometry.prototype.constructor = TorusKnotGeometry;\n\n\t// TorusKnotBufferGeometry\n\n\tfunction TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'TorusKnotBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradialSegments: radialSegments,\n\t\t\tp: p,\n\t\t\tq: q\n\t\t};\n\n\t\tradius = radius || 1;\n\t\ttube = tube || 0.4;\n\t\ttubularSegments = Math.floor( tubularSegments ) || 64;\n\t\tradialSegments = Math.floor( radialSegments ) || 8;\n\t\tp = p || 2;\n\t\tq = q || 3;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar i, j;\n\n\t\tvar vertex = new Vector3();\n\t\tvar normal = new Vector3();\n\n\t\tvar P1 = new Vector3();\n\t\tvar P2 = new Vector3();\n\n\t\tvar B = new Vector3();\n\t\tvar T = new Vector3();\n\t\tvar N = new Vector3();\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( i = 0; i <= tubularSegments; ++ i ) {\n\n\t\t\t// the radian \"u\" is used to calculate the position on the torus curve of the current tubular segement\n\n\t\t\tvar u = i / tubularSegments * p * Math.PI * 2;\n\n\t\t\t// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\n\t\t\t// these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\n\n\t\t\tcalculatePositionOnCurve( u, p, q, radius, P1 );\n\t\t\tcalculatePositionOnCurve( u + 0.01, p, q, radius, P2 );\n\n\t\t\t// calculate orthonormal basis\n\n\t\t\tT.subVectors( P2, P1 );\n\t\t\tN.addVectors( P2, P1 );\n\t\t\tB.crossVectors( T, N );\n\t\t\tN.crossVectors( B, T );\n\n\t\t\t// normalize B, N. T can be ignored, we don't use it\n\n\t\t\tB.normalize();\n\t\t\tN.normalize();\n\n\t\t\tfor ( j = 0; j <= radialSegments; ++ j ) {\n\n\t\t\t\t// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\n\t\t\t\t// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\n\n\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\t\t\t\tvar cx = - tube * Math.cos( v );\n\t\t\t\tvar cy = tube * Math.sin( v );\n\n\t\t\t\t// now calculate the final vertex position.\n\t\t\t\t// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve\n\n\t\t\t\tvertex.x = P1.x + ( cx * N.x + cy * B.x );\n\t\t\t\tvertex.y = P1.y + ( cx * N.y + cy * B.y );\n\t\t\t\tvertex.z = P1.z + ( cx * N.z + cy * B.z );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\n\n\t\t\t\tnormal.subVectors( vertex, P1 ).normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( i / tubularSegments );\n\t\t\t\tuvs.push( j / radialSegments );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( j = 1; j <= tubularSegments; j ++ ) {\n\n\t\t\tfor ( i = 1; i <= radialSegments; i ++ ) {\n\n\t\t\t\t// indices\n\n\t\t\t\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n\t\t\t\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\n\t\t\t\tvar c = ( radialSegments + 1 ) * j + i;\n\t\t\t\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t// this function calculates the current position on the torus curve\n\n\t\tfunction calculatePositionOnCurve( u, p, q, radius, position ) {\n\n\t\t\tvar cu = Math.cos( u );\n\t\t\tvar su = Math.sin( u );\n\t\t\tvar quOverP = q / p * u;\n\t\t\tvar cs = Math.cos( quOverP );\n\n\t\t\tposition.x = radius * ( 2 + cs ) * 0.5 * cu;\n\t\t\tposition.y = radius * ( 2 + cs ) * su * 0.5;\n\t\t\tposition.z = radius * Math.sin( quOverP ) * 0.5;\n\n\t\t}\n\n\t}\n\n\tTorusKnotBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tTorusKnotBufferGeometry.prototype.constructor = TorusKnotBufferGeometry;\n\n\t/**\n\t * @author oosmoxiecode\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// TorusGeometry\n\n\tfunction TorusGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TorusGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\tradialSegments: radialSegments,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tarc: arc\n\t\t};\n\n\t\tthis.fromBufferGeometry( new TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTorusGeometry.prototype = Object.create( Geometry.prototype );\n\tTorusGeometry.prototype.constructor = TorusGeometry;\n\n\t// TorusBufferGeometry\n\n\tfunction TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'TorusBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\tradialSegments: radialSegments,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tarc: arc\n\t\t};\n\n\t\tradius = radius || 1;\n\t\ttube = tube || 0.4;\n\t\tradialSegments = Math.floor( radialSegments ) || 8;\n\t\ttubularSegments = Math.floor( tubularSegments ) || 6;\n\t\tarc = arc || Math.PI * 2;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar center = new Vector3();\n\t\tvar vertex = new Vector3();\n\t\tvar normal = new Vector3();\n\n\t\tvar j, i;\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\tfor ( i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\t\tvar u = i / tubularSegments * arc;\n\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\n\t\t\t\tvertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\n\t\t\t\tvertex.z = tube * Math.sin( v );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tcenter.x = radius * Math.cos( u );\n\t\t\t\tcenter.y = radius * Math.sin( u );\n\t\t\t\tnormal.subVectors( vertex, center ).normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( i / tubularSegments );\n\t\t\t\tuvs.push( j / radialSegments );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( j = 1; j <= radialSegments; j ++ ) {\n\n\t\t\tfor ( i = 1; i <= tubularSegments; i ++ ) {\n\n\t\t\t\t// indices\n\n\t\t\t\tvar a = ( tubularSegments + 1 ) * j + i - 1;\n\t\t\t\tvar b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\n\t\t\t\tvar c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\n\t\t\t\tvar d = ( tubularSegments + 1 ) * j + i;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tTorusBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tTorusBufferGeometry.prototype.constructor = TorusBufferGeometry;\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t * Port from https://github.com/mapbox/earcut (v2.1.5)\n\t */\n\n\tvar Earcut = {\n\n\t\ttriangulate: function ( data, holeIndices, dim ) {\n\n\t\t\tdim = dim || 2;\n\n\t\t\tvar hasHoles = holeIndices && holeIndices.length,\n\t\t\t\touterLen = hasHoles ? holeIndices[ 0 ] * dim : data.length,\n\t\t\t\touterNode = linkedList( data, 0, outerLen, dim, true ),\n\t\t\t\ttriangles = [];\n\n\t\t\tif ( ! outerNode || outerNode.next === outerNode.prev ) { return triangles; }\n\n\t\t\tvar minX, minY, maxX, maxY, x, y, invSize;\n\n\t\t\tif ( hasHoles ) { outerNode = eliminateHoles( data, holeIndices, outerNode, dim ); }\n\n\t\t\t// if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n\t\t\tif ( data.length > 80 * dim ) {\n\n\t\t\t\tminX = maxX = data[ 0 ];\n\t\t\t\tminY = maxY = data[ 1 ];\n\n\t\t\t\tfor ( var i = dim; i < outerLen; i += dim ) {\n\n\t\t\t\t\tx = data[ i ];\n\t\t\t\t\ty = data[ i + 1 ];\n\t\t\t\t\tif ( x < minX ) { minX = x; }\n\t\t\t\t\tif ( y < minY ) { minY = y; }\n\t\t\t\t\tif ( x > maxX ) { maxX = x; }\n\t\t\t\t\tif ( y > maxY ) { maxY = y; }\n\n\t\t\t\t}\n\n\t\t\t\t// minX, minY and invSize are later used to transform coords into integers for z-order calculation\n\t\t\t\tinvSize = Math.max( maxX - minX, maxY - minY );\n\t\t\t\tinvSize = invSize !== 0 ? 1 / invSize : 0;\n\n\t\t\t}\n\n\t\t\tearcutLinked( outerNode, triangles, dim, minX, minY, invSize );\n\n\t\t\treturn triangles;\n\n\t\t}\n\n\t};\n\n\t// create a circular doubly linked list from polygon points in the specified winding order\n\tfunction linkedList( data, start, end, dim, clockwise ) {\n\n\t\tvar i, last;\n\n\t\tif ( clockwise === ( signedArea( data, start, end, dim ) > 0 ) ) {\n\n\t\t\tfor ( i = start; i < end; i += dim ) { last = insertNode( i, data[ i ], data[ i + 1 ], last ); }\n\n\t\t} else {\n\n\t\t\tfor ( i = end - dim; i >= start; i -= dim ) { last = insertNode( i, data[ i ], data[ i + 1 ], last ); }\n\n\t\t}\n\n\t\tif ( last && equals( last, last.next ) ) {\n\n\t\t\tremoveNode( last );\n\t\t\tlast = last.next;\n\n\t\t}\n\n\t\treturn last;\n\n\t}\n\n\t// eliminate colinear or duplicate points\n\tfunction filterPoints( start, end ) {\n\n\t\tif ( ! start ) { return start; }\n\t\tif ( ! end ) { end = start; }\n\n\t\tvar p = start,\n\t\t\tagain;\n\t\tdo {\n\n\t\t\tagain = false;\n\n\t\t\tif ( ! p.steiner && ( equals( p, p.next ) || area( p.prev, p, p.next ) === 0 ) ) {\n\n\t\t\t\tremoveNode( p );\n\t\t\t\tp = end = p.prev;\n\t\t\t\tif ( p === p.next ) { break; }\n\t\t\t\tagain = true;\n\n\t\t\t} else {\n\n\t\t\t\tp = p.next;\n\n\t\t\t}\n\n\t\t} while ( again || p !== end );\n\n\t\treturn end;\n\n\t}\n\n\t// main ear slicing loop which triangulates a polygon (given as a linked list)\n\tfunction earcutLinked( ear, triangles, dim, minX, minY, invSize, pass ) {\n\n\t\tif ( ! ear ) { return; }\n\n\t\t// interlink polygon nodes in z-order\n\t\tif ( ! pass && invSize ) { indexCurve( ear, minX, minY, invSize ); }\n\n\t\tvar stop = ear,\n\t\t\tprev, next;\n\n\t\t// iterate through ears, slicing them one by one\n\t\twhile ( ear.prev !== ear.next ) {\n\n\t\t\tprev = ear.prev;\n\t\t\tnext = ear.next;\n\n\t\t\tif ( invSize ? isEarHashed( ear, minX, minY, invSize ) : isEar( ear ) ) {\n\n\t\t\t\t// cut off the triangle\n\t\t\t\ttriangles.push( prev.i / dim );\n\t\t\t\ttriangles.push( ear.i / dim );\n\t\t\t\ttriangles.push( next.i / dim );\n\n\t\t\t\tremoveNode( ear );\n\n\t\t\t\t// skipping the next vertex leads to less sliver triangles\n\t\t\t\tear = next.next;\n\t\t\t\tstop = next.next;\n\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tear = next;\n\n\t\t\t// if we looped through the whole remaining polygon and can't find any more ears\n\t\t\tif ( ear === stop ) {\n\n\t\t\t\t// try filtering points and slicing again\n\t\t\t\tif ( ! pass ) {\n\n\t\t\t\t\tearcutLinked( filterPoints( ear ), triangles, dim, minX, minY, invSize, 1 );\n\n\t\t\t\t\t// if this didn't work, try curing all small self-intersections locally\n\n\t\t\t\t} else if ( pass === 1 ) {\n\n\t\t\t\t\tear = cureLocalIntersections( ear, triangles, dim );\n\t\t\t\t\tearcutLinked( ear, triangles, dim, minX, minY, invSize, 2 );\n\n\t\t\t\t\t// as a last resort, try splitting the remaining polygon into two\n\n\t\t\t\t} else if ( pass === 2 ) {\n\n\t\t\t\t\tsplitEarcut( ear, triangles, dim, minX, minY, invSize );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// check whether a polygon node forms a valid ear with adjacent nodes\n\tfunction isEar( ear ) {\n\n\t\tvar a = ear.prev,\n\t\t\tb = ear,\n\t\t\tc = ear.next;\n\n\t\tif ( area( a, b, c ) >= 0 ) { return false; } // reflex, can't be an ear\n\n\t\t// now make sure we don't have other points inside the potential ear\n\t\tvar p = ear.next.next;\n\n\t\twhile ( p !== ear.prev ) {\n\n\t\t\tif ( pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\n\t\t\t\tarea( p.prev, p, p.next ) >= 0 ) { return false; }\n\t\t\tp = p.next;\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tfunction isEarHashed( ear, minX, minY, invSize ) {\n\n\t\tvar a = ear.prev,\n\t\t\tb = ear,\n\t\t\tc = ear.next;\n\n\t\tif ( area( a, b, c ) >= 0 ) { return false; } // reflex, can't be an ear\n\n\t\t// triangle bbox; min & max are calculated like this for speed\n\t\tvar minTX = a.x < b.x ? ( a.x < c.x ? a.x : c.x ) : ( b.x < c.x ? b.x : c.x ),\n\t\t\tminTY = a.y < b.y ? ( a.y < c.y ? a.y : c.y ) : ( b.y < c.y ? b.y : c.y ),\n\t\t\tmaxTX = a.x > b.x ? ( a.x > c.x ? a.x : c.x ) : ( b.x > c.x ? b.x : c.x ),\n\t\t\tmaxTY = a.y > b.y ? ( a.y > c.y ? a.y : c.y ) : ( b.y > c.y ? b.y : c.y );\n\n\t\t// z-order range for the current triangle bbox;\n\t\tvar minZ = zOrder( minTX, minTY, minX, minY, invSize ),\n\t\t\tmaxZ = zOrder( maxTX, maxTY, minX, minY, invSize );\n\n\t\tvar p = ear.prevZ,\n\t\t\tn = ear.nextZ;\n\n\t\t// look for points inside the triangle in both directions\n\t\twhile ( p && p.z >= minZ && n && n.z <= maxZ ) {\n\n\t\t\tif ( p !== ear.prev && p !== ear.next &&\n\t\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\n\t\t\t\tarea( p.prev, p, p.next ) >= 0 ) { return false; }\n\t\t\tp = p.prevZ;\n\n\t\t\tif ( n !== ear.prev && n !== ear.next &&\n\t\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y ) &&\n\t\t\t\tarea( n.prev, n, n.next ) >= 0 ) { return false; }\n\t\t\tn = n.nextZ;\n\n\t\t}\n\n\t\t// look for remaining points in decreasing z-order\n\t\twhile ( p && p.z >= minZ ) {\n\n\t\t\tif ( p !== ear.prev && p !== ear.next &&\n\t\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\n\t\t\t\tarea( p.prev, p, p.next ) >= 0 ) { return false; }\n\t\t\tp = p.prevZ;\n\n\t\t}\n\n\t\t// look for remaining points in increasing z-order\n\t\twhile ( n && n.z <= maxZ ) {\n\n\t\t\tif ( n !== ear.prev && n !== ear.next &&\n\t\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y ) &&\n\t\t\t\tarea( n.prev, n, n.next ) >= 0 ) { return false; }\n\t\t\tn = n.nextZ;\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\t// go through all polygon nodes and cure small local self-intersections\n\tfunction cureLocalIntersections( start, triangles, dim ) {\n\n\t\tvar p = start;\n\t\tdo {\n\n\t\t\tvar a = p.prev,\n\t\t\t\tb = p.next.next;\n\n\t\t\tif ( ! equals( a, b ) && intersects( a, p, p.next, b ) && locallyInside( a, b ) && locallyInside( b, a ) ) {\n\n\t\t\t\ttriangles.push( a.i / dim );\n\t\t\t\ttriangles.push( p.i / dim );\n\t\t\t\ttriangles.push( b.i / dim );\n\n\t\t\t\t// remove two nodes involved\n\t\t\t\tremoveNode( p );\n\t\t\t\tremoveNode( p.next );\n\n\t\t\t\tp = start = b;\n\n\t\t\t}\n\n\t\t\tp = p.next;\n\n\t\t} while ( p !== start );\n\n\t\treturn p;\n\n\t}\n\n\t// try splitting polygon into two and triangulate them independently\n\tfunction splitEarcut( start, triangles, dim, minX, minY, invSize ) {\n\n\t\t// look for a valid diagonal that divides the polygon into two\n\t\tvar a = start;\n\t\tdo {\n\n\t\t\tvar b = a.next.next;\n\t\t\twhile ( b !== a.prev ) {\n\n\t\t\t\tif ( a.i !== b.i && isValidDiagonal( a, b ) ) {\n\n\t\t\t\t\t// split the polygon in two by the diagonal\n\t\t\t\t\tvar c = splitPolygon( a, b );\n\n\t\t\t\t\t// filter colinear points around the cuts\n\t\t\t\t\ta = filterPoints( a, a.next );\n\t\t\t\t\tc = filterPoints( c, c.next );\n\n\t\t\t\t\t// run earcut on each half\n\t\t\t\t\tearcutLinked( a, triangles, dim, minX, minY, invSize );\n\t\t\t\t\tearcutLinked( c, triangles, dim, minX, minY, invSize );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tb = b.next;\n\n\t\t\t}\n\n\t\t\ta = a.next;\n\n\t\t} while ( a !== start );\n\n\t}\n\n\t// link every hole into the outer loop, producing a single-ring polygon without holes\n\tfunction eliminateHoles( data, holeIndices, outerNode, dim ) {\n\n\t\tvar queue = [],\n\t\t\ti, len, start, end, list;\n\n\t\tfor ( i = 0, len = holeIndices.length; i < len; i ++ ) {\n\n\t\t\tstart = holeIndices[ i ] * dim;\n\t\t\tend = i < len - 1 ? holeIndices[ i + 1 ] * dim : data.length;\n\t\t\tlist = linkedList( data, start, end, dim, false );\n\t\t\tif ( list === list.next ) { list.steiner = true; }\n\t\t\tqueue.push( getLeftmost( list ) );\n\n\t\t}\n\n\t\tqueue.sort( compareX );\n\n\t\t// process holes from left to right\n\t\tfor ( i = 0; i < queue.length; i ++ ) {\n\n\t\t\teliminateHole( queue[ i ], outerNode );\n\t\t\touterNode = filterPoints( outerNode, outerNode.next );\n\n\t\t}\n\n\t\treturn outerNode;\n\n\t}\n\n\tfunction compareX( a, b ) {\n\n\t\treturn a.x - b.x;\n\n\t}\n\n\t// find a bridge between vertices that connects hole with an outer ring and and link it\n\tfunction eliminateHole( hole, outerNode ) {\n\n\t\touterNode = findHoleBridge( hole, outerNode );\n\t\tif ( outerNode ) {\n\n\t\t\tvar b = splitPolygon( outerNode, hole );\n\t\t\tfilterPoints( b, b.next );\n\n\t\t}\n\n\t}\n\n\t// David Eberly's algorithm for finding a bridge between hole and outer polygon\n\tfunction findHoleBridge( hole, outerNode ) {\n\n\t\tvar p = outerNode,\n\t\t\thx = hole.x,\n\t\t\thy = hole.y,\n\t\t\tqx = - Infinity,\n\t\t\tm;\n\n\t\t// find a segment intersected by a ray from the hole's leftmost point to the left;\n\t\t// segment's endpoint with lesser x will be potential connection point\n\t\tdo {\n\n\t\t\tif ( hy <= p.y && hy >= p.next.y && p.next.y !== p.y ) {\n\n\t\t\t\tvar x = p.x + ( hy - p.y ) * ( p.next.x - p.x ) / ( p.next.y - p.y );\n\t\t\t\tif ( x <= hx && x > qx ) {\n\n\t\t\t\t\tqx = x;\n\t\t\t\t\tif ( x === hx ) {\n\n\t\t\t\t\t\tif ( hy === p.y ) { return p; }\n\t\t\t\t\t\tif ( hy === p.next.y ) { return p.next; }\n\n\t\t\t\t\t}\n\n\t\t\t\t\tm = p.x < p.next.x ? p : p.next;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tp = p.next;\n\n\t\t} while ( p !== outerNode );\n\n\t\tif ( ! m ) { return null; }\n\n\t\tif ( hx === qx ) { return m.prev; } // hole touches outer segment; pick lower endpoint\n\n\t\t// look for points inside the triangle of hole point, segment intersection and endpoint;\n\t\t// if there are no points found, we have a valid connection;\n\t\t// otherwise choose the point of the minimum angle with the ray as connection point\n\n\t\tvar stop = m,\n\t\t\tmx = m.x,\n\t\t\tmy = m.y,\n\t\t\ttanMin = Infinity,\n\t\t\ttan;\n\n\t\tp = m.next;\n\n\t\twhile ( p !== stop ) {\n\n\t\t\tif ( hx >= p.x && p.x >= mx && hx !== p.x &&\n\t\t\t\t\tpointInTriangle( hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y ) ) {\n\n\t\t\t\ttan = Math.abs( hy - p.y ) / ( hx - p.x ); // tangential\n\n\t\t\t\tif ( ( tan < tanMin || ( tan === tanMin && p.x > m.x ) ) && locallyInside( p, hole ) ) {\n\n\t\t\t\t\tm = p;\n\t\t\t\t\ttanMin = tan;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tp = p.next;\n\n\t\t}\n\n\t\treturn m;\n\n\t}\n\n\t// interlink polygon nodes in z-order\n\tfunction indexCurve( start, minX, minY, invSize ) {\n\n\t\tvar p = start;\n\t\tdo {\n\n\t\t\tif ( p.z === null ) { p.z = zOrder( p.x, p.y, minX, minY, invSize ); }\n\t\t\tp.prevZ = p.prev;\n\t\t\tp.nextZ = p.next;\n\t\t\tp = p.next;\n\n\t\t} while ( p !== start );\n\n\t\tp.prevZ.nextZ = null;\n\t\tp.prevZ = null;\n\n\t\tsortLinked( p );\n\n\t}\n\n\t// Simon Tatham's linked list merge sort algorithm\n\t// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\n\tfunction sortLinked( list ) {\n\n\t\tvar i, p, q, e, tail, numMerges, pSize, qSize,\n\t\t\tinSize = 1;\n\n\t\tdo {\n\n\t\t\tp = list;\n\t\t\tlist = null;\n\t\t\ttail = null;\n\t\t\tnumMerges = 0;\n\n\t\t\twhile ( p ) {\n\n\t\t\t\tnumMerges ++;\n\t\t\t\tq = p;\n\t\t\t\tpSize = 0;\n\t\t\t\tfor ( i = 0; i < inSize; i ++ ) {\n\n\t\t\t\t\tpSize ++;\n\t\t\t\t\tq = q.nextZ;\n\t\t\t\t\tif ( ! q ) { break; }\n\n\t\t\t\t}\n\n\t\t\t\tqSize = inSize;\n\n\t\t\t\twhile ( pSize > 0 || ( qSize > 0 && q ) ) {\n\n\t\t\t\t\tif ( pSize !== 0 && ( qSize === 0 || ! q || p.z <= q.z ) ) {\n\n\t\t\t\t\t\te = p;\n\t\t\t\t\t\tp = p.nextZ;\n\t\t\t\t\t\tpSize --;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\te = q;\n\t\t\t\t\t\tq = q.nextZ;\n\t\t\t\t\t\tqSize --;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( tail ) { tail.nextZ = e; }\n\t\t\t\t\telse { list = e; }\n\n\t\t\t\t\te.prevZ = tail;\n\t\t\t\t\ttail = e;\n\n\t\t\t\t}\n\n\t\t\t\tp = q;\n\n\t\t\t}\n\n\t\t\ttail.nextZ = null;\n\t\t\tinSize *= 2;\n\n\t\t} while ( numMerges > 1 );\n\n\t\treturn list;\n\n\t}\n\n\t// z-order of a point given coords and inverse of the longer side of data bbox\n\tfunction zOrder( x, y, minX, minY, invSize ) {\n\n\t\t// coords are transformed into non-negative 15-bit integer range\n\t\tx = 32767 * ( x - minX ) * invSize;\n\t\ty = 32767 * ( y - minY ) * invSize;\n\n\t\tx = ( x | ( x << 8 ) ) & 0x00FF00FF;\n\t\tx = ( x | ( x << 4 ) ) & 0x0F0F0F0F;\n\t\tx = ( x | ( x << 2 ) ) & 0x33333333;\n\t\tx = ( x | ( x << 1 ) ) & 0x55555555;\n\n\t\ty = ( y | ( y << 8 ) ) & 0x00FF00FF;\n\t\ty = ( y | ( y << 4 ) ) & 0x0F0F0F0F;\n\t\ty = ( y | ( y << 2 ) ) & 0x33333333;\n\t\ty = ( y | ( y << 1 ) ) & 0x55555555;\n\n\t\treturn x | ( y << 1 );\n\n\t}\n\n\t// find the leftmost node of a polygon ring\n\tfunction getLeftmost( start ) {\n\n\t\tvar p = start,\n\t\t\tleftmost = start;\n\t\tdo {\n\n\t\t\tif ( p.x < leftmost.x || ( p.x === leftmost.x && p.y < leftmost.y ) ) { leftmost = p; }\n\t\t\tp = p.next;\n\n\t\t} while ( p !== start );\n\n\t\treturn leftmost;\n\n\t}\n\n\t// check if a point lies within a convex triangle\n\tfunction pointInTriangle( ax, ay, bx, by, cx, cy, px, py ) {\n\n\t\treturn ( cx - px ) * ( ay - py ) - ( ax - px ) * ( cy - py ) >= 0 &&\n\t\t\t   ( ax - px ) * ( by - py ) - ( bx - px ) * ( ay - py ) >= 0 &&\n\t\t\t   ( bx - px ) * ( cy - py ) - ( cx - px ) * ( by - py ) >= 0;\n\n\t}\n\n\t// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\n\tfunction isValidDiagonal( a, b ) {\n\n\t\treturn a.next.i !== b.i && a.prev.i !== b.i && ! intersectsPolygon( a, b ) &&\n\t\t\t   locallyInside( a, b ) && locallyInside( b, a ) && middleInside( a, b );\n\n\t}\n\n\t// signed area of a triangle\n\tfunction area( p, q, r ) {\n\n\t\treturn ( q.y - p.y ) * ( r.x - q.x ) - ( q.x - p.x ) * ( r.y - q.y );\n\n\t}\n\n\t// check if two points are equal\n\tfunction equals( p1, p2 ) {\n\n\t\treturn p1.x === p2.x && p1.y === p2.y;\n\n\t}\n\n\t// check if two segments intersect\n\tfunction intersects( p1, q1, p2, q2 ) {\n\n\t\tif ( ( equals( p1, p2 ) && equals( q1, q2 ) ) ||\n\t\t\t( equals( p1, q2 ) && equals( p2, q1 ) ) ) { return true; }\n\t\treturn area( p1, q1, p2 ) > 0 !== area( p1, q1, q2 ) > 0 &&\n\t\t\t   area( p2, q2, p1 ) > 0 !== area( p2, q2, q1 ) > 0;\n\n\t}\n\n\t// check if a polygon diagonal intersects any polygon segments\n\tfunction intersectsPolygon( a, b ) {\n\n\t\tvar p = a;\n\t\tdo {\n\n\t\t\tif ( p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\n\t\t\t\t\tintersects( p, p.next, a, b ) ) { return true; }\n\t\t\tp = p.next;\n\n\t\t} while ( p !== a );\n\n\t\treturn false;\n\n\t}\n\n\t// check if a polygon diagonal is locally inside the polygon\n\tfunction locallyInside( a, b ) {\n\n\t\treturn area( a.prev, a, a.next ) < 0 ?\n\t\t\tarea( a, b, a.next ) >= 0 && area( a, a.prev, b ) >= 0 :\n\t\t\tarea( a, b, a.prev ) < 0 || area( a, a.next, b ) < 0;\n\n\t}\n\n\t// check if the middle point of a polygon diagonal is inside the polygon\n\tfunction middleInside( a, b ) {\n\n\t\tvar p = a,\n\t\t\tinside = false,\n\t\t\tpx = ( a.x + b.x ) / 2,\n\t\t\tpy = ( a.y + b.y ) / 2;\n\t\tdo {\n\n\t\t\tif ( ( ( p.y > py ) !== ( p.next.y > py ) ) && p.next.y !== p.y &&\n\t\t\t\t\t( px < ( p.next.x - p.x ) * ( py - p.y ) / ( p.next.y - p.y ) + p.x ) )\n\t\t\t\t{ inside = ! inside; }\n\t\t\tp = p.next;\n\n\t\t} while ( p !== a );\n\n\t\treturn inside;\n\n\t}\n\n\t// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n\t// if one belongs to the outer ring and another to a hole, it merges it into a single ring\n\tfunction splitPolygon( a, b ) {\n\n\t\tvar a2 = new Node( a.i, a.x, a.y ),\n\t\t\tb2 = new Node( b.i, b.x, b.y ),\n\t\t\tan = a.next,\n\t\t\tbp = b.prev;\n\n\t\ta.next = b;\n\t\tb.prev = a;\n\n\t\ta2.next = an;\n\t\tan.prev = a2;\n\n\t\tb2.next = a2;\n\t\ta2.prev = b2;\n\n\t\tbp.next = b2;\n\t\tb2.prev = bp;\n\n\t\treturn b2;\n\n\t}\n\n\t// create a node and optionally link it with previous one (in a circular doubly linked list)\n\tfunction insertNode( i, x, y, last ) {\n\n\t\tvar p = new Node( i, x, y );\n\n\t\tif ( ! last ) {\n\n\t\t\tp.prev = p;\n\t\t\tp.next = p;\n\n\t\t} else {\n\n\t\t\tp.next = last.next;\n\t\t\tp.prev = last;\n\t\t\tlast.next.prev = p;\n\t\t\tlast.next = p;\n\n\t\t}\n\n\t\treturn p;\n\n\t}\n\n\tfunction removeNode( p ) {\n\n\t\tp.next.prev = p.prev;\n\t\tp.prev.next = p.next;\n\n\t\tif ( p.prevZ ) { p.prevZ.nextZ = p.nextZ; }\n\t\tif ( p.nextZ ) { p.nextZ.prevZ = p.prevZ; }\n\n\t}\n\n\tfunction Node( i, x, y ) {\n\n\t\t// vertex index in coordinates array\n\t\tthis.i = i;\n\n\t\t// vertex coordinates\n\t\tthis.x = x;\n\t\tthis.y = y;\n\n\t\t// previous and next vertex nodes in a polygon ring\n\t\tthis.prev = null;\n\t\tthis.next = null;\n\n\t\t// z-order curve value\n\t\tthis.z = null;\n\n\t\t// previous and next nodes in z-order\n\t\tthis.prevZ = null;\n\t\tthis.nextZ = null;\n\n\t\t// indicates whether this is a steiner point\n\t\tthis.steiner = false;\n\n\t}\n\n\tfunction signedArea( data, start, end, dim ) {\n\n\t\tvar sum = 0;\n\t\tfor ( var i = start, j = end - dim; i < end; i += dim ) {\n\n\t\t\tsum += ( data[ j ] - data[ i ] ) * ( data[ i + 1 ] + data[ j + 1 ] );\n\t\t\tj = i;\n\n\t\t}\n\n\t\treturn sum;\n\n\t}\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t */\n\n\tvar ShapeUtils = {\n\n\t\t// calculate area of the contour polygon\n\n\t\tarea: function ( contour ) {\n\n\t\t\tvar n = contour.length;\n\t\t\tvar a = 0.0;\n\n\t\t\tfor ( var p = n - 1, q = 0; q < n; p = q ++ ) {\n\n\t\t\t\ta += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;\n\n\t\t\t}\n\n\t\t\treturn a * 0.5;\n\n\t\t},\n\n\t\tisClockWise: function ( pts ) {\n\n\t\t\treturn ShapeUtils.area( pts ) < 0;\n\n\t\t},\n\n\t\ttriangulateShape: function ( contour, holes ) {\n\n\t\t\tvar vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]\n\t\t\tvar holeIndices = []; // array of hole indices\n\t\t\tvar faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]\n\n\t\t\tremoveDupEndPts( contour );\n\t\t\taddContour( vertices, contour );\n\n\t\t\t//\n\n\t\t\tvar holeIndex = contour.length;\n\n\t\t\tholes.forEach( removeDupEndPts );\n\n\t\t\tfor ( var i = 0; i < holes.length; i ++ ) {\n\n\t\t\t\tholeIndices.push( holeIndex );\n\t\t\t\tholeIndex += holes[ i ].length;\n\t\t\t\taddContour( vertices, holes[ i ] );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar triangles = Earcut.triangulate( vertices, holeIndices );\n\n\t\t\t//\n\n\t\t\tfor ( var i = 0; i < triangles.length; i += 3 ) {\n\n\t\t\t\tfaces.push( triangles.slice( i, i + 3 ) );\n\n\t\t\t}\n\n\t\t\treturn faces;\n\n\t\t}\n\n\t};\n\n\tfunction removeDupEndPts( points ) {\n\n\t\tvar l = points.length;\n\n\t\tif ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {\n\n\t\t\tpoints.pop();\n\n\t\t}\n\n\t}\n\n\tfunction addContour( vertices, contour ) {\n\n\t\tfor ( var i = 0; i < contour.length; i ++ ) {\n\n\t\t\tvertices.push( contour[ i ].x );\n\t\t\tvertices.push( contour[ i ].y );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t *\n\t * Creates extruded geometry from a path shape.\n\t *\n\t * parameters = {\n\t *\n\t *  curveSegments: <int>, // number of points on the curves\n\t *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\n\t *  depth: <float>, // Depth to extrude the shape\n\t *\n\t *  bevelEnabled: <bool>, // turn on bevel\n\t *  bevelThickness: <float>, // how deep into the original shape bevel goes\n\t *  bevelSize: <float>, // how far from shape outline (including bevelOffset) is bevel\n\t *  bevelOffset: <float>, // how far from shape outline does bevel start\n\t *  bevelSegments: <int>, // number of bevel layers\n\t *\n\t *  extrudePath: <THREE.Curve> // curve to extrude shape along\n\t *\n\t *  UVGenerator: <Object> // object that provides UV generator functions\n\t *\n\t * }\n\t */\n\n\t// ExtrudeGeometry\n\n\tfunction ExtrudeGeometry( shapes, options ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'ExtrudeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\toptions: options\n\t\t};\n\n\t\tthis.fromBufferGeometry( new ExtrudeBufferGeometry( shapes, options ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tExtrudeGeometry.prototype = Object.create( Geometry.prototype );\n\tExtrudeGeometry.prototype.constructor = ExtrudeGeometry;\n\n\tExtrudeGeometry.prototype.toJSON = function () {\n\n\t\tvar data = Geometry.prototype.toJSON.call( this );\n\n\t\tvar shapes = this.parameters.shapes;\n\t\tvar options = this.parameters.options;\n\n\t\treturn toJSON( shapes, options, data );\n\n\t};\n\n\t// ExtrudeBufferGeometry\n\n\tfunction ExtrudeBufferGeometry( shapes, options ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'ExtrudeBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\toptions: options\n\t\t};\n\n\t\tshapes = Array.isArray( shapes ) ? shapes : [ shapes ];\n\n\t\tvar scope = this;\n\n\t\tvar verticesArray = [];\n\t\tvar uvArray = [];\n\n\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\tvar shape = shapes[ i ];\n\t\t\taddShape( shape );\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( verticesArray, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvArray, 2 ) );\n\n\t\tthis.computeVertexNormals();\n\n\t\t// functions\n\n\t\tfunction addShape( shape ) {\n\n\t\t\tvar placeholder = [];\n\n\t\t\t// options\n\n\t\t\tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\t\t\tvar steps = options.steps !== undefined ? options.steps : 1;\n\t\t\tvar depth = options.depth !== undefined ? options.depth : 100;\n\n\t\t\tvar bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;\n\t\t\tvar bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6;\n\t\t\tvar bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2;\n\t\t\tvar bevelOffset = options.bevelOffset !== undefined ? options.bevelOffset : 0;\n\t\t\tvar bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\n\n\t\t\tvar extrudePath = options.extrudePath;\n\n\t\t\tvar uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator;\n\n\t\t\t// deprecated options\n\n\t\t\tif ( options.amount !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.ExtrudeBufferGeometry: amount has been renamed to depth.' );\n\t\t\t\tdepth = options.amount;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar extrudePts, extrudeByPath = false;\n\t\t\tvar splineTube, binormal, normal, position2;\n\n\t\t\tif ( extrudePath ) {\n\n\t\t\t\textrudePts = extrudePath.getSpacedPoints( steps );\n\n\t\t\t\textrudeByPath = true;\n\t\t\t\tbevelEnabled = false; // bevels not supported for path extrusion\n\n\t\t\t\t// SETUP TNB variables\n\n\t\t\t\t// TODO1 - have a .isClosed in spline?\n\n\t\t\t\tsplineTube = extrudePath.computeFrenetFrames( steps, false );\n\n\t\t\t\t// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n\n\t\t\t\tbinormal = new Vector3();\n\t\t\t\tnormal = new Vector3();\n\t\t\t\tposition2 = new Vector3();\n\n\t\t\t}\n\n\t\t\t// Safeguards if bevels are not enabled\n\n\t\t\tif ( ! bevelEnabled ) {\n\n\t\t\t\tbevelSegments = 0;\n\t\t\t\tbevelThickness = 0;\n\t\t\t\tbevelSize = 0;\n\t\t\t\tbevelOffset = 0;\n\n\t\t\t}\n\n\t\t\t// Variables initialization\n\n\t\t\tvar ahole, h, hl; // looping of holes\n\n\t\t\tvar shapePoints = shape.extractPoints( curveSegments );\n\n\t\t\tvar vertices = shapePoints.shape;\n\t\t\tvar holes = shapePoints.holes;\n\n\t\t\tvar reverse = ! ShapeUtils.isClockWise( vertices );\n\n\t\t\tif ( reverse ) {\n\n\t\t\t\tvertices = vertices.reverse();\n\n\t\t\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe ...\n\n\t\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tahole = holes[ h ];\n\n\t\t\t\t\tif ( ShapeUtils.isClockWise( ahole ) ) {\n\n\t\t\t\t\t\tholes[ h ] = ahole.reverse();\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\tvar faces = ShapeUtils.triangulateShape( vertices, holes );\n\n\t\t\t/* Vertices */\n\n\t\t\tvar contour = vertices; // vertices has all points but contour has only points of circumference\n\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tahole = holes[ h ];\n\n\t\t\t\tvertices = vertices.concat( ahole );\n\n\t\t\t}\n\n\n\t\t\tfunction scalePt2( pt, vec, size ) {\n\n\t\t\t\tif ( ! vec ) { console.error( \"THREE.ExtrudeGeometry: vec does not exist\" ); }\n\n\t\t\t\treturn vec.clone().multiplyScalar( size ).add( pt );\n\n\t\t\t}\n\n\t\t\tvar b, bs, t, z,\n\t\t\t\tvert, vlen = vertices.length,\n\t\t\t\tface, flen = faces.length;\n\n\n\t\t\t// Find directions for point movement\n\n\n\t\t\tfunction getBevelVec( inPt, inPrev, inNext ) {\n\n\t\t\t\t// computes for inPt the corresponding point inPt' on a new contour\n\t\t\t\t//   shifted by 1 unit (length of normalized vector) to the left\n\t\t\t\t// if we walk along contour clockwise, this new contour is outside the old one\n\t\t\t\t//\n\t\t\t\t// inPt' is the intersection of the two lines parallel to the two\n\t\t\t\t//  adjacent edges of inPt at a distance of 1 unit on the left side.\n\n\t\t\t\tvar v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt\n\n\t\t\t\t// good reading for geometry algorithms (here: line-line intersection)\n\t\t\t\t// http://geomalgorithms.com/a05-_intersect-1.html\n\n\t\t\t\tvar v_prev_x = inPt.x - inPrev.x,\n\t\t\t\t\tv_prev_y = inPt.y - inPrev.y;\n\t\t\t\tvar v_next_x = inNext.x - inPt.x,\n\t\t\t\t\tv_next_y = inNext.y - inPt.y;\n\n\t\t\t\tvar v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );\n\n\t\t\t\t// check for collinear edges\n\t\t\t\tvar collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\t\t\tif ( Math.abs( collinear0 ) > Number.EPSILON ) {\n\n\t\t\t\t\t// not collinear\n\n\t\t\t\t\t// length of vectors for normalizing\n\n\t\t\t\t\tvar v_prev_len = Math.sqrt( v_prev_lensq );\n\t\t\t\t\tvar v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );\n\n\t\t\t\t\t// shift adjacent points by unit vectors to the left\n\n\t\t\t\t\tvar ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );\n\t\t\t\t\tvar ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );\n\n\t\t\t\t\tvar ptNextShift_x = ( inNext.x - v_next_y / v_next_len );\n\t\t\t\t\tvar ptNextShift_y = ( inNext.y + v_next_x / v_next_len );\n\n\t\t\t\t\t// scaling factor for v_prev to intersection point\n\n\t\t\t\t\tvar sf = ( ( ptNextShift_x - ptPrevShift_x ) * v_next_y -\n\t\t\t\t\t\t\t( ptNextShift_y - ptPrevShift_y ) * v_next_x ) /\n\t\t\t\t\t\t( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\t\t\t\t// vector from inPt to intersection point\n\n\t\t\t\t\tv_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );\n\t\t\t\t\tv_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );\n\n\t\t\t\t\t// Don't normalize!, otherwise sharp corners become ugly\n\t\t\t\t\t//  but prevent crazy spikes\n\t\t\t\t\tvar v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );\n\t\t\t\t\tif ( v_trans_lensq <= 2 ) {\n\n\t\t\t\t\t\treturn new Vector2( v_trans_x, v_trans_y );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_trans_lensq / 2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// handle special case of collinear edges\n\n\t\t\t\t\tvar direction_eq = false; // assumes: opposite\n\t\t\t\t\tif ( v_prev_x > Number.EPSILON ) {\n\n\t\t\t\t\t\tif ( v_next_x > Number.EPSILON ) {\n\n\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( v_prev_x < - Number.EPSILON ) {\n\n\t\t\t\t\t\t\tif ( v_next_x < - Number.EPSILON ) {\n\n\t\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {\n\n\t\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( direction_eq ) {\n\n\t\t\t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\n\t\t\t\t\t\tv_trans_x = - v_prev_y;\n\t\t\t\t\t\tv_trans_y = v_prev_x;\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// console.log(\"Warning: lines are a straight spike\");\n\t\t\t\t\t\tv_trans_x = v_prev_x;\n\t\t\t\t\t\tv_trans_y = v_prev_y;\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq / 2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn new Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );\n\n\t\t\t}\n\n\n\t\t\tvar contourMovements = [];\n\n\t\t\tfor ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\t\t\tif ( j === il ) { j = 0; }\n\t\t\t\tif ( k === il ) { k = 0; }\n\n\t\t\t\t//  (j)---(i)---(k)\n\t\t\t\t// console.log('i,j,k', i, j , k)\n\n\t\t\t\tcontourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );\n\n\t\t\t}\n\n\t\t\tvar holesMovements = [],\n\t\t\t\toneHoleMovements, verticesMovements = contourMovements.concat();\n\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tahole = holes[ h ];\n\n\t\t\t\toneHoleMovements = [];\n\n\t\t\t\tfor ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\t\t\t\tif ( j === il ) { j = 0; }\n\t\t\t\t\tif ( k === il ) { k = 0; }\n\n\t\t\t\t\t//  (j)---(i)---(k)\n\t\t\t\t\toneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );\n\n\t\t\t\t}\n\n\t\t\t\tholesMovements.push( oneHoleMovements );\n\t\t\t\tverticesMovements = verticesMovements.concat( oneHoleMovements );\n\n\t\t\t}\n\n\n\t\t\t// Loop bevelSegments, 1 for the front, 1 for the back\n\n\t\t\tfor ( b = 0; b < bevelSegments; b ++ ) {\n\n\t\t\t\t//for ( b = bevelSegments; b > 0; b -- ) {\n\n\t\t\t\tt = b / bevelSegments;\n\t\t\t\tz = bevelThickness * Math.cos( t * Math.PI / 2 );\n\t\t\t\tbs = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;\n\n\t\t\t\t// contract shape\n\n\t\t\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\n\n\t\t\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\n\t\t\t\t\tv( vert.x, vert.y, - z );\n\n\t\t\t\t}\n\n\t\t\t\t// expand holes\n\n\t\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tahole = holes[ h ];\n\t\t\t\t\toneHoleMovements = holesMovements[ h ];\n\n\t\t\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n\t\t\t\t\t\tv( vert.x, vert.y, - z );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tbs = bevelSize + bevelOffset;\n\n\t\t\t// Back facing vertices\n\n\t\t\tfor ( i = 0; i < vlen; i ++ ) {\n\n\t\t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\tv( vert.x, vert.y, 0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n\n\t\t\t\t\tnormal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );\n\t\t\t\t\tbinormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );\n\n\t\t\t\t\tposition2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );\n\n\t\t\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Add stepped vertices...\n\t\t\t// Including front facing vertices\n\n\t\t\tvar s;\n\n\t\t\tfor ( s = 1; s <= steps; s ++ ) {\n\n\t\t\t\tfor ( i = 0; i < vlen; i ++ ) {\n\n\t\t\t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n\t\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\t\tv( vert.x, vert.y, depth / steps * s );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n\n\t\t\t\t\t\tnormal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );\n\t\t\t\t\t\tbinormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );\n\n\t\t\t\t\t\tposition2.copy( extrudePts[ s ] ).add( normal ).add( binormal );\n\n\t\t\t\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\t// Add bevel segments planes\n\n\t\t\t//for ( b = 1; b <= bevelSegments; b ++ ) {\n\t\t\tfor ( b = bevelSegments - 1; b >= 0; b -- ) {\n\n\t\t\t\tt = b / bevelSegments;\n\t\t\t\tz = bevelThickness * Math.cos( t * Math.PI / 2 );\n\t\t\t\tbs = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;\n\n\t\t\t\t// contract shape\n\n\t\t\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\n\n\t\t\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\t\t\t\t\tv( vert.x, vert.y, depth + z );\n\n\t\t\t\t}\n\n\t\t\t\t// expand holes\n\n\t\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tahole = holes[ h ];\n\t\t\t\t\toneHoleMovements = holesMovements[ h ];\n\n\t\t\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n\t\t\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\t\t\tv( vert.x, vert.y, depth + z );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tv( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t/* Faces */\n\n\t\t\t// Top and bottom faces\n\n\t\t\tbuildLidFaces();\n\n\t\t\t// Sides faces\n\n\t\t\tbuildSideFaces();\n\n\n\t\t\t/////  Internal functions\n\n\t\t\tfunction buildLidFaces() {\n\n\t\t\t\tvar start = verticesArray.length / 3;\n\n\t\t\t\tif ( bevelEnabled ) {\n\n\t\t\t\t\tvar layer = 0; // steps + 1\n\t\t\t\t\tvar offset = vlen * layer;\n\n\t\t\t\t\t// Bottom faces\n\n\t\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\t\tf3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tlayer = steps + bevelSegments * 2;\n\t\t\t\t\toffset = vlen * layer;\n\n\t\t\t\t\t// Top faces\n\n\t\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\t\tf3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// Bottom faces\n\n\t\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\t\tf3( face[ 2 ], face[ 1 ], face[ 0 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Top faces\n\n\t\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\t\tf3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tscope.addGroup( start, verticesArray.length / 3 - start, 0 );\n\n\t\t\t}\n\n\t\t\t// Create faces for the z-sides of the shape\n\n\t\t\tfunction buildSideFaces() {\n\n\t\t\t\tvar start = verticesArray.length / 3;\n\t\t\t\tvar layeroffset = 0;\n\t\t\t\tsidewalls( contour, layeroffset );\n\t\t\t\tlayeroffset += contour.length;\n\n\t\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tahole = holes[ h ];\n\t\t\t\t\tsidewalls( ahole, layeroffset );\n\n\t\t\t\t\t//, true\n\t\t\t\t\tlayeroffset += ahole.length;\n\n\t\t\t\t}\n\n\n\t\t\t\tscope.addGroup( start, verticesArray.length / 3 - start, 1 );\n\n\n\t\t\t}\n\n\t\t\tfunction sidewalls( contour, layeroffset ) {\n\n\t\t\t\tvar j, k;\n\t\t\t\ti = contour.length;\n\n\t\t\t\twhile ( -- i >= 0 ) {\n\n\t\t\t\t\tj = i;\n\t\t\t\t\tk = i - 1;\n\t\t\t\t\tif ( k < 0 ) { k = contour.length - 1; }\n\n\t\t\t\t\t//console.log('b', i,j, i-1, k,vertices.length);\n\n\t\t\t\t\tvar s = 0,\n\t\t\t\t\t\tsl = steps + bevelSegments * 2;\n\n\t\t\t\t\tfor ( s = 0; s < sl; s ++ ) {\n\n\t\t\t\t\t\tvar slen1 = vlen * s;\n\t\t\t\t\t\tvar slen2 = vlen * ( s + 1 );\n\n\t\t\t\t\t\tvar a = layeroffset + j + slen1,\n\t\t\t\t\t\t\tb = layeroffset + k + slen1,\n\t\t\t\t\t\t\tc = layeroffset + k + slen2,\n\t\t\t\t\t\t\td = layeroffset + j + slen2;\n\n\t\t\t\t\t\tf4( a, b, c, d );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction v( x, y, z ) {\n\n\t\t\t\tplaceholder.push( x );\n\t\t\t\tplaceholder.push( y );\n\t\t\t\tplaceholder.push( z );\n\n\t\t\t}\n\n\n\t\t\tfunction f3( a, b, c ) {\n\n\t\t\t\taddVertex( a );\n\t\t\t\taddVertex( b );\n\t\t\t\taddVertex( c );\n\n\t\t\t\tvar nextIndex = verticesArray.length / 3;\n\t\t\t\tvar uvs = uvgen.generateTopUV( scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\n\n\t\t\t\taddUV( uvs[ 0 ] );\n\t\t\t\taddUV( uvs[ 1 ] );\n\t\t\t\taddUV( uvs[ 2 ] );\n\n\t\t\t}\n\n\t\t\tfunction f4( a, b, c, d ) {\n\n\t\t\t\taddVertex( a );\n\t\t\t\taddVertex( b );\n\t\t\t\taddVertex( d );\n\n\t\t\t\taddVertex( b );\n\t\t\t\taddVertex( c );\n\t\t\t\taddVertex( d );\n\n\n\t\t\t\tvar nextIndex = verticesArray.length / 3;\n\t\t\t\tvar uvs = uvgen.generateSideWallUV( scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\n\n\t\t\t\taddUV( uvs[ 0 ] );\n\t\t\t\taddUV( uvs[ 1 ] );\n\t\t\t\taddUV( uvs[ 3 ] );\n\n\t\t\t\taddUV( uvs[ 1 ] );\n\t\t\t\taddUV( uvs[ 2 ] );\n\t\t\t\taddUV( uvs[ 3 ] );\n\n\t\t\t}\n\n\t\t\tfunction addVertex( index ) {\n\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 0 ] );\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 1 ] );\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 2 ] );\n\n\t\t\t}\n\n\n\t\t\tfunction addUV( vector2 ) {\n\n\t\t\t\tuvArray.push( vector2.x );\n\t\t\t\tuvArray.push( vector2.y );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tExtrudeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tExtrudeBufferGeometry.prototype.constructor = ExtrudeBufferGeometry;\n\n\tExtrudeBufferGeometry.prototype.toJSON = function () {\n\n\t\tvar data = BufferGeometry.prototype.toJSON.call( this );\n\n\t\tvar shapes = this.parameters.shapes;\n\t\tvar options = this.parameters.options;\n\n\t\treturn toJSON( shapes, options, data );\n\n\t};\n\n\t//\n\n\tvar WorldUVGenerator = {\n\n\t\tgenerateTopUV: function ( geometry, vertices, indexA, indexB, indexC ) {\n\n\t\t\tvar a_x = vertices[ indexA * 3 ];\n\t\t\tvar a_y = vertices[ indexA * 3 + 1 ];\n\t\t\tvar b_x = vertices[ indexB * 3 ];\n\t\t\tvar b_y = vertices[ indexB * 3 + 1 ];\n\t\t\tvar c_x = vertices[ indexC * 3 ];\n\t\t\tvar c_y = vertices[ indexC * 3 + 1 ];\n\n\t\t\treturn [\n\t\t\t\tnew Vector2( a_x, a_y ),\n\t\t\t\tnew Vector2( b_x, b_y ),\n\t\t\t\tnew Vector2( c_x, c_y )\n\t\t\t];\n\n\t\t},\n\n\t\tgenerateSideWallUV: function ( geometry, vertices, indexA, indexB, indexC, indexD ) {\n\n\t\t\tvar a_x = vertices[ indexA * 3 ];\n\t\t\tvar a_y = vertices[ indexA * 3 + 1 ];\n\t\t\tvar a_z = vertices[ indexA * 3 + 2 ];\n\t\t\tvar b_x = vertices[ indexB * 3 ];\n\t\t\tvar b_y = vertices[ indexB * 3 + 1 ];\n\t\t\tvar b_z = vertices[ indexB * 3 + 2 ];\n\t\t\tvar c_x = vertices[ indexC * 3 ];\n\t\t\tvar c_y = vertices[ indexC * 3 + 1 ];\n\t\t\tvar c_z = vertices[ indexC * 3 + 2 ];\n\t\t\tvar d_x = vertices[ indexD * 3 ];\n\t\t\tvar d_y = vertices[ indexD * 3 + 1 ];\n\t\t\tvar d_z = vertices[ indexD * 3 + 2 ];\n\n\t\t\tif ( Math.abs( a_y - b_y ) < 0.01 ) {\n\n\t\t\t\treturn [\n\t\t\t\t\tnew Vector2( a_x, 1 - a_z ),\n\t\t\t\t\tnew Vector2( b_x, 1 - b_z ),\n\t\t\t\t\tnew Vector2( c_x, 1 - c_z ),\n\t\t\t\t\tnew Vector2( d_x, 1 - d_z )\n\t\t\t\t];\n\n\t\t\t} else {\n\n\t\t\t\treturn [\n\t\t\t\t\tnew Vector2( a_y, 1 - a_z ),\n\t\t\t\t\tnew Vector2( b_y, 1 - b_z ),\n\t\t\t\t\tnew Vector2( c_y, 1 - c_z ),\n\t\t\t\t\tnew Vector2( d_y, 1 - d_z )\n\t\t\t\t];\n\n\t\t\t}\n\n\t\t}\n\t};\n\n\tfunction toJSON( shapes, options, data ) {\n\n\t\t//\n\n\t\tdata.shapes = [];\n\n\t\tif ( Array.isArray( shapes ) ) {\n\n\t\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\t\tvar shape = shapes[ i ];\n\n\t\t\t\tdata.shapes.push( shape.uuid );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tdata.shapes.push( shapes.uuid );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( options.extrudePath !== undefined ) { data.options.extrudePath = options.extrudePath.toJSON(); }\n\n\t\treturn data;\n\n\t}\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * Text = 3D Text\n\t *\n\t * parameters = {\n\t *  font: <THREE.Font>, // font\n\t *\n\t *  size: <float>, // size of the text\n\t *  height: <float>, // thickness to extrude text\n\t *  curveSegments: <int>, // number of points on the curves\n\t *\n\t *  bevelEnabled: <bool>, // turn on bevel\n\t *  bevelThickness: <float>, // how deep into text bevel goes\n\t *  bevelSize: <float>, // how far from text outline (including bevelOffset) is bevel\n\t *  bevelOffset: <float> // how far from text outline does bevel start\n\t * }\n\t */\n\n\t// TextGeometry\n\n\tfunction TextGeometry( text, parameters ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TextGeometry';\n\n\t\tthis.parameters = {\n\t\t\ttext: text,\n\t\t\tparameters: parameters\n\t\t};\n\n\t\tthis.fromBufferGeometry( new TextBufferGeometry( text, parameters ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTextGeometry.prototype = Object.create( Geometry.prototype );\n\tTextGeometry.prototype.constructor = TextGeometry;\n\n\t// TextBufferGeometry\n\n\tfunction TextBufferGeometry( text, parameters ) {\n\n\t\tparameters = parameters || {};\n\n\t\tvar font = parameters.font;\n\n\t\tif ( ! ( font && font.isFont ) ) {\n\n\t\t\tconsole.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );\n\t\t\treturn new Geometry();\n\n\t\t}\n\n\t\tvar shapes = font.generateShapes( text, parameters.size );\n\n\t\t// translate parameters to ExtrudeGeometry API\n\n\t\tparameters.depth = parameters.height !== undefined ? parameters.height : 50;\n\n\t\t// defaults\n\n\t\tif ( parameters.bevelThickness === undefined ) { parameters.bevelThickness = 10; }\n\t\tif ( parameters.bevelSize === undefined ) { parameters.bevelSize = 8; }\n\t\tif ( parameters.bevelEnabled === undefined ) { parameters.bevelEnabled = false; }\n\n\t\tExtrudeBufferGeometry.call( this, shapes, parameters );\n\n\t\tthis.type = 'TextBufferGeometry';\n\n\t}\n\n\tTextBufferGeometry.prototype = Object.create( ExtrudeBufferGeometry.prototype );\n\tTextBufferGeometry.prototype.constructor = TextBufferGeometry;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// SphereGeometry\n\n\tfunction SphereGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'SphereGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tSphereGeometry.prototype = Object.create( Geometry.prototype );\n\tSphereGeometry.prototype.constructor = SphereGeometry;\n\n\t// SphereBufferGeometry\n\n\tfunction SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'SphereBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tradius = radius || 1;\n\n\t\twidthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );\n\t\theightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );\n\n\t\tphiStart = phiStart !== undefined ? phiStart : 0;\n\t\tphiLength = phiLength !== undefined ? phiLength : Math.PI * 2;\n\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI;\n\n\t\tvar thetaEnd = Math.min( thetaStart + thetaLength, Math.PI );\n\n\t\tvar ix, iy;\n\n\t\tvar index = 0;\n\t\tvar grid = [];\n\n\t\tvar vertex = new Vector3();\n\t\tvar normal = new Vector3();\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( iy = 0; iy <= heightSegments; iy ++ ) {\n\n\t\t\tvar verticesRow = [];\n\n\t\t\tvar v = iy / heightSegments;\n\n\t\t\t// special case for the poles\n\n\t\t\tvar uOffset = 0;\n\n\t\t\tif ( iy == 0 && thetaStart == 0 ) {\n\n\t\t\t\tuOffset = 0.5 / widthSegments;\n\n\t\t\t} else if ( iy == heightSegments && thetaEnd == Math.PI ) {\n\n\t\t\t\tuOffset = - 0.5 / widthSegments;\n\n\t\t\t}\n\n\t\t\tfor ( ix = 0; ix <= widthSegments; ix ++ ) {\n\n\t\t\t\tvar u = ix / widthSegments;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\t\t\t\tvertex.y = radius * Math.cos( thetaStart + v * thetaLength );\n\t\t\t\tvertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormal.copy( vertex ).normalize();\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( u + uOffset, 1 - v );\n\n\t\t\t\tverticesRow.push( index ++ );\n\n\t\t\t}\n\n\t\t\tgrid.push( verticesRow );\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( iy = 0; iy < heightSegments; iy ++ ) {\n\n\t\t\tfor ( ix = 0; ix < widthSegments; ix ++ ) {\n\n\t\t\t\tvar a = grid[ iy ][ ix + 1 ];\n\t\t\t\tvar b = grid[ iy ][ ix ];\n\t\t\t\tvar c = grid[ iy + 1 ][ ix ];\n\t\t\t\tvar d = grid[ iy + 1 ][ ix + 1 ];\n\n\t\t\t\tif ( iy !== 0 || thetaStart > 0 ) { indices.push( a, b, d ); }\n\t\t\t\tif ( iy !== heightSegments - 1 || thetaEnd < Math.PI ) { indices.push( b, c, d ); }\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tSphereBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tSphereBufferGeometry.prototype.constructor = SphereBufferGeometry;\n\n\t/**\n\t * @author Kaleb Murphy\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// RingGeometry\n\n\tfunction RingGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'RingGeometry';\n\n\t\tthis.parameters = {\n\t\t\tinnerRadius: innerRadius,\n\t\t\touterRadius: outerRadius,\n\t\t\tthetaSegments: thetaSegments,\n\t\t\tphiSegments: phiSegments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tRingGeometry.prototype = Object.create( Geometry.prototype );\n\tRingGeometry.prototype.constructor = RingGeometry;\n\n\t// RingBufferGeometry\n\n\tfunction RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'RingBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tinnerRadius: innerRadius,\n\t\t\touterRadius: outerRadius,\n\t\t\tthetaSegments: thetaSegments,\n\t\t\tphiSegments: phiSegments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tinnerRadius = innerRadius || 0.5;\n\t\touterRadius = outerRadius || 1;\n\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\t\tthetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;\n\t\tphiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// some helper variables\n\n\t\tvar segment;\n\t\tvar radius = innerRadius;\n\t\tvar radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );\n\t\tvar vertex = new Vector3();\n\t\tvar uv = new Vector2();\n\t\tvar j, i;\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( j = 0; j <= phiSegments; j ++ ) {\n\n\t\t\tfor ( i = 0; i <= thetaSegments; i ++ ) {\n\n\t\t\t\t// values are generate from the inside of the ring to the outside\n\n\t\t\t\tsegment = thetaStart + i / thetaSegments * thetaLength;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = radius * Math.cos( segment );\n\t\t\t\tvertex.y = radius * Math.sin( segment );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = ( vertex.x / outerRadius + 1 ) / 2;\n\t\t\t\tuv.y = ( vertex.y / outerRadius + 1 ) / 2;\n\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t}\n\n\t\t\t// increase the radius for next row of vertices\n\n\t\t\tradius += radiusStep;\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( j = 0; j < phiSegments; j ++ ) {\n\n\t\t\tvar thetaSegmentLevel = j * ( thetaSegments + 1 );\n\n\t\t\tfor ( i = 0; i < thetaSegments; i ++ ) {\n\n\t\t\t\tsegment = i + thetaSegmentLevel;\n\n\t\t\t\tvar a = segment;\n\t\t\t\tvar b = segment + thetaSegments + 1;\n\t\t\t\tvar c = segment + thetaSegments + 2;\n\t\t\t\tvar d = segment + 1;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tRingBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tRingBufferGeometry.prototype.constructor = RingBufferGeometry;\n\n\t/**\n\t * @author zz85 / https://github.com/zz85\n\t * @author bhouston / http://clara.io\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// LatheGeometry\n\n\tfunction LatheGeometry( points, segments, phiStart, phiLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'LatheGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpoints: points,\n\t\t\tsegments: segments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new LatheBufferGeometry( points, segments, phiStart, phiLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tLatheGeometry.prototype = Object.create( Geometry.prototype );\n\tLatheGeometry.prototype.constructor = LatheGeometry;\n\n\t// LatheBufferGeometry\n\n\tfunction LatheBufferGeometry( points, segments, phiStart, phiLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'LatheBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpoints: points,\n\t\t\tsegments: segments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength\n\t\t};\n\n\t\tsegments = Math.floor( segments ) || 12;\n\t\tphiStart = phiStart || 0;\n\t\tphiLength = phiLength || Math.PI * 2;\n\n\t\t// clamp phiLength so it's in range of [ 0, 2PI ]\n\n\t\tphiLength = MathUtils.clamp( phiLength, 0, Math.PI * 2 );\n\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar base;\n\t\tvar inverseSegments = 1.0 / segments;\n\t\tvar vertex = new Vector3();\n\t\tvar uv = new Vector2();\n\t\tvar i, j;\n\n\t\t// generate vertices and uvs\n\n\t\tfor ( i = 0; i <= segments; i ++ ) {\n\n\t\t\tvar phi = phiStart + i * inverseSegments * phiLength;\n\n\t\t\tvar sin = Math.sin( phi );\n\t\t\tvar cos = Math.cos( phi );\n\n\t\t\tfor ( j = 0; j <= ( points.length - 1 ); j ++ ) {\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = points[ j ].x * sin;\n\t\t\t\tvertex.y = points[ j ].y;\n\t\t\t\tvertex.z = points[ j ].x * cos;\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = i / segments;\n\t\t\t\tuv.y = j / ( points.length - 1 );\n\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\n\t\t\t}\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( i = 0; i < segments; i ++ ) {\n\n\t\t\tfor ( j = 0; j < ( points.length - 1 ); j ++ ) {\n\n\t\t\t\tbase = j + i * points.length;\n\n\t\t\t\tvar a = base;\n\t\t\t\tvar b = base + points.length;\n\t\t\t\tvar c = base + points.length + 1;\n\t\t\t\tvar d = base + 1;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t// generate normals\n\n\t\tthis.computeVertexNormals();\n\n\t\t// if the geometry is closed, we need to average the normals along the seam.\n\t\t// because the corresponding vertices are identical (but still have different UVs).\n\n\t\tif ( phiLength === Math.PI * 2 ) {\n\n\t\t\tvar normals = this.attributes.normal.array;\n\t\t\tvar n1 = new Vector3();\n\t\t\tvar n2 = new Vector3();\n\t\t\tvar n = new Vector3();\n\n\t\t\t// this is the buffer offset for the last line of vertices\n\n\t\t\tbase = segments * points.length * 3;\n\n\t\t\tfor ( i = 0, j = 0; i < points.length; i ++, j += 3 ) {\n\n\t\t\t\t// select the normal of the vertex in the first line\n\n\t\t\t\tn1.x = normals[ j + 0 ];\n\t\t\t\tn1.y = normals[ j + 1 ];\n\t\t\t\tn1.z = normals[ j + 2 ];\n\n\t\t\t\t// select the normal of the vertex in the last line\n\n\t\t\t\tn2.x = normals[ base + j + 0 ];\n\t\t\t\tn2.y = normals[ base + j + 1 ];\n\t\t\t\tn2.z = normals[ base + j + 2 ];\n\n\t\t\t\t// average normals\n\n\t\t\t\tn.addVectors( n1, n2 ).normalize();\n\n\t\t\t\t// assign the new values to both normals\n\n\t\t\t\tnormals[ j + 0 ] = normals[ base + j + 0 ] = n.x;\n\t\t\t\tnormals[ j + 1 ] = normals[ base + j + 1 ] = n.y;\n\t\t\t\tnormals[ j + 2 ] = normals[ base + j + 2 ] = n.z;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tLatheBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tLatheBufferGeometry.prototype.constructor = LatheBufferGeometry;\n\n\t/**\n\t * @author jonobr1 / http://jonobr1.com\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// ShapeGeometry\n\n\tfunction ShapeGeometry( shapes, curveSegments ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'ShapeGeometry';\n\n\t\tif ( typeof curveSegments === 'object' ) {\n\n\t\t\tconsole.warn( 'THREE.ShapeGeometry: Options parameter has been removed.' );\n\n\t\t\tcurveSegments = curveSegments.curveSegments;\n\n\t\t}\n\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\tcurveSegments: curveSegments\n\t\t};\n\n\t\tthis.fromBufferGeometry( new ShapeBufferGeometry( shapes, curveSegments ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tShapeGeometry.prototype = Object.create( Geometry.prototype );\n\tShapeGeometry.prototype.constructor = ShapeGeometry;\n\n\tShapeGeometry.prototype.toJSON = function () {\n\n\t\tvar data = Geometry.prototype.toJSON.call( this );\n\n\t\tvar shapes = this.parameters.shapes;\n\n\t\treturn toJSON$1( shapes, data );\n\n\t};\n\n\t// ShapeBufferGeometry\n\n\tfunction ShapeBufferGeometry( shapes, curveSegments ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'ShapeBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\tcurveSegments: curveSegments\n\t\t};\n\n\t\tcurveSegments = curveSegments || 12;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar groupStart = 0;\n\t\tvar groupCount = 0;\n\n\t\t// allow single and array values for \"shapes\" parameter\n\n\t\tif ( Array.isArray( shapes ) === false ) {\n\n\t\t\taddShape( shapes );\n\n\t\t} else {\n\n\t\t\tfor ( var i = 0; i < shapes.length; i ++ ) {\n\n\t\t\t\taddShape( shapes[ i ] );\n\n\t\t\t\tthis.addGroup( groupStart, groupCount, i ); // enables MultiMaterial support\n\n\t\t\t\tgroupStart += groupCount;\n\t\t\t\tgroupCount = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\n\t\t// helper functions\n\n\t\tfunction addShape( shape ) {\n\n\t\t\tvar i, l, shapeHole;\n\n\t\t\tvar indexOffset = vertices.length / 3;\n\t\t\tvar points = shape.extractPoints( curveSegments );\n\n\t\t\tvar shapeVertices = points.shape;\n\t\t\tvar shapeHoles = points.holes;\n\n\t\t\t// check direction of vertices\n\n\t\t\tif ( ShapeUtils.isClockWise( shapeVertices ) === false ) {\n\n\t\t\t\tshapeVertices = shapeVertices.reverse();\n\n\t\t\t}\n\n\t\t\tfor ( i = 0, l = shapeHoles.length; i < l; i ++ ) {\n\n\t\t\t\tshapeHole = shapeHoles[ i ];\n\n\t\t\t\tif ( ShapeUtils.isClockWise( shapeHole ) === true ) {\n\n\t\t\t\t\tshapeHoles[ i ] = shapeHole.reverse();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar faces = ShapeUtils.triangulateShape( shapeVertices, shapeHoles );\n\n\t\t\t// join vertices of inner and outer paths to a single array\n\n\t\t\tfor ( i = 0, l = shapeHoles.length; i < l; i ++ ) {\n\n\t\t\t\tshapeHole = shapeHoles[ i ];\n\t\t\t\tshapeVertices = shapeVertices.concat( shapeHole );\n\n\t\t\t}\n\n\t\t\t// vertices, normals, uvs\n\n\t\t\tfor ( i = 0, l = shapeVertices.length; i < l; i ++ ) {\n\n\t\t\t\tvar vertex = shapeVertices[ i ];\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, 0 );\n\t\t\t\tnormals.push( 0, 0, 1 );\n\t\t\t\tuvs.push( vertex.x, vertex.y ); // world uvs\n\n\t\t\t}\n\n\t\t\t// incides\n\n\t\t\tfor ( i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\tvar a = face[ 0 ] + indexOffset;\n\t\t\t\tvar b = face[ 1 ] + indexOffset;\n\t\t\t\tvar c = face[ 2 ] + indexOffset;\n\n\t\t\t\tindices.push( a, b, c );\n\t\t\t\tgroupCount += 3;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tShapeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tShapeBufferGeometry.prototype.constructor = ShapeBufferGeometry;\n\n\tShapeBufferGeometry.prototype.toJSON = function () {\n\n\t\tvar data = BufferGeometry.prototype.toJSON.call( this );\n\n\t\tvar shapes = this.parameters.shapes;\n\n\t\treturn toJSON$1( shapes, data );\n\n\t};\n\n\t//\n\n\tfunction toJSON$1( shapes, data ) {\n\n\t\tdata.shapes = [];\n\n\t\tif ( Array.isArray( shapes ) ) {\n\n\t\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\t\tvar shape = shapes[ i ];\n\n\t\t\t\tdata.shapes.push( shape.uuid );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tdata.shapes.push( shapes.uuid );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction EdgesGeometry( geometry, thresholdAngle ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'EdgesGeometry';\n\n\t\tthis.parameters = {\n\t\t\tthresholdAngle: thresholdAngle\n\t\t};\n\n\t\tthresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;\n\n\t\t// buffer\n\n\t\tvar vertices = [];\n\n\t\t// helper variables\n\n\t\tvar thresholdDot = Math.cos( MathUtils.DEG2RAD * thresholdAngle );\n\t\tvar edge = [ 0, 0 ], edges = {}, edge1, edge2;\n\t\tvar key, keys = [ 'a', 'b', 'c' ];\n\n\t\t// prepare source geometry\n\n\t\tvar geometry2;\n\n\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\tgeometry2 = new Geometry();\n\t\t\tgeometry2.fromBufferGeometry( geometry );\n\n\t\t} else {\n\n\t\t\tgeometry2 = geometry.clone();\n\n\t\t}\n\n\t\tgeometry2.mergeVertices();\n\t\tgeometry2.computeFaceNormals();\n\n\t\tvar sourceVertices = geometry2.vertices;\n\t\tvar faces = geometry2.faces;\n\n\t\t// now create a data structure where each entry represents an edge with its adjoining faces\n\n\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\n\t\t\t\tedge1 = face[ keys[ j ] ];\n\t\t\t\tedge2 = face[ keys[ ( j + 1 ) % 3 ] ];\n\t\t\t\tedge[ 0 ] = Math.min( edge1, edge2 );\n\t\t\t\tedge[ 1 ] = Math.max( edge1, edge2 );\n\n\t\t\t\tkey = edge[ 0 ] + ',' + edge[ 1 ];\n\n\t\t\t\tif ( edges[ key ] === undefined ) {\n\n\t\t\t\t\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ], face1: i, face2: undefined };\n\n\t\t\t\t} else {\n\n\t\t\t\t\tedges[ key ].face2 = i;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate vertices\n\n\t\tfor ( key in edges ) {\n\n\t\t\tvar e = edges[ key ];\n\n\t\t\t// an edge is only rendered if the angle (in degrees) between the face normals of the adjoining faces exceeds this value. default = 1 degree.\n\n\t\t\tif ( e.face2 === undefined || faces[ e.face1 ].normal.dot( faces[ e.face2 ].normal ) <= thresholdDot ) {\n\n\t\t\t\tvar vertex = sourceVertices[ e.index1 ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\tvertex = sourceVertices[ e.index2 ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\n\t}\n\n\tEdgesGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tEdgesGeometry.prototype.constructor = EdgesGeometry;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// CylinderGeometry\n\n\tfunction CylinderGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'CylinderGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradiusTop: radiusTop,\n\t\t\tradiusBottom: radiusBottom,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tCylinderGeometry.prototype = Object.create( Geometry.prototype );\n\tCylinderGeometry.prototype.constructor = CylinderGeometry;\n\n\t// CylinderBufferGeometry\n\n\tfunction CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'CylinderBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradiusTop: radiusTop,\n\t\t\tradiusBottom: radiusBottom,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tvar scope = this;\n\n\t\tradiusTop = radiusTop !== undefined ? radiusTop : 1;\n\t\tradiusBottom = radiusBottom !== undefined ? radiusBottom : 1;\n\t\theight = height || 1;\n\n\t\tradialSegments = Math.floor( radialSegments ) || 8;\n\t\theightSegments = Math.floor( heightSegments ) || 1;\n\n\t\topenEnded = openEnded !== undefined ? openEnded : false;\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0.0;\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar index = 0;\n\t\tvar indexArray = [];\n\t\tvar halfHeight = height / 2;\n\t\tvar groupStart = 0;\n\n\t\t// generate geometry\n\n\t\tgenerateTorso();\n\n\t\tif ( openEnded === false ) {\n\n\t\t\tif ( radiusTop > 0 ) { generateCap( true ); }\n\t\t\tif ( radiusBottom > 0 ) { generateCap( false ); }\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\tfunction generateTorso() {\n\n\t\t\tvar x, y;\n\t\t\tvar normal = new Vector3();\n\t\t\tvar vertex = new Vector3();\n\n\t\t\tvar groupCount = 0;\n\n\t\t\t// this will be used to calculate the normal\n\t\t\tvar slope = ( radiusBottom - radiusTop ) / height;\n\n\t\t\t// generate vertices, normals and uvs\n\n\t\t\tfor ( y = 0; y <= heightSegments; y ++ ) {\n\n\t\t\t\tvar indexRow = [];\n\n\t\t\t\tvar v = y / heightSegments;\n\n\t\t\t\t// calculate the radius of the current row\n\n\t\t\t\tvar radius = v * ( radiusBottom - radiusTop ) + radiusTop;\n\n\t\t\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\n\n\t\t\t\t\tvar u = x / radialSegments;\n\n\t\t\t\t\tvar theta = u * thetaLength + thetaStart;\n\n\t\t\t\t\tvar sinTheta = Math.sin( theta );\n\t\t\t\t\tvar cosTheta = Math.cos( theta );\n\n\t\t\t\t\t// vertex\n\n\t\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\t\tvertex.y = - v * height + halfHeight;\n\t\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\t// normal\n\n\t\t\t\t\tnormal.set( sinTheta, slope, cosTheta ).normalize();\n\t\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t\t// uv\n\n\t\t\t\t\tuvs.push( u, 1 - v );\n\n\t\t\t\t\t// save index of vertex in respective row\n\n\t\t\t\t\tindexRow.push( index ++ );\n\n\t\t\t\t}\n\n\t\t\t\t// now save vertices of the row in our index array\n\n\t\t\t\tindexArray.push( indexRow );\n\n\t\t\t}\n\n\t\t\t// generate indices\n\n\t\t\tfor ( x = 0; x < radialSegments; x ++ ) {\n\n\t\t\t\tfor ( y = 0; y < heightSegments; y ++ ) {\n\n\t\t\t\t\t// we use the index array to access the correct indices\n\n\t\t\t\t\tvar a = indexArray[ y ][ x ];\n\t\t\t\t\tvar b = indexArray[ y + 1 ][ x ];\n\t\t\t\t\tvar c = indexArray[ y + 1 ][ x + 1 ];\n\t\t\t\t\tvar d = indexArray[ y ][ x + 1 ];\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t\t// update group counter\n\n\t\t\t\t\tgroupCount += 6;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\tscope.addGroup( groupStart, groupCount, 0 );\n\n\t\t\t// calculate new start value for groups\n\n\t\t\tgroupStart += groupCount;\n\n\t\t}\n\n\t\tfunction generateCap( top ) {\n\n\t\t\tvar x, centerIndexStart, centerIndexEnd;\n\n\t\t\tvar uv = new Vector2();\n\t\t\tvar vertex = new Vector3();\n\n\t\t\tvar groupCount = 0;\n\n\t\t\tvar radius = ( top === true ) ? radiusTop : radiusBottom;\n\t\t\tvar sign = ( top === true ) ? 1 : - 1;\n\n\t\t\t// save the index of the first center vertex\n\t\t\tcenterIndexStart = index;\n\n\t\t\t// first we generate the center vertex data of the cap.\n\t\t\t// because the geometry needs one set of uvs per face,\n\t\t\t// we must generate a center vertex per face/segment\n\n\t\t\tfor ( x = 1; x <= radialSegments; x ++ ) {\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertices.push( 0, halfHeight * sign, 0 );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, sign, 0 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( 0.5, 0.5 );\n\n\t\t\t\t// increase index\n\n\t\t\t\tindex ++;\n\n\t\t\t}\n\n\t\t\t// save the index of the last center vertex\n\n\t\t\tcenterIndexEnd = index;\n\n\t\t\t// now we generate the surrounding vertices, normals and uvs\n\n\t\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\n\n\t\t\t\tvar u = x / radialSegments;\n\t\t\t\tvar theta = u * thetaLength + thetaStart;\n\n\t\t\t\tvar cosTheta = Math.cos( theta );\n\t\t\t\tvar sinTheta = Math.sin( theta );\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\tvertex.y = halfHeight * sign;\n\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, sign, 0 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = ( cosTheta * 0.5 ) + 0.5;\n\t\t\t\tuv.y = ( sinTheta * 0.5 * sign ) + 0.5;\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\t// increase index\n\n\t\t\t\tindex ++;\n\n\t\t\t}\n\n\t\t\t// generate indices\n\n\t\t\tfor ( x = 0; x < radialSegments; x ++ ) {\n\n\t\t\t\tvar c = centerIndexStart + x;\n\t\t\t\tvar i = centerIndexEnd + x;\n\n\t\t\t\tif ( top === true ) {\n\n\t\t\t\t\t// face top\n\n\t\t\t\t\tindices.push( i, i + 1, c );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// face bottom\n\n\t\t\t\t\tindices.push( i + 1, i, c );\n\n\t\t\t\t}\n\n\t\t\t\tgroupCount += 3;\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\tscope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );\n\n\t\t\t// calculate new start value for groups\n\n\t\t\tgroupStart += groupCount;\n\n\t\t}\n\n\t}\n\n\tCylinderBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tCylinderBufferGeometry.prototype.constructor = CylinderBufferGeometry;\n\n\t/**\n\t * @author abelnation / http://github.com/abelnation\n\t */\n\n\t// ConeGeometry\n\n\tfunction ConeGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\tCylinderGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\n\n\t\tthis.type = 'ConeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t}\n\n\tConeGeometry.prototype = Object.create( CylinderGeometry.prototype );\n\tConeGeometry.prototype.constructor = ConeGeometry;\n\n\t// ConeBufferGeometry\n\n\tfunction ConeBufferGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\tCylinderBufferGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\n\n\t\tthis.type = 'ConeBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t}\n\n\tConeBufferGeometry.prototype = Object.create( CylinderBufferGeometry.prototype );\n\tConeBufferGeometry.prototype.constructor = ConeBufferGeometry;\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t * @author Mugen87 / https://github.com/Mugen87\n\t * @author hughes\n\t */\n\n\t// CircleGeometry\n\n\tfunction CircleGeometry( radius, segments, thetaStart, thetaLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'CircleGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tsegments: segments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tCircleGeometry.prototype = Object.create( Geometry.prototype );\n\tCircleGeometry.prototype.constructor = CircleGeometry;\n\n\t// CircleBufferGeometry\n\n\tfunction CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'CircleBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tsegments: segments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tradius = radius || 1;\n\t\tsegments = segments !== undefined ? Math.max( 3, segments ) : 8;\n\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar i, s;\n\t\tvar vertex = new Vector3();\n\t\tvar uv = new Vector2();\n\n\t\t// center point\n\n\t\tvertices.push( 0, 0, 0 );\n\t\tnormals.push( 0, 0, 1 );\n\t\tuvs.push( 0.5, 0.5 );\n\n\t\tfor ( s = 0, i = 3; s <= segments; s ++, i += 3 ) {\n\n\t\t\tvar segment = thetaStart + s / segments * thetaLength;\n\n\t\t\t// vertex\n\n\t\t\tvertex.x = radius * Math.cos( segment );\n\t\t\tvertex.y = radius * Math.sin( segment );\n\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t// normal\n\n\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t// uvs\n\n\t\t\tuv.x = ( vertices[ i ] / radius + 1 ) / 2;\n\t\t\tuv.y = ( vertices[ i + 1 ] / radius + 1 ) / 2;\n\n\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( i = 1; i <= segments; i ++ ) {\n\n\t\t\tindices.push( i, i + 1, 0 );\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tCircleBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tCircleBufferGeometry.prototype.constructor = CircleBufferGeometry;\n\n\n\n\tvar Geometries = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tWireframeGeometry: WireframeGeometry,\n\t\tParametricGeometry: ParametricGeometry,\n\t\tParametricBufferGeometry: ParametricBufferGeometry,\n\t\tTetrahedronGeometry: TetrahedronGeometry,\n\t\tTetrahedronBufferGeometry: TetrahedronBufferGeometry,\n\t\tOctahedronGeometry: OctahedronGeometry,\n\t\tOctahedronBufferGeometry: OctahedronBufferGeometry,\n\t\tIcosahedronGeometry: IcosahedronGeometry,\n\t\tIcosahedronBufferGeometry: IcosahedronBufferGeometry,\n\t\tDodecahedronGeometry: DodecahedronGeometry,\n\t\tDodecahedronBufferGeometry: DodecahedronBufferGeometry,\n\t\tPolyhedronGeometry: PolyhedronGeometry,\n\t\tPolyhedronBufferGeometry: PolyhedronBufferGeometry,\n\t\tTubeGeometry: TubeGeometry,\n\t\tTubeBufferGeometry: TubeBufferGeometry,\n\t\tTorusKnotGeometry: TorusKnotGeometry,\n\t\tTorusKnotBufferGeometry: TorusKnotBufferGeometry,\n\t\tTorusGeometry: TorusGeometry,\n\t\tTorusBufferGeometry: TorusBufferGeometry,\n\t\tTextGeometry: TextGeometry,\n\t\tTextBufferGeometry: TextBufferGeometry,\n\t\tSphereGeometry: SphereGeometry,\n\t\tSphereBufferGeometry: SphereBufferGeometry,\n\t\tRingGeometry: RingGeometry,\n\t\tRingBufferGeometry: RingBufferGeometry,\n\t\tPlaneGeometry: PlaneGeometry,\n\t\tPlaneBufferGeometry: PlaneBufferGeometry,\n\t\tLatheGeometry: LatheGeometry,\n\t\tLatheBufferGeometry: LatheBufferGeometry,\n\t\tShapeGeometry: ShapeGeometry,\n\t\tShapeBufferGeometry: ShapeBufferGeometry,\n\t\tExtrudeGeometry: ExtrudeGeometry,\n\t\tExtrudeBufferGeometry: ExtrudeBufferGeometry,\n\t\tEdgesGeometry: EdgesGeometry,\n\t\tConeGeometry: ConeGeometry,\n\t\tConeBufferGeometry: ConeBufferGeometry,\n\t\tCylinderGeometry: CylinderGeometry,\n\t\tCylinderBufferGeometry: CylinderBufferGeometry,\n\t\tCircleGeometry: CircleGeometry,\n\t\tCircleBufferGeometry: CircleBufferGeometry,\n\t\tBoxGeometry: BoxGeometry,\n\t\tBoxBufferGeometry: BoxBufferGeometry\n\t});\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t *\n\t * parameters = {\n\t *  color: <THREE.Color>\n\t * }\n\t */\n\n\tfunction ShadowMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'ShadowMaterial';\n\n\t\tthis.color = new Color( 0x000000 );\n\t\tthis.transparent = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tShadowMaterial.prototype = Object.create( Material.prototype );\n\tShadowMaterial.prototype.constructor = ShadowMaterial;\n\n\tShadowMaterial.prototype.isShadowMaterial = true;\n\n\tShadowMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction RawShaderMaterial( parameters ) {\n\n\t\tShaderMaterial.call( this, parameters );\n\n\t\tthis.type = 'RawShaderMaterial';\n\n\t}\n\n\tRawShaderMaterial.prototype = Object.create( ShaderMaterial.prototype );\n\tRawShaderMaterial.prototype.constructor = RawShaderMaterial;\n\n\tRawShaderMaterial.prototype.isRawShaderMaterial = true;\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  roughness: <float>,\n\t *  metalness: <float>,\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  emissive: <hex>,\n\t *  emissiveIntensity: <float>\n\t *  emissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *  bumpMap: new THREE.Texture( <Image> ),\n\t *  bumpScale: <float>,\n\t *\n\t *  normalMap: new THREE.Texture( <Image> ),\n\t *  normalMapType: THREE.TangentSpaceNormalMap,\n\t *  normalScale: <Vector2>,\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  roughnessMap: new THREE.Texture( <Image> ),\n\t *\n\t *  metalnessMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *  envMapIntensity: <float>\n\t *\n\t *  refractionRatio: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshStandardMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.defines = { 'STANDARD': '' };\n\n\t\tthis.type = 'MeshStandardMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\t\tthis.roughness = 1.0;\n\t\tthis.metalness = 0.0;\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.roughnessMap = null;\n\n\t\tthis.metalnessMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.envMapIntensity = 1.0;\n\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshStandardMaterial.prototype = Object.create( Material.prototype );\n\tMeshStandardMaterial.prototype.constructor = MeshStandardMaterial;\n\n\tMeshStandardMaterial.prototype.isMeshStandardMaterial = true;\n\n\tMeshStandardMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.defines = { 'STANDARD': '' };\n\n\t\tthis.color.copy( source.color );\n\t\tthis.roughness = source.roughness;\n\t\tthis.metalness = source.metalness;\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.roughnessMap = source.roughnessMap;\n\n\t\tthis.metalnessMap = source.metalnessMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.envMapIntensity = source.envMapIntensity;\n\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *  reflectivity: <float>\n\t *  clearcoat: <float>\n\t *  clearcoatRoughness: <float>\n\t *\n\t *  sheen: <Color>\n\t *\n\t *  clearcoatNormalScale: <Vector2>,\n\t *  clearcoatNormalMap: new THREE.Texture( <Image> ),\n\t * }\n\t */\n\n\tfunction MeshPhysicalMaterial( parameters ) {\n\n\t\tMeshStandardMaterial.call( this );\n\n\t\tthis.defines = {\n\n\t\t\t'STANDARD': '',\n\t\t\t'PHYSICAL': ''\n\n\t\t};\n\n\t\tthis.type = 'MeshPhysicalMaterial';\n\n\t\tthis.reflectivity = 0.5; // maps to F0 = 0.04\n\n\t\tthis.clearcoat = 0.0;\n\t\tthis.clearcoatRoughness = 0.0;\n\n\t\tthis.sheen = null; // null will disable sheen bsdf\n\n\t\tthis.clearcoatNormalScale = new Vector2( 1, 1 );\n\t\tthis.clearcoatNormalMap = null;\n\n\t\tthis.transparency = 0.0;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshPhysicalMaterial.prototype = Object.create( MeshStandardMaterial.prototype );\n\tMeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;\n\n\tMeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;\n\n\tMeshPhysicalMaterial.prototype.copy = function ( source ) {\n\n\t\tMeshStandardMaterial.prototype.copy.call( this, source );\n\n\t\tthis.defines = {\n\n\t\t\t'STANDARD': '',\n\t\t\t'PHYSICAL': ''\n\n\t\t};\n\n\t\tthis.reflectivity = source.reflectivity;\n\n\t\tthis.clearcoat = source.clearcoat;\n\t\tthis.clearcoatRoughness = source.clearcoatRoughness;\n\n\t\tif ( source.sheen ) { this.sheen = ( this.sheen || new Color() ).copy( source.sheen ); }\n\t\telse { this.sheen = null; }\n\n\t\tthis.clearcoatNormalMap = source.clearcoatNormalMap;\n\t\tthis.clearcoatNormalScale.copy( source.clearcoatNormalScale );\n\n\t\tthis.transparency = source.transparency;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  specular: <hex>,\n\t *  shininess: <float>,\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  emissive: <hex>,\n\t *  emissiveIntensity: <float>\n\t *  emissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *  bumpMap: new THREE.Texture( <Image> ),\n\t *  bumpScale: <float>,\n\t *\n\t *  normalMap: new THREE.Texture( <Image> ),\n\t *  normalMapType: THREE.TangentSpaceNormalMap,\n\t *  normalScale: <Vector2>,\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  specularMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *  combine: THREE.MultiplyOperation,\n\t *  reflectivity: <float>,\n\t *  refractionRatio: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshPhongMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshPhongMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\t\tthis.specular = new Color( 0x111111 );\n\t\tthis.shininess = 30;\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshPhongMaterial.prototype = Object.create( Material.prototype );\n\tMeshPhongMaterial.prototype.constructor = MeshPhongMaterial;\n\n\tMeshPhongMaterial.prototype.isMeshPhongMaterial = true;\n\n\tMeshPhongMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\t\tthis.specular.copy( source.specular );\n\t\tthis.shininess = source.shininess;\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author takahirox / http://github.com/takahirox\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  specular: <hex>,\n\t *  shininess: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *  gradientMap: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  emissive: <hex>,\n\t *  emissiveIntensity: <float>\n\t *  emissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *  bumpMap: new THREE.Texture( <Image> ),\n\t *  bumpScale: <float>,\n\t *\n\t *  normalMap: new THREE.Texture( <Image> ),\n\t *  normalMapType: THREE.TangentSpaceNormalMap,\n\t *  normalScale: <Vector2>,\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  specularMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshToonMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.defines = { 'TOON': '' };\n\n\t\tthis.type = 'MeshToonMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\t\tthis.specular = new Color( 0x111111 );\n\t\tthis.shininess = 30;\n\n\t\tthis.map = null;\n\t\tthis.gradientMap = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshToonMaterial.prototype = Object.create( Material.prototype );\n\tMeshToonMaterial.prototype.constructor = MeshToonMaterial;\n\n\tMeshToonMaterial.prototype.isMeshToonMaterial = true;\n\n\tMeshToonMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\t\tthis.specular.copy( source.specular );\n\t\tthis.shininess = source.shininess;\n\n\t\tthis.map = source.map;\n\t\tthis.gradientMap = source.gradientMap;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *  opacity: <float>,\n\t *\n\t *  bumpMap: new THREE.Texture( <Image> ),\n\t *  bumpScale: <float>,\n\t *\n\t *  normalMap: new THREE.Texture( <Image> ),\n\t *  normalMapType: THREE.TangentSpaceNormalMap,\n\t *  normalScale: <Vector2>,\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshNormalMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshNormalMaterial';\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.fog = false;\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshNormalMaterial.prototype = Object.create( Material.prototype );\n\tMeshNormalMaterial.prototype.constructor = MeshNormalMaterial;\n\n\tMeshNormalMaterial.prototype.isMeshNormalMaterial = true;\n\n\tMeshNormalMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  emissive: <hex>,\n\t *  emissiveIntensity: <float>\n\t *  emissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *  specularMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *  combine: THREE.Multiply,\n\t *  reflectivity: <float>,\n\t *  refractionRatio: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshLambertMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshLambertMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshLambertMaterial.prototype = Object.create( Material.prototype );\n\tMeshLambertMaterial.prototype.constructor = MeshLambertMaterial;\n\n\tMeshLambertMaterial.prototype.isMeshLambertMaterial = true;\n\n\tMeshLambertMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *\n\t *  matcap: new THREE.Texture( <Image> ),\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  bumpMap: new THREE.Texture( <Image> ),\n\t *  bumpScale: <float>,\n\t *\n\t *  normalMap: new THREE.Texture( <Image> ),\n\t *  normalMapType: THREE.TangentSpaceNormalMap,\n\t *  normalScale: <Vector2>,\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshMatcapMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.defines = { 'MATCAP': '' };\n\n\t\tthis.type = 'MeshMatcapMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\n\t\tthis.matcap = null;\n\n\t\tthis.map = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshMatcapMaterial.prototype = Object.create( Material.prototype );\n\tMeshMatcapMaterial.prototype.constructor = MeshMatcapMaterial;\n\n\tMeshMatcapMaterial.prototype.isMeshMatcapMaterial = true;\n\n\tMeshMatcapMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.defines = { 'MATCAP': '' };\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.matcap = source.matcap;\n\n\t\tthis.map = source.map;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *\n\t *  linewidth: <float>,\n\t *\n\t *  scale: <float>,\n\t *  dashSize: <float>,\n\t *  gapSize: <float>\n\t * }\n\t */\n\n\tfunction LineDashedMaterial( parameters ) {\n\n\t\tLineBasicMaterial.call( this );\n\n\t\tthis.type = 'LineDashedMaterial';\n\n\t\tthis.scale = 1;\n\t\tthis.dashSize = 3;\n\t\tthis.gapSize = 1;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tLineDashedMaterial.prototype = Object.create( LineBasicMaterial.prototype );\n\tLineDashedMaterial.prototype.constructor = LineDashedMaterial;\n\n\tLineDashedMaterial.prototype.isLineDashedMaterial = true;\n\n\tLineDashedMaterial.prototype.copy = function ( source ) {\n\n\t\tLineBasicMaterial.prototype.copy.call( this, source );\n\n\t\tthis.scale = source.scale;\n\t\tthis.dashSize = source.dashSize;\n\t\tthis.gapSize = source.gapSize;\n\n\t\treturn this;\n\n\t};\n\n\n\n\tvar Materials = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tShadowMaterial: ShadowMaterial,\n\t\tSpriteMaterial: SpriteMaterial,\n\t\tRawShaderMaterial: RawShaderMaterial,\n\t\tShaderMaterial: ShaderMaterial,\n\t\tPointsMaterial: PointsMaterial,\n\t\tMeshPhysicalMaterial: MeshPhysicalMaterial,\n\t\tMeshStandardMaterial: MeshStandardMaterial,\n\t\tMeshPhongMaterial: MeshPhongMaterial,\n\t\tMeshToonMaterial: MeshToonMaterial,\n\t\tMeshNormalMaterial: MeshNormalMaterial,\n\t\tMeshLambertMaterial: MeshLambertMaterial,\n\t\tMeshDepthMaterial: MeshDepthMaterial,\n\t\tMeshDistanceMaterial: MeshDistanceMaterial,\n\t\tMeshBasicMaterial: MeshBasicMaterial,\n\t\tMeshMatcapMaterial: MeshMatcapMaterial,\n\t\tLineDashedMaterial: LineDashedMaterial,\n\t\tLineBasicMaterial: LineBasicMaterial,\n\t\tMaterial: Material\n\t});\n\n\t/**\n\t * @author tschw\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t */\n\n\tvar AnimationUtils = {\n\n\t\t// same as Array.prototype.slice, but also works on typed arrays\n\t\tarraySlice: function ( array, from, to ) {\n\n\t\t\tif ( AnimationUtils.isTypedArray( array ) ) {\n\n\t\t\t\t// in ios9 array.subarray(from, undefined) will return empty array\n\t\t\t\t// but array.subarray(from) or array.subarray(from, len) is correct\n\t\t\t\treturn new array.constructor( array.subarray( from, to !== undefined ? to : array.length ) );\n\n\t\t\t}\n\n\t\t\treturn array.slice( from, to );\n\n\t\t},\n\n\t\t// converts an array to a specific type\n\t\tconvertArray: function ( array, type, forceClone ) {\n\n\t\t\tif ( ! array || // let 'undefined' and 'null' pass\n\t\t\t\t! forceClone && array.constructor === type ) { return array; }\n\n\t\t\tif ( typeof type.BYTES_PER_ELEMENT === 'number' ) {\n\n\t\t\t\treturn new type( array ); // create typed array\n\n\t\t\t}\n\n\t\t\treturn Array.prototype.slice.call( array ); // create Array\n\n\t\t},\n\n\t\tisTypedArray: function ( object ) {\n\n\t\t\treturn ArrayBuffer.isView( object ) &&\n\t\t\t\t! ( object instanceof DataView );\n\n\t\t},\n\n\t\t// returns an array by which times and values can be sorted\n\t\tgetKeyframeOrder: function ( times ) {\n\n\t\t\tfunction compareTime( i, j ) {\n\n\t\t\t\treturn times[ i ] - times[ j ];\n\n\t\t\t}\n\n\t\t\tvar n = times.length;\n\t\t\tvar result = new Array( n );\n\t\t\tfor ( var i = 0; i !== n; ++ i ) { result[ i ] = i; }\n\n\t\t\tresult.sort( compareTime );\n\n\t\t\treturn result;\n\n\t\t},\n\n\t\t// uses the array previously returned by 'getKeyframeOrder' to sort data\n\t\tsortedArray: function ( values, stride, order ) {\n\n\t\t\tvar nValues = values.length;\n\t\t\tvar result = new values.constructor( nValues );\n\n\t\t\tfor ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {\n\n\t\t\t\tvar srcOffset = order[ i ] * stride;\n\n\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\tresult[ dstOffset ++ ] = values[ srcOffset + j ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t},\n\n\t\t// function for parsing AOS keyframe formats\n\t\tflattenJSON: function ( jsonKeys, times, values, valuePropertyName ) {\n\n\t\t\tvar i = 1, key = jsonKeys[ 0 ];\n\n\t\t\twhile ( key !== undefined && key[ valuePropertyName ] === undefined ) {\n\n\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t}\n\n\t\t\tif ( key === undefined ) { return; } // no data\n\n\t\t\tvar value = key[ valuePropertyName ];\n\t\t\tif ( value === undefined ) { return; } // no data\n\n\t\t\tif ( Array.isArray( value ) ) {\n\n\t\t\t\tdo {\n\n\t\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\t\tvalues.push.apply( values, value ); // push all elements\n\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t\t} while ( key !== undefined );\n\n\t\t\t} else if ( value.toArray !== undefined ) {\n\n\t\t\t\t// ...assume THREE.Math-ish\n\n\t\t\t\tdo {\n\n\t\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\t\tvalue.toArray( values, values.length );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t\t} while ( key !== undefined );\n\n\t\t\t} else {\n\n\t\t\t\t// otherwise push as-is\n\n\t\t\t\tdo {\n\n\t\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\t\tvalues.push( value );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t\t} while ( key !== undefined );\n\n\t\t\t}\n\n\t\t},\n\n\t\tsubclip: function ( sourceClip, name, startFrame, endFrame, fps ) {\n\n\t\t\tfps = fps || 30;\n\n\t\t\tvar clip = sourceClip.clone();\n\n\t\t\tclip.name = name;\n\n\t\t\tvar tracks = [];\n\n\t\t\tfor ( var i = 0; i < clip.tracks.length; ++ i ) {\n\n\t\t\t\tvar track = clip.tracks[ i ];\n\t\t\t\tvar valueSize = track.getValueSize();\n\n\t\t\t\tvar times = [];\n\t\t\t\tvar values = [];\n\n\t\t\t\tfor ( var j = 0; j < track.times.length; ++ j ) {\n\n\t\t\t\t\tvar frame = track.times[ j ] * fps;\n\n\t\t\t\t\tif ( frame < startFrame || frame >= endFrame ) { continue; }\n\n\t\t\t\t\ttimes.push( track.times[ j ] );\n\n\t\t\t\t\tfor ( var k = 0; k < valueSize; ++ k ) {\n\n\t\t\t\t\t\tvalues.push( track.values[ j * valueSize + k ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( times.length === 0 ) { continue; }\n\n\t\t\t\ttrack.times = AnimationUtils.convertArray( times, track.times.constructor );\n\t\t\t\ttrack.values = AnimationUtils.convertArray( values, track.values.constructor );\n\n\t\t\t\ttracks.push( track );\n\n\t\t\t}\n\n\t\t\tclip.tracks = tracks;\n\n\t\t\t// find minimum .times value across all tracks in the trimmed clip\n\n\t\t\tvar minStartTime = Infinity;\n\n\t\t\tfor ( var i = 0; i < clip.tracks.length; ++ i ) {\n\n\t\t\t\tif ( minStartTime > clip.tracks[ i ].times[ 0 ] ) {\n\n\t\t\t\t\tminStartTime = clip.tracks[ i ].times[ 0 ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// shift all tracks such that clip begins at t=0\n\n\t\t\tfor ( var i = 0; i < clip.tracks.length; ++ i ) {\n\n\t\t\t\tclip.tracks[ i ].shift( - 1 * minStartTime );\n\n\t\t\t}\n\n\t\t\tclip.resetDuration();\n\n\t\t\treturn clip;\n\n\t\t}\n\n\t};\n\n\t/**\n\t * Abstract base class of interpolants over parametric samples.\n\t *\n\t * The parameter domain is one dimensional, typically the time or a path\n\t * along a curve defined by the data.\n\t *\n\t * The sample values can have any dimensionality and derived classes may\n\t * apply special interpretations to the data.\n\t *\n\t * This class provides the interval seek in a Template Method, deferring\n\t * the actual interpolation to derived classes.\n\t *\n\t * Time complexity is O(1) for linear access crossing at most two points\n\t * and O(log N) for random access, where N is the number of positions.\n\t *\n\t * References:\n\t *\n\t * \t\thttp://www.oodesign.com/template-method-pattern.html\n\t *\n\t * @author tschw\n\t */\n\n\tfunction Interpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tthis.parameterPositions = parameterPositions;\n\t\tthis._cachedIndex = 0;\n\n\t\tthis.resultBuffer = resultBuffer !== undefined ?\n\t\t\tresultBuffer : new sampleValues.constructor( sampleSize );\n\t\tthis.sampleValues = sampleValues;\n\t\tthis.valueSize = sampleSize;\n\n\t}\n\n\tObject.assign( Interpolant.prototype, {\n\n\t\tevaluate: function ( t ) {\n\n\t\t\tvar pp = this.parameterPositions,\n\t\t\t\ti1 = this._cachedIndex,\n\n\t\t\t\tt1 = pp[ i1 ],\n\t\t\t\tt0 = pp[ i1 - 1 ];\n\n\t\t\tvalidate_interval: {\n\n\t\t\t\tseek: {\n\n\t\t\t\t\tvar right;\n\n\t\t\t\t\tlinear_scan: {\n\n\t\t\t\t\t\t//- See http://jsperf.com/comparison-to-undefined/3\n\t\t\t\t\t\t//- slower code:\n\t\t\t\t\t\t//-\n\t\t\t\t\t\t//- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\n\t\t\t\t\t\tforward_scan: if ( ! ( t < t1 ) ) {\n\n\t\t\t\t\t\t\tfor ( var giveUpAt = i1 + 2; ; ) {\n\n\t\t\t\t\t\t\t\tif ( t1 === undefined ) {\n\n\t\t\t\t\t\t\t\t\tif ( t < t0 ) { break forward_scan; }\n\n\t\t\t\t\t\t\t\t\t// after end\n\n\t\t\t\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t, t0 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif ( i1 === giveUpAt ) { break; } // this loop\n\n\t\t\t\t\t\t\t\tt0 = t1;\n\t\t\t\t\t\t\t\tt1 = pp[ ++ i1 ];\n\n\t\t\t\t\t\t\t\tif ( t < t1 ) {\n\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\t\tbreak seek;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// prepare binary search on the right side of the index\n\t\t\t\t\t\t\tright = pp.length;\n\t\t\t\t\t\t\tbreak linear_scan;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t//- slower code:\n\t\t\t\t\t\t//-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\n\t\t\t\t\t\tif ( ! ( t >= t0 ) ) {\n\n\t\t\t\t\t\t\t// looping?\n\n\t\t\t\t\t\t\tvar t1global = pp[ 1 ];\n\n\t\t\t\t\t\t\tif ( t < t1global ) {\n\n\t\t\t\t\t\t\t\ti1 = 2; // + 1, using the scan for the details\n\t\t\t\t\t\t\t\tt0 = t1global;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// linear reverse scan\n\n\t\t\t\t\t\t\tfor ( var giveUpAt = i1 - 2; ; ) {\n\n\t\t\t\t\t\t\t\tif ( t0 === undefined ) {\n\n\t\t\t\t\t\t\t\t\t// before start\n\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif ( i1 === giveUpAt ) { break; } // this loop\n\n\t\t\t\t\t\t\t\tt1 = t0;\n\t\t\t\t\t\t\t\tt0 = pp[ -- i1 - 1 ];\n\n\t\t\t\t\t\t\t\tif ( t >= t0 ) {\n\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\t\tbreak seek;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// prepare binary search on the left side of the index\n\t\t\t\t\t\t\tright = i1;\n\t\t\t\t\t\t\ti1 = 0;\n\t\t\t\t\t\t\tbreak linear_scan;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// the interval is valid\n\n\t\t\t\t\t\tbreak validate_interval;\n\n\t\t\t\t\t} // linear scan\n\n\t\t\t\t\t// binary search\n\n\t\t\t\t\twhile ( i1 < right ) {\n\n\t\t\t\t\t\tvar mid = ( i1 + right ) >>> 1;\n\n\t\t\t\t\t\tif ( t < pp[ mid ] ) {\n\n\t\t\t\t\t\t\tright = mid;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\ti1 = mid + 1;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tt1 = pp[ i1 ];\n\t\t\t\t\tt0 = pp[ i1 - 1 ];\n\n\t\t\t\t\t// check boundary cases, again\n\n\t\t\t\t\tif ( t0 === undefined ) {\n\n\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( t1 === undefined ) {\n\n\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t0, t );\n\n\t\t\t\t\t}\n\n\t\t\t\t} // seek\n\n\t\t\t\tthis._cachedIndex = i1;\n\n\t\t\t\tthis.intervalChanged_( i1, t0, t1 );\n\n\t\t\t} // validate_interval\n\n\t\t\treturn this.interpolate_( i1, t0, t, t1 );\n\n\t\t},\n\n\t\tsettings: null, // optional, subclass-specific settings structure\n\t\t// Note: The indirection allows central control of many interpolants.\n\n\t\t// --- Protected interface\n\n\t\tDefaultSettings_: {},\n\n\t\tgetSettings_: function () {\n\n\t\t\treturn this.settings || this.DefaultSettings_;\n\n\t\t},\n\n\t\tcopySampleValue_: function ( index ) {\n\n\t\t\t// copies a sample value to the result buffer\n\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\t\t\t\toffset = index * stride;\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tresult[ i ] = values[ offset + i ];\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t},\n\n\t\t// Template methods for derived classes:\n\n\t\tinterpolate_: function ( /* i1, t0, t, t1 */ ) {\n\n\t\t\tthrow new Error( 'call to abstract method' );\n\t\t\t// implementations shall return this.resultBuffer\n\n\t\t},\n\n\t\tintervalChanged_: function ( /* i1, t0, t1 */ ) {\n\n\t\t\t// empty\n\n\t\t}\n\n\t} );\n\n\t//!\\ DECLARE ALIAS AFTER assign prototype !\n\tObject.assign( Interpolant.prototype, {\n\n\t\t//( 0, t, t0 ), returns this.resultBuffer\n\t\tbeforeStart_: Interpolant.prototype.copySampleValue_,\n\n\t\t//( N-1, tN-1, t ), returns this.resultBuffer\n\t\tafterEnd_: Interpolant.prototype.copySampleValue_,\n\n\t} );\n\n\t/**\n\t * Fast and simple cubic spline interpolant.\n\t *\n\t * It was derived from a Hermitian construction setting the first derivative\n\t * at each sample position to the linear slope between neighboring positions\n\t * over their parameter interval.\n\t *\n\t * @author tschw\n\t */\n\n\tfunction CubicInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t\tthis._weightPrev = - 0;\n\t\tthis._offsetPrev = - 0;\n\t\tthis._weightNext = - 0;\n\t\tthis._offsetNext = - 0;\n\n\t}\n\n\tCubicInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\t\tconstructor: CubicInterpolant,\n\n\t\tDefaultSettings_: {\n\n\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\tendingEnd: ZeroCurvatureEnding\n\n\t\t},\n\n\t\tintervalChanged_: function ( i1, t0, t1 ) {\n\n\t\t\tvar pp = this.parameterPositions,\n\t\t\t\tiPrev = i1 - 2,\n\t\t\t\tiNext = i1 + 1,\n\n\t\t\t\ttPrev = pp[ iPrev ],\n\t\t\t\ttNext = pp[ iNext ];\n\n\t\t\tif ( tPrev === undefined ) {\n\n\t\t\t\tswitch ( this.getSettings_().endingStart ) {\n\n\t\t\t\t\tcase ZeroSlopeEnding:\n\n\t\t\t\t\t\t// f'(t0) = 0\n\t\t\t\t\t\tiPrev = i1;\n\t\t\t\t\t\ttPrev = 2 * t0 - t1;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase WrapAroundEnding:\n\n\t\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\t\tiPrev = pp.length - 2;\n\t\t\t\t\t\ttPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\n\t\t\t\t\t\tiPrev = i1;\n\t\t\t\t\t\ttPrev = t1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( tNext === undefined ) {\n\n\t\t\t\tswitch ( this.getSettings_().endingEnd ) {\n\n\t\t\t\t\tcase ZeroSlopeEnding:\n\n\t\t\t\t\t\t// f'(tN) = 0\n\t\t\t\t\t\tiNext = i1;\n\t\t\t\t\t\ttNext = 2 * t1 - t0;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase WrapAroundEnding:\n\n\t\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\t\tiNext = 1;\n\t\t\t\t\t\ttNext = t1 + pp[ 1 ] - pp[ 0 ];\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\n\t\t\t\t\t\tiNext = i1 - 1;\n\t\t\t\t\t\ttNext = t0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar halfDt = ( t1 - t0 ) * 0.5,\n\t\t\t\tstride = this.valueSize;\n\n\t\t\tthis._weightPrev = halfDt / ( t0 - tPrev );\n\t\t\tthis._weightNext = halfDt / ( tNext - t1 );\n\t\t\tthis._offsetPrev = iPrev * stride;\n\t\t\tthis._offsetNext = iNext * stride;\n\n\t\t},\n\n\t\tinterpolate_: function ( i1, t0, t, t1 ) {\n\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\n\t\t\t\to1 = i1 * stride,\t\to0 = o1 - stride,\n\t\t\t\toP = this._offsetPrev, \toN = this._offsetNext,\n\t\t\t\twP = this._weightPrev,\twN = this._weightNext,\n\n\t\t\t\tp = ( t - t0 ) / ( t1 - t0 ),\n\t\t\t\tpp = p * p,\n\t\t\t\tppp = pp * p;\n\n\t\t\t// evaluate polynomials\n\n\t\t\tvar sP = - wP * ppp + 2 * wP * pp - wP * p;\n\t\t\tvar s0 = ( 1 + wP ) * ppp + ( - 1.5 - 2 * wP ) * pp + ( - 0.5 + wP ) * p + 1;\n\t\t\tvar s1 = ( - 1 - wN ) * ppp + ( 1.5 + wN ) * pp + 0.5 * p;\n\t\t\tvar sN = wN * ppp - wN * pp;\n\n\t\t\t// combine data linearly\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tresult[ i ] =\n\t\t\t\t\t\tsP * values[ oP + i ] +\n\t\t\t\t\t\ts0 * values[ o0 + i ] +\n\t\t\t\t\t\ts1 * values[ o1 + i ] +\n\t\t\t\t\t\tsN * values[ oN + i ];\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author tschw\n\t */\n\n\tfunction LinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tLinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\t\tconstructor: LinearInterpolant,\n\n\t\tinterpolate_: function ( i1, t0, t, t1 ) {\n\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\n\t\t\t\toffset1 = i1 * stride,\n\t\t\t\toffset0 = offset1 - stride,\n\n\t\t\t\tweight1 = ( t - t0 ) / ( t1 - t0 ),\n\t\t\t\tweight0 = 1 - weight1;\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tresult[ i ] =\n\t\t\t\t\t\tvalues[ offset0 + i ] * weight0 +\n\t\t\t\t\t\tvalues[ offset1 + i ] * weight1;\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * Interpolant that evaluates to the sample value at the position preceeding\n\t * the parameter.\n\t *\n\t * @author tschw\n\t */\n\n\tfunction DiscreteInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tDiscreteInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\t\tconstructor: DiscreteInterpolant,\n\n\t\tinterpolate_: function ( i1 /*, t0, t, t1 */ ) {\n\n\t\t\treturn this.copySampleValue_( i1 - 1 );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * A timed sequence of keyframes for a specific property.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction KeyframeTrack( name, times, values, interpolation ) {\n\n\t\tif ( name === undefined ) { throw new Error( 'THREE.KeyframeTrack: track name is undefined' ); }\n\t\tif ( times === undefined || times.length === 0 ) { throw new Error( 'THREE.KeyframeTrack: no keyframes in track named ' + name ); }\n\n\t\tthis.name = name;\n\n\t\tthis.times = AnimationUtils.convertArray( times, this.TimeBufferType );\n\t\tthis.values = AnimationUtils.convertArray( values, this.ValueBufferType );\n\n\t\tthis.setInterpolation( interpolation || this.DefaultInterpolation );\n\n\t}\n\n\t// Static methods\n\n\tObject.assign( KeyframeTrack, {\n\n\t\t// Serialization (in static context, because of constructor invocation\n\t\t// and automatic invocation of .toJSON):\n\n\t\ttoJSON: function ( track ) {\n\n\t\t\tvar trackType = track.constructor;\n\n\t\t\tvar json;\n\n\t\t\t// derived classes can define a static toJSON method\n\t\t\tif ( trackType.toJSON !== undefined ) {\n\n\t\t\t\tjson = trackType.toJSON( track );\n\n\t\t\t} else {\n\n\t\t\t\t// by default, we assume the data can be serialized as-is\n\t\t\t\tjson = {\n\n\t\t\t\t\t'name': track.name,\n\t\t\t\t\t'times': AnimationUtils.convertArray( track.times, Array ),\n\t\t\t\t\t'values': AnimationUtils.convertArray( track.values, Array )\n\n\t\t\t\t};\n\n\t\t\t\tvar interpolation = track.getInterpolation();\n\n\t\t\t\tif ( interpolation !== track.DefaultInterpolation ) {\n\n\t\t\t\t\tjson.interpolation = interpolation;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tjson.type = track.ValueTypeName; // mandatory\n\n\t\t\treturn json;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( KeyframeTrack.prototype, {\n\n\t\tconstructor: KeyframeTrack,\n\n\t\tTimeBufferType: Float32Array,\n\n\t\tValueBufferType: Float32Array,\n\n\t\tDefaultInterpolation: InterpolateLinear,\n\n\t\tInterpolantFactoryMethodDiscrete: function ( result ) {\n\n\t\t\treturn new DiscreteInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t\t},\n\n\t\tInterpolantFactoryMethodLinear: function ( result ) {\n\n\t\t\treturn new LinearInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t\t},\n\n\t\tInterpolantFactoryMethodSmooth: function ( result ) {\n\n\t\t\treturn new CubicInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t\t},\n\n\t\tsetInterpolation: function ( interpolation ) {\n\n\t\t\tvar factoryMethod;\n\n\t\t\tswitch ( interpolation ) {\n\n\t\t\t\tcase InterpolateDiscrete:\n\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase InterpolateLinear:\n\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodLinear;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase InterpolateSmooth:\n\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( factoryMethod === undefined ) {\n\n\t\t\t\tvar message = \"unsupported interpolation for \" +\n\t\t\t\t\tthis.ValueTypeName + \" keyframe track named \" + this.name;\n\n\t\t\t\tif ( this.createInterpolant === undefined ) {\n\n\t\t\t\t\t// fall back to default, unless the default itself is messed up\n\t\t\t\t\tif ( interpolation !== this.DefaultInterpolation ) {\n\n\t\t\t\t\t\tthis.setInterpolation( this.DefaultInterpolation );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthrow new Error( message ); // fatal, in this case\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tconsole.warn( 'THREE.KeyframeTrack:', message );\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tthis.createInterpolant = factoryMethod;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetInterpolation: function () {\n\n\t\t\tswitch ( this.createInterpolant ) {\n\n\t\t\t\tcase this.InterpolantFactoryMethodDiscrete:\n\n\t\t\t\t\treturn InterpolateDiscrete;\n\n\t\t\t\tcase this.InterpolantFactoryMethodLinear:\n\n\t\t\t\t\treturn InterpolateLinear;\n\n\t\t\t\tcase this.InterpolantFactoryMethodSmooth:\n\n\t\t\t\t\treturn InterpolateSmooth;\n\n\t\t\t}\n\n\t\t},\n\n\t\tgetValueSize: function () {\n\n\t\t\treturn this.values.length / this.times.length;\n\n\t\t},\n\n\t\t// move all keyframes either forwards or backwards in time\n\t\tshift: function ( timeOffset ) {\n\n\t\t\tif ( timeOffset !== 0.0 ) {\n\n\t\t\t\tvar times = this.times;\n\n\t\t\t\tfor ( var i = 0, n = times.length; i !== n; ++ i ) {\n\n\t\t\t\t\ttimes[ i ] += timeOffset;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// scale all keyframe times by a factor (useful for frame <-> seconds conversions)\n\t\tscale: function ( timeScale ) {\n\n\t\t\tif ( timeScale !== 1.0 ) {\n\n\t\t\t\tvar times = this.times;\n\n\t\t\t\tfor ( var i = 0, n = times.length; i !== n; ++ i ) {\n\n\t\t\t\t\ttimes[ i ] *= timeScale;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// removes keyframes before and after animation without changing any values within the range [startTime, endTime].\n\t\t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\n\t\ttrim: function ( startTime, endTime ) {\n\n\t\t\tvar times = this.times,\n\t\t\t\tnKeys = times.length,\n\t\t\t\tfrom = 0,\n\t\t\t\tto = nKeys - 1;\n\n\t\t\twhile ( from !== nKeys && times[ from ] < startTime ) {\n\n\t\t\t\t++ from;\n\n\t\t\t}\n\n\t\t\twhile ( to !== - 1 && times[ to ] > endTime ) {\n\n\t\t\t\t-- to;\n\n\t\t\t}\n\n\t\t\t++ to; // inclusive -> exclusive bound\n\n\t\t\tif ( from !== 0 || to !== nKeys ) {\n\n\t\t\t\t// empty tracks are forbidden, so keep at least one keyframe\n\t\t\t\tif ( from >= to ) { to = Math.max( to, 1 ), from = to - 1; }\n\n\t\t\t\tvar stride = this.getValueSize();\n\t\t\t\tthis.times = AnimationUtils.arraySlice( times, from, to );\n\t\t\t\tthis.values = AnimationUtils.arraySlice( this.values, from * stride, to * stride );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\n\t\tvalidate: function () {\n\n\t\t\tvar valid = true;\n\n\t\t\tvar valueSize = this.getValueSize();\n\t\t\tif ( valueSize - Math.floor( valueSize ) !== 0 ) {\n\n\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Invalid value size in track.', this );\n\t\t\t\tvalid = false;\n\n\t\t\t}\n\n\t\t\tvar times = this.times,\n\t\t\t\tvalues = this.values,\n\n\t\t\t\tnKeys = times.length;\n\n\t\t\tif ( nKeys === 0 ) {\n\n\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Track is empty.', this );\n\t\t\t\tvalid = false;\n\n\t\t\t}\n\n\t\t\tvar prevTime = null;\n\n\t\t\tfor ( var i = 0; i !== nKeys; i ++ ) {\n\n\t\t\t\tvar currTime = times[ i ];\n\n\t\t\t\tif ( typeof currTime === 'number' && isNaN( currTime ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime );\n\t\t\t\t\tvalid = false;\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tif ( prevTime !== null && prevTime > currTime ) {\n\n\t\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime );\n\t\t\t\t\tvalid = false;\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tprevTime = currTime;\n\n\t\t\t}\n\n\t\t\tif ( values !== undefined ) {\n\n\t\t\t\tif ( AnimationUtils.isTypedArray( values ) ) {\n\n\t\t\t\t\tfor ( var i = 0, n = values.length; i !== n; ++ i ) {\n\n\t\t\t\t\t\tvar value = values[ i ];\n\n\t\t\t\t\t\tif ( isNaN( value ) ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Value is not a valid number.', this, i, value );\n\t\t\t\t\t\t\tvalid = false;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn valid;\n\n\t\t},\n\n\t\t// removes equivalent sequential keys as common in morph target sequences\n\t\t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n\t\toptimize: function () {\n\n\t\t\t// times or values may be shared with other tracks, so overwriting is unsafe\n\t\t\tvar times = AnimationUtils.arraySlice( this.times ),\n\t\t\t\tvalues = AnimationUtils.arraySlice( this.values ),\n\t\t\t\tstride = this.getValueSize(),\n\n\t\t\t\tsmoothInterpolation = this.getInterpolation() === InterpolateSmooth,\n\n\t\t\t\twriteIndex = 1,\n\t\t\t\tlastIndex = times.length - 1;\n\n\t\t\tfor ( var i = 1; i < lastIndex; ++ i ) {\n\n\t\t\t\tvar keep = false;\n\n\t\t\t\tvar time = times[ i ];\n\t\t\t\tvar timeNext = times[ i + 1 ];\n\n\t\t\t\t// remove adjacent keyframes scheduled at the same time\n\n\t\t\t\tif ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {\n\n\t\t\t\t\tif ( ! smoothInterpolation ) {\n\n\t\t\t\t\t\t// remove unnecessary keyframes same as their neighbors\n\n\t\t\t\t\t\tvar offset = i * stride,\n\t\t\t\t\t\t\toffsetP = offset - stride,\n\t\t\t\t\t\t\toffsetN = offset + stride;\n\n\t\t\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\t\t\tvar value = values[ offset + j ];\n\n\t\t\t\t\t\t\tif ( value !== values[ offsetP + j ] ||\n\t\t\t\t\t\t\t\tvalue !== values[ offsetN + j ] ) {\n\n\t\t\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tkeep = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// in-place compaction\n\n\t\t\t\tif ( keep ) {\n\n\t\t\t\t\tif ( i !== writeIndex ) {\n\n\t\t\t\t\t\ttimes[ writeIndex ] = times[ i ];\n\n\t\t\t\t\t\tvar readOffset = i * stride,\n\t\t\t\t\t\t\twriteOffset = writeIndex * stride;\n\n\t\t\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t++ writeIndex;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// flush last keyframe (compaction looks ahead)\n\n\t\t\tif ( lastIndex > 0 ) {\n\n\t\t\t\ttimes[ writeIndex ] = times[ lastIndex ];\n\n\t\t\t\tfor ( var readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\n\t\t\t\t}\n\n\t\t\t\t++ writeIndex;\n\n\t\t\t}\n\n\t\t\tif ( writeIndex !== times.length ) {\n\n\t\t\t\tthis.times = AnimationUtils.arraySlice( times, 0, writeIndex );\n\t\t\t\tthis.values = AnimationUtils.arraySlice( values, 0, writeIndex * stride );\n\n\t\t\t} else {\n\n\t\t\t\tthis.times = times;\n\t\t\t\tthis.values = values;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\tvar times = AnimationUtils.arraySlice( this.times, 0 );\n\t\t\tvar values = AnimationUtils.arraySlice( this.values, 0 );\n\n\t\t\tvar TypedKeyframeTrack = this.constructor;\n\t\t\tvar track = new TypedKeyframeTrack( this.name, times, values );\n\n\t\t\t// Interpolant argument to constructor is not saved, so copy the factory method directly.\n\t\t\ttrack.createInterpolant = this.createInterpolant;\n\n\t\t\treturn track;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of Boolean keyframe values.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction BooleanKeyframeTrack( name, times, values ) {\n\n\t\tKeyframeTrack.call( this, name, times, values );\n\n\t}\n\n\tBooleanKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: BooleanKeyframeTrack,\n\n\t\tValueTypeName: 'bool',\n\t\tValueBufferType: Array,\n\n\t\tDefaultInterpolation: InterpolateDiscrete,\n\n\t\tInterpolantFactoryMethodLinear: undefined,\n\t\tInterpolantFactoryMethodSmooth: undefined\n\n\t\t// Note: Actually this track could have a optimized / compressed\n\t\t// representation of a single value and a custom interpolant that\n\t\t// computes \"firstValue ^ isOdd( index )\".\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of keyframe values that represent color.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction ColorKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n\t}\n\n\tColorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: ColorKeyframeTrack,\n\n\t\tValueTypeName: 'color'\n\n\t\t// ValueBufferType is inherited\n\n\t\t// DefaultInterpolation is inherited\n\n\t\t// Note: Very basic implementation and nothing special yet.\n\t\t// However, this is the place for color space parameterization.\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of numeric keyframe values.\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction NumberKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n\t}\n\n\tNumberKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: NumberKeyframeTrack,\n\n\t\tValueTypeName: 'number'\n\n\t\t// ValueBufferType is inherited\n\n\t\t// DefaultInterpolation is inherited\n\n\t} );\n\n\t/**\n\t * Spherical linear unit quaternion interpolant.\n\t *\n\t * @author tschw\n\t */\n\n\tfunction QuaternionLinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tQuaternionLinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\t\tconstructor: QuaternionLinearInterpolant,\n\n\t\tinterpolate_: function ( i1, t0, t, t1 ) {\n\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\n\t\t\t\toffset = i1 * stride,\n\n\t\t\t\talpha = ( t - t0 ) / ( t1 - t0 );\n\n\t\t\tfor ( var end = offset + stride; offset !== end; offset += 4 ) {\n\n\t\t\t\tQuaternion.slerpFlat( result, 0, values, offset - stride, values, offset, alpha );\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of quaternion keyframe values.\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction QuaternionKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n\t}\n\n\tQuaternionKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: QuaternionKeyframeTrack,\n\n\t\tValueTypeName: 'quaternion',\n\n\t\t// ValueBufferType is inherited\n\n\t\tDefaultInterpolation: InterpolateLinear,\n\n\t\tInterpolantFactoryMethodLinear: function ( result ) {\n\n\t\t\treturn new QuaternionLinearInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t\t},\n\n\t\tInterpolantFactoryMethodSmooth: undefined // not yet implemented\n\n\t} );\n\n\t/**\n\t *\n\t * A Track that interpolates Strings\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction StringKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n\t}\n\n\tStringKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: StringKeyframeTrack,\n\n\t\tValueTypeName: 'string',\n\t\tValueBufferType: Array,\n\n\t\tDefaultInterpolation: InterpolateDiscrete,\n\n\t\tInterpolantFactoryMethodLinear: undefined,\n\n\t\tInterpolantFactoryMethodSmooth: undefined\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of vectored keyframe values.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction VectorKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n\t}\n\n\tVectorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: VectorKeyframeTrack,\n\n\t\tValueTypeName: 'vector'\n\n\t\t// ValueBufferType is inherited\n\n\t\t// DefaultInterpolation is inherited\n\n\t} );\n\n\t/**\n\t *\n\t * Reusable set of Tracks that represent an animation.\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t */\n\n\tfunction AnimationClip( name, duration, tracks ) {\n\n\t\tthis.name = name;\n\t\tthis.tracks = tracks;\n\t\tthis.duration = ( duration !== undefined ) ? duration : - 1;\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\t// this means it should figure out its duration by scanning the tracks\n\t\tif ( this.duration < 0 ) {\n\n\t\t\tthis.resetDuration();\n\n\t\t}\n\n\t}\n\n\tfunction getTrackTypeForValueTypeName( typeName ) {\n\n\t\tswitch ( typeName.toLowerCase() ) {\n\n\t\t\tcase 'scalar':\n\t\t\tcase 'double':\n\t\t\tcase 'float':\n\t\t\tcase 'number':\n\t\t\tcase 'integer':\n\n\t\t\t\treturn NumberKeyframeTrack;\n\n\t\t\tcase 'vector':\n\t\t\tcase 'vector2':\n\t\t\tcase 'vector3':\n\t\t\tcase 'vector4':\n\n\t\t\t\treturn VectorKeyframeTrack;\n\n\t\t\tcase 'color':\n\n\t\t\t\treturn ColorKeyframeTrack;\n\n\t\t\tcase 'quaternion':\n\n\t\t\t\treturn QuaternionKeyframeTrack;\n\n\t\t\tcase 'bool':\n\t\t\tcase 'boolean':\n\n\t\t\t\treturn BooleanKeyframeTrack;\n\n\t\t\tcase 'string':\n\n\t\t\t\treturn StringKeyframeTrack;\n\n\t\t}\n\n\t\tthrow new Error( 'THREE.KeyframeTrack: Unsupported typeName: ' + typeName );\n\n\t}\n\n\tfunction parseKeyframeTrack( json ) {\n\n\t\tif ( json.type === undefined ) {\n\n\t\t\tthrow new Error( 'THREE.KeyframeTrack: track type undefined, can not parse' );\n\n\t\t}\n\n\t\tvar trackType = getTrackTypeForValueTypeName( json.type );\n\n\t\tif ( json.times === undefined ) {\n\n\t\t\tvar times = [], values = [];\n\n\t\t\tAnimationUtils.flattenJSON( json.keys, times, values, 'value' );\n\n\t\t\tjson.times = times;\n\t\t\tjson.values = values;\n\n\t\t}\n\n\t\t// derived classes can define a static parse method\n\t\tif ( trackType.parse !== undefined ) {\n\n\t\t\treturn trackType.parse( json );\n\n\t\t} else {\n\n\t\t\t// by default, we assume a constructor compatible with the base\n\t\t\treturn new trackType( json.name, json.times, json.values, json.interpolation );\n\n\t\t}\n\n\t}\n\n\tObject.assign( AnimationClip, {\n\n\t\tparse: function ( json ) {\n\n\t\t\tvar tracks = [],\n\t\t\t\tjsonTracks = json.tracks,\n\t\t\t\tframeTime = 1.0 / ( json.fps || 1.0 );\n\n\t\t\tfor ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {\n\n\t\t\t\ttracks.push( parseKeyframeTrack( jsonTracks[ i ] ).scale( frameTime ) );\n\n\t\t\t}\n\n\t\t\treturn new AnimationClip( json.name, json.duration, tracks );\n\n\t\t},\n\n\t\ttoJSON: function ( clip ) {\n\n\t\t\tvar tracks = [],\n\t\t\t\tclipTracks = clip.tracks;\n\n\t\t\tvar json = {\n\n\t\t\t\t'name': clip.name,\n\t\t\t\t'duration': clip.duration,\n\t\t\t\t'tracks': tracks,\n\t\t\t\t'uuid': clip.uuid\n\n\t\t\t};\n\n\t\t\tfor ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {\n\n\t\t\t\ttracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );\n\n\t\t\t}\n\n\t\t\treturn json;\n\n\t\t},\n\n\t\tCreateFromMorphTargetSequence: function ( name, morphTargetSequence, fps, noLoop ) {\n\n\t\t\tvar numMorphTargets = morphTargetSequence.length;\n\t\t\tvar tracks = [];\n\n\t\t\tfor ( var i = 0; i < numMorphTargets; i ++ ) {\n\n\t\t\t\tvar times = [];\n\t\t\t\tvar values = [];\n\n\t\t\t\ttimes.push(\n\t\t\t\t\t( i + numMorphTargets - 1 ) % numMorphTargets,\n\t\t\t\t\ti,\n\t\t\t\t\t( i + 1 ) % numMorphTargets );\n\n\t\t\t\tvalues.push( 0, 1, 0 );\n\n\t\t\t\tvar order = AnimationUtils.getKeyframeOrder( times );\n\t\t\t\ttimes = AnimationUtils.sortedArray( times, 1, order );\n\t\t\t\tvalues = AnimationUtils.sortedArray( values, 1, order );\n\n\t\t\t\t// if there is a key at the first frame, duplicate it as the\n\t\t\t\t// last frame as well for perfect loop.\n\t\t\t\tif ( ! noLoop && times[ 0 ] === 0 ) {\n\n\t\t\t\t\ttimes.push( numMorphTargets );\n\t\t\t\t\tvalues.push( values[ 0 ] );\n\n\t\t\t\t}\n\n\t\t\t\ttracks.push(\n\t\t\t\t\tnew NumberKeyframeTrack(\n\t\t\t\t\t\t'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',\n\t\t\t\t\t\ttimes, values\n\t\t\t\t\t).scale( 1.0 / fps ) );\n\n\t\t\t}\n\n\t\t\treturn new AnimationClip( name, - 1, tracks );\n\n\t\t},\n\n\t\tfindByName: function ( objectOrClipArray, name ) {\n\n\t\t\tvar clipArray = objectOrClipArray;\n\n\t\t\tif ( ! Array.isArray( objectOrClipArray ) ) {\n\n\t\t\t\tvar o = objectOrClipArray;\n\t\t\t\tclipArray = o.geometry && o.geometry.animations || o.animations;\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < clipArray.length; i ++ ) {\n\n\t\t\t\tif ( clipArray[ i ].name === name ) {\n\n\t\t\t\t\treturn clipArray[ i ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t},\n\n\t\tCreateClipsFromMorphTargetSequences: function ( morphTargets, fps, noLoop ) {\n\n\t\t\tvar animationToMorphTargets = {};\n\n\t\t\t// tested with https://regex101.com/ on trick sequences\n\t\t\t// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\n\t\t\tvar pattern = /^([\\w-]*?)([\\d]+)$/;\n\n\t\t\t// sort morph target names into animation groups based\n\t\t\t// patterns like Walk_001, Walk_002, Run_001, Run_002\n\t\t\tfor ( var i = 0, il = morphTargets.length; i < il; i ++ ) {\n\n\t\t\t\tvar morphTarget = morphTargets[ i ];\n\t\t\t\tvar parts = morphTarget.name.match( pattern );\n\n\t\t\t\tif ( parts && parts.length > 1 ) {\n\n\t\t\t\t\tvar name = parts[ 1 ];\n\n\t\t\t\t\tvar animationMorphTargets = animationToMorphTargets[ name ];\n\t\t\t\t\tif ( ! animationMorphTargets ) {\n\n\t\t\t\t\t\tanimationToMorphTargets[ name ] = animationMorphTargets = [];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tanimationMorphTargets.push( morphTarget );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar clips = [];\n\n\t\t\tfor ( var name in animationToMorphTargets ) {\n\n\t\t\t\tclips.push( AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );\n\n\t\t\t}\n\n\t\t\treturn clips;\n\n\t\t},\n\n\t\t// parse the animation.hierarchy format\n\t\tparseAnimation: function ( animation, bones ) {\n\n\t\t\tif ( ! animation ) {\n\n\t\t\t\tconsole.error( 'THREE.AnimationClip: No animation in JSONLoader data.' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar addNonemptyTrack = function ( trackType, trackName, animationKeys, propertyName, destTracks ) {\n\n\t\t\t\t// only return track if there are actually keys.\n\t\t\t\tif ( animationKeys.length !== 0 ) {\n\n\t\t\t\t\tvar times = [];\n\t\t\t\t\tvar values = [];\n\n\t\t\t\t\tAnimationUtils.flattenJSON( animationKeys, times, values, propertyName );\n\n\t\t\t\t\t// empty keys are filtered out, so check again\n\t\t\t\t\tif ( times.length !== 0 ) {\n\n\t\t\t\t\t\tdestTracks.push( new trackType( trackName, times, values ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t\tvar tracks = [];\n\n\t\t\tvar clipName = animation.name || 'default';\n\t\t\t// automatic length determination in AnimationClip.\n\t\t\tvar duration = animation.length || - 1;\n\t\t\tvar fps = animation.fps || 30;\n\n\t\t\tvar hierarchyTracks = animation.hierarchy || [];\n\n\t\t\tfor ( var h = 0; h < hierarchyTracks.length; h ++ ) {\n\n\t\t\t\tvar animationKeys = hierarchyTracks[ h ].keys;\n\n\t\t\t\t// skip empty tracks\n\t\t\t\tif ( ! animationKeys || animationKeys.length === 0 ) { continue; }\n\n\t\t\t\t// process morph targets\n\t\t\t\tif ( animationKeys[ 0 ].morphTargets ) {\n\n\t\t\t\t\t// figure out all morph targets used in this track\n\t\t\t\t\tvar morphTargetNames = {};\n\n\t\t\t\t\tfor ( var k = 0; k < animationKeys.length; k ++ ) {\n\n\t\t\t\t\t\tif ( animationKeys[ k ].morphTargets ) {\n\n\t\t\t\t\t\t\tfor ( var m = 0; m < animationKeys[ k ].morphTargets.length; m ++ ) {\n\n\t\t\t\t\t\t\t\tmorphTargetNames[ animationKeys[ k ].morphTargets[ m ] ] = - 1;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// create a track for each morph target with all zero\n\t\t\t\t\t// morphTargetInfluences except for the keys in which\n\t\t\t\t\t// the morphTarget is named.\n\t\t\t\t\tfor ( var morphTargetName in morphTargetNames ) {\n\n\t\t\t\t\t\tvar times = [];\n\t\t\t\t\t\tvar values = [];\n\n\t\t\t\t\t\tfor ( var m = 0; m !== animationKeys[ k ].morphTargets.length; ++ m ) {\n\n\t\t\t\t\t\t\tvar animationKey = animationKeys[ k ];\n\n\t\t\t\t\t\t\ttimes.push( animationKey.time );\n\t\t\t\t\t\t\tvalues.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttracks.push( new NumberKeyframeTrack( '.morphTargetInfluence[' + morphTargetName + ']', times, values ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tduration = morphTargetNames.length * ( fps || 1.0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// ...assume skeletal animation\n\n\t\t\t\t\tvar boneName = '.bones[' + bones[ h ].name + ']';\n\n\t\t\t\t\taddNonemptyTrack(\n\t\t\t\t\t\tVectorKeyframeTrack, boneName + '.position',\n\t\t\t\t\t\tanimationKeys, 'pos', tracks );\n\n\t\t\t\t\taddNonemptyTrack(\n\t\t\t\t\t\tQuaternionKeyframeTrack, boneName + '.quaternion',\n\t\t\t\t\t\tanimationKeys, 'rot', tracks );\n\n\t\t\t\t\taddNonemptyTrack(\n\t\t\t\t\t\tVectorKeyframeTrack, boneName + '.scale',\n\t\t\t\t\t\tanimationKeys, 'scl', tracks );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( tracks.length === 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar clip = new AnimationClip( clipName, duration, tracks );\n\n\t\t\treturn clip;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( AnimationClip.prototype, {\n\n\t\tresetDuration: function () {\n\n\t\t\tvar tracks = this.tracks, duration = 0;\n\n\t\t\tfor ( var i = 0, n = tracks.length; i !== n; ++ i ) {\n\n\t\t\t\tvar track = this.tracks[ i ];\n\n\t\t\t\tduration = Math.max( duration, track.times[ track.times.length - 1 ] );\n\n\t\t\t}\n\n\t\t\tthis.duration = duration;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttrim: function () {\n\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\t\tthis.tracks[ i ].trim( 0, this.duration );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tvalidate: function () {\n\n\t\t\tvar valid = true;\n\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\t\tvalid = valid && this.tracks[ i ].validate();\n\n\t\t\t}\n\n\t\t\treturn valid;\n\n\t\t},\n\n\t\toptimize: function () {\n\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\t\tthis.tracks[ i ].optimize();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\tvar tracks = [];\n\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\t\ttracks.push( this.tracks[ i ].clone() );\n\n\t\t\t}\n\n\t\t\treturn new AnimationClip( this.name, this.duration, tracks );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar Cache = {\n\n\t\tenabled: false,\n\n\t\tfiles: {},\n\n\t\tadd: function ( key, file ) {\n\n\t\t\tif ( this.enabled === false ) { return; }\n\n\t\t\t// console.log( 'THREE.Cache', 'Adding key:', key );\n\n\t\t\tthis.files[ key ] = file;\n\n\t\t},\n\n\t\tget: function ( key ) {\n\n\t\t\tif ( this.enabled === false ) { return; }\n\n\t\t\t// console.log( 'THREE.Cache', 'Checking key:', key );\n\n\t\t\treturn this.files[ key ];\n\n\t\t},\n\n\t\tremove: function ( key ) {\n\n\t\t\tdelete this.files[ key ];\n\n\t\t},\n\n\t\tclear: function () {\n\n\t\t\tthis.files = {};\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction LoadingManager( onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar isLoading = false;\n\t\tvar itemsLoaded = 0;\n\t\tvar itemsTotal = 0;\n\t\tvar urlModifier = undefined;\n\t\tvar handlers = [];\n\n\t\t// Refer to #5689 for the reason why we don't set .onStart\n\t\t// in the constructor\n\n\t\tthis.onStart = undefined;\n\t\tthis.onLoad = onLoad;\n\t\tthis.onProgress = onProgress;\n\t\tthis.onError = onError;\n\n\t\tthis.itemStart = function ( url ) {\n\n\t\t\titemsTotal ++;\n\n\t\t\tif ( isLoading === false ) {\n\n\t\t\t\tif ( scope.onStart !== undefined ) {\n\n\t\t\t\t\tscope.onStart( url, itemsLoaded, itemsTotal );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tisLoading = true;\n\n\t\t};\n\n\t\tthis.itemEnd = function ( url ) {\n\n\t\t\titemsLoaded ++;\n\n\t\t\tif ( scope.onProgress !== undefined ) {\n\n\t\t\t\tscope.onProgress( url, itemsLoaded, itemsTotal );\n\n\t\t\t}\n\n\t\t\tif ( itemsLoaded === itemsTotal ) {\n\n\t\t\t\tisLoading = false;\n\n\t\t\t\tif ( scope.onLoad !== undefined ) {\n\n\t\t\t\t\tscope.onLoad();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.itemError = function ( url ) {\n\n\t\t\tif ( scope.onError !== undefined ) {\n\n\t\t\t\tscope.onError( url );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.resolveURL = function ( url ) {\n\n\t\t\tif ( urlModifier ) {\n\n\t\t\t\treturn urlModifier( url );\n\n\t\t\t}\n\n\t\t\treturn url;\n\n\t\t};\n\n\t\tthis.setURLModifier = function ( transform ) {\n\n\t\t\turlModifier = transform;\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tthis.addHandler = function ( regex, loader ) {\n\n\t\t\thandlers.push( regex, loader );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tthis.removeHandler = function ( regex ) {\n\n\t\t\tvar index = handlers.indexOf( regex );\n\n\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\thandlers.splice( index, 2 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tthis.getHandler = function ( file ) {\n\n\t\t\tfor ( var i = 0, l = handlers.length; i < l; i += 2 ) {\n\n\t\t\t\tvar regex = handlers[ i ];\n\t\t\t\tvar loader = handlers[ i + 1 ];\n\n\t\t\t\tif ( regex.global ) { regex.lastIndex = 0; } // see #17920\n\n\t\t\t\tif ( regex.test( file ) ) {\n\n\t\t\t\t\treturn loader;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t};\n\n\t}\n\n\tvar DefaultLoadingManager = new LoadingManager();\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Loader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t\tthis.crossOrigin = 'anonymous';\n\t\tthis.path = '';\n\t\tthis.resourcePath = '';\n\n\t}\n\n\tObject.assign( Loader.prototype, {\n\n\t\tload: function ( /* url, onLoad, onProgress, onError */ ) {},\n\n\t\tparse: function ( /* data */ ) {},\n\n\t\tsetCrossOrigin: function ( crossOrigin ) {\n\n\t\t\tthis.crossOrigin = crossOrigin;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetPath: function ( path ) {\n\n\t\t\tthis.path = path;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetResourcePath: function ( resourcePath ) {\n\n\t\t\tthis.resourcePath = resourcePath;\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar loading = {};\n\n\tfunction FileLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tFileLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: FileLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tif ( url === undefined ) { url = ''; }\n\n\t\t\tif ( this.path !== undefined ) { url = this.path + url; }\n\n\t\t\turl = this.manager.resolveURL( url );\n\n\t\t\tvar scope = this;\n\n\t\t\tvar cached = Cache.get( url );\n\n\t\t\tif ( cached !== undefined ) {\n\n\t\t\t\tscope.manager.itemStart( url );\n\n\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\tif ( onLoad ) { onLoad( cached ); }\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, 0 );\n\n\t\t\t\treturn cached;\n\n\t\t\t}\n\n\t\t\t// Check if request is duplicate\n\n\t\t\tif ( loading[ url ] !== undefined ) {\n\n\t\t\t\tloading[ url ].push( {\n\n\t\t\t\t\tonLoad: onLoad,\n\t\t\t\t\tonProgress: onProgress,\n\t\t\t\t\tonError: onError\n\n\t\t\t\t} );\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t// Check for data: URI\n\t\t\tvar dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;\n\t\t\tvar dataUriRegexResult = url.match( dataUriRegex );\n\n\t\t\t// Safari can not handle Data URIs through XMLHttpRequest so process manually\n\t\t\tif ( dataUriRegexResult ) {\n\n\t\t\t\tvar mimeType = dataUriRegexResult[ 1 ];\n\t\t\t\tvar isBase64 = !! dataUriRegexResult[ 2 ];\n\t\t\t\tvar data = dataUriRegexResult[ 3 ];\n\n\t\t\t\tdata = decodeURIComponent( data );\n\n\t\t\t\tif ( isBase64 ) { data = atob( data ); }\n\n\t\t\t\ttry {\n\n\t\t\t\t\tvar response;\n\t\t\t\t\tvar responseType = ( this.responseType || '' ).toLowerCase();\n\n\t\t\t\t\tswitch ( responseType ) {\n\n\t\t\t\t\t\tcase 'arraybuffer':\n\t\t\t\t\t\tcase 'blob':\n\n\t\t\t\t\t\t\tvar view = new Uint8Array( data.length );\n\n\t\t\t\t\t\t\tfor ( var i = 0; i < data.length; i ++ ) {\n\n\t\t\t\t\t\t\t\tview[ i ] = data.charCodeAt( i );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( responseType === 'blob' ) {\n\n\t\t\t\t\t\t\t\tresponse = new Blob( [ view.buffer ], { type: mimeType } );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tresponse = view.buffer;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'document':\n\n\t\t\t\t\t\t\tvar parser = new DOMParser();\n\t\t\t\t\t\t\tresponse = parser.parseFromString( data, mimeType );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'json':\n\n\t\t\t\t\t\t\tresponse = JSON.parse( data );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault: // 'text' or other\n\n\t\t\t\t\t\t\tresponse = data;\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Wait for next browser tick like standard XMLHttpRequest event dispatching does\n\t\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\t\tif ( onLoad ) { onLoad( response ); }\n\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t\t}, 0 );\n\n\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\t// Wait for next browser tick like standard XMLHttpRequest event dispatching does\n\t\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\t\tif ( onError ) { onError( error ); }\n\n\t\t\t\t\t\tscope.manager.itemError( url );\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t\t}, 0 );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// Initialise array for duplicate requests\n\n\t\t\t\tloading[ url ] = [];\n\n\t\t\t\tloading[ url ].push( {\n\n\t\t\t\t\tonLoad: onLoad,\n\t\t\t\t\tonProgress: onProgress,\n\t\t\t\t\tonError: onError\n\n\t\t\t\t} );\n\n\t\t\t\tvar request = new XMLHttpRequest();\n\n\t\t\t\trequest.open( 'GET', url, true );\n\n\t\t\t\trequest.addEventListener( 'load', function ( event ) {\n\n\t\t\t\t\tvar response = this.response;\n\n\t\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\t\tdelete loading[ url ];\n\n\t\t\t\t\tif ( this.status === 200 || this.status === 0 ) {\n\n\t\t\t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\n\t\t\t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\n\n\t\t\t\t\t\tif ( this.status === 0 ) { console.warn( 'THREE.FileLoader: HTTP Status 0 received.' ); }\n\n\t\t\t\t\t\t// Add to cache only on HTTP success, so that we do not cache\n\t\t\t\t\t\t// error response bodies as proper responses to requests.\n\t\t\t\t\t\tCache.add( url, response );\n\n\t\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\t\tif ( callback.onLoad ) { callback.onLoad( response ); }\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\t\tif ( callback.onError ) { callback.onError( event ); }\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tscope.manager.itemError( url );\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t\t}\n\n\t\t\t\t}, false );\n\n\t\t\t\trequest.addEventListener( 'progress', function ( event ) {\n\n\t\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\tif ( callback.onProgress ) { callback.onProgress( event ); }\n\n\t\t\t\t\t}\n\n\t\t\t\t}, false );\n\n\t\t\t\trequest.addEventListener( 'error', function ( event ) {\n\n\t\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\t\tdelete loading[ url ];\n\n\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\tif ( callback.onError ) { callback.onError( event ); }\n\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError( url );\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, false );\n\n\t\t\t\trequest.addEventListener( 'abort', function ( event ) {\n\n\t\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\t\tdelete loading[ url ];\n\n\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\tif ( callback.onError ) { callback.onError( event ); }\n\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError( url );\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, false );\n\n\t\t\t\tif ( this.responseType !== undefined ) { request.responseType = this.responseType; }\n\t\t\t\tif ( this.withCredentials !== undefined ) { request.withCredentials = this.withCredentials; }\n\n\t\t\t\tif ( request.overrideMimeType ) { request.overrideMimeType( this.mimeType !== undefined ? this.mimeType : 'text/plain' ); }\n\n\t\t\t\tfor ( var header in this.requestHeader ) {\n\n\t\t\t\t\trequest.setRequestHeader( header, this.requestHeader[ header ] );\n\n\t\t\t\t}\n\n\t\t\t\trequest.send( null );\n\n\t\t\t}\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\treturn request;\n\n\t\t},\n\n\t\tsetResponseType: function ( value ) {\n\n\t\t\tthis.responseType = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetWithCredentials: function ( value ) {\n\n\t\t\tthis.withCredentials = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetMimeType: function ( value ) {\n\n\t\t\tthis.mimeType = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetRequestHeader: function ( value ) {\n\n\t\t\tthis.requestHeader = value;\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io/\n\t */\n\n\tfunction AnimationLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tAnimationLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: AnimationLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new FileLoader( scope.manager );\n\t\t\tloader.setPath( scope.path );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( json ) {\n\n\t\t\tvar animations = [];\n\n\t\t\tfor ( var i = 0; i < json.length; i ++ ) {\n\n\t\t\t\tvar clip = AnimationClip.parse( json[ i ] );\n\n\t\t\t\tanimations.push( clip );\n\n\t\t\t}\n\n\t\t\treturn animations;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t *\n\t * Abstract Base class to block based textures loader (dds, pvr, ...)\n\t *\n\t * Sub classes have to implement the parse() method which will be used in load().\n\t */\n\n\tfunction CompressedTextureLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tCompressedTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: CompressedTextureLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar images = [];\n\n\t\t\tvar texture = new CompressedTexture();\n\t\t\ttexture.image = images;\n\n\t\t\tvar loader = new FileLoader( this.manager );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\t\tfunction loadTexture( i ) {\n\n\t\t\t\tloader.load( url[ i ], function ( buffer ) {\n\n\t\t\t\t\tvar texDatas = scope.parse( buffer, true );\n\n\t\t\t\t\timages[ i ] = {\n\t\t\t\t\t\twidth: texDatas.width,\n\t\t\t\t\t\theight: texDatas.height,\n\t\t\t\t\t\tformat: texDatas.format,\n\t\t\t\t\t\tmipmaps: texDatas.mipmaps\n\t\t\t\t\t};\n\n\t\t\t\t\tloaded += 1;\n\n\t\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\t\tif ( texDatas.mipmapCount === 1 )\n\t\t\t\t\t\t\t{ texture.minFilter = LinearFilter; }\n\n\t\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\t\tif ( onLoad ) { onLoad( texture ); }\n\n\t\t\t\t\t}\n\n\t\t\t\t}, onProgress, onError );\n\n\t\t\t}\n\n\t\t\tif ( Array.isArray( url ) ) {\n\n\t\t\t\tvar loaded = 0;\n\n\t\t\t\tfor ( var i = 0, il = url.length; i < il; ++ i ) {\n\n\t\t\t\t\tloadTexture( i );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// compressed cubemap texture stored in a single DDS file\n\n\t\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\t\tvar texDatas = scope.parse( buffer, true );\n\n\t\t\t\t\tif ( texDatas.isCubemap ) {\n\n\t\t\t\t\t\tvar faces = texDatas.mipmaps.length / texDatas.mipmapCount;\n\n\t\t\t\t\t\tfor ( var f = 0; f < faces; f ++ ) {\n\n\t\t\t\t\t\t\timages[ f ] = { mipmaps: [] };\n\n\t\t\t\t\t\t\tfor ( var i = 0; i < texDatas.mipmapCount; i ++ ) {\n\n\t\t\t\t\t\t\t\timages[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );\n\t\t\t\t\t\t\t\timages[ f ].format = texDatas.format;\n\t\t\t\t\t\t\t\timages[ f ].width = texDatas.width;\n\t\t\t\t\t\t\t\timages[ f ].height = texDatas.height;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttexture.image.width = texDatas.width;\n\t\t\t\t\t\ttexture.image.height = texDatas.height;\n\t\t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( texDatas.mipmapCount === 1 ) {\n\n\t\t\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\tif ( onLoad ) { onLoad( texture ); }\n\n\t\t\t\t}, onProgress, onError );\n\n\t\t\t}\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author Nikos M. / https://github.com/foo123/\n\t *\n\t * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n\t *\n\t * Sub classes have to implement the parse() method which will be used in load().\n\t */\n\n\tfunction DataTextureLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tDataTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: DataTextureLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar texture = new DataTexture();\n\n\t\t\tvar loader = new FileLoader( this.manager );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\tvar texData = scope.parse( buffer );\n\n\t\t\t\tif ( ! texData ) { return; }\n\n\t\t\t\tif ( texData.image !== undefined ) {\n\n\t\t\t\t\ttexture.image = texData.image;\n\n\t\t\t\t} else if ( texData.data !== undefined ) {\n\n\t\t\t\t\ttexture.image.width = texData.width;\n\t\t\t\t\ttexture.image.height = texData.height;\n\t\t\t\t\ttexture.image.data = texData.data;\n\n\t\t\t\t}\n\n\t\t\t\ttexture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;\n\t\t\t\ttexture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;\n\n\t\t\t\ttexture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;\n\t\t\t\ttexture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearFilter;\n\n\t\t\t\ttexture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;\n\n\t\t\t\tif ( texData.format !== undefined ) {\n\n\t\t\t\t\ttexture.format = texData.format;\n\n\t\t\t\t}\n\t\t\t\tif ( texData.type !== undefined ) {\n\n\t\t\t\t\ttexture.type = texData.type;\n\n\t\t\t\t}\n\n\t\t\t\tif ( texData.mipmaps !== undefined ) {\n\n\t\t\t\t\ttexture.mipmaps = texData.mipmaps;\n\t\t\t\t\ttexture.minFilter = LinearMipmapLinearFilter; // presumably...\n\n\t\t\t\t}\n\n\t\t\t\tif ( texData.mipmapCount === 1 ) {\n\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t\t}\n\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tif ( onLoad ) { onLoad( texture, texData ); }\n\n\t\t\t}, onProgress, onError );\n\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction ImageLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tImageLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: ImageLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tif ( this.path !== undefined ) { url = this.path + url; }\n\n\t\t\turl = this.manager.resolveURL( url );\n\n\t\t\tvar scope = this;\n\n\t\t\tvar cached = Cache.get( url );\n\n\t\t\tif ( cached !== undefined ) {\n\n\t\t\t\tscope.manager.itemStart( url );\n\n\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\tif ( onLoad ) { onLoad( cached ); }\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, 0 );\n\n\t\t\t\treturn cached;\n\n\t\t\t}\n\n\t\t\tvar image = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'img' );\n\n\t\t\tfunction onImageLoad() {\n\n\t\t\t\timage.removeEventListener( 'load', onImageLoad, false );\n\t\t\t\timage.removeEventListener( 'error', onImageError, false );\n\n\t\t\t\tCache.add( url, this );\n\n\t\t\t\tif ( onLoad ) { onLoad( this ); }\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}\n\n\t\t\tfunction onImageError( event ) {\n\n\t\t\t\timage.removeEventListener( 'load', onImageLoad, false );\n\t\t\t\timage.removeEventListener( 'error', onImageError, false );\n\n\t\t\t\tif ( onError ) { onError( event ); }\n\n\t\t\t\tscope.manager.itemError( url );\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}\n\n\t\t\timage.addEventListener( 'load', onImageLoad, false );\n\t\t\timage.addEventListener( 'error', onImageError, false );\n\n\t\t\tif ( url.substr( 0, 5 ) !== 'data:' ) {\n\n\t\t\t\tif ( this.crossOrigin !== undefined ) { image.crossOrigin = this.crossOrigin; }\n\n\t\t\t}\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\timage.src = url;\n\n\t\t\treturn image;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\n\tfunction CubeTextureLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tCubeTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: CubeTextureLoader,\n\n\t\tload: function ( urls, onLoad, onProgress, onError ) {\n\n\t\t\tvar texture = new CubeTexture();\n\n\t\t\tvar loader = new ImageLoader( this.manager );\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\t\tloader.setPath( this.path );\n\n\t\t\tvar loaded = 0;\n\n\t\t\tfunction loadTexture( i ) {\n\n\t\t\t\tloader.load( urls[ i ], function ( image ) {\n\n\t\t\t\t\ttexture.images[ i ] = image;\n\n\t\t\t\t\tloaded ++;\n\n\t\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\t\tif ( onLoad ) { onLoad( texture ); }\n\n\t\t\t\t\t}\n\n\t\t\t\t}, undefined, onError );\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < urls.length; ++ i ) {\n\n\t\t\t\tloadTexture( i );\n\n\t\t\t}\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction TextureLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: TextureLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar texture = new Texture();\n\n\t\t\tvar loader = new ImageLoader( this.manager );\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\t\tloader.setPath( this.path );\n\n\t\t\tloader.load( url, function ( image ) {\n\n\t\t\t\ttexture.image = image;\n\n\t\t\t\t// JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.\n\t\t\t\tvar isJPEG = url.search( /\\.jpe?g($|\\?)/i ) > 0 || url.search( /^data\\:image\\/jpeg/ ) === 0;\n\n\t\t\t\ttexture.format = isJPEG ? RGBFormat : RGBAFormat;\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tif ( onLoad !== undefined ) {\n\n\t\t\t\t\tonLoad( texture );\n\n\t\t\t\t}\n\n\t\t\t}, onProgress, onError );\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * Extensible curve object\n\t *\n\t * Some common of curve methods:\n\t * .getPoint( t, optionalTarget ), .getTangent( t )\n\t * .getPointAt( u, optionalTarget ), .getTangentAt( u )\n\t * .getPoints(), .getSpacedPoints()\n\t * .getLength()\n\t * .updateArcLengths()\n\t *\n\t * This following curves inherit from THREE.Curve:\n\t *\n\t * -- 2D curves --\n\t * THREE.ArcCurve\n\t * THREE.CubicBezierCurve\n\t * THREE.EllipseCurve\n\t * THREE.LineCurve\n\t * THREE.QuadraticBezierCurve\n\t * THREE.SplineCurve\n\t *\n\t * -- 3D curves --\n\t * THREE.CatmullRomCurve3\n\t * THREE.CubicBezierCurve3\n\t * THREE.LineCurve3\n\t * THREE.QuadraticBezierCurve3\n\t *\n\t * A series of curves can be represented as a THREE.CurvePath.\n\t *\n\t **/\n\n\t/**************************************************************\n\t *\tAbstract Curve base class\n\t **************************************************************/\n\n\tfunction Curve() {\n\n\t\tthis.type = 'Curve';\n\n\t\tthis.arcLengthDivisions = 200;\n\n\t}\n\n\tObject.assign( Curve.prototype, {\n\n\t\t// Virtual base class method to overwrite and implement in subclasses\n\t\t//\t- t [0 .. 1]\n\n\t\tgetPoint: function ( /* t, optionalTarget */ ) {\n\n\t\t\tconsole.warn( 'THREE.Curve: .getPoint() not implemented.' );\n\t\t\treturn null;\n\n\t\t},\n\n\t\t// Get point at relative position in curve according to arc length\n\t\t// - u [0 .. 1]\n\n\t\tgetPointAt: function ( u, optionalTarget ) {\n\n\t\t\tvar t = this.getUtoTmapping( u );\n\t\t\treturn this.getPoint( t, optionalTarget );\n\n\t\t},\n\n\t\t// Get sequence of points using getPoint( t )\n\n\t\tgetPoints: function ( divisions ) {\n\n\t\t\tif ( divisions === undefined ) { divisions = 5; }\n\n\t\t\tvar points = [];\n\n\t\t\tfor ( var d = 0; d <= divisions; d ++ ) {\n\n\t\t\t\tpoints.push( this.getPoint( d / divisions ) );\n\n\t\t\t}\n\n\t\t\treturn points;\n\n\t\t},\n\n\t\t// Get sequence of points using getPointAt( u )\n\n\t\tgetSpacedPoints: function ( divisions ) {\n\n\t\t\tif ( divisions === undefined ) { divisions = 5; }\n\n\t\t\tvar points = [];\n\n\t\t\tfor ( var d = 0; d <= divisions; d ++ ) {\n\n\t\t\t\tpoints.push( this.getPointAt( d / divisions ) );\n\n\t\t\t}\n\n\t\t\treturn points;\n\n\t\t},\n\n\t\t// Get total curve arc length\n\n\t\tgetLength: function () {\n\n\t\t\tvar lengths = this.getLengths();\n\t\t\treturn lengths[ lengths.length - 1 ];\n\n\t\t},\n\n\t\t// Get list of cumulative segment lengths\n\n\t\tgetLengths: function ( divisions ) {\n\n\t\t\tif ( divisions === undefined ) { divisions = this.arcLengthDivisions; }\n\n\t\t\tif ( this.cacheArcLengths &&\n\t\t\t\t( this.cacheArcLengths.length === divisions + 1 ) &&\n\t\t\t\t! this.needsUpdate ) {\n\n\t\t\t\treturn this.cacheArcLengths;\n\n\t\t\t}\n\n\t\t\tthis.needsUpdate = false;\n\n\t\t\tvar cache = [];\n\t\t\tvar current, last = this.getPoint( 0 );\n\t\t\tvar p, sum = 0;\n\n\t\t\tcache.push( 0 );\n\n\t\t\tfor ( p = 1; p <= divisions; p ++ ) {\n\n\t\t\t\tcurrent = this.getPoint( p / divisions );\n\t\t\t\tsum += current.distanceTo( last );\n\t\t\t\tcache.push( sum );\n\t\t\t\tlast = current;\n\n\t\t\t}\n\n\t\t\tthis.cacheArcLengths = cache;\n\n\t\t\treturn cache; // { sums: cache, sum: sum }; Sum is in the last element.\n\n\t\t},\n\n\t\tupdateArcLengths: function () {\n\n\t\t\tthis.needsUpdate = true;\n\t\t\tthis.getLengths();\n\n\t\t},\n\n\t\t// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\n\n\t\tgetUtoTmapping: function ( u, distance ) {\n\n\t\t\tvar arcLengths = this.getLengths();\n\n\t\t\tvar i = 0, il = arcLengths.length;\n\n\t\t\tvar targetArcLength; // The targeted u distance value to get\n\n\t\t\tif ( distance ) {\n\n\t\t\t\ttargetArcLength = distance;\n\n\t\t\t} else {\n\n\t\t\t\ttargetArcLength = u * arcLengths[ il - 1 ];\n\n\t\t\t}\n\n\t\t\t// binary search for the index with largest value smaller than target u distance\n\n\t\t\tvar low = 0, high = il - 1, comparison;\n\n\t\t\twhile ( low <= high ) {\n\n\t\t\t\ti = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n\n\t\t\t\tcomparison = arcLengths[ i ] - targetArcLength;\n\n\t\t\t\tif ( comparison < 0 ) {\n\n\t\t\t\t\tlow = i + 1;\n\n\t\t\t\t} else if ( comparison > 0 ) {\n\n\t\t\t\t\thigh = i - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\thigh = i;\n\t\t\t\t\tbreak;\n\n\t\t\t\t\t// DONE\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\ti = high;\n\n\t\t\tif ( arcLengths[ i ] === targetArcLength ) {\n\n\t\t\t\treturn i / ( il - 1 );\n\n\t\t\t}\n\n\t\t\t// we could get finer grain at lengths, or use simple interpolation between two points\n\n\t\t\tvar lengthBefore = arcLengths[ i ];\n\t\t\tvar lengthAfter = arcLengths[ i + 1 ];\n\n\t\t\tvar segmentLength = lengthAfter - lengthBefore;\n\n\t\t\t// determine where we are between the 'before' and 'after' points\n\n\t\t\tvar segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;\n\n\t\t\t// add that fractional amount to t\n\n\t\t\tvar t = ( i + segmentFraction ) / ( il - 1 );\n\n\t\t\treturn t;\n\n\t\t},\n\n\t\t// Returns a unit vector tangent at t\n\t\t// In case any sub curve does not implement its tangent derivation,\n\t\t// 2 points a small delta apart will be used to find its gradient\n\t\t// which seems to give a reasonable approximation\n\n\t\tgetTangent: function ( t ) {\n\n\t\t\tvar delta = 0.0001;\n\t\t\tvar t1 = t - delta;\n\t\t\tvar t2 = t + delta;\n\n\t\t\t// Capping in case of danger\n\n\t\t\tif ( t1 < 0 ) { t1 = 0; }\n\t\t\tif ( t2 > 1 ) { t2 = 1; }\n\n\t\t\tvar pt1 = this.getPoint( t1 );\n\t\t\tvar pt2 = this.getPoint( t2 );\n\n\t\t\tvar vec = pt2.clone().sub( pt1 );\n\t\t\treturn vec.normalize();\n\n\t\t},\n\n\t\tgetTangentAt: function ( u ) {\n\n\t\t\tvar t = this.getUtoTmapping( u );\n\t\t\treturn this.getTangent( t );\n\n\t\t},\n\n\t\tcomputeFrenetFrames: function ( segments, closed ) {\n\n\t\t\t// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n\n\t\t\tvar normal = new Vector3();\n\n\t\t\tvar tangents = [];\n\t\t\tvar normals = [];\n\t\t\tvar binormals = [];\n\n\t\t\tvar vec = new Vector3();\n\t\t\tvar mat = new Matrix4();\n\n\t\t\tvar i, u, theta;\n\n\t\t\t// compute the tangent vectors for each segment on the curve\n\n\t\t\tfor ( i = 0; i <= segments; i ++ ) {\n\n\t\t\t\tu = i / segments;\n\n\t\t\t\ttangents[ i ] = this.getTangentAt( u );\n\t\t\t\ttangents[ i ].normalize();\n\n\t\t\t}\n\n\t\t\t// select an initial normal vector perpendicular to the first tangent vector,\n\t\t\t// and in the direction of the minimum tangent xyz component\n\n\t\t\tnormals[ 0 ] = new Vector3();\n\t\t\tbinormals[ 0 ] = new Vector3();\n\t\t\tvar min = Number.MAX_VALUE;\n\t\t\tvar tx = Math.abs( tangents[ 0 ].x );\n\t\t\tvar ty = Math.abs( tangents[ 0 ].y );\n\t\t\tvar tz = Math.abs( tangents[ 0 ].z );\n\n\t\t\tif ( tx <= min ) {\n\n\t\t\t\tmin = tx;\n\t\t\t\tnormal.set( 1, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( ty <= min ) {\n\n\t\t\t\tmin = ty;\n\t\t\t\tnormal.set( 0, 1, 0 );\n\n\t\t\t}\n\n\t\t\tif ( tz <= min ) {\n\n\t\t\t\tnormal.set( 0, 0, 1 );\n\n\t\t\t}\n\n\t\t\tvec.crossVectors( tangents[ 0 ], normal ).normalize();\n\n\t\t\tnormals[ 0 ].crossVectors( tangents[ 0 ], vec );\n\t\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );\n\n\n\t\t\t// compute the slowly-varying normal and binormal vectors for each segment on the curve\n\n\t\t\tfor ( i = 1; i <= segments; i ++ ) {\n\n\t\t\t\tnormals[ i ] = normals[ i - 1 ].clone();\n\n\t\t\t\tbinormals[ i ] = binormals[ i - 1 ].clone();\n\n\t\t\t\tvec.crossVectors( tangents[ i - 1 ], tangents[ i ] );\n\n\t\t\t\tif ( vec.length() > Number.EPSILON ) {\n\n\t\t\t\t\tvec.normalize();\n\n\t\t\t\t\ttheta = Math.acos( MathUtils.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors\n\n\t\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );\n\n\t\t\t\t}\n\n\t\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n\t\t\t}\n\n\t\t\t// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\n\t\t\tif ( closed === true ) {\n\n\t\t\t\ttheta = Math.acos( MathUtils.clamp( normals[ 0 ].dot( normals[ segments ] ), - 1, 1 ) );\n\t\t\t\ttheta /= segments;\n\n\t\t\t\tif ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {\n\n\t\t\t\t\ttheta = - theta;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( i = 1; i <= segments; i ++ ) {\n\n\t\t\t\t\t// twist a little...\n\t\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );\n\t\t\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\ttangents: tangents,\n\t\t\t\tnormals: normals,\n\t\t\t\tbinormals: binormals\n\t\t\t};\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.arcLengthDivisions = source.arcLengthDivisions;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Curve',\n\t\t\t\t\tgenerator: 'Curve.toJSON'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tdata.arcLengthDivisions = this.arcLengthDivisions;\n\t\t\tdata.type = this.type;\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tfromJSON: function ( json ) {\n\n\t\t\tthis.arcLengthDivisions = json.arcLengthDivisions;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\tfunction EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'EllipseCurve';\n\n\t\tthis.aX = aX || 0;\n\t\tthis.aY = aY || 0;\n\n\t\tthis.xRadius = xRadius || 1;\n\t\tthis.yRadius = yRadius || 1;\n\n\t\tthis.aStartAngle = aStartAngle || 0;\n\t\tthis.aEndAngle = aEndAngle || 2 * Math.PI;\n\n\t\tthis.aClockwise = aClockwise || false;\n\n\t\tthis.aRotation = aRotation || 0;\n\n\t}\n\n\tEllipseCurve.prototype = Object.create( Curve.prototype );\n\tEllipseCurve.prototype.constructor = EllipseCurve;\n\n\tEllipseCurve.prototype.isEllipseCurve = true;\n\n\tEllipseCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector2();\n\n\t\tvar twoPi = Math.PI * 2;\n\t\tvar deltaAngle = this.aEndAngle - this.aStartAngle;\n\t\tvar samePoints = Math.abs( deltaAngle ) < Number.EPSILON;\n\n\t\t// ensures that deltaAngle is 0 .. 2 PI\n\t\twhile ( deltaAngle < 0 ) { deltaAngle += twoPi; }\n\t\twhile ( deltaAngle > twoPi ) { deltaAngle -= twoPi; }\n\n\t\tif ( deltaAngle < Number.EPSILON ) {\n\n\t\t\tif ( samePoints ) {\n\n\t\t\t\tdeltaAngle = 0;\n\n\t\t\t} else {\n\n\t\t\t\tdeltaAngle = twoPi;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.aClockwise === true && ! samePoints ) {\n\n\t\t\tif ( deltaAngle === twoPi ) {\n\n\t\t\t\tdeltaAngle = - twoPi;\n\n\t\t\t} else {\n\n\t\t\t\tdeltaAngle = deltaAngle - twoPi;\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar angle = this.aStartAngle + t * deltaAngle;\n\t\tvar x = this.aX + this.xRadius * Math.cos( angle );\n\t\tvar y = this.aY + this.yRadius * Math.sin( angle );\n\n\t\tif ( this.aRotation !== 0 ) {\n\n\t\t\tvar cos = Math.cos( this.aRotation );\n\t\t\tvar sin = Math.sin( this.aRotation );\n\n\t\t\tvar tx = x - this.aX;\n\t\t\tvar ty = y - this.aY;\n\n\t\t\t// Rotate the point about the center of the ellipse.\n\t\t\tx = tx * cos - ty * sin + this.aX;\n\t\t\ty = tx * sin + ty * cos + this.aY;\n\n\t\t}\n\n\t\treturn point.set( x, y );\n\n\t};\n\n\tEllipseCurve.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.aX = source.aX;\n\t\tthis.aY = source.aY;\n\n\t\tthis.xRadius = source.xRadius;\n\t\tthis.yRadius = source.yRadius;\n\n\t\tthis.aStartAngle = source.aStartAngle;\n\t\tthis.aEndAngle = source.aEndAngle;\n\n\t\tthis.aClockwise = source.aClockwise;\n\n\t\tthis.aRotation = source.aRotation;\n\n\t\treturn this;\n\n\t};\n\n\n\tEllipseCurve.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.aX = this.aX;\n\t\tdata.aY = this.aY;\n\n\t\tdata.xRadius = this.xRadius;\n\t\tdata.yRadius = this.yRadius;\n\n\t\tdata.aStartAngle = this.aStartAngle;\n\t\tdata.aEndAngle = this.aEndAngle;\n\n\t\tdata.aClockwise = this.aClockwise;\n\n\t\tdata.aRotation = this.aRotation;\n\n\t\treturn data;\n\n\t};\n\n\tEllipseCurve.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.aX = json.aX;\n\t\tthis.aY = json.aY;\n\n\t\tthis.xRadius = json.xRadius;\n\t\tthis.yRadius = json.yRadius;\n\n\t\tthis.aStartAngle = json.aStartAngle;\n\t\tthis.aEndAngle = json.aEndAngle;\n\n\t\tthis.aClockwise = json.aClockwise;\n\n\t\tthis.aRotation = json.aRotation;\n\n\t\treturn this;\n\n\t};\n\n\tfunction ArcCurve( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\tEllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n\t\tthis.type = 'ArcCurve';\n\n\t}\n\n\tArcCurve.prototype = Object.create( EllipseCurve.prototype );\n\tArcCurve.prototype.constructor = ArcCurve;\n\n\tArcCurve.prototype.isArcCurve = true;\n\n\t/**\n\t * @author zz85 https://github.com/zz85\n\t *\n\t * Centripetal CatmullRom Curve - which is useful for avoiding\n\t * cusps and self-intersections in non-uniform catmull rom curves.\n\t * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n\t *\n\t * curve.type accepts centripetal(default), chordal and catmullrom\n\t * curve.tension is used for catmullrom which defaults to 0.5\n\t */\n\n\n\t/*\n\tBased on an optimized c++ solution in\n\t - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n\t - http://ideone.com/NoEbVM\n\n\tThis CubicPoly class could be used for reusing some variables and calculations,\n\tbut for three.js curve use, it could be possible inlined and flatten into a single function call\n\twhich can be placed in CurveUtils.\n\t*/\n\n\tfunction CubicPoly() {\n\n\t\tvar c0 = 0, c1 = 0, c2 = 0, c3 = 0;\n\n\t\t/*\n\t\t * Compute coefficients for a cubic polynomial\n\t\t *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n\t\t * such that\n\t\t *   p(0) = x0, p(1) = x1\n\t\t *  and\n\t\t *   p'(0) = t0, p'(1) = t1.\n\t\t */\n\t\tfunction init( x0, x1, t0, t1 ) {\n\n\t\t\tc0 = x0;\n\t\t\tc1 = t0;\n\t\t\tc2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;\n\t\t\tc3 = 2 * x0 - 2 * x1 + t0 + t1;\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tinitCatmullRom: function ( x0, x1, x2, x3, tension ) {\n\n\t\t\t\tinit( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );\n\n\t\t\t},\n\n\t\t\tinitNonuniformCatmullRom: function ( x0, x1, x2, x3, dt0, dt1, dt2 ) {\n\n\t\t\t\t// compute tangents when parameterized in [t1,t2]\n\t\t\t\tvar t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;\n\t\t\t\tvar t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;\n\n\t\t\t\t// rescale tangents for parametrization in [0,1]\n\t\t\t\tt1 *= dt1;\n\t\t\t\tt2 *= dt1;\n\n\t\t\t\tinit( x1, x2, t1, t2 );\n\n\t\t\t},\n\n\t\t\tcalc: function ( t ) {\n\n\t\t\t\tvar t2 = t * t;\n\t\t\t\tvar t3 = t2 * t;\n\t\t\t\treturn c0 + c1 * t + c2 * t2 + c3 * t3;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t//\n\n\tvar tmp = new Vector3();\n\tvar px = new CubicPoly(), py = new CubicPoly(), pz = new CubicPoly();\n\n\tfunction CatmullRomCurve3( points, closed, curveType, tension ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'CatmullRomCurve3';\n\n\t\tthis.points = points || [];\n\t\tthis.closed = closed || false;\n\t\tthis.curveType = curveType || 'centripetal';\n\t\tthis.tension = tension || 0.5;\n\n\t}\n\n\tCatmullRomCurve3.prototype = Object.create( Curve.prototype );\n\tCatmullRomCurve3.prototype.constructor = CatmullRomCurve3;\n\n\tCatmullRomCurve3.prototype.isCatmullRomCurve3 = true;\n\n\tCatmullRomCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector3();\n\n\t\tvar points = this.points;\n\t\tvar l = points.length;\n\n\t\tvar p = ( l - ( this.closed ? 0 : 1 ) ) * t;\n\t\tvar intPoint = Math.floor( p );\n\t\tvar weight = p - intPoint;\n\n\t\tif ( this.closed ) {\n\n\t\t\tintPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / l ) + 1 ) * l;\n\n\t\t} else if ( weight === 0 && intPoint === l - 1 ) {\n\n\t\t\tintPoint = l - 2;\n\t\t\tweight = 1;\n\n\t\t}\n\n\t\tvar p0, p1, p2, p3; // 4 points\n\n\t\tif ( this.closed || intPoint > 0 ) {\n\n\t\t\tp0 = points[ ( intPoint - 1 ) % l ];\n\n\t\t} else {\n\n\t\t\t// extrapolate first point\n\t\t\ttmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );\n\t\t\tp0 = tmp;\n\n\t\t}\n\n\t\tp1 = points[ intPoint % l ];\n\t\tp2 = points[ ( intPoint + 1 ) % l ];\n\n\t\tif ( this.closed || intPoint + 2 < l ) {\n\n\t\t\tp3 = points[ ( intPoint + 2 ) % l ];\n\n\t\t} else {\n\n\t\t\t// extrapolate last point\n\t\t\ttmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );\n\t\t\tp3 = tmp;\n\n\t\t}\n\n\t\tif ( this.curveType === 'centripetal' || this.curveType === 'chordal' ) {\n\n\t\t\t// init Centripetal / Chordal Catmull-Rom\n\t\t\tvar pow = this.curveType === 'chordal' ? 0.5 : 0.25;\n\t\t\tvar dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );\n\t\t\tvar dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );\n\t\t\tvar dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );\n\n\t\t\t// safety check for repeated points\n\t\t\tif ( dt1 < 1e-4 ) { dt1 = 1.0; }\n\t\t\tif ( dt0 < 1e-4 ) { dt0 = dt1; }\n\t\t\tif ( dt2 < 1e-4 ) { dt2 = dt1; }\n\n\t\t\tpx.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );\n\t\t\tpy.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );\n\t\t\tpz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );\n\n\t\t} else if ( this.curveType === 'catmullrom' ) {\n\n\t\t\tpx.initCatmullRom( p0.x, p1.x, p2.x, p3.x, this.tension );\n\t\t\tpy.initCatmullRom( p0.y, p1.y, p2.y, p3.y, this.tension );\n\t\t\tpz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, this.tension );\n\n\t\t}\n\n\t\tpoint.set(\n\t\t\tpx.calc( weight ),\n\t\t\tpy.calc( weight ),\n\t\t\tpz.calc( weight )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tCatmullRomCurve3.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.points = [];\n\n\t\tfor ( var i = 0, l = source.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = source.points[ i ];\n\n\t\t\tthis.points.push( point.clone() );\n\n\t\t}\n\n\t\tthis.closed = source.closed;\n\t\tthis.curveType = source.curveType;\n\t\tthis.tension = source.tension;\n\n\t\treturn this;\n\n\t};\n\n\tCatmullRomCurve3.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.points = [];\n\n\t\tfor ( var i = 0, l = this.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = this.points[ i ];\n\t\t\tdata.points.push( point.toArray() );\n\n\t\t}\n\n\t\tdata.closed = this.closed;\n\t\tdata.curveType = this.curveType;\n\t\tdata.tension = this.tension;\n\n\t\treturn data;\n\n\t};\n\n\tCatmullRomCurve3.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.points = [];\n\n\t\tfor ( var i = 0, l = json.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = json.points[ i ];\n\t\t\tthis.points.push( new Vector3().fromArray( point ) );\n\n\t\t}\n\n\t\tthis.closed = json.closed;\n\t\tthis.curveType = json.curveType;\n\t\tthis.tension = json.tension;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t *\n\t * Bezier Curves formulas obtained from\n\t * http://en.wikipedia.org/wiki/Bézier_curve\n\t */\n\n\tfunction CatmullRom( t, p0, p1, p2, p3 ) {\n\n\t\tvar v0 = ( p2 - p0 ) * 0.5;\n\t\tvar v1 = ( p3 - p1 ) * 0.5;\n\t\tvar t2 = t * t;\n\t\tvar t3 = t * t2;\n\t\treturn ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\n\t}\n\n\t//\n\n\tfunction QuadraticBezierP0( t, p ) {\n\n\t\tvar k = 1 - t;\n\t\treturn k * k * p;\n\n\t}\n\n\tfunction QuadraticBezierP1( t, p ) {\n\n\t\treturn 2 * ( 1 - t ) * t * p;\n\n\t}\n\n\tfunction QuadraticBezierP2( t, p ) {\n\n\t\treturn t * t * p;\n\n\t}\n\n\tfunction QuadraticBezier( t, p0, p1, p2 ) {\n\n\t\treturn QuadraticBezierP0( t, p0 ) + QuadraticBezierP1( t, p1 ) +\n\t\t\tQuadraticBezierP2( t, p2 );\n\n\t}\n\n\t//\n\n\tfunction CubicBezierP0( t, p ) {\n\n\t\tvar k = 1 - t;\n\t\treturn k * k * k * p;\n\n\t}\n\n\tfunction CubicBezierP1( t, p ) {\n\n\t\tvar k = 1 - t;\n\t\treturn 3 * k * k * t * p;\n\n\t}\n\n\tfunction CubicBezierP2( t, p ) {\n\n\t\treturn 3 * ( 1 - t ) * t * t * p;\n\n\t}\n\n\tfunction CubicBezierP3( t, p ) {\n\n\t\treturn t * t * t * p;\n\n\t}\n\n\tfunction CubicBezier( t, p0, p1, p2, p3 ) {\n\n\t\treturn CubicBezierP0( t, p0 ) + CubicBezierP1( t, p1 ) + CubicBezierP2( t, p2 ) +\n\t\t\tCubicBezierP3( t, p3 );\n\n\t}\n\n\tfunction CubicBezierCurve( v0, v1, v2, v3 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'CubicBezierCurve';\n\n\t\tthis.v0 = v0 || new Vector2();\n\t\tthis.v1 = v1 || new Vector2();\n\t\tthis.v2 = v2 || new Vector2();\n\t\tthis.v3 = v3 || new Vector2();\n\n\t}\n\n\tCubicBezierCurve.prototype = Object.create( Curve.prototype );\n\tCubicBezierCurve.prototype.constructor = CubicBezierCurve;\n\n\tCubicBezierCurve.prototype.isCubicBezierCurve = true;\n\n\tCubicBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector2();\n\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\n\n\t\tpoint.set(\n\t\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\n\t\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tCubicBezierCurve.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\t\tthis.v3.copy( source.v3 );\n\n\t\treturn this;\n\n\t};\n\n\tCubicBezierCurve.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\t\tdata.v3 = this.v3.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tCubicBezierCurve.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\t\tthis.v3.fromArray( json.v3 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction CubicBezierCurve3( v0, v1, v2, v3 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'CubicBezierCurve3';\n\n\t\tthis.v0 = v0 || new Vector3();\n\t\tthis.v1 = v1 || new Vector3();\n\t\tthis.v2 = v2 || new Vector3();\n\t\tthis.v3 = v3 || new Vector3();\n\n\t}\n\n\tCubicBezierCurve3.prototype = Object.create( Curve.prototype );\n\tCubicBezierCurve3.prototype.constructor = CubicBezierCurve3;\n\n\tCubicBezierCurve3.prototype.isCubicBezierCurve3 = true;\n\n\tCubicBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector3();\n\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\n\n\t\tpoint.set(\n\t\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\n\t\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y ),\n\t\t\tCubicBezier( t, v0.z, v1.z, v2.z, v3.z )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tCubicBezierCurve3.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\t\tthis.v3.copy( source.v3 );\n\n\t\treturn this;\n\n\t};\n\n\tCubicBezierCurve3.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\t\tdata.v3 = this.v3.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tCubicBezierCurve3.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\t\tthis.v3.fromArray( json.v3 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction LineCurve( v1, v2 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'LineCurve';\n\n\t\tthis.v1 = v1 || new Vector2();\n\t\tthis.v2 = v2 || new Vector2();\n\n\t}\n\n\tLineCurve.prototype = Object.create( Curve.prototype );\n\tLineCurve.prototype.constructor = LineCurve;\n\n\tLineCurve.prototype.isLineCurve = true;\n\n\tLineCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector2();\n\n\t\tif ( t === 1 ) {\n\n\t\t\tpoint.copy( this.v2 );\n\n\t\t} else {\n\n\t\t\tpoint.copy( this.v2 ).sub( this.v1 );\n\t\t\tpoint.multiplyScalar( t ).add( this.v1 );\n\n\t\t}\n\n\t\treturn point;\n\n\t};\n\n\t// Line curve is linear, so we can overwrite default getPointAt\n\n\tLineCurve.prototype.getPointAt = function ( u, optionalTarget ) {\n\n\t\treturn this.getPoint( u, optionalTarget );\n\n\t};\n\n\tLineCurve.prototype.getTangent = function ( /* t */ ) {\n\n\t\tvar tangent = this.v2.clone().sub( this.v1 );\n\n\t\treturn tangent.normalize();\n\n\t};\n\n\tLineCurve.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tLineCurve.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tLineCurve.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction LineCurve3( v1, v2 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'LineCurve3';\n\n\t\tthis.v1 = v1 || new Vector3();\n\t\tthis.v2 = v2 || new Vector3();\n\n\t}\n\n\tLineCurve3.prototype = Object.create( Curve.prototype );\n\tLineCurve3.prototype.constructor = LineCurve3;\n\n\tLineCurve3.prototype.isLineCurve3 = true;\n\n\tLineCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector3();\n\n\t\tif ( t === 1 ) {\n\n\t\t\tpoint.copy( this.v2 );\n\n\t\t} else {\n\n\t\t\tpoint.copy( this.v2 ).sub( this.v1 );\n\t\t\tpoint.multiplyScalar( t ).add( this.v1 );\n\n\t\t}\n\n\t\treturn point;\n\n\t};\n\n\t// Line curve is linear, so we can overwrite default getPointAt\n\n\tLineCurve3.prototype.getPointAt = function ( u, optionalTarget ) {\n\n\t\treturn this.getPoint( u, optionalTarget );\n\n\t};\n\n\tLineCurve3.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tLineCurve3.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tLineCurve3.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction QuadraticBezierCurve( v0, v1, v2 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'QuadraticBezierCurve';\n\n\t\tthis.v0 = v0 || new Vector2();\n\t\tthis.v1 = v1 || new Vector2();\n\t\tthis.v2 = v2 || new Vector2();\n\n\t}\n\n\tQuadraticBezierCurve.prototype = Object.create( Curve.prototype );\n\tQuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;\n\n\tQuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;\n\n\tQuadraticBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector2();\n\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2;\n\n\t\tpoint.set(\n\t\t\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\n\t\t\tQuadraticBezier( t, v0.y, v1.y, v2.y )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tQuadraticBezierCurve.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tQuadraticBezierCurve.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tQuadraticBezierCurve.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction QuadraticBezierCurve3( v0, v1, v2 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'QuadraticBezierCurve3';\n\n\t\tthis.v0 = v0 || new Vector3();\n\t\tthis.v1 = v1 || new Vector3();\n\t\tthis.v2 = v2 || new Vector3();\n\n\t}\n\n\tQuadraticBezierCurve3.prototype = Object.create( Curve.prototype );\n\tQuadraticBezierCurve3.prototype.constructor = QuadraticBezierCurve3;\n\n\tQuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;\n\n\tQuadraticBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector3();\n\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2;\n\n\t\tpoint.set(\n\t\t\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\n\t\t\tQuadraticBezier( t, v0.y, v1.y, v2.y ),\n\t\t\tQuadraticBezier( t, v0.z, v1.z, v2.z )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tQuadraticBezierCurve3.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tQuadraticBezierCurve3.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tQuadraticBezierCurve3.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction SplineCurve( points /* array of Vector2 */ ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'SplineCurve';\n\n\t\tthis.points = points || [];\n\n\t}\n\n\tSplineCurve.prototype = Object.create( Curve.prototype );\n\tSplineCurve.prototype.constructor = SplineCurve;\n\n\tSplineCurve.prototype.isSplineCurve = true;\n\n\tSplineCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector2();\n\n\t\tvar points = this.points;\n\t\tvar p = ( points.length - 1 ) * t;\n\n\t\tvar intPoint = Math.floor( p );\n\t\tvar weight = p - intPoint;\n\n\t\tvar p0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];\n\t\tvar p1 = points[ intPoint ];\n\t\tvar p2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\n\t\tvar p3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\n\n\t\tpoint.set(\n\t\t\tCatmullRom( weight, p0.x, p1.x, p2.x, p3.x ),\n\t\t\tCatmullRom( weight, p0.y, p1.y, p2.y, p3.y )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tSplineCurve.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.points = [];\n\n\t\tfor ( var i = 0, l = source.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = source.points[ i ];\n\n\t\t\tthis.points.push( point.clone() );\n\n\t\t}\n\n\t\treturn this;\n\n\t};\n\n\tSplineCurve.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.points = [];\n\n\t\tfor ( var i = 0, l = this.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = this.points[ i ];\n\t\t\tdata.points.push( point.toArray() );\n\n\t\t}\n\n\t\treturn data;\n\n\t};\n\n\tSplineCurve.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.points = [];\n\n\t\tfor ( var i = 0, l = json.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = json.points[ i ];\n\t\t\tthis.points.push( new Vector2().fromArray( point ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t};\n\n\n\n\tvar Curves = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tArcCurve: ArcCurve,\n\t\tCatmullRomCurve3: CatmullRomCurve3,\n\t\tCubicBezierCurve: CubicBezierCurve,\n\t\tCubicBezierCurve3: CubicBezierCurve3,\n\t\tEllipseCurve: EllipseCurve,\n\t\tLineCurve: LineCurve,\n\t\tLineCurve3: LineCurve3,\n\t\tQuadraticBezierCurve: QuadraticBezierCurve,\n\t\tQuadraticBezierCurve3: QuadraticBezierCurve3,\n\t\tSplineCurve: SplineCurve\n\t});\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t *\n\t **/\n\n\t/**************************************************************\n\t *\tCurved Path - a curve path is simply a array of connected\n\t *  curves, but retains the api of a curve\n\t **************************************************************/\n\n\tfunction CurvePath() {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'CurvePath';\n\n\t\tthis.curves = [];\n\t\tthis.autoClose = false; // Automatically closes the path\n\n\t}\n\n\tCurvePath.prototype = Object.assign( Object.create( Curve.prototype ), {\n\n\t\tconstructor: CurvePath,\n\n\t\tadd: function ( curve ) {\n\n\t\t\tthis.curves.push( curve );\n\n\t\t},\n\n\t\tclosePath: function () {\n\n\t\t\t// Add a line curve if start and end of lines are not connected\n\t\t\tvar startPoint = this.curves[ 0 ].getPoint( 0 );\n\t\t\tvar endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );\n\n\t\t\tif ( ! startPoint.equals( endPoint ) ) {\n\n\t\t\t\tthis.curves.push( new LineCurve( endPoint, startPoint ) );\n\n\t\t\t}\n\n\t\t},\n\n\t\t// To get accurate point with reference to\n\t\t// entire path distance at time t,\n\t\t// following has to be done:\n\n\t\t// 1. Length of each sub path have to be known\n\t\t// 2. Locate and identify type of curve\n\t\t// 3. Get t for the curve\n\t\t// 4. Return curve.getPointAt(t')\n\n\t\tgetPoint: function ( t ) {\n\n\t\t\tvar d = t * this.getLength();\n\t\t\tvar curveLengths = this.getCurveLengths();\n\t\t\tvar i = 0;\n\n\t\t\t// To think about boundaries points.\n\n\t\t\twhile ( i < curveLengths.length ) {\n\n\t\t\t\tif ( curveLengths[ i ] >= d ) {\n\n\t\t\t\t\tvar diff = curveLengths[ i ] - d;\n\t\t\t\t\tvar curve = this.curves[ i ];\n\n\t\t\t\t\tvar segmentLength = curve.getLength();\n\t\t\t\t\tvar u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\n\n\t\t\t\t\treturn curve.getPointAt( u );\n\n\t\t\t\t}\n\n\t\t\t\ti ++;\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t\t// loop where sum != 0, sum > d , sum+1 <d\n\n\t\t},\n\n\t\t// We cannot use the default THREE.Curve getPoint() with getLength() because in\n\t\t// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n\t\t// getPoint() depends on getLength\n\n\t\tgetLength: function () {\n\n\t\t\tvar lens = this.getCurveLengths();\n\t\t\treturn lens[ lens.length - 1 ];\n\n\t\t},\n\n\t\t// cacheLengths must be recalculated.\n\t\tupdateArcLengths: function () {\n\n\t\t\tthis.needsUpdate = true;\n\t\t\tthis.cacheLengths = null;\n\t\t\tthis.getCurveLengths();\n\n\t\t},\n\n\t\t// Compute lengths and cache them\n\t\t// We cannot overwrite getLengths() because UtoT mapping uses it.\n\n\t\tgetCurveLengths: function () {\n\n\t\t\t// We use cache values if curves and cache array are same length\n\n\t\t\tif ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {\n\n\t\t\t\treturn this.cacheLengths;\n\n\t\t\t}\n\n\t\t\t// Get length of sub-curve\n\t\t\t// Push sums into cached array\n\n\t\t\tvar lengths = [], sums = 0;\n\n\t\t\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\n\n\t\t\t\tsums += this.curves[ i ].getLength();\n\t\t\t\tlengths.push( sums );\n\n\t\t\t}\n\n\t\t\tthis.cacheLengths = lengths;\n\n\t\t\treturn lengths;\n\n\t\t},\n\n\t\tgetSpacedPoints: function ( divisions ) {\n\n\t\t\tif ( divisions === undefined ) { divisions = 40; }\n\n\t\t\tvar points = [];\n\n\t\t\tfor ( var i = 0; i <= divisions; i ++ ) {\n\n\t\t\t\tpoints.push( this.getPoint( i / divisions ) );\n\n\t\t\t}\n\n\t\t\tif ( this.autoClose ) {\n\n\t\t\t\tpoints.push( points[ 0 ] );\n\n\t\t\t}\n\n\t\t\treturn points;\n\n\t\t},\n\n\t\tgetPoints: function ( divisions ) {\n\n\t\t\tdivisions = divisions || 12;\n\n\t\t\tvar points = [], last;\n\n\t\t\tfor ( var i = 0, curves = this.curves; i < curves.length; i ++ ) {\n\n\t\t\t\tvar curve = curves[ i ];\n\t\t\t\tvar resolution = ( curve && curve.isEllipseCurve ) ? divisions * 2\n\t\t\t\t\t: ( curve && ( curve.isLineCurve || curve.isLineCurve3 ) ) ? 1\n\t\t\t\t\t\t: ( curve && curve.isSplineCurve ) ? divisions * curve.points.length\n\t\t\t\t\t\t\t: divisions;\n\n\t\t\t\tvar pts = curve.getPoints( resolution );\n\n\t\t\t\tfor ( var j = 0; j < pts.length; j ++ ) {\n\n\t\t\t\t\tvar point = pts[ j ];\n\n\t\t\t\t\tif ( last && last.equals( point ) ) { continue; } // ensures no consecutive points are duplicates\n\n\t\t\t\t\tpoints.push( point );\n\t\t\t\t\tlast = point;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.autoClose && points.length > 1 && ! points[ points.length - 1 ].equals( points[ 0 ] ) ) {\n\n\t\t\t\tpoints.push( points[ 0 ] );\n\n\t\t\t}\n\n\t\t\treturn points;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tCurve.prototype.copy.call( this, source );\n\n\t\t\tthis.curves = [];\n\n\t\t\tfor ( var i = 0, l = source.curves.length; i < l; i ++ ) {\n\n\t\t\t\tvar curve = source.curves[ i ];\n\n\t\t\t\tthis.curves.push( curve.clone() );\n\n\t\t\t}\n\n\t\t\tthis.autoClose = source.autoClose;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\t\tdata.autoClose = this.autoClose;\n\t\t\tdata.curves = [];\n\n\t\t\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\n\n\t\t\t\tvar curve = this.curves[ i ];\n\t\t\t\tdata.curves.push( curve.toJSON() );\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tfromJSON: function ( json ) {\n\n\t\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\t\tthis.autoClose = json.autoClose;\n\t\t\tthis.curves = [];\n\n\t\t\tfor ( var i = 0, l = json.curves.length; i < l; i ++ ) {\n\n\t\t\t\tvar curve = json.curves[ i ];\n\t\t\t\tthis.curves.push( new Curves[ curve.type ]().fromJSON( curve ) );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * Creates free form 2d path using series of points, lines or curves.\n\t **/\n\n\tfunction Path( points ) {\n\n\t\tCurvePath.call( this );\n\n\t\tthis.type = 'Path';\n\n\t\tthis.currentPoint = new Vector2();\n\n\t\tif ( points ) {\n\n\t\t\tthis.setFromPoints( points );\n\n\t\t}\n\n\t}\n\n\tPath.prototype = Object.assign( Object.create( CurvePath.prototype ), {\n\n\t\tconstructor: Path,\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tthis.moveTo( points[ 0 ].x, points[ 0 ].y );\n\n\t\t\tfor ( var i = 1, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tthis.lineTo( points[ i ].x, points[ i ].y );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmoveTo: function ( x, y ) {\n\n\t\t\tthis.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlineTo: function ( x, y ) {\n\n\t\t\tvar curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );\n\t\t\tthis.curves.push( curve );\n\n\t\t\tthis.currentPoint.set( x, y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\n\n\t\t\tvar curve = new QuadraticBezierCurve(\n\t\t\t\tthis.currentPoint.clone(),\n\t\t\t\tnew Vector2( aCPx, aCPy ),\n\t\t\t\tnew Vector2( aX, aY )\n\t\t\t);\n\n\t\t\tthis.curves.push( curve );\n\n\t\t\tthis.currentPoint.set( aX, aY );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n\t\t\tvar curve = new CubicBezierCurve(\n\t\t\t\tthis.currentPoint.clone(),\n\t\t\t\tnew Vector2( aCP1x, aCP1y ),\n\t\t\t\tnew Vector2( aCP2x, aCP2y ),\n\t\t\t\tnew Vector2( aX, aY )\n\t\t\t);\n\n\t\t\tthis.curves.push( curve );\n\n\t\t\tthis.currentPoint.set( aX, aY );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsplineThru: function ( pts /*Array of Vector*/ ) {\n\n\t\t\tvar npts = [ this.currentPoint.clone() ].concat( pts );\n\n\t\t\tvar curve = new SplineCurve( npts );\n\t\t\tthis.curves.push( curve );\n\n\t\t\tthis.currentPoint.copy( pts[ pts.length - 1 ] );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\t\tvar x0 = this.currentPoint.x;\n\t\t\tvar y0 = this.currentPoint.y;\n\n\t\t\tthis.absarc( aX + x0, aY + y0, aRadius,\n\t\t\t\taStartAngle, aEndAngle, aClockwise );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tabsarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\t\tthis.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\t\tvar x0 = this.currentPoint.x;\n\t\t\tvar y0 = this.currentPoint.y;\n\n\t\t\tthis.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tabsellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\t\tvar curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n\t\t\tif ( this.curves.length > 0 ) {\n\n\t\t\t\t// if a previous curve is present, attempt to join\n\t\t\t\tvar firstPoint = curve.getPoint( 0 );\n\n\t\t\t\tif ( ! firstPoint.equals( this.currentPoint ) ) {\n\n\t\t\t\t\tthis.lineTo( firstPoint.x, firstPoint.y );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.curves.push( curve );\n\n\t\t\tvar lastPoint = curve.getPoint( 1 );\n\t\t\tthis.currentPoint.copy( lastPoint );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tCurvePath.prototype.copy.call( this, source );\n\n\t\t\tthis.currentPoint.copy( source.currentPoint );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = CurvePath.prototype.toJSON.call( this );\n\n\t\t\tdata.currentPoint = this.currentPoint.toArray();\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tfromJSON: function ( json ) {\n\n\t\t\tCurvePath.prototype.fromJSON.call( this, json );\n\n\t\t\tthis.currentPoint.fromArray( json.currentPoint );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * Defines a 2d shape plane using paths.\n\t **/\n\n\t// STEP 1 Create a path.\n\t// STEP 2 Turn path into shape.\n\t// STEP 3 ExtrudeGeometry takes in Shape/Shapes\n\t// STEP 3a - Extract points from each shape, turn to vertices\n\t// STEP 3b - Triangulate each shape, add faces.\n\n\tfunction Shape( points ) {\n\n\t\tPath.call( this, points );\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\tthis.type = 'Shape';\n\n\t\tthis.holes = [];\n\n\t}\n\n\tShape.prototype = Object.assign( Object.create( Path.prototype ), {\n\n\t\tconstructor: Shape,\n\n\t\tgetPointsHoles: function ( divisions ) {\n\n\t\t\tvar holesPts = [];\n\n\t\t\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\n\n\t\t\t\tholesPts[ i ] = this.holes[ i ].getPoints( divisions );\n\n\t\t\t}\n\n\t\t\treturn holesPts;\n\n\t\t},\n\n\t\t// get points of shape and holes (keypoints based on segments parameter)\n\n\t\textractPoints: function ( divisions ) {\n\n\t\t\treturn {\n\n\t\t\t\tshape: this.getPoints( divisions ),\n\t\t\t\tholes: this.getPointsHoles( divisions )\n\n\t\t\t};\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tPath.prototype.copy.call( this, source );\n\n\t\t\tthis.holes = [];\n\n\t\t\tfor ( var i = 0, l = source.holes.length; i < l; i ++ ) {\n\n\t\t\t\tvar hole = source.holes[ i ];\n\n\t\t\t\tthis.holes.push( hole.clone() );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = Path.prototype.toJSON.call( this );\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.holes = [];\n\n\t\t\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\n\n\t\t\t\tvar hole = this.holes[ i ];\n\t\t\t\tdata.holes.push( hole.toJSON() );\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tfromJSON: function ( json ) {\n\n\t\t\tPath.prototype.fromJSON.call( this, json );\n\n\t\t\tthis.uuid = json.uuid;\n\t\t\tthis.holes = [];\n\n\t\t\tfor ( var i = 0, l = json.holes.length; i < l; i ++ ) {\n\n\t\t\t\tvar hole = json.holes[ i ];\n\t\t\t\tthis.holes.push( new Path().fromJSON( hole ) );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Light( color, intensity ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Light';\n\n\t\tthis.color = new Color( color );\n\t\tthis.intensity = intensity !== undefined ? intensity : 1;\n\n\t\tthis.receiveShadow = undefined;\n\n\t}\n\n\tLight.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Light,\n\n\t\tisLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source );\n\n\t\t\tthis.color.copy( source.color );\n\t\t\tthis.intensity = source.intensity;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.color = this.color.getHex();\n\t\t\tdata.object.intensity = this.intensity;\n\n\t\t\tif ( this.groundColor !== undefined ) { data.object.groundColor = this.groundColor.getHex(); }\n\n\t\t\tif ( this.distance !== undefined ) { data.object.distance = this.distance; }\n\t\t\tif ( this.angle !== undefined ) { data.object.angle = this.angle; }\n\t\t\tif ( this.decay !== undefined ) { data.object.decay = this.decay; }\n\t\t\tif ( this.penumbra !== undefined ) { data.object.penumbra = this.penumbra; }\n\n\t\t\tif ( this.shadow !== undefined ) { data.object.shadow = this.shadow.toJSON(); }\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction HemisphereLight( skyColor, groundColor, intensity ) {\n\n\t\tLight.call( this, skyColor, intensity );\n\n\t\tthis.type = 'HemisphereLight';\n\n\t\tthis.castShadow = undefined;\n\n\t\tthis.position.copy( Object3D.DefaultUp );\n\t\tthis.updateMatrix();\n\n\t\tthis.groundColor = new Color( groundColor );\n\n\t}\n\n\tHemisphereLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: HemisphereLight,\n\n\t\tisHemisphereLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.groundColor.copy( source.groundColor );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction LightShadow( camera ) {\n\n\t\tthis.camera = camera;\n\n\t\tthis.bias = 0;\n\t\tthis.radius = 1;\n\n\t\tthis.mapSize = new Vector2( 512, 512 );\n\n\t\tthis.map = null;\n\t\tthis.mapPass = null;\n\t\tthis.matrix = new Matrix4();\n\n\t\tthis._frustum = new Frustum();\n\t\tthis._frameExtents = new Vector2( 1, 1 );\n\n\t\tthis._viewportCount = 1;\n\n\t\tthis._viewports = [\n\n\t\t\tnew Vector4( 0, 0, 1, 1 )\n\n\t\t];\n\n\t}\n\n\tObject.assign( LightShadow.prototype, {\n\n\t\t_projScreenMatrix: new Matrix4(),\n\n\t\t_lightPositionWorld: new Vector3(),\n\n\t\t_lookTarget: new Vector3(),\n\n\t\tgetViewportCount: function () {\n\n\t\t\treturn this._viewportCount;\n\n\t\t},\n\n\t\tgetFrustum: function () {\n\n\t\t\treturn this._frustum;\n\n\t\t},\n\n\t\tupdateMatrices: function ( light ) {\n\n\t\t\tvar shadowCamera = this.camera,\n\t\t\t\tshadowMatrix = this.matrix,\n\t\t\t\tprojScreenMatrix = this._projScreenMatrix,\n\t\t\t\tlookTarget = this._lookTarget,\n\t\t\t\tlightPositionWorld = this._lightPositionWorld;\n\n\t\t\tlightPositionWorld.setFromMatrixPosition( light.matrixWorld );\n\t\t\tshadowCamera.position.copy( lightPositionWorld );\n\n\t\t\tlookTarget.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\tshadowCamera.lookAt( lookTarget );\n\t\t\tshadowCamera.updateMatrixWorld();\n\n\t\t\tprojScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );\n\t\t\tthis._frustum.setFromProjectionMatrix( projScreenMatrix );\n\n\t\t\tshadowMatrix.set(\n\t\t\t\t0.5, 0.0, 0.0, 0.5,\n\t\t\t\t0.0, 0.5, 0.0, 0.5,\n\t\t\t\t0.0, 0.0, 0.5, 0.5,\n\t\t\t\t0.0, 0.0, 0.0, 1.0\n\t\t\t);\n\n\t\t\tshadowMatrix.multiply( shadowCamera.projectionMatrix );\n\t\t\tshadowMatrix.multiply( shadowCamera.matrixWorldInverse );\n\n\t\t},\n\n\t\tgetViewport: function ( viewportIndex ) {\n\n\t\t\treturn this._viewports[ viewportIndex ];\n\n\t\t},\n\n\t\tgetFrameExtents: function () {\n\n\t\t\treturn this._frameExtents;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.camera = source.camera.clone();\n\n\t\t\tthis.bias = source.bias;\n\t\t\tthis.radius = source.radius;\n\n\t\t\tthis.mapSize.copy( source.mapSize );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar object = {};\n\n\t\t\tif ( this.bias !== 0 ) { object.bias = this.bias; }\n\t\t\tif ( this.radius !== 1 ) { object.radius = this.radius; }\n\t\t\tif ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) { object.mapSize = this.mapSize.toArray(); }\n\n\t\t\tobject.camera = this.camera.toJSON( false ).object;\n\t\t\tdelete object.camera.matrix;\n\n\t\t\treturn object;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction SpotLightShadow() {\n\n\t\tLightShadow.call( this, new PerspectiveCamera( 50, 1, 0.5, 500 ) );\n\n\t}\n\n\tSpotLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\n\t\tconstructor: SpotLightShadow,\n\n\t\tisSpotLightShadow: true,\n\n\t\tupdateMatrices: function ( light ) {\n\n\t\t\tvar camera = this.camera;\n\n\t\t\tvar fov = MathUtils.RAD2DEG * 2 * light.angle;\n\t\t\tvar aspect = this.mapSize.width / this.mapSize.height;\n\t\t\tvar far = light.distance || camera.far;\n\n\t\t\tif ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {\n\n\t\t\t\tcamera.fov = fov;\n\t\t\t\tcamera.aspect = aspect;\n\t\t\t\tcamera.far = far;\n\t\t\t\tcamera.updateProjectionMatrix();\n\n\t\t\t}\n\n\t\t\tLightShadow.prototype.updateMatrices.call( this, light );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction SpotLight( color, intensity, distance, angle, penumbra, decay ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'SpotLight';\n\n\t\tthis.position.copy( Object3D.DefaultUp );\n\t\tthis.updateMatrix();\n\n\t\tthis.target = new Object3D();\n\n\t\tObject.defineProperty( this, 'power', {\n\t\t\tget: function () {\n\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\treturn this.intensity * Math.PI;\n\n\t\t\t},\n\t\t\tset: function ( power ) {\n\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\tthis.intensity = power / Math.PI;\n\n\t\t\t}\n\t\t} );\n\n\t\tthis.distance = ( distance !== undefined ) ? distance : 0;\n\t\tthis.angle = ( angle !== undefined ) ? angle : Math.PI / 3;\n\t\tthis.penumbra = ( penumbra !== undefined ) ? penumbra : 0;\n\t\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\n\t\tthis.shadow = new SpotLightShadow();\n\n\t}\n\n\tSpotLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: SpotLight,\n\n\t\tisSpotLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.distance = source.distance;\n\t\t\tthis.angle = source.angle;\n\t\t\tthis.penumbra = source.penumbra;\n\t\t\tthis.decay = source.decay;\n\n\t\t\tthis.target = source.target.clone();\n\n\t\t\tthis.shadow = source.shadow.clone();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\tfunction PointLightShadow() {\n\n\t\tLightShadow.call( this, new PerspectiveCamera( 90, 1, 0.5, 500 ) );\n\n\t\tthis._frameExtents = new Vector2( 4, 2 );\n\n\t\tthis._viewportCount = 6;\n\n\t\tthis._viewports = [\n\t\t\t// These viewports map a cube-map onto a 2D texture with the\n\t\t\t// following orientation:\n\t\t\t//\n\t\t\t//  xzXZ\n\t\t\t//   y Y\n\t\t\t//\n\t\t\t// X - Positive x direction\n\t\t\t// x - Negative x direction\n\t\t\t// Y - Positive y direction\n\t\t\t// y - Negative y direction\n\t\t\t// Z - Positive z direction\n\t\t\t// z - Negative z direction\n\n\t\t\t// positive X\n\t\t\tnew Vector4( 2, 1, 1, 1 ),\n\t\t\t// negative X\n\t\t\tnew Vector4( 0, 1, 1, 1 ),\n\t\t\t// positive Z\n\t\t\tnew Vector4( 3, 1, 1, 1 ),\n\t\t\t// negative Z\n\t\t\tnew Vector4( 1, 1, 1, 1 ),\n\t\t\t// positive Y\n\t\t\tnew Vector4( 3, 0, 1, 1 ),\n\t\t\t// negative Y\n\t\t\tnew Vector4( 1, 0, 1, 1 )\n\t\t];\n\n\t\tthis._cubeDirections = [\n\t\t\tnew Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),\n\t\t\tnew Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )\n\t\t];\n\n\t\tthis._cubeUps = [\n\t\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),\n\t\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),\tnew Vector3( 0, 0, - 1 )\n\t\t];\n\n\t}\n\n\tPointLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\n\t\tconstructor: PointLightShadow,\n\n\t\tisPointLightShadow: true,\n\n\t\tupdateMatrices: function ( light, viewportIndex ) {\n\n\t\t\tif ( viewportIndex === undefined ) { viewportIndex = 0; }\n\n\t\t\tvar camera = this.camera,\n\t\t\t\tshadowMatrix = this.matrix,\n\t\t\t\tlightPositionWorld = this._lightPositionWorld,\n\t\t\t\tlookTarget = this._lookTarget,\n\t\t\t\tprojScreenMatrix = this._projScreenMatrix;\n\n\t\t\tlightPositionWorld.setFromMatrixPosition( light.matrixWorld );\n\t\t\tcamera.position.copy( lightPositionWorld );\n\n\t\t\tlookTarget.copy( camera.position );\n\t\t\tlookTarget.add( this._cubeDirections[ viewportIndex ] );\n\t\t\tcamera.up.copy( this._cubeUps[ viewportIndex ] );\n\t\t\tcamera.lookAt( lookTarget );\n\t\t\tcamera.updateMatrixWorld();\n\n\t\t\tshadowMatrix.makeTranslation( - lightPositionWorld.x, - lightPositionWorld.y, - lightPositionWorld.z );\n\n\t\t\tprojScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t\t\tthis._frustum.setFromProjectionMatrix( projScreenMatrix );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\n\tfunction PointLight( color, intensity, distance, decay ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'PointLight';\n\n\t\tObject.defineProperty( this, 'power', {\n\t\t\tget: function () {\n\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\treturn this.intensity * 4 * Math.PI;\n\n\t\t\t},\n\t\t\tset: function ( power ) {\n\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\tthis.intensity = power / ( 4 * Math.PI );\n\n\t\t\t}\n\t\t} );\n\n\t\tthis.distance = ( distance !== undefined ) ? distance : 0;\n\t\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\n\t\tthis.shadow = new PointLightShadow();\n\n\t}\n\n\tPointLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: PointLight,\n\n\t\tisPointLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.distance = source.distance;\n\t\t\tthis.decay = source.decay;\n\n\t\t\tthis.shadow = source.shadow.clone();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author arose / http://github.com/arose\n\t */\n\n\tfunction OrthographicCamera( left, right, top, bottom, near, far ) {\n\n\t\tCamera.call( this );\n\n\t\tthis.type = 'OrthographicCamera';\n\n\t\tthis.zoom = 1;\n\t\tthis.view = null;\n\n\t\tthis.left = ( left !== undefined ) ? left : - 1;\n\t\tthis.right = ( right !== undefined ) ? right : 1;\n\t\tthis.top = ( top !== undefined ) ? top : 1;\n\t\tthis.bottom = ( bottom !== undefined ) ? bottom : - 1;\n\n\t\tthis.near = ( near !== undefined ) ? near : 0.1;\n\t\tthis.far = ( far !== undefined ) ? far : 2000;\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tOrthographicCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\n\n\t\tconstructor: OrthographicCamera,\n\n\t\tisOrthographicCamera: true,\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tCamera.prototype.copy.call( this, source, recursive );\n\n\t\t\tthis.left = source.left;\n\t\t\tthis.right = source.right;\n\t\t\tthis.top = source.top;\n\t\t\tthis.bottom = source.bottom;\n\t\t\tthis.near = source.near;\n\t\t\tthis.far = source.far;\n\n\t\t\tthis.zoom = source.zoom;\n\t\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\t\tif ( this.view === null ) {\n\n\t\t\t\tthis.view = {\n\t\t\t\t\tenabled: true,\n\t\t\t\t\tfullWidth: 1,\n\t\t\t\t\tfullHeight: 1,\n\t\t\t\t\toffsetX: 0,\n\t\t\t\t\toffsetY: 0,\n\t\t\t\t\twidth: 1,\n\t\t\t\t\theight: 1\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tthis.view.enabled = true;\n\t\t\tthis.view.fullWidth = fullWidth;\n\t\t\tthis.view.fullHeight = fullHeight;\n\t\t\tthis.view.offsetX = x;\n\t\t\tthis.view.offsetY = y;\n\t\t\tthis.view.width = width;\n\t\t\tthis.view.height = height;\n\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\tclearViewOffset: function () {\n\n\t\t\tif ( this.view !== null ) {\n\n\t\t\t\tthis.view.enabled = false;\n\n\t\t\t}\n\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\tupdateProjectionMatrix: function () {\n\n\t\t\tvar dx = ( this.right - this.left ) / ( 2 * this.zoom );\n\t\t\tvar dy = ( this.top - this.bottom ) / ( 2 * this.zoom );\n\t\t\tvar cx = ( this.right + this.left ) / 2;\n\t\t\tvar cy = ( this.top + this.bottom ) / 2;\n\n\t\t\tvar left = cx - dx;\n\t\t\tvar right = cx + dx;\n\t\t\tvar top = cy + dy;\n\t\t\tvar bottom = cy - dy;\n\n\t\t\tif ( this.view !== null && this.view.enabled ) {\n\n\t\t\t\tvar scaleW = ( this.right - this.left ) / this.view.fullWidth / this.zoom;\n\t\t\t\tvar scaleH = ( this.top - this.bottom ) / this.view.fullHeight / this.zoom;\n\n\t\t\t\tleft += scaleW * this.view.offsetX;\n\t\t\t\tright = left + scaleW * this.view.width;\n\t\t\t\ttop -= scaleH * this.view.offsetY;\n\t\t\t\tbottom = top - scaleH * this.view.height;\n\n\t\t\t}\n\n\t\t\tthis.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );\n\n\t\t\tthis.projectionMatrixInverse.getInverse( this.projectionMatrix );\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.zoom = this.zoom;\n\t\t\tdata.object.left = this.left;\n\t\t\tdata.object.right = this.right;\n\t\t\tdata.object.top = this.top;\n\t\t\tdata.object.bottom = this.bottom;\n\t\t\tdata.object.near = this.near;\n\t\t\tdata.object.far = this.far;\n\n\t\t\tif ( this.view !== null ) { data.object.view = Object.assign( {}, this.view ); }\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction DirectionalLightShadow() {\n\n\t\tLightShadow.call( this, new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );\n\n\t}\n\n\tDirectionalLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\n\t\tconstructor: DirectionalLightShadow,\n\n\t\tisDirectionalLightShadow: true,\n\n\t\tupdateMatrices: function ( light ) {\n\n\t\t\tLightShadow.prototype.updateMatrices.call( this, light );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction DirectionalLight( color, intensity ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'DirectionalLight';\n\n\t\tthis.position.copy( Object3D.DefaultUp );\n\t\tthis.updateMatrix();\n\n\t\tthis.target = new Object3D();\n\n\t\tthis.shadow = new DirectionalLightShadow();\n\n\t}\n\n\tDirectionalLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: DirectionalLight,\n\n\t\tisDirectionalLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.target = source.target.clone();\n\n\t\t\tthis.shadow = source.shadow.clone();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction AmbientLight( color, intensity ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'AmbientLight';\n\n\t\tthis.castShadow = undefined;\n\n\t}\n\n\tAmbientLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: AmbientLight,\n\n\t\tisAmbientLight: true\n\n\t} );\n\n\t/**\n\t * @author abelnation / http://github.com/abelnation\n\t */\n\n\tfunction RectAreaLight( color, intensity, width, height ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'RectAreaLight';\n\n\t\tthis.width = ( width !== undefined ) ? width : 10;\n\t\tthis.height = ( height !== undefined ) ? height : 10;\n\n\t}\n\n\tRectAreaLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: RectAreaLight,\n\n\t\tisRectAreaLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.width = source.width;\n\t\t\tthis.height = source.height;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Light.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.width = this.width;\n\t\t\tdata.object.height = this.height;\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction MaterialLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t\tthis.textures = {};\n\n\t}\n\n\tMaterialLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: MaterialLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new FileLoader( scope.manager );\n\t\t\tloader.setPath( scope.path );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( json ) {\n\n\t\t\tvar textures = this.textures;\n\n\t\t\tfunction getTexture( name ) {\n\n\t\t\t\tif ( textures[ name ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.MaterialLoader: Undefined texture', name );\n\n\t\t\t\t}\n\n\t\t\t\treturn textures[ name ];\n\n\t\t\t}\n\n\t\t\tvar material = new Materials[ json.type ]();\n\n\t\t\tif ( json.uuid !== undefined ) { material.uuid = json.uuid; }\n\t\t\tif ( json.name !== undefined ) { material.name = json.name; }\n\t\t\tif ( json.color !== undefined ) { material.color.setHex( json.color ); }\n\t\t\tif ( json.roughness !== undefined ) { material.roughness = json.roughness; }\n\t\t\tif ( json.metalness !== undefined ) { material.metalness = json.metalness; }\n\t\t\tif ( json.sheen !== undefined ) { material.sheen = new Color().setHex( json.sheen ); }\n\t\t\tif ( json.emissive !== undefined ) { material.emissive.setHex( json.emissive ); }\n\t\t\tif ( json.specular !== undefined ) { material.specular.setHex( json.specular ); }\n\t\t\tif ( json.shininess !== undefined ) { material.shininess = json.shininess; }\n\t\t\tif ( json.clearcoat !== undefined ) { material.clearcoat = json.clearcoat; }\n\t\t\tif ( json.clearcoatRoughness !== undefined ) { material.clearcoatRoughness = json.clearcoatRoughness; }\n\t\t\tif ( json.vertexColors !== undefined ) { material.vertexColors = json.vertexColors; }\n\t\t\tif ( json.fog !== undefined ) { material.fog = json.fog; }\n\t\t\tif ( json.flatShading !== undefined ) { material.flatShading = json.flatShading; }\n\t\t\tif ( json.blending !== undefined ) { material.blending = json.blending; }\n\t\t\tif ( json.combine !== undefined ) { material.combine = json.combine; }\n\t\t\tif ( json.side !== undefined ) { material.side = json.side; }\n\t\t\tif ( json.opacity !== undefined ) { material.opacity = json.opacity; }\n\t\t\tif ( json.transparent !== undefined ) { material.transparent = json.transparent; }\n\t\t\tif ( json.alphaTest !== undefined ) { material.alphaTest = json.alphaTest; }\n\t\t\tif ( json.depthTest !== undefined ) { material.depthTest = json.depthTest; }\n\t\t\tif ( json.depthWrite !== undefined ) { material.depthWrite = json.depthWrite; }\n\t\t\tif ( json.colorWrite !== undefined ) { material.colorWrite = json.colorWrite; }\n\n\t\t\tif ( json.stencilWrite !== undefined ) { material.stencilWrite = json.stencilWrite; }\n\t\t\tif ( json.stencilWriteMask !== undefined ) { material.stencilWriteMask = json.stencilWriteMask; }\n\t\t\tif ( json.stencilFunc !== undefined ) { material.stencilFunc = json.stencilFunc; }\n\t\t\tif ( json.stencilRef !== undefined ) { material.stencilRef = json.stencilRef; }\n\t\t\tif ( json.stencilFuncMask !== undefined ) { material.stencilFuncMask = json.stencilFuncMask; }\n\t\t\tif ( json.stencilFail !== undefined ) { material.stencilFail = json.stencilFail; }\n\t\t\tif ( json.stencilZFail !== undefined ) { material.stencilZFail = json.stencilZFail; }\n\t\t\tif ( json.stencilZPass !== undefined ) { material.stencilZPass = json.stencilZPass; }\n\n\t\t\tif ( json.wireframe !== undefined ) { material.wireframe = json.wireframe; }\n\t\t\tif ( json.wireframeLinewidth !== undefined ) { material.wireframeLinewidth = json.wireframeLinewidth; }\n\t\t\tif ( json.wireframeLinecap !== undefined ) { material.wireframeLinecap = json.wireframeLinecap; }\n\t\t\tif ( json.wireframeLinejoin !== undefined ) { material.wireframeLinejoin = json.wireframeLinejoin; }\n\n\t\t\tif ( json.rotation !== undefined ) { material.rotation = json.rotation; }\n\n\t\t\tif ( json.linewidth !== 1 ) { material.linewidth = json.linewidth; }\n\t\t\tif ( json.dashSize !== undefined ) { material.dashSize = json.dashSize; }\n\t\t\tif ( json.gapSize !== undefined ) { material.gapSize = json.gapSize; }\n\t\t\tif ( json.scale !== undefined ) { material.scale = json.scale; }\n\n\t\t\tif ( json.polygonOffset !== undefined ) { material.polygonOffset = json.polygonOffset; }\n\t\t\tif ( json.polygonOffsetFactor !== undefined ) { material.polygonOffsetFactor = json.polygonOffsetFactor; }\n\t\t\tif ( json.polygonOffsetUnits !== undefined ) { material.polygonOffsetUnits = json.polygonOffsetUnits; }\n\n\t\t\tif ( json.skinning !== undefined ) { material.skinning = json.skinning; }\n\t\t\tif ( json.morphTargets !== undefined ) { material.morphTargets = json.morphTargets; }\n\t\t\tif ( json.morphNormals !== undefined ) { material.morphNormals = json.morphNormals; }\n\t\t\tif ( json.dithering !== undefined ) { material.dithering = json.dithering; }\n\n\t\t\tif ( json.visible !== undefined ) { material.visible = json.visible; }\n\n\t\t\tif ( json.toneMapped !== undefined ) { material.toneMapped = json.toneMapped; }\n\n\t\t\tif ( json.userData !== undefined ) { material.userData = json.userData; }\n\n\t\t\t// Shader Material\n\n\t\t\tif ( json.uniforms !== undefined ) {\n\n\t\t\t\tfor ( var name in json.uniforms ) {\n\n\t\t\t\t\tvar uniform = json.uniforms[ name ];\n\n\t\t\t\t\tmaterial.uniforms[ name ] = {};\n\n\t\t\t\t\tswitch ( uniform.type ) {\n\n\t\t\t\t\t\tcase 't':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = getTexture( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'c':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Color().setHex( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v2':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector2().fromArray( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v3':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector3().fromArray( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v4':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector4().fromArray( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'm3':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Matrix3().fromArray( uniform.value );\n\n\t\t\t\t\t\tcase 'm4':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Matrix4().fromArray( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = uniform.value;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( json.defines !== undefined ) { material.defines = json.defines; }\n\t\t\tif ( json.vertexShader !== undefined ) { material.vertexShader = json.vertexShader; }\n\t\t\tif ( json.fragmentShader !== undefined ) { material.fragmentShader = json.fragmentShader; }\n\n\t\t\tif ( json.extensions !== undefined ) {\n\n\t\t\t\tfor ( var key in json.extensions ) {\n\n\t\t\t\t\tmaterial.extensions[ key ] = json.extensions[ key ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Deprecated\n\n\t\t\tif ( json.shading !== undefined ) { material.flatShading = json.shading === 1; } // THREE.FlatShading\n\n\t\t\t// for PointsMaterial\n\n\t\t\tif ( json.size !== undefined ) { material.size = json.size; }\n\t\t\tif ( json.sizeAttenuation !== undefined ) { material.sizeAttenuation = json.sizeAttenuation; }\n\n\t\t\t// maps\n\n\t\t\tif ( json.map !== undefined ) { material.map = getTexture( json.map ); }\n\t\t\tif ( json.matcap !== undefined ) { material.matcap = getTexture( json.matcap ); }\n\n\t\t\tif ( json.alphaMap !== undefined ) {\n\n\t\t\t\tmaterial.alphaMap = getTexture( json.alphaMap );\n\t\t\t\tmaterial.transparent = true;\n\n\t\t\t}\n\n\t\t\tif ( json.bumpMap !== undefined ) { material.bumpMap = getTexture( json.bumpMap ); }\n\t\t\tif ( json.bumpScale !== undefined ) { material.bumpScale = json.bumpScale; }\n\n\t\t\tif ( json.normalMap !== undefined ) { material.normalMap = getTexture( json.normalMap ); }\n\t\t\tif ( json.normalMapType !== undefined ) { material.normalMapType = json.normalMapType; }\n\t\t\tif ( json.normalScale !== undefined ) {\n\n\t\t\t\tvar normalScale = json.normalScale;\n\n\t\t\t\tif ( Array.isArray( normalScale ) === false ) {\n\n\t\t\t\t\t// Blender exporter used to export a scalar. See #7459\n\n\t\t\t\t\tnormalScale = [ normalScale, normalScale ];\n\n\t\t\t\t}\n\n\t\t\t\tmaterial.normalScale = new Vector2().fromArray( normalScale );\n\n\t\t\t}\n\n\t\t\tif ( json.displacementMap !== undefined ) { material.displacementMap = getTexture( json.displacementMap ); }\n\t\t\tif ( json.displacementScale !== undefined ) { material.displacementScale = json.displacementScale; }\n\t\t\tif ( json.displacementBias !== undefined ) { material.displacementBias = json.displacementBias; }\n\n\t\t\tif ( json.roughnessMap !== undefined ) { material.roughnessMap = getTexture( json.roughnessMap ); }\n\t\t\tif ( json.metalnessMap !== undefined ) { material.metalnessMap = getTexture( json.metalnessMap ); }\n\n\t\t\tif ( json.emissiveMap !== undefined ) { material.emissiveMap = getTexture( json.emissiveMap ); }\n\t\t\tif ( json.emissiveIntensity !== undefined ) { material.emissiveIntensity = json.emissiveIntensity; }\n\n\t\t\tif ( json.specularMap !== undefined ) { material.specularMap = getTexture( json.specularMap ); }\n\n\t\t\tif ( json.envMap !== undefined ) { material.envMap = getTexture( json.envMap ); }\n\t\t\tif ( json.envMapIntensity !== undefined ) { material.envMapIntensity = json.envMapIntensity; }\n\n\t\t\tif ( json.reflectivity !== undefined ) { material.reflectivity = json.reflectivity; }\n\t\t\tif ( json.refractionRatio !== undefined ) { material.refractionRatio = json.refractionRatio; }\n\n\t\t\tif ( json.lightMap !== undefined ) { material.lightMap = getTexture( json.lightMap ); }\n\t\t\tif ( json.lightMapIntensity !== undefined ) { material.lightMapIntensity = json.lightMapIntensity; }\n\n\t\t\tif ( json.aoMap !== undefined ) { material.aoMap = getTexture( json.aoMap ); }\n\t\t\tif ( json.aoMapIntensity !== undefined ) { material.aoMapIntensity = json.aoMapIntensity; }\n\n\t\t\tif ( json.gradientMap !== undefined ) { material.gradientMap = getTexture( json.gradientMap ); }\n\n\t\t\tif ( json.clearcoatNormalMap !== undefined ) { material.clearcoatNormalMap = getTexture( json.clearcoatNormalMap ); }\n\t\t\tif ( json.clearcoatNormalScale !== undefined ) { material.clearcoatNormalScale = new Vector2().fromArray( json.clearcoatNormalScale ); }\n\n\t\t\treturn material;\n\n\t\t},\n\n\t\tsetTextures: function ( value ) {\n\n\t\t\tthis.textures = value;\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author Don McCurdy / https://www.donmccurdy.com\n\t */\n\n\tvar LoaderUtils = {\n\n\t\tdecodeText: function ( array ) {\n\n\t\t\tif ( typeof TextDecoder !== 'undefined' ) {\n\n\t\t\t\treturn new TextDecoder().decode( array );\n\n\t\t\t}\n\n\t\t\t// Avoid the String.fromCharCode.apply(null, array) shortcut, which\n\t\t\t// throws a \"maximum call stack size exceeded\" error for large arrays.\n\n\t\t\tvar s = '';\n\n\t\t\tfor ( var i = 0, il = array.length; i < il; i ++ ) {\n\n\t\t\t\t// Implicitly assumes little-endian.\n\t\t\t\ts += String.fromCharCode( array[ i ] );\n\n\t\t\t}\n\n\t\t\ttry {\n\n\t\t\t\t// merges multi-byte utf-8 characters.\n\n\t\t\t\treturn decodeURIComponent( escape( s ) );\n\n\t\t\t} catch ( e ) { // see #16358\n\n\t\t\t\treturn s;\n\n\t\t\t}\n\n\t\t},\n\n\t\textractUrlBase: function ( url ) {\n\n\t\t\tvar index = url.lastIndexOf( '/' );\n\n\t\t\tif ( index === - 1 ) { return './'; }\n\n\t\t\treturn url.substr( 0, index + 1 );\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tfunction InstancedBufferGeometry() {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'InstancedBufferGeometry';\n\t\tthis.maxInstancedCount = undefined;\n\n\t}\n\n\tInstancedBufferGeometry.prototype = Object.assign( Object.create( BufferGeometry.prototype ), {\n\n\t\tconstructor: InstancedBufferGeometry,\n\n\t\tisInstancedBufferGeometry: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tBufferGeometry.prototype.copy.call( this, source );\n\n\t\t\tthis.maxInstancedCount = source.maxInstancedCount;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = BufferGeometry.prototype.toJSON.call( this );\n\n\t\t\tdata.maxInstancedCount = this.maxInstancedCount;\n\n\t\t\tdata.isInstancedBufferGeometry = true;\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tfunction InstancedBufferAttribute( array, itemSize, normalized, meshPerAttribute ) {\n\n\t\tif ( typeof ( normalized ) === 'number' ) {\n\n\t\t\tmeshPerAttribute = normalized;\n\n\t\t\tnormalized = false;\n\n\t\t\tconsole.error( 'THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.' );\n\n\t\t}\n\n\t\tBufferAttribute.call( this, array, itemSize, normalized );\n\n\t\tthis.meshPerAttribute = meshPerAttribute || 1;\n\n\t}\n\n\tInstancedBufferAttribute.prototype = Object.assign( Object.create( BufferAttribute.prototype ), {\n\n\t\tconstructor: InstancedBufferAttribute,\n\n\t\tisInstancedBufferAttribute: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tBufferAttribute.prototype.copy.call( this, source );\n\n\t\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ()\t{\n\n\t\t\tvar data = BufferAttribute.prototype.toJSON.call( this );\n\n\t\t\tdata.meshPerAttribute = this.meshPerAttribute;\n\n\t\t\tdata.isInstancedBufferAttribute = true;\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction BufferGeometryLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tBufferGeometryLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: BufferGeometryLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new FileLoader( scope.manager );\n\t\t\tloader.setPath( scope.path );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( json ) {\n\n\t\t\tvar geometry = json.isInstancedBufferGeometry ? new InstancedBufferGeometry() : new BufferGeometry();\n\n\t\t\tvar index = json.data.index;\n\n\t\t\tif ( index !== undefined ) {\n\n\t\t\t\tvar typedArray = new TYPED_ARRAYS[ index.type ]( index.array );\n\t\t\t\tgeometry.setIndex( new BufferAttribute( typedArray, 1 ) );\n\n\t\t\t}\n\n\t\t\tvar attributes = json.data.attributes;\n\n\t\t\tfor ( var key in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ key ];\n\t\t\t\tvar typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );\n\t\t\t\tvar bufferAttributeConstr = attribute.isInstancedBufferAttribute ? InstancedBufferAttribute : BufferAttribute;\n\t\t\t\tvar bufferAttribute = new bufferAttributeConstr( typedArray, attribute.itemSize, attribute.normalized );\n\t\t\t\tif ( attribute.name !== undefined ) { bufferAttribute.name = attribute.name; }\n\t\t\t\tgeometry.setAttribute( key, bufferAttribute );\n\n\t\t\t}\n\n\t\t\tvar morphAttributes = json.data.morphAttributes;\n\n\t\t\tif ( morphAttributes ) {\n\n\t\t\t\tfor ( var key in morphAttributes ) {\n\n\t\t\t\t\tvar attributeArray = morphAttributes[ key ];\n\n\t\t\t\t\tvar array = [];\n\n\t\t\t\t\tfor ( var i = 0, il = attributeArray.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar attribute = attributeArray[ i ];\n\t\t\t\t\t\tvar typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );\n\n\t\t\t\t\t\tvar bufferAttribute = new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized );\n\t\t\t\t\t\tif ( attribute.name !== undefined ) { bufferAttribute.name = attribute.name; }\n\t\t\t\t\t\tarray.push( bufferAttribute );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.morphAttributes[ key ] = array;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar morphTargetsRelative = json.data.morphTargetsRelative;\n\n\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\tgeometry.morphTargetsRelative = true;\n\n\t\t\t}\n\n\t\t\tvar groups = json.data.groups || json.data.drawcalls || json.data.offsets;\n\n\t\t\tif ( groups !== undefined ) {\n\n\t\t\t\tfor ( var i = 0, n = groups.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar group = groups[ i ];\n\n\t\t\t\t\tgeometry.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar boundingSphere = json.data.boundingSphere;\n\n\t\t\tif ( boundingSphere !== undefined ) {\n\n\t\t\t\tvar center = new Vector3();\n\n\t\t\t\tif ( boundingSphere.center !== undefined ) {\n\n\t\t\t\t\tcenter.fromArray( boundingSphere.center );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.boundingSphere = new Sphere( center, boundingSphere.radius );\n\n\t\t\t}\n\n\t\t\tif ( json.name ) { geometry.name = json.name; }\n\t\t\tif ( json.userData ) { geometry.userData = json.userData; }\n\n\t\t\treturn geometry;\n\n\t\t}\n\n\t} );\n\n\tvar TYPED_ARRAYS = {\n\t\tInt8Array: Int8Array,\n\t\tUint8Array: Uint8Array,\n\t\t// Workaround for IE11 pre KB2929437. See #11440\n\t\tUint8ClampedArray: typeof Uint8ClampedArray !== 'undefined' ? Uint8ClampedArray : Uint8Array,\n\t\tInt16Array: Int16Array,\n\t\tUint16Array: Uint16Array,\n\t\tInt32Array: Int32Array,\n\t\tUint32Array: Uint32Array,\n\t\tFloat32Array: Float32Array,\n\t\tFloat64Array: Float64Array\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction ObjectLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tObjectLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: ObjectLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar path = ( this.path === '' ) ? LoaderUtils.extractUrlBase( url ) : this.path;\n\t\t\tthis.resourcePath = this.resourcePath || path;\n\n\t\t\tvar loader = new FileLoader( scope.manager );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tvar json = null;\n\n\t\t\t\ttry {\n\n\t\t\t\t\tjson = JSON.parse( text );\n\n\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\tif ( onError !== undefined ) { onError( error ); }\n\n\t\t\t\t\tconsole.error( 'THREE:ObjectLoader: Can\\'t parse ' + url + '.', error.message );\n\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tvar metadata = json.metadata;\n\n\t\t\t\tif ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {\n\n\t\t\t\t\tconsole.error( 'THREE.ObjectLoader: Can\\'t load ' + url );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tscope.parse( json, onLoad );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( json, onLoad ) {\n\n\t\t\tvar shapes = this.parseShape( json.shapes );\n\t\t\tvar geometries = this.parseGeometries( json.geometries, shapes );\n\n\t\t\tvar images = this.parseImages( json.images, function () {\n\n\t\t\t\tif ( onLoad !== undefined ) { onLoad( object ); }\n\n\t\t\t} );\n\n\t\t\tvar textures = this.parseTextures( json.textures, images );\n\t\t\tvar materials = this.parseMaterials( json.materials, textures );\n\n\t\t\tvar object = this.parseObject( json.object, geometries, materials );\n\n\t\t\tif ( json.animations ) {\n\n\t\t\t\tobject.animations = this.parseAnimations( json.animations );\n\n\t\t\t}\n\n\t\t\tif ( json.images === undefined || json.images.length === 0 ) {\n\n\t\t\t\tif ( onLoad !== undefined ) { onLoad( object ); }\n\n\t\t\t}\n\n\t\t\treturn object;\n\n\t\t},\n\n\t\tparseShape: function ( json ) {\n\n\t\t\tvar shapes = {};\n\n\t\t\tif ( json !== undefined ) {\n\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar shape = new Shape().fromJSON( json[ i ] );\n\n\t\t\t\t\tshapes[ shape.uuid ] = shape;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn shapes;\n\n\t\t},\n\n\t\tparseGeometries: function ( json, shapes ) {\n\n\t\t\tvar geometries = {};\n\n\t\t\tif ( json !== undefined ) {\n\n\t\t\t\tvar bufferGeometryLoader = new BufferGeometryLoader();\n\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar geometry;\n\t\t\t\t\tvar data = json[ i ];\n\n\t\t\t\t\tswitch ( data.type ) {\n\n\t\t\t\t\t\tcase 'PlaneGeometry':\n\t\t\t\t\t\tcase 'PlaneBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.width,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'BoxGeometry':\n\t\t\t\t\t\tcase 'BoxBufferGeometry':\n\t\t\t\t\t\tcase 'CubeGeometry': // backwards compatible\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.width,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.depth,\n\t\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.depthSegments\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'CircleGeometry':\n\t\t\t\t\t\tcase 'CircleBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.segments,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'CylinderGeometry':\n\t\t\t\t\t\tcase 'CylinderBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radiusTop,\n\t\t\t\t\t\t\t\tdata.radiusBottom,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.openEnded,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'ConeGeometry':\n\t\t\t\t\t\tcase 'ConeBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.openEnded,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'SphereGeometry':\n\t\t\t\t\t\tcase 'SphereBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.phiStart,\n\t\t\t\t\t\t\t\tdata.phiLength,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'DodecahedronGeometry':\n\t\t\t\t\t\tcase 'DodecahedronBufferGeometry':\n\t\t\t\t\t\tcase 'IcosahedronGeometry':\n\t\t\t\t\t\tcase 'IcosahedronBufferGeometry':\n\t\t\t\t\t\tcase 'OctahedronGeometry':\n\t\t\t\t\t\tcase 'OctahedronBufferGeometry':\n\t\t\t\t\t\tcase 'TetrahedronGeometry':\n\t\t\t\t\t\tcase 'TetrahedronBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.detail\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'RingGeometry':\n\t\t\t\t\t\tcase 'RingBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.innerRadius,\n\t\t\t\t\t\t\t\tdata.outerRadius,\n\t\t\t\t\t\t\t\tdata.thetaSegments,\n\t\t\t\t\t\t\t\tdata.phiSegments,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TorusGeometry':\n\t\t\t\t\t\tcase 'TorusBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.tube,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.tubularSegments,\n\t\t\t\t\t\t\t\tdata.arc\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TorusKnotGeometry':\n\t\t\t\t\t\tcase 'TorusKnotBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.tube,\n\t\t\t\t\t\t\t\tdata.tubularSegments,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.p,\n\t\t\t\t\t\t\t\tdata.q\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TubeGeometry':\n\t\t\t\t\t\tcase 'TubeBufferGeometry':\n\n\t\t\t\t\t\t\t// This only works for built-in curves (e.g. CatmullRomCurve3).\n\t\t\t\t\t\t\t// User defined curves or instances of CurvePath will not be deserialized.\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tnew Curves[ data.path.type ]().fromJSON( data.path ),\n\t\t\t\t\t\t\t\tdata.tubularSegments,\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.closed\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'LatheGeometry':\n\t\t\t\t\t\tcase 'LatheBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.points,\n\t\t\t\t\t\t\t\tdata.segments,\n\t\t\t\t\t\t\t\tdata.phiStart,\n\t\t\t\t\t\t\t\tdata.phiLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'PolyhedronGeometry':\n\t\t\t\t\t\tcase 'PolyhedronBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.vertices,\n\t\t\t\t\t\t\t\tdata.indices,\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.details\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'ShapeGeometry':\n\t\t\t\t\t\tcase 'ShapeBufferGeometry':\n\n\t\t\t\t\t\t\tvar geometryShapes = [];\n\n\t\t\t\t\t\t\tfor ( var j = 0, jl = data.shapes.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\t\tvar shape = shapes[ data.shapes[ j ] ];\n\n\t\t\t\t\t\t\t\tgeometryShapes.push( shape );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tgeometryShapes,\n\t\t\t\t\t\t\t\tdata.curveSegments\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\n\t\t\t\t\t\tcase 'ExtrudeGeometry':\n\t\t\t\t\t\tcase 'ExtrudeBufferGeometry':\n\n\t\t\t\t\t\t\tvar geometryShapes = [];\n\n\t\t\t\t\t\t\tfor ( var j = 0, jl = data.shapes.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\t\tvar shape = shapes[ data.shapes[ j ] ];\n\n\t\t\t\t\t\t\t\tgeometryShapes.push( shape );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tvar extrudePath = data.options.extrudePath;\n\n\t\t\t\t\t\t\tif ( extrudePath !== undefined ) {\n\n\t\t\t\t\t\t\t\tdata.options.extrudePath = new Curves[ extrudePath.type ]().fromJSON( extrudePath );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tgeometryShapes,\n\t\t\t\t\t\t\t\tdata.options\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'BufferGeometry':\n\t\t\t\t\t\tcase 'InstancedBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = bufferGeometryLoader.parse( data );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'Geometry':\n\n\t\t\t\t\t\t\tif ( 'THREE' in window && 'LegacyJSONLoader' in THREE ) {\n\n\t\t\t\t\t\t\t\tvar geometryLoader = new THREE.LegacyJSONLoader();\n\t\t\t\t\t\t\t\tgeometry = geometryLoader.parse( data, this.resourcePath ).geometry;\n\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tconsole.error( 'THREE.ObjectLoader: You have to import LegacyJSONLoader in order load geometry data of type \"Geometry\".' );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Unsupported geometry type \"' + data.type + '\"' );\n\n\t\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.uuid = data.uuid;\n\n\t\t\t\t\tif ( data.name !== undefined ) { geometry.name = data.name; }\n\t\t\t\t\tif ( geometry.isBufferGeometry === true && data.userData !== undefined ) { geometry.userData = data.userData; }\n\n\t\t\t\t\tgeometries[ data.uuid ] = geometry;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn geometries;\n\n\t\t},\n\n\t\tparseMaterials: function ( json, textures ) {\n\n\t\t\tvar cache = {}; // MultiMaterial\n\t\t\tvar materials = {};\n\n\t\t\tif ( json !== undefined ) {\n\n\t\t\t\tvar loader = new MaterialLoader();\n\t\t\t\tloader.setTextures( textures );\n\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar data = json[ i ];\n\n\t\t\t\t\tif ( data.type === 'MultiMaterial' ) {\n\n\t\t\t\t\t\t// Deprecated\n\n\t\t\t\t\t\tvar array = [];\n\n\t\t\t\t\t\tfor ( var j = 0; j < data.materials.length; j ++ ) {\n\n\t\t\t\t\t\t\tvar material = data.materials[ j ];\n\n\t\t\t\t\t\t\tif ( cache[ material.uuid ] === undefined ) {\n\n\t\t\t\t\t\t\t\tcache[ material.uuid ] = loader.parse( material );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tarray.push( cache[ material.uuid ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaterials[ data.uuid ] = array;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( cache[ data.uuid ] === undefined ) {\n\n\t\t\t\t\t\t\tcache[ data.uuid ] = loader.parse( data );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaterials[ data.uuid ] = cache[ data.uuid ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn materials;\n\n\t\t},\n\n\t\tparseAnimations: function ( json ) {\n\n\t\t\tvar animations = [];\n\n\t\t\tfor ( var i = 0; i < json.length; i ++ ) {\n\n\t\t\t\tvar data = json[ i ];\n\n\t\t\t\tvar clip = AnimationClip.parse( data );\n\n\t\t\t\tif ( data.uuid !== undefined ) { clip.uuid = data.uuid; }\n\n\t\t\t\tanimations.push( clip );\n\n\t\t\t}\n\n\t\t\treturn animations;\n\n\t\t},\n\n\t\tparseImages: function ( json, onLoad ) {\n\n\t\t\tvar scope = this;\n\t\t\tvar images = {};\n\n\t\t\tfunction loadImage( url ) {\n\n\t\t\t\tscope.manager.itemStart( url );\n\n\t\t\t\treturn loader.load( url, function () {\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, undefined, function () {\n\n\t\t\t\t\tscope.manager.itemError( url );\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tif ( json !== undefined && json.length > 0 ) {\n\n\t\t\t\tvar manager = new LoadingManager( onLoad );\n\n\t\t\t\tvar loader = new ImageLoader( manager );\n\t\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\t\t\tfor ( var i = 0, il = json.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar image = json[ i ];\n\t\t\t\t\tvar url = image.url;\n\n\t\t\t\t\tif ( Array.isArray( url ) ) {\n\n\t\t\t\t\t\t// load array of images e.g CubeTexture\n\n\t\t\t\t\t\timages[ image.uuid ] = [];\n\n\t\t\t\t\t\tfor ( var j = 0, jl = url.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\tvar currentUrl = url[ j ];\n\n\t\t\t\t\t\t\tvar path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( currentUrl ) ? currentUrl : scope.resourcePath + currentUrl;\n\n\t\t\t\t\t\t\timages[ image.uuid ].push( loadImage( path ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// load single image\n\n\t\t\t\t\t\tvar path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( image.url ) ? image.url : scope.resourcePath + image.url;\n\n\t\t\t\t\t\timages[ image.uuid ] = loadImage( path );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn images;\n\n\t\t},\n\n\t\tparseTextures: function ( json, images ) {\n\n\t\t\tfunction parseConstant( value, type ) {\n\n\t\t\t\tif ( typeof value === 'number' ) { return value; }\n\n\t\t\t\tconsole.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );\n\n\t\t\t\treturn type[ value ];\n\n\t\t\t}\n\n\t\t\tvar textures = {};\n\n\t\t\tif ( json !== undefined ) {\n\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar data = json[ i ];\n\n\t\t\t\t\tif ( data.image === undefined ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: No \"image\" specified for', data.uuid );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( images[ data.image ] === undefined ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined image', data.image );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar texture;\n\n\t\t\t\t\tif ( Array.isArray( images[ data.image ] ) ) {\n\n\t\t\t\t\t\ttexture = new CubeTexture( images[ data.image ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttexture = new Texture( images[ data.image ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\ttexture.uuid = data.uuid;\n\n\t\t\t\t\tif ( data.name !== undefined ) { texture.name = data.name; }\n\n\t\t\t\t\tif ( data.mapping !== undefined ) { texture.mapping = parseConstant( data.mapping, TEXTURE_MAPPING ); }\n\n\t\t\t\t\tif ( data.offset !== undefined ) { texture.offset.fromArray( data.offset ); }\n\t\t\t\t\tif ( data.repeat !== undefined ) { texture.repeat.fromArray( data.repeat ); }\n\t\t\t\t\tif ( data.center !== undefined ) { texture.center.fromArray( data.center ); }\n\t\t\t\t\tif ( data.rotation !== undefined ) { texture.rotation = data.rotation; }\n\n\t\t\t\t\tif ( data.wrap !== undefined ) {\n\n\t\t\t\t\t\ttexture.wrapS = parseConstant( data.wrap[ 0 ], TEXTURE_WRAPPING );\n\t\t\t\t\t\ttexture.wrapT = parseConstant( data.wrap[ 1 ], TEXTURE_WRAPPING );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( data.format !== undefined ) { texture.format = data.format; }\n\t\t\t\t\tif ( data.type !== undefined ) { texture.type = data.type; }\n\t\t\t\t\tif ( data.encoding !== undefined ) { texture.encoding = data.encoding; }\n\n\t\t\t\t\tif ( data.minFilter !== undefined ) { texture.minFilter = parseConstant( data.minFilter, TEXTURE_FILTER ); }\n\t\t\t\t\tif ( data.magFilter !== undefined ) { texture.magFilter = parseConstant( data.magFilter, TEXTURE_FILTER ); }\n\t\t\t\t\tif ( data.anisotropy !== undefined ) { texture.anisotropy = data.anisotropy; }\n\n\t\t\t\t\tif ( data.flipY !== undefined ) { texture.flipY = data.flipY; }\n\n\t\t\t\t\tif ( data.premultiplyAlpha !== undefined ) { texture.premultiplyAlpha = data.premultiplyAlpha; }\n\t\t\t\t\tif ( data.unpackAlignment !== undefined ) { texture.unpackAlignment = data.unpackAlignment; }\n\n\t\t\t\t\ttextures[ data.uuid ] = texture;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn textures;\n\n\t\t},\n\n\t\tparseObject: function ( data, geometries, materials ) {\n\n\t\t\tvar object;\n\n\t\t\tfunction getGeometry( name ) {\n\n\t\t\t\tif ( geometries[ name ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined geometry', name );\n\n\t\t\t\t}\n\n\t\t\t\treturn geometries[ name ];\n\n\t\t\t}\n\n\t\t\tfunction getMaterial( name ) {\n\n\t\t\t\tif ( name === undefined ) { return undefined; }\n\n\t\t\t\tif ( Array.isArray( name ) ) {\n\n\t\t\t\t\tvar array = [];\n\n\t\t\t\t\tfor ( var i = 0, l = name.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tvar uuid = name[ i ];\n\n\t\t\t\t\t\tif ( materials[ uuid ] === undefined ) {\n\n\t\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', uuid );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tarray.push( materials[ uuid ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn array;\n\n\t\t\t\t}\n\n\t\t\t\tif ( materials[ name ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', name );\n\n\t\t\t\t}\n\n\t\t\t\treturn materials[ name ];\n\n\t\t\t}\n\n\t\t\tswitch ( data.type ) {\n\n\t\t\t\tcase 'Scene':\n\n\t\t\t\t\tobject = new Scene();\n\n\t\t\t\t\tif ( data.background !== undefined ) {\n\n\t\t\t\t\t\tif ( Number.isInteger( data.background ) ) {\n\n\t\t\t\t\t\t\tobject.background = new Color( data.background );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( data.fog !== undefined ) {\n\n\t\t\t\t\t\tif ( data.fog.type === 'Fog' ) {\n\n\t\t\t\t\t\t\tobject.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );\n\n\t\t\t\t\t\t} else if ( data.fog.type === 'FogExp2' ) {\n\n\t\t\t\t\t\t\tobject.fog = new FogExp2( data.fog.color, data.fog.density );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PerspectiveCamera':\n\n\t\t\t\t\tobject = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );\n\n\t\t\t\t\tif ( data.focus !== undefined ) { object.focus = data.focus; }\n\t\t\t\t\tif ( data.zoom !== undefined ) { object.zoom = data.zoom; }\n\t\t\t\t\tif ( data.filmGauge !== undefined ) { object.filmGauge = data.filmGauge; }\n\t\t\t\t\tif ( data.filmOffset !== undefined ) { object.filmOffset = data.filmOffset; }\n\t\t\t\t\tif ( data.view !== undefined ) { object.view = Object.assign( {}, data.view ); }\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'OrthographicCamera':\n\n\t\t\t\t\tobject = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );\n\n\t\t\t\t\tif ( data.zoom !== undefined ) { object.zoom = data.zoom; }\n\t\t\t\t\tif ( data.view !== undefined ) { object.view = Object.assign( {}, data.view ); }\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'AmbientLight':\n\n\t\t\t\t\tobject = new AmbientLight( data.color, data.intensity );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'DirectionalLight':\n\n\t\t\t\t\tobject = new DirectionalLight( data.color, data.intensity );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointLight':\n\n\t\t\t\t\tobject = new PointLight( data.color, data.intensity, data.distance, data.decay );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'RectAreaLight':\n\n\t\t\t\t\tobject = new RectAreaLight( data.color, data.intensity, data.width, data.height );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SpotLight':\n\n\t\t\t\t\tobject = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'HemisphereLight':\n\n\t\t\t\t\tobject = new HemisphereLight( data.color, data.groundColor, data.intensity );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SkinnedMesh':\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.' );\n\n\t\t\t\tcase 'Mesh':\n\n\t\t\t\t\tvar geometry = getGeometry( data.geometry );\n\t\t\t\t\tvar material = getMaterial( data.material );\n\n\t\t\t\t\tif ( geometry.bones && geometry.bones.length > 0 ) {\n\n\t\t\t\t\t\tobject = new SkinnedMesh( geometry, material );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tobject = new Mesh( geometry, material );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'InstancedMesh':\n\n\t\t\t\t\tvar geometry = getGeometry( data.geometry );\n\t\t\t\t\tvar material = getMaterial( data.material );\n\t\t\t\t\tvar count = data.count;\n\t\t\t\t\tvar instanceMatrix = data.instanceMatrix;\n\n\t\t\t\t\tobject = new InstancedMesh( geometry, material, count );\n\t\t\t\t\tobject.instanceMatrix = new BufferAttribute( new Float32Array( instanceMatrix.array ), 16 );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LOD':\n\n\t\t\t\t\tobject = new LOD();\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Line':\n\n\t\t\t\t\tobject = new Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LineLoop':\n\n\t\t\t\t\tobject = new LineLoop( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LineSegments':\n\n\t\t\t\t\tobject = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointCloud':\n\t\t\t\tcase 'Points':\n\n\t\t\t\t\tobject = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Sprite':\n\n\t\t\t\t\tobject = new Sprite( getMaterial( data.material ) );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Group':\n\n\t\t\t\t\tobject = new Group();\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tobject = new Object3D();\n\n\t\t\t}\n\n\t\t\tobject.uuid = data.uuid;\n\n\t\t\tif ( data.name !== undefined ) { object.name = data.name; }\n\n\t\t\tif ( data.matrix !== undefined ) {\n\n\t\t\t\tobject.matrix.fromArray( data.matrix );\n\n\t\t\t\tif ( data.matrixAutoUpdate !== undefined ) { object.matrixAutoUpdate = data.matrixAutoUpdate; }\n\t\t\t\tif ( object.matrixAutoUpdate ) { object.matrix.decompose( object.position, object.quaternion, object.scale ); }\n\n\t\t\t} else {\n\n\t\t\t\tif ( data.position !== undefined ) { object.position.fromArray( data.position ); }\n\t\t\t\tif ( data.rotation !== undefined ) { object.rotation.fromArray( data.rotation ); }\n\t\t\t\tif ( data.quaternion !== undefined ) { object.quaternion.fromArray( data.quaternion ); }\n\t\t\t\tif ( data.scale !== undefined ) { object.scale.fromArray( data.scale ); }\n\n\t\t\t}\n\n\t\t\tif ( data.castShadow !== undefined ) { object.castShadow = data.castShadow; }\n\t\t\tif ( data.receiveShadow !== undefined ) { object.receiveShadow = data.receiveShadow; }\n\n\t\t\tif ( data.shadow ) {\n\n\t\t\t\tif ( data.shadow.bias !== undefined ) { object.shadow.bias = data.shadow.bias; }\n\t\t\t\tif ( data.shadow.radius !== undefined ) { object.shadow.radius = data.shadow.radius; }\n\t\t\t\tif ( data.shadow.mapSize !== undefined ) { object.shadow.mapSize.fromArray( data.shadow.mapSize ); }\n\t\t\t\tif ( data.shadow.camera !== undefined ) { object.shadow.camera = this.parseObject( data.shadow.camera ); }\n\n\t\t\t}\n\n\t\t\tif ( data.visible !== undefined ) { object.visible = data.visible; }\n\t\t\tif ( data.frustumCulled !== undefined ) { object.frustumCulled = data.frustumCulled; }\n\t\t\tif ( data.renderOrder !== undefined ) { object.renderOrder = data.renderOrder; }\n\t\t\tif ( data.userData !== undefined ) { object.userData = data.userData; }\n\t\t\tif ( data.layers !== undefined ) { object.layers.mask = data.layers; }\n\n\t\t\tif ( data.children !== undefined ) {\n\n\t\t\t\tvar children = data.children;\n\n\t\t\t\tfor ( var i = 0; i < children.length; i ++ ) {\n\n\t\t\t\t\tobject.add( this.parseObject( children[ i ], geometries, materials ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( data.type === 'LOD' ) {\n\n\t\t\t\tif ( data.autoUpdate !== undefined ) { object.autoUpdate = data.autoUpdate; }\n\n\t\t\t\tvar levels = data.levels;\n\n\t\t\t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\n\t\t\t\t\tvar level = levels[ l ];\n\t\t\t\t\tvar child = object.getObjectByProperty( 'uuid', level.object );\n\n\t\t\t\t\tif ( child !== undefined ) {\n\n\t\t\t\t\t\tobject.addLevel( child, level.distance );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn object;\n\n\t\t}\n\n\t} );\n\n\tvar TEXTURE_MAPPING = {\n\t\tUVMapping: UVMapping,\n\t\tCubeReflectionMapping: CubeReflectionMapping,\n\t\tCubeRefractionMapping: CubeRefractionMapping,\n\t\tEquirectangularReflectionMapping: EquirectangularReflectionMapping,\n\t\tEquirectangularRefractionMapping: EquirectangularRefractionMapping,\n\t\tSphericalReflectionMapping: SphericalReflectionMapping,\n\t\tCubeUVReflectionMapping: CubeUVReflectionMapping,\n\t\tCubeUVRefractionMapping: CubeUVRefractionMapping\n\t};\n\n\tvar TEXTURE_WRAPPING = {\n\t\tRepeatWrapping: RepeatWrapping,\n\t\tClampToEdgeWrapping: ClampToEdgeWrapping,\n\t\tMirroredRepeatWrapping: MirroredRepeatWrapping\n\t};\n\n\tvar TEXTURE_FILTER = {\n\t\tNearestFilter: NearestFilter,\n\t\tNearestMipmapNearestFilter: NearestMipmapNearestFilter,\n\t\tNearestMipmapLinearFilter: NearestMipmapLinearFilter,\n\t\tLinearFilter: LinearFilter,\n\t\tLinearMipmapNearestFilter: LinearMipmapNearestFilter,\n\t\tLinearMipmapLinearFilter: LinearMipmapLinearFilter\n\t};\n\n\t/**\n\t * @author thespite / http://clicktorelease.com/\n\t */\n\n\n\tfunction ImageBitmapLoader( manager ) {\n\n\t\tif ( typeof createImageBitmap === 'undefined' ) {\n\n\t\t\tconsole.warn( 'THREE.ImageBitmapLoader: createImageBitmap() not supported.' );\n\n\t\t}\n\n\t\tif ( typeof fetch === 'undefined' ) {\n\n\t\t\tconsole.warn( 'THREE.ImageBitmapLoader: fetch() not supported.' );\n\n\t\t}\n\n\t\tLoader.call( this, manager );\n\n\t\tthis.options = undefined;\n\n\t}\n\n\tImageBitmapLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: ImageBitmapLoader,\n\n\t\tsetOptions: function setOptions( options ) {\n\n\t\t\tthis.options = options;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tif ( url === undefined ) { url = ''; }\n\n\t\t\tif ( this.path !== undefined ) { url = this.path + url; }\n\n\t\t\turl = this.manager.resolveURL( url );\n\n\t\t\tvar scope = this;\n\n\t\t\tvar cached = Cache.get( url );\n\n\t\t\tif ( cached !== undefined ) {\n\n\t\t\t\tscope.manager.itemStart( url );\n\n\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\tif ( onLoad ) { onLoad( cached ); }\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, 0 );\n\n\t\t\t\treturn cached;\n\n\t\t\t}\n\n\t\t\tfetch( url ).then( function ( res ) {\n\n\t\t\t\treturn res.blob();\n\n\t\t\t} ).then( function ( blob ) {\n\n\t\t\t\tif ( scope.options === undefined ) {\n\n\t\t\t\t\t// Workaround for FireFox. It causes an error if you pass options.\n\t\t\t\t\treturn createImageBitmap( blob );\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn createImageBitmap( blob, scope.options );\n\n\t\t\t\t}\n\n\t\t\t} ).then( function ( imageBitmap ) {\n\n\t\t\t\tCache.add( url, imageBitmap );\n\n\t\t\t\tif ( onLoad ) { onLoad( imageBitmap ); }\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t} ).catch( function ( e ) {\n\n\t\t\t\tif ( onError ) { onError( e ); }\n\n\t\t\t\tscope.manager.itemError( url );\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t} );\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * minimal class for proxing functions to Path. Replaces old \"extractSubpaths()\"\n\t **/\n\n\tfunction ShapePath() {\n\n\t\tthis.type = 'ShapePath';\n\n\t\tthis.color = new Color();\n\n\t\tthis.subPaths = [];\n\t\tthis.currentPath = null;\n\n\t}\n\n\tObject.assign( ShapePath.prototype, {\n\n\t\tmoveTo: function ( x, y ) {\n\n\t\t\tthis.currentPath = new Path();\n\t\t\tthis.subPaths.push( this.currentPath );\n\t\t\tthis.currentPath.moveTo( x, y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlineTo: function ( x, y ) {\n\n\t\t\tthis.currentPath.lineTo( x, y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\n\n\t\t\tthis.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n\t\t\tthis.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsplineThru: function ( pts ) {\n\n\t\t\tthis.currentPath.splineThru( pts );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoShapes: function ( isCCW, noHoles ) {\n\n\t\t\tfunction toShapesNoHoles( inSubpaths ) {\n\n\t\t\t\tvar shapes = [];\n\n\t\t\t\tfor ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar tmpPath = inSubpaths[ i ];\n\n\t\t\t\t\tvar tmpShape = new Shape();\n\t\t\t\t\ttmpShape.curves = tmpPath.curves;\n\n\t\t\t\t\tshapes.push( tmpShape );\n\n\t\t\t\t}\n\n\t\t\t\treturn shapes;\n\n\t\t\t}\n\n\t\t\tfunction isPointInsidePolygon( inPt, inPolygon ) {\n\n\t\t\t\tvar polyLen = inPolygon.length;\n\n\t\t\t\t// inPt on polygon contour => immediate success    or\n\t\t\t\t// toggling of inside/outside at every single! intersection point of an edge\n\t\t\t\t//  with the horizontal line through inPt, left of inPt\n\t\t\t\t//  not counting lowerY endpoints of edges and whole edges on that line\n\t\t\t\tvar inside = false;\n\t\t\t\tfor ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {\n\n\t\t\t\t\tvar edgeLowPt = inPolygon[ p ];\n\t\t\t\t\tvar edgeHighPt = inPolygon[ q ];\n\n\t\t\t\t\tvar edgeDx = edgeHighPt.x - edgeLowPt.x;\n\t\t\t\t\tvar edgeDy = edgeHighPt.y - edgeLowPt.y;\n\n\t\t\t\t\tif ( Math.abs( edgeDy ) > Number.EPSILON ) {\n\n\t\t\t\t\t\t// not parallel\n\t\t\t\t\t\tif ( edgeDy < 0 ) {\n\n\t\t\t\t\t\t\tedgeLowPt = inPolygon[ q ]; edgeDx = - edgeDx;\n\t\t\t\t\t\t\tedgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) \t\t{ continue; }\n\n\t\t\t\t\t\tif ( inPt.y === edgeLowPt.y ) {\n\n\t\t\t\t\t\t\tif ( inPt.x === edgeLowPt.x )\t\t{ return\ttrue; }\t\t// inPt is on contour ?\n\t\t\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tvar perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );\n\t\t\t\t\t\t\tif ( perpEdge === 0 )\t\t\t\t{ return\ttrue; }\t\t// inPt is on contour ?\n\t\t\t\t\t\t\tif ( perpEdge < 0 ) \t\t\t\t{ continue; }\n\t\t\t\t\t\t\tinside = ! inside;\t\t// true intersection left of inPt\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// parallel or collinear\n\t\t\t\t\t\tif ( inPt.y !== edgeLowPt.y ) \t\t{ continue; }\t\t\t// parallel\n\t\t\t\t\t\t// edge lies on the same horizontal line as inPt\n\t\t\t\t\t\tif ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||\n\t\t\t\t\t\t\t ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )\t\t{ return\ttrue; }\t// inPt: Point on contour !\n\t\t\t\t\t\t// continue;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn\tinside;\n\n\t\t\t}\n\n\t\t\tvar isClockWise = ShapeUtils.isClockWise;\n\n\t\t\tvar subPaths = this.subPaths;\n\t\t\tif ( subPaths.length === 0 ) { return []; }\n\n\t\t\tif ( noHoles === true )\t{ return\ttoShapesNoHoles( subPaths ); }\n\n\n\t\t\tvar solid, tmpPath, tmpShape, shapes = [];\n\n\t\t\tif ( subPaths.length === 1 ) {\n\n\t\t\t\ttmpPath = subPaths[ 0 ];\n\t\t\t\ttmpShape = new Shape();\n\t\t\t\ttmpShape.curves = tmpPath.curves;\n\t\t\t\tshapes.push( tmpShape );\n\t\t\t\treturn shapes;\n\n\t\t\t}\n\n\t\t\tvar holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );\n\t\t\tholesFirst = isCCW ? ! holesFirst : holesFirst;\n\n\t\t\t// console.log(\"Holes first\", holesFirst);\n\n\t\t\tvar betterShapeHoles = [];\n\t\t\tvar newShapes = [];\n\t\t\tvar newShapeHoles = [];\n\t\t\tvar mainIdx = 0;\n\t\t\tvar tmpPoints;\n\n\t\t\tnewShapes[ mainIdx ] = undefined;\n\t\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\t\tfor ( var i = 0, l = subPaths.length; i < l; i ++ ) {\n\n\t\t\t\ttmpPath = subPaths[ i ];\n\t\t\t\ttmpPoints = tmpPath.getPoints();\n\t\t\t\tsolid = isClockWise( tmpPoints );\n\t\t\t\tsolid = isCCW ? ! solid : solid;\n\n\t\t\t\tif ( solid ) {\n\n\t\t\t\t\tif ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )\t{ mainIdx ++; }\n\n\t\t\t\t\tnewShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };\n\t\t\t\t\tnewShapes[ mainIdx ].s.curves = tmpPath.curves;\n\n\t\t\t\t\tif ( holesFirst )\t{ mainIdx ++; }\n\t\t\t\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\t\t\t\t//console.log('cw', i);\n\n\t\t\t\t} else {\n\n\t\t\t\t\tnewShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );\n\n\t\t\t\t\t//console.log('ccw', i);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// only Holes? -> probably all Shapes with wrong orientation\n\t\t\tif ( ! newShapes[ 0 ] )\t{ return\ttoShapesNoHoles( subPaths ); }\n\n\n\t\t\tif ( newShapes.length > 1 ) {\n\n\t\t\t\tvar ambiguous = false;\n\t\t\t\tvar toChange = [];\n\n\t\t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n\t\t\t\t\tbetterShapeHoles[ sIdx ] = [];\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n\t\t\t\t\tvar sho = newShapeHoles[ sIdx ];\n\n\t\t\t\t\tfor ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {\n\n\t\t\t\t\t\tvar ho = sho[ hIdx ];\n\t\t\t\t\t\tvar hole_unassigned = true;\n\n\t\t\t\t\t\tfor ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {\n\n\t\t\t\t\t\t\tif ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {\n\n\t\t\t\t\t\t\t\tif ( sIdx !== s2Idx )\t{ toChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } ); }\n\t\t\t\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\t\t\t\thole_unassigned = false;\n\t\t\t\t\t\t\t\t\tbetterShapeHoles[ s2Idx ].push( ho );\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tambiguous = true;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\t\tbetterShapeHoles[ sIdx ].push( ho );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\t// console.log(\"ambiguous: \", ambiguous);\n\t\t\t\tif ( toChange.length > 0 ) {\n\n\t\t\t\t\t// console.log(\"to change: \", toChange);\n\t\t\t\t\tif ( ! ambiguous )\t{ newShapeHoles = betterShapeHoles; }\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar tmpHoles;\n\n\t\t\tfor ( var i = 0, il = newShapes.length; i < il; i ++ ) {\n\n\t\t\t\ttmpShape = newShapes[ i ].s;\n\t\t\t\tshapes.push( tmpShape );\n\t\t\t\ttmpHoles = newShapeHoles[ i ];\n\n\t\t\t\tfor ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {\n\n\t\t\t\t\ttmpShape.holes.push( tmpHoles[ j ].h );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//console.log(\"shape\", shapes);\n\n\t\t\treturn shapes;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\n\tfunction Font( data ) {\n\n\t\tthis.type = 'Font';\n\n\t\tthis.data = data;\n\n\t}\n\n\tObject.assign( Font.prototype, {\n\n\t\tisFont: true,\n\n\t\tgenerateShapes: function ( text, size ) {\n\n\t\t\tif ( size === undefined ) { size = 100; }\n\n\t\t\tvar shapes = [];\n\t\t\tvar paths = createPaths( text, size, this.data );\n\n\t\t\tfor ( var p = 0, pl = paths.length; p < pl; p ++ ) {\n\n\t\t\t\tArray.prototype.push.apply( shapes, paths[ p ].toShapes() );\n\n\t\t\t}\n\n\t\t\treturn shapes;\n\n\t\t}\n\n\t} );\n\n\tfunction createPaths( text, size, data ) {\n\n\t\tvar chars = Array.from ? Array.from( text ) : String( text ).split( '' ); // workaround for IE11, see #13988\n\t\tvar scale = size / data.resolution;\n\t\tvar line_height = ( data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness ) * scale;\n\n\t\tvar paths = [];\n\n\t\tvar offsetX = 0, offsetY = 0;\n\n\t\tfor ( var i = 0; i < chars.length; i ++ ) {\n\n\t\t\tvar char = chars[ i ];\n\n\t\t\tif ( char === '\\n' ) {\n\n\t\t\t\toffsetX = 0;\n\t\t\t\toffsetY -= line_height;\n\n\t\t\t} else {\n\n\t\t\t\tvar ret = createPath( char, scale, offsetX, offsetY, data );\n\t\t\t\toffsetX += ret.offsetX;\n\t\t\t\tpaths.push( ret.path );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn paths;\n\n\t}\n\n\tfunction createPath( char, scale, offsetX, offsetY, data ) {\n\n\t\tvar glyph = data.glyphs[ char ] || data.glyphs[ '?' ];\n\n\t\tif ( ! glyph ) {\n\n\t\t\tconsole.error( 'THREE.Font: character \"' + char + '\" does not exists in font family ' + data.familyName + '.' );\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar path = new ShapePath();\n\n\t\tvar x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;\n\n\t\tif ( glyph.o ) {\n\n\t\t\tvar outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );\n\n\t\t\tfor ( var i = 0, l = outline.length; i < l; ) {\n\n\t\t\t\tvar action = outline[ i ++ ];\n\n\t\t\t\tswitch ( action ) {\n\n\t\t\t\t\tcase 'm': // moveTo\n\n\t\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\t\tpath.moveTo( x, y );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'l': // lineTo\n\n\t\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\t\tpath.lineTo( x, y );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'q': // quadraticCurveTo\n\n\t\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\t\tpath.quadraticCurveTo( cpx1, cpy1, cpx, cpy );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'b': // bezierCurveTo\n\n\t\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\t\tcpx2 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\tcpy2 = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\t\tpath.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn { offsetX: glyph.ha * scale, path: path };\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction FontLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tFontLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: FontLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new FileLoader( this.manager );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tvar json;\n\n\t\t\t\ttry {\n\n\t\t\t\t\tjson = JSON.parse( text );\n\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );\n\t\t\t\t\tjson = JSON.parse( text.substring( 65, text.length - 2 ) );\n\n\t\t\t\t}\n\n\t\t\t\tvar font = scope.parse( json );\n\n\t\t\t\tif ( onLoad ) { onLoad( font ); }\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( json ) {\n\n\t\t\treturn new Font( json );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _context;\n\n\tvar AudioContext = {\n\n\t\tgetContext: function () {\n\n\t\t\tif ( _context === undefined ) {\n\n\t\t\t\t_context = new ( window.AudioContext || window.webkitAudioContext )();\n\n\t\t\t}\n\n\t\t\treturn _context;\n\n\t\t},\n\n\t\tsetContext: function ( value ) {\n\n\t\t\t_context = value;\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author Reece Aaron Lecrivain / http://reecenotes.com/\n\t */\n\n\tfunction AudioLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tAudioLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: AudioLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar loader = new FileLoader( this.manager );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\t// Create a copy of the buffer. The `decodeAudioData` method\n\t\t\t\t// detaches the buffer when complete, preventing reuse.\n\t\t\t\tvar bufferCopy = buffer.slice( 0 );\n\n\t\t\t\tvar context = AudioContext.getContext();\n\t\t\t\tcontext.decodeAudioData( bufferCopy, function ( audioBuffer ) {\n\n\t\t\t\t\tonLoad( audioBuffer );\n\n\t\t\t\t} );\n\n\t\t\t}, onProgress, onError );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * Primary reference:\n\t *   https://graphics.stanford.edu/papers/envmap/envmap.pdf\n\t *\n\t * Secondary reference:\n\t *   https://www.ppsloan.org/publications/StupidSH36.pdf\n\t */\n\n\t// 3-band SH defined by 9 coefficients\n\n\tfunction SphericalHarmonics3() {\n\n\t\tthis.coefficients = [];\n\n\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients.push( new Vector3() );\n\n\t\t}\n\n\t}\n\n\tObject.assign( SphericalHarmonics3.prototype, {\n\n\t\tisSphericalHarmonics3: true,\n\n\t\tset: function ( coefficients ) {\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tthis.coefficients[ i ].copy( coefficients[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tzero: function () {\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tthis.coefficients[ i ].set( 0, 0, 0 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// get the radiance in the direction of the normal\n\t\t// target is a Vector3\n\t\tgetAt: function ( normal, target ) {\n\n\t\t\t// normal is assumed to be unit length\n\n\t\t\tvar x = normal.x, y = normal.y, z = normal.z;\n\n\t\t\tvar coeff = this.coefficients;\n\n\t\t\t// band 0\n\t\t\ttarget.copy( coeff[ 0 ] ).multiplyScalar( 0.282095 );\n\n\t\t\t// band 1\n\t\t\ttarget.addScale( coeff[ 1 ], 0.488603 * y );\n\t\t\ttarget.addScale( coeff[ 2 ], 0.488603 * z );\n\t\t\ttarget.addScale( coeff[ 3 ], 0.488603 * x );\n\n\t\t\t// band 2\n\t\t\ttarget.addScale( coeff[ 4 ], 1.092548 * ( x * y ) );\n\t\t\ttarget.addScale( coeff[ 5 ], 1.092548 * ( y * z ) );\n\t\t\ttarget.addScale( coeff[ 6 ], 0.315392 * ( 3.0 * z * z - 1.0 ) );\n\t\t\ttarget.addScale( coeff[ 7 ], 1.092548 * ( x * z ) );\n\t\t\ttarget.addScale( coeff[ 8 ], 0.546274 * ( x * x - y * y ) );\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\t// get the irradiance (radiance convolved with cosine lobe) in the direction of the normal\n\t\t// target is a Vector3\n\t\t// https://graphics.stanford.edu/papers/envmap/envmap.pdf\n\t\tgetIrradianceAt: function ( normal, target ) {\n\n\t\t\t// normal is assumed to be unit length\n\n\t\t\tvar x = normal.x, y = normal.y, z = normal.z;\n\n\t\t\tvar coeff = this.coefficients;\n\n\t\t\t// band 0\n\t\t\ttarget.copy( coeff[ 0 ] ).multiplyScalar( 0.886227 ); // π * 0.282095\n\n\t\t\t// band 1\n\t\t\ttarget.addScale( coeff[ 1 ], 2.0 * 0.511664 * y ); // ( 2 * π / 3 ) * 0.488603\n\t\t\ttarget.addScale( coeff[ 2 ], 2.0 * 0.511664 * z );\n\t\t\ttarget.addScale( coeff[ 3 ], 2.0 * 0.511664 * x );\n\n\t\t\t// band 2\n\t\t\ttarget.addScale( coeff[ 4 ], 2.0 * 0.429043 * x * y ); // ( π / 4 ) * 1.092548\n\t\t\ttarget.addScale( coeff[ 5 ], 2.0 * 0.429043 * y * z );\n\t\t\ttarget.addScale( coeff[ 6 ], 0.743125 * z * z - 0.247708 ); // ( π / 4 ) * 0.315392 * 3\n\t\t\ttarget.addScale( coeff[ 7 ], 2.0 * 0.429043 * x * z );\n\t\t\ttarget.addScale( coeff[ 8 ], 0.429043 * ( x * x - y * y ) ); // ( π / 4 ) * 0.546274\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tadd: function ( sh ) {\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tthis.coefficients[ i ].add( sh.coefficients[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\n\t\tscale: function ( s ) {\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tthis.coefficients[ i ].multiplyScalar( s );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerp: function ( sh, alpha ) {\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tthis.coefficients[ i ].lerp( sh.coefficients[ i ], alpha );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( sh ) {\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tif ( ! this.coefficients[ i ].equals( sh.coefficients[ i ] ) ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tcopy: function ( sh ) {\n\n\t\t\treturn this.set( sh.coefficients );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tvar coefficients = this.coefficients;\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tcoefficients[ i ].fromArray( array, offset + ( i * 3 ) );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tvar coefficients = this.coefficients;\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tcoefficients[ i ].toArray( array, offset + ( i * 3 ) );\n\n\t\t\t}\n\n\t\t\treturn array;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( SphericalHarmonics3, {\n\n\t\t// evaluate the basis functions\n\t\t// shBasis is an Array[ 9 ]\n\t\tgetBasisAt: function ( normal, shBasis ) {\n\n\t\t\t// normal is assumed to be unit length\n\n\t\t\tvar x = normal.x, y = normal.y, z = normal.z;\n\n\t\t\t// band 0\n\t\t\tshBasis[ 0 ] = 0.282095;\n\n\t\t\t// band 1\n\t\t\tshBasis[ 1 ] = 0.488603 * y;\n\t\t\tshBasis[ 2 ] = 0.488603 * z;\n\t\t\tshBasis[ 3 ] = 0.488603 * x;\n\n\t\t\t// band 2\n\t\t\tshBasis[ 4 ] = 1.092548 * x * y;\n\t\t\tshBasis[ 5 ] = 1.092548 * y * z;\n\t\t\tshBasis[ 6 ] = 0.315392 * ( 3 * z * z - 1 );\n\t\t\tshBasis[ 7 ] = 1.092548 * x * z;\n\t\t\tshBasis[ 8 ] = 0.546274 * ( x * x - y * y );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * A LightProbe is a source of indirect-diffuse light\n\t */\n\n\tfunction LightProbe( sh, intensity ) {\n\n\t\tLight.call( this, undefined, intensity );\n\n\t\tthis.sh = ( sh !== undefined ) ? sh : new SphericalHarmonics3();\n\n\t}\n\n\tLightProbe.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: LightProbe,\n\n\t\tisLightProbe: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.sh.copy( source.sh );\n\t\t\tthis.intensity = source.intensity;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Light.prototype.toJSON.call( this, meta );\n\n\t\t\t// data.sh = this.sh.toArray(); // todo\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction HemisphereLightProbe( skyColor, groundColor, intensity ) {\n\n\t\tLightProbe.call( this, undefined, intensity );\n\n\t\tvar color1 = new Color().set( skyColor );\n\t\tvar color2 = new Color().set( groundColor );\n\n\t\tvar sky = new Vector3( color1.r, color1.g, color1.b );\n\t\tvar ground = new Vector3( color2.r, color2.g, color2.b );\n\n\t\t// without extra factor of PI in the shader, should = 1 / Math.sqrt( Math.PI );\n\t\tvar c0 = Math.sqrt( Math.PI );\n\t\tvar c1 = c0 * Math.sqrt( 0.75 );\n\n\t\tthis.sh.coefficients[ 0 ].copy( sky ).add( ground ).multiplyScalar( c0 );\n\t\tthis.sh.coefficients[ 1 ].copy( sky ).sub( ground ).multiplyScalar( c1 );\n\n\t}\n\n\tHemisphereLightProbe.prototype = Object.assign( Object.create( LightProbe.prototype ), {\n\n\t\tconstructor: HemisphereLightProbe,\n\n\t\tisHemisphereLightProbe: true,\n\n\t\tcopy: function ( source ) { // modifying colors not currently supported\n\n\t\t\tLightProbe.prototype.copy.call( this, source );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = LightProbe.prototype.toJSON.call( this, meta );\n\n\t\t\t// data.sh = this.sh.toArray(); // todo\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction AmbientLightProbe( color, intensity ) {\n\n\t\tLightProbe.call( this, undefined, intensity );\n\n\t\tvar color1 = new Color().set( color );\n\n\t\t// without extra factor of PI in the shader, would be 2 / Math.sqrt( Math.PI );\n\t\tthis.sh.coefficients[ 0 ].set( color1.r, color1.g, color1.b ).multiplyScalar( 2 * Math.sqrt( Math.PI ) );\n\n\t}\n\n\tAmbientLightProbe.prototype = Object.assign( Object.create( LightProbe.prototype ), {\n\n\t\tconstructor: AmbientLightProbe,\n\n\t\tisAmbientLightProbe: true,\n\n\t\tcopy: function ( source ) { // modifying color not currently supported\n\n\t\t\tLightProbe.prototype.copy.call( this, source );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = LightProbe.prototype.toJSON.call( this, meta );\n\n\t\t\t// data.sh = this.sh.toArray(); // todo\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\tvar _eyeRight = new Matrix4();\n\tvar _eyeLeft = new Matrix4();\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction StereoCamera() {\n\n\t\tthis.type = 'StereoCamera';\n\n\t\tthis.aspect = 1;\n\n\t\tthis.eyeSep = 0.064;\n\n\t\tthis.cameraL = new PerspectiveCamera();\n\t\tthis.cameraL.layers.enable( 1 );\n\t\tthis.cameraL.matrixAutoUpdate = false;\n\n\t\tthis.cameraR = new PerspectiveCamera();\n\t\tthis.cameraR.layers.enable( 2 );\n\t\tthis.cameraR.matrixAutoUpdate = false;\n\n\t\tthis._cache = {\n\t\t\tfocus: null,\n\t\t\tfov: null,\n\t\t\taspect: null,\n\t\t\tnear: null,\n\t\t\tfar: null,\n\t\t\tzoom: null,\n\t\t\teyeSep: null\n\t\t};\n\n\t}\n\n\tObject.assign( StereoCamera.prototype, {\n\n\t\tupdate: function ( camera ) {\n\n\t\t\tvar cache = this._cache;\n\n\t\t\tvar needsUpdate = cache.focus !== camera.focus || cache.fov !== camera.fov ||\n\t\t\t\tcache.aspect !== camera.aspect * this.aspect || cache.near !== camera.near ||\n\t\t\t\tcache.far !== camera.far || cache.zoom !== camera.zoom || cache.eyeSep !== this.eyeSep;\n\n\t\t\tif ( needsUpdate ) {\n\n\t\t\t\tcache.focus = camera.focus;\n\t\t\t\tcache.fov = camera.fov;\n\t\t\t\tcache.aspect = camera.aspect * this.aspect;\n\t\t\t\tcache.near = camera.near;\n\t\t\t\tcache.far = camera.far;\n\t\t\t\tcache.zoom = camera.zoom;\n\t\t\t\tcache.eyeSep = this.eyeSep;\n\n\t\t\t\t// Off-axis stereoscopic effect based on\n\t\t\t\t// http://paulbourke.net/stereographics/stereorender/\n\n\t\t\t\tvar projectionMatrix = camera.projectionMatrix.clone();\n\t\t\t\tvar eyeSepHalf = cache.eyeSep / 2;\n\t\t\t\tvar eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;\n\t\t\t\tvar ymax = ( cache.near * Math.tan( MathUtils.DEG2RAD * cache.fov * 0.5 ) ) / cache.zoom;\n\t\t\t\tvar xmin, xmax;\n\n\t\t\t\t// translate xOffset\n\n\t\t\t\t_eyeLeft.elements[ 12 ] = - eyeSepHalf;\n\t\t\t\t_eyeRight.elements[ 12 ] = eyeSepHalf;\n\n\t\t\t\t// for left eye\n\n\t\t\t\txmin = - ymax * cache.aspect + eyeSepOnProjection;\n\t\t\t\txmax = ymax * cache.aspect + eyeSepOnProjection;\n\n\t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );\n\t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\t\tthis.cameraL.projectionMatrix.copy( projectionMatrix );\n\n\t\t\t\t// for right eye\n\n\t\t\t\txmin = - ymax * cache.aspect - eyeSepOnProjection;\n\t\t\t\txmax = ymax * cache.aspect - eyeSepOnProjection;\n\n\t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );\n\t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\t\tthis.cameraR.projectionMatrix.copy( projectionMatrix );\n\n\t\t\t}\n\n\t\t\tthis.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeLeft );\n\t\t\tthis.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeRight );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Clock( autoStart ) {\n\n\t\tthis.autoStart = ( autoStart !== undefined ) ? autoStart : true;\n\n\t\tthis.startTime = 0;\n\t\tthis.oldTime = 0;\n\t\tthis.elapsedTime = 0;\n\n\t\tthis.running = false;\n\n\t}\n\n\tObject.assign( Clock.prototype, {\n\n\t\tstart: function () {\n\n\t\t\tthis.startTime = ( typeof performance === 'undefined' ? Date : performance ).now(); // see #10732\n\n\t\t\tthis.oldTime = this.startTime;\n\t\t\tthis.elapsedTime = 0;\n\t\t\tthis.running = true;\n\n\t\t},\n\n\t\tstop: function () {\n\n\t\t\tthis.getElapsedTime();\n\t\t\tthis.running = false;\n\t\t\tthis.autoStart = false;\n\n\t\t},\n\n\t\tgetElapsedTime: function () {\n\n\t\t\tthis.getDelta();\n\t\t\treturn this.elapsedTime;\n\n\t\t},\n\n\t\tgetDelta: function () {\n\n\t\t\tvar diff = 0;\n\n\t\t\tif ( this.autoStart && ! this.running ) {\n\n\t\t\t\tthis.start();\n\t\t\t\treturn 0;\n\n\t\t\t}\n\n\t\t\tif ( this.running ) {\n\n\t\t\t\tvar newTime = ( typeof performance === 'undefined' ? Date : performance ).now();\n\n\t\t\t\tdiff = ( newTime - this.oldTime ) / 1000;\n\t\t\t\tthis.oldTime = newTime;\n\n\t\t\t\tthis.elapsedTime += diff;\n\n\t\t\t}\n\n\t\t\treturn diff;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _position$2 = new Vector3();\n\tvar _quaternion$3 = new Quaternion();\n\tvar _scale$1 = new Vector3();\n\tvar _orientation = new Vector3();\n\n\tfunction AudioListener() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'AudioListener';\n\n\t\tthis.context = AudioContext.getContext();\n\n\t\tthis.gain = this.context.createGain();\n\t\tthis.gain.connect( this.context.destination );\n\n\t\tthis.filter = null;\n\n\t\tthis.timeDelta = 0;\n\n\t\t// private\n\n\t\tthis._clock = new Clock();\n\n\t}\n\n\tAudioListener.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: AudioListener,\n\n\t\tgetInput: function () {\n\n\t\t\treturn this.gain;\n\n\t\t},\n\n\t\tremoveFilter: function ( ) {\n\n\t\t\tif ( this.filter !== null ) {\n\n\t\t\t\tthis.gain.disconnect( this.filter );\n\t\t\t\tthis.filter.disconnect( this.context.destination );\n\t\t\t\tthis.gain.connect( this.context.destination );\n\t\t\t\tthis.filter = null;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetFilter: function () {\n\n\t\t\treturn this.filter;\n\n\t\t},\n\n\t\tsetFilter: function ( value ) {\n\n\t\t\tif ( this.filter !== null ) {\n\n\t\t\t\tthis.gain.disconnect( this.filter );\n\t\t\t\tthis.filter.disconnect( this.context.destination );\n\n\t\t\t} else {\n\n\t\t\t\tthis.gain.disconnect( this.context.destination );\n\n\t\t\t}\n\n\t\t\tthis.filter = value;\n\t\t\tthis.gain.connect( this.filter );\n\t\t\tthis.filter.connect( this.context.destination );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetMasterVolume: function () {\n\n\t\t\treturn this.gain.gain.value;\n\n\t\t},\n\n\t\tsetMasterVolume: function ( value ) {\n\n\t\t\tthis.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tupdateMatrixWorld: function ( force ) {\n\n\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\tvar listener = this.context.listener;\n\t\t\tvar up = this.up;\n\n\t\t\tthis.timeDelta = this._clock.getDelta();\n\n\t\t\tthis.matrixWorld.decompose( _position$2, _quaternion$3, _scale$1 );\n\n\t\t\t_orientation.set( 0, 0, - 1 ).applyQuaternion( _quaternion$3 );\n\n\t\t\tif ( listener.positionX ) {\n\n\t\t\t\t// code path for Chrome (see #14393)\n\n\t\t\t\tvar endTime = this.context.currentTime + this.timeDelta;\n\n\t\t\t\tlistener.positionX.linearRampToValueAtTime( _position$2.x, endTime );\n\t\t\t\tlistener.positionY.linearRampToValueAtTime( _position$2.y, endTime );\n\t\t\t\tlistener.positionZ.linearRampToValueAtTime( _position$2.z, endTime );\n\t\t\t\tlistener.forwardX.linearRampToValueAtTime( _orientation.x, endTime );\n\t\t\t\tlistener.forwardY.linearRampToValueAtTime( _orientation.y, endTime );\n\t\t\t\tlistener.forwardZ.linearRampToValueAtTime( _orientation.z, endTime );\n\t\t\t\tlistener.upX.linearRampToValueAtTime( up.x, endTime );\n\t\t\t\tlistener.upY.linearRampToValueAtTime( up.y, endTime );\n\t\t\t\tlistener.upZ.linearRampToValueAtTime( up.z, endTime );\n\n\t\t\t} else {\n\n\t\t\t\tlistener.setPosition( _position$2.x, _position$2.y, _position$2.z );\n\t\t\t\tlistener.setOrientation( _orientation.x, _orientation.y, _orientation.z, up.x, up.y, up.z );\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Reece Aaron Lecrivain / http://reecenotes.com/\n\t */\n\n\tfunction Audio( listener ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Audio';\n\n\t\tthis.listener = listener;\n\t\tthis.context = listener.context;\n\n\t\tthis.gain = this.context.createGain();\n\t\tthis.gain.connect( listener.getInput() );\n\n\t\tthis.autoplay = false;\n\n\t\tthis.buffer = null;\n\t\tthis.detune = 0;\n\t\tthis.loop = false;\n\t\tthis.loopStart = 0;\n\t\tthis.loopEnd = 0;\n\t\tthis.offset = 0;\n\t\tthis.duration = undefined;\n\t\tthis.playbackRate = 1;\n\t\tthis.isPlaying = false;\n\t\tthis.hasPlaybackControl = true;\n\t\tthis.sourceType = 'empty';\n\n\t\tthis._startedAt = 0;\n\t\tthis._pausedAt = 0;\n\n\t\tthis.filters = [];\n\n\t}\n\n\tAudio.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Audio,\n\n\t\tgetOutput: function () {\n\n\t\t\treturn this.gain;\n\n\t\t},\n\n\t\tsetNodeSource: function ( audioNode ) {\n\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'audioNode';\n\t\t\tthis.source = audioNode;\n\t\t\tthis.connect();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetMediaElementSource: function ( mediaElement ) {\n\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'mediaNode';\n\t\t\tthis.source = this.context.createMediaElementSource( mediaElement );\n\t\t\tthis.connect();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetMediaStreamSource: function ( mediaStream ) {\n\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'mediaStreamNode';\n\t\t\tthis.source = this.context.createMediaStreamSource( mediaStream );\n\t\t\tthis.connect();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetBuffer: function ( audioBuffer ) {\n\n\t\t\tthis.buffer = audioBuffer;\n\t\t\tthis.sourceType = 'buffer';\n\n\t\t\tif ( this.autoplay ) { this.play(); }\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tplay: function ( delay ) {\n\n\t\t\tif ( delay === undefined ) { delay = 0; }\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: Audio is already playing.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis._startedAt = this.context.currentTime + delay;\n\n\t\t\tvar source = this.context.createBufferSource();\n\t\t\tsource.buffer = this.buffer;\n\t\t\tsource.loop = this.loop;\n\t\t\tsource.loopStart = this.loopStart;\n\t\t\tsource.loopEnd = this.loopEnd;\n\t\t\tsource.onended = this.onEnded.bind( this );\n\t\t\tsource.start( this._startedAt, this._pausedAt + this.offset, this.duration );\n\n\t\t\tthis.isPlaying = true;\n\n\t\t\tthis.source = source;\n\n\t\t\tthis.setDetune( this.detune );\n\t\t\tthis.setPlaybackRate( this.playbackRate );\n\n\t\t\treturn this.connect();\n\n\t\t},\n\n\t\tpause: function () {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tthis._pausedAt = ( this.context.currentTime - this._startedAt ) * this.playbackRate;\n\n\t\t\t\tthis.source.stop();\n\t\t\t\tthis.source.onended = null;\n\n\t\t\t\tthis.isPlaying = false;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tstop: function () {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis._pausedAt = 0;\n\n\t\t\tthis.source.stop();\n\t\t\tthis.source.onended = null;\n\t\t\tthis.isPlaying = false;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tconnect: function () {\n\n\t\t\tif ( this.filters.length > 0 ) {\n\n\t\t\t\tthis.source.connect( this.filters[ 0 ] );\n\n\t\t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\t\tthis.filters[ i - 1 ].connect( this.filters[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\tthis.filters[ this.filters.length - 1 ].connect( this.getOutput() );\n\n\t\t\t} else {\n\n\t\t\t\tthis.source.connect( this.getOutput() );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdisconnect: function () {\n\n\t\t\tif ( this.filters.length > 0 ) {\n\n\t\t\t\tthis.source.disconnect( this.filters[ 0 ] );\n\n\t\t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\t\tthis.filters[ i - 1 ].disconnect( this.filters[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\tthis.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );\n\n\t\t\t} else {\n\n\t\t\t\tthis.source.disconnect( this.getOutput() );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetFilters: function () {\n\n\t\t\treturn this.filters;\n\n\t\t},\n\n\t\tsetFilters: function ( value ) {\n\n\t\t\tif ( ! value ) { value = []; }\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tthis.disconnect();\n\t\t\t\tthis.filters = value;\n\t\t\t\tthis.connect();\n\n\t\t\t} else {\n\n\t\t\t\tthis.filters = value;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetDetune: function ( value ) {\n\n\t\t\tthis.detune = value;\n\n\t\t\tif ( this.source.detune === undefined ) { return; } // only set detune when available\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tthis.source.detune.setTargetAtTime( this.detune, this.context.currentTime, 0.01 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetDetune: function () {\n\n\t\t\treturn this.detune;\n\n\t\t},\n\n\t\tgetFilter: function () {\n\n\t\t\treturn this.getFilters()[ 0 ];\n\n\t\t},\n\n\t\tsetFilter: function ( filter ) {\n\n\t\t\treturn this.setFilters( filter ? [ filter ] : [] );\n\n\t\t},\n\n\t\tsetPlaybackRate: function ( value ) {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis.playbackRate = value;\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tthis.source.playbackRate.setTargetAtTime( this.playbackRate, this.context.currentTime, 0.01 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetPlaybackRate: function () {\n\n\t\t\treturn this.playbackRate;\n\n\t\t},\n\n\t\tonEnded: function () {\n\n\t\t\tthis.isPlaying = false;\n\n\t\t},\n\n\t\tgetLoop: function () {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\treturn this.loop;\n\n\t\t},\n\n\t\tsetLoop: function ( value ) {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis.loop = value;\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tthis.source.loop = this.loop;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetLoopStart: function ( value ) {\n\n\t\t\tthis.loopStart = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetLoopEnd: function ( value ) {\n\n\t\t\tthis.loopEnd = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetVolume: function () {\n\n\t\t\treturn this.gain.gain.value;\n\n\t\t},\n\n\t\tsetVolume: function ( value ) {\n\n\t\t\tthis.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _position$3 = new Vector3();\n\tvar _quaternion$4 = new Quaternion();\n\tvar _scale$2 = new Vector3();\n\tvar _orientation$1 = new Vector3();\n\n\tfunction PositionalAudio( listener ) {\n\n\t\tAudio.call( this, listener );\n\n\t\tthis.panner = this.context.createPanner();\n\t\tthis.panner.panningModel = 'HRTF';\n\t\tthis.panner.connect( this.gain );\n\n\t}\n\n\tPositionalAudio.prototype = Object.assign( Object.create( Audio.prototype ), {\n\n\t\tconstructor: PositionalAudio,\n\n\t\tgetOutput: function () {\n\n\t\t\treturn this.panner;\n\n\t\t},\n\n\t\tgetRefDistance: function () {\n\n\t\t\treturn this.panner.refDistance;\n\n\t\t},\n\n\t\tsetRefDistance: function ( value ) {\n\n\t\t\tthis.panner.refDistance = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetRolloffFactor: function () {\n\n\t\t\treturn this.panner.rolloffFactor;\n\n\t\t},\n\n\t\tsetRolloffFactor: function ( value ) {\n\n\t\t\tthis.panner.rolloffFactor = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetDistanceModel: function () {\n\n\t\t\treturn this.panner.distanceModel;\n\n\t\t},\n\n\t\tsetDistanceModel: function ( value ) {\n\n\t\t\tthis.panner.distanceModel = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetMaxDistance: function () {\n\n\t\t\treturn this.panner.maxDistance;\n\n\t\t},\n\n\t\tsetMaxDistance: function ( value ) {\n\n\t\t\tthis.panner.maxDistance = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetDirectionalCone: function ( coneInnerAngle, coneOuterAngle, coneOuterGain ) {\n\n\t\t\tthis.panner.coneInnerAngle = coneInnerAngle;\n\t\t\tthis.panner.coneOuterAngle = coneOuterAngle;\n\t\t\tthis.panner.coneOuterGain = coneOuterGain;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tupdateMatrixWorld: function ( force ) {\n\n\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\tif ( this.hasPlaybackControl === true && this.isPlaying === false ) { return; }\n\n\t\t\tthis.matrixWorld.decompose( _position$3, _quaternion$4, _scale$2 );\n\n\t\t\t_orientation$1.set( 0, 0, 1 ).applyQuaternion( _quaternion$4 );\n\n\t\t\tvar panner = this.panner;\n\n\t\t\tif ( panner.positionX ) {\n\n\t\t\t\t// code path for Chrome and Firefox (see #14393)\n\n\t\t\t\tvar endTime = this.context.currentTime + this.listener.timeDelta;\n\n\t\t\t\tpanner.positionX.linearRampToValueAtTime( _position$3.x, endTime );\n\t\t\t\tpanner.positionY.linearRampToValueAtTime( _position$3.y, endTime );\n\t\t\t\tpanner.positionZ.linearRampToValueAtTime( _position$3.z, endTime );\n\t\t\t\tpanner.orientationX.linearRampToValueAtTime( _orientation$1.x, endTime );\n\t\t\t\tpanner.orientationY.linearRampToValueAtTime( _orientation$1.y, endTime );\n\t\t\t\tpanner.orientationZ.linearRampToValueAtTime( _orientation$1.z, endTime );\n\n\t\t\t} else {\n\n\t\t\t\tpanner.setPosition( _position$3.x, _position$3.y, _position$3.z );\n\t\t\t\tpanner.setOrientation( _orientation$1.x, _orientation$1.y, _orientation$1.z );\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction AudioAnalyser( audio, fftSize ) {\n\n\t\tthis.analyser = audio.context.createAnalyser();\n\t\tthis.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;\n\n\t\tthis.data = new Uint8Array( this.analyser.frequencyBinCount );\n\n\t\taudio.getOutput().connect( this.analyser );\n\n\t}\n\n\tObject.assign( AudioAnalyser.prototype, {\n\n\t\tgetFrequencyData: function () {\n\n\t\t\tthis.analyser.getByteFrequencyData( this.data );\n\n\t\t\treturn this.data;\n\n\t\t},\n\n\t\tgetAverageFrequency: function () {\n\n\t\t\tvar value = 0, data = this.getFrequencyData();\n\n\t\t\tfor ( var i = 0; i < data.length; i ++ ) {\n\n\t\t\t\tvalue += data[ i ];\n\n\t\t\t}\n\n\t\t\treturn value / data.length;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * Buffered scene graph property that allows weighted accumulation.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction PropertyMixer( binding, typeName, valueSize ) {\n\n\t\tthis.binding = binding;\n\t\tthis.valueSize = valueSize;\n\n\t\tvar bufferType = Float64Array,\n\t\t\tmixFunction;\n\n\t\tswitch ( typeName ) {\n\n\t\t\tcase 'quaternion':\n\t\t\t\tmixFunction = this._slerp;\n\t\t\t\tbreak;\n\n\t\t\tcase 'string':\n\t\t\tcase 'bool':\n\t\t\t\tbufferType = Array;\n\t\t\t\tmixFunction = this._select;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tmixFunction = this._lerp;\n\n\t\t}\n\n\t\tthis.buffer = new bufferType( valueSize * 4 );\n\t\t// layout: [ incoming | accu0 | accu1 | orig ]\n\t\t//\n\t\t// interpolators can use .buffer as their .result\n\t\t// the data then goes to 'incoming'\n\t\t//\n\t\t// 'accu0' and 'accu1' are used frame-interleaved for\n\t\t// the cumulative result and are compared to detect\n\t\t// changes\n\t\t//\n\t\t// 'orig' stores the original state of the property\n\n\t\tthis._mixBufferRegion = mixFunction;\n\n\t\tthis.cumulativeWeight = 0;\n\n\t\tthis.useCount = 0;\n\t\tthis.referenceCount = 0;\n\n\t}\n\n\tObject.assign( PropertyMixer.prototype, {\n\n\t\t// accumulate data in the 'incoming' region into 'accu<i>'\n\t\taccumulate: function ( accuIndex, weight ) {\n\n\t\t\t// note: happily accumulating nothing when weight = 0, the caller knows\n\t\t\t// the weight and shouldn't have made the call in the first place\n\n\t\t\tvar buffer = this.buffer,\n\t\t\t\tstride = this.valueSize,\n\t\t\t\toffset = accuIndex * stride + stride,\n\n\t\t\t\tcurrentWeight = this.cumulativeWeight;\n\n\t\t\tif ( currentWeight === 0 ) {\n\n\t\t\t\t// accuN := incoming * weight\n\n\t\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\t\tbuffer[ offset + i ] = buffer[ i ];\n\n\t\t\t\t}\n\n\t\t\t\tcurrentWeight = weight;\n\n\t\t\t} else {\n\n\t\t\t\t// accuN := accuN + incoming * weight\n\n\t\t\t\tcurrentWeight += weight;\n\t\t\t\tvar mix = weight / currentWeight;\n\t\t\t\tthis._mixBufferRegion( buffer, offset, 0, mix, stride );\n\n\t\t\t}\n\n\t\t\tthis.cumulativeWeight = currentWeight;\n\n\t\t},\n\n\t\t// apply the state of 'accu<i>' to the binding when accus differ\n\t\tapply: function ( accuIndex ) {\n\n\t\t\tvar stride = this.valueSize,\n\t\t\t\tbuffer = this.buffer,\n\t\t\t\toffset = accuIndex * stride + stride,\n\n\t\t\t\tweight = this.cumulativeWeight,\n\n\t\t\t\tbinding = this.binding;\n\n\t\t\tthis.cumulativeWeight = 0;\n\n\t\t\tif ( weight < 1 ) {\n\n\t\t\t\t// accuN := accuN + original * ( 1 - cumulativeWeight )\n\n\t\t\t\tvar originalValueOffset = stride * 3;\n\n\t\t\t\tthis._mixBufferRegion(\n\t\t\t\t\tbuffer, offset, originalValueOffset, 1 - weight, stride );\n\n\t\t\t}\n\n\t\t\tfor ( var i = stride, e = stride + stride; i !== e; ++ i ) {\n\n\t\t\t\tif ( buffer[ i ] !== buffer[ i + stride ] ) {\n\n\t\t\t\t\t// value has changed -> update scene graph\n\n\t\t\t\t\tbinding.setValue( buffer, offset );\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t// remember the state of the bound property and copy it to both accus\n\t\tsaveOriginalState: function () {\n\n\t\t\tvar binding = this.binding;\n\n\t\t\tvar buffer = this.buffer,\n\t\t\t\tstride = this.valueSize,\n\n\t\t\t\toriginalValueOffset = stride * 3;\n\n\t\t\tbinding.getValue( buffer, originalValueOffset );\n\n\t\t\t// accu[0..1] := orig -- initially detect changes against the original\n\t\t\tfor ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {\n\n\t\t\t\tbuffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];\n\n\t\t\t}\n\n\t\t\tthis.cumulativeWeight = 0;\n\n\t\t},\n\n\t\t// apply the state previously taken via 'saveOriginalState' to the binding\n\t\trestoreOriginalState: function () {\n\n\t\t\tvar originalValueOffset = this.valueSize * 3;\n\t\t\tthis.binding.setValue( this.buffer, originalValueOffset );\n\n\t\t},\n\n\n\t\t// mix functions\n\n\t\t_select: function ( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\t\tif ( t >= 0.5 ) {\n\n\t\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\t\tbuffer[ dstOffset + i ] = buffer[ srcOffset + i ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t_slerp: function ( buffer, dstOffset, srcOffset, t ) {\n\n\t\t\tQuaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t );\n\n\t\t},\n\n\t\t_lerp: function ( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\t\tvar s = 1 - t;\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tvar j = dstOffset + i;\n\n\t\t\t\tbuffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * A reference to a real property in the scene graph.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\t// Characters [].:/ are reserved for track binding syntax.\n\tvar _RESERVED_CHARS_RE = '\\\\[\\\\]\\\\.:\\\\/';\n\tvar _reservedRe = new RegExp( '[' + _RESERVED_CHARS_RE + ']', 'g' );\n\n\t// Attempts to allow node names from any language. ES5's `\\w` regexp matches\n\t// only latin characters, and the unicode \\p{L} is not yet supported. So\n\t// instead, we exclude reserved characters and match everything else.\n\tvar _wordChar = '[^' + _RESERVED_CHARS_RE + ']';\n\tvar _wordCharOrDot = '[^' + _RESERVED_CHARS_RE.replace( '\\\\.', '' ) + ']';\n\n\t// Parent directories, delimited by '/' or ':'. Currently unused, but must\n\t// be matched to parse the rest of the track name.\n\tvar _directoryRe = /((?:WC+[\\/:])*)/.source.replace( 'WC', _wordChar );\n\n\t// Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.\n\tvar _nodeRe = /(WCOD+)?/.source.replace( 'WCOD', _wordCharOrDot );\n\n\t// Object on target node, and accessor. May not contain reserved\n\t// characters. Accessor may contain any character except closing bracket.\n\tvar _objectRe = /(?:\\.(WC+)(?:\\[(.+)\\])?)?/.source.replace( 'WC', _wordChar );\n\n\t// Property and accessor. May not contain reserved characters. Accessor may\n\t// contain any non-bracket characters.\n\tvar _propertyRe = /\\.(WC+)(?:\\[(.+)\\])?/.source.replace( 'WC', _wordChar );\n\n\tvar _trackRe = new RegExp( ''\n\t\t+ '^'\n\t\t+ _directoryRe\n\t\t+ _nodeRe\n\t\t+ _objectRe\n\t\t+ _propertyRe\n\t\t+ '$'\n\t);\n\n\tvar _supportedObjectNames = [ 'material', 'materials', 'bones' ];\n\n\tfunction Composite( targetGroup, path, optionalParsedPath ) {\n\n\t\tvar parsedPath = optionalParsedPath || PropertyBinding.parseTrackName( path );\n\n\t\tthis._targetGroup = targetGroup;\n\t\tthis._bindings = targetGroup.subscribe_( path, parsedPath );\n\n\t}\n\n\tObject.assign( Composite.prototype, {\n\n\t\tgetValue: function ( array, offset ) {\n\n\t\t\tthis.bind(); // bind all binding\n\n\t\t\tvar firstValidIndex = this._targetGroup.nCachedObjects_,\n\t\t\t\tbinding = this._bindings[ firstValidIndex ];\n\n\t\t\t// and only call .getValue on the first\n\t\t\tif ( binding !== undefined ) { binding.getValue( array, offset ); }\n\n\t\t},\n\n\t\tsetValue: function ( array, offset ) {\n\n\t\t\tvar bindings = this._bindings;\n\n\t\t\tfor ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tbindings[ i ].setValue( array, offset );\n\n\t\t\t}\n\n\t\t},\n\n\t\tbind: function () {\n\n\t\t\tvar bindings = this._bindings;\n\n\t\t\tfor ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tbindings[ i ].bind();\n\n\t\t\t}\n\n\t\t},\n\n\t\tunbind: function () {\n\n\t\t\tvar bindings = this._bindings;\n\n\t\t\tfor ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tbindings[ i ].unbind();\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\n\tfunction PropertyBinding( rootNode, path, parsedPath ) {\n\n\t\tthis.path = path;\n\t\tthis.parsedPath = parsedPath || PropertyBinding.parseTrackName( path );\n\n\t\tthis.node = PropertyBinding.findNode( rootNode, this.parsedPath.nodeName ) || rootNode;\n\n\t\tthis.rootNode = rootNode;\n\n\t}\n\n\tObject.assign( PropertyBinding, {\n\n\t\tComposite: Composite,\n\n\t\tcreate: function ( root, path, parsedPath ) {\n\n\t\t\tif ( ! ( root && root.isAnimationObjectGroup ) ) {\n\n\t\t\t\treturn new PropertyBinding( root, path, parsedPath );\n\n\t\t\t} else {\n\n\t\t\t\treturn new PropertyBinding.Composite( root, path, parsedPath );\n\n\t\t\t}\n\n\t\t},\n\n\t\t/**\n\t\t * Replaces spaces with underscores and removes unsupported characters from\n\t\t * node names, to ensure compatibility with parseTrackName().\n\t\t *\n\t\t * @param {string} name Node name to be sanitized.\n\t\t * @return {string}\n\t\t */\n\t\tsanitizeNodeName: function ( name ) {\n\n\t\t\treturn name.replace( /\\s/g, '_' ).replace( _reservedRe, '' );\n\n\t\t},\n\n\t\tparseTrackName: function ( trackName ) {\n\n\t\t\tvar matches = _trackRe.exec( trackName );\n\n\t\t\tif ( ! matches ) {\n\n\t\t\t\tthrow new Error( 'PropertyBinding: Cannot parse trackName: ' + trackName );\n\n\t\t\t}\n\n\t\t\tvar results = {\n\t\t\t\t// directoryName: matches[ 1 ], // (tschw) currently unused\n\t\t\t\tnodeName: matches[ 2 ],\n\t\t\t\tobjectName: matches[ 3 ],\n\t\t\t\tobjectIndex: matches[ 4 ],\n\t\t\t\tpropertyName: matches[ 5 ], // required\n\t\t\t\tpropertyIndex: matches[ 6 ]\n\t\t\t};\n\n\t\t\tvar lastDot = results.nodeName && results.nodeName.lastIndexOf( '.' );\n\n\t\t\tif ( lastDot !== undefined && lastDot !== - 1 ) {\n\n\t\t\t\tvar objectName = results.nodeName.substring( lastDot + 1 );\n\n\t\t\t\t// Object names must be checked against a whitelist. Otherwise, there\n\t\t\t\t// is no way to parse 'foo.bar.baz': 'baz' must be a property, but\n\t\t\t\t// 'bar' could be the objectName, or part of a nodeName (which can\n\t\t\t\t// include '.' characters).\n\t\t\t\tif ( _supportedObjectNames.indexOf( objectName ) !== - 1 ) {\n\n\t\t\t\t\tresults.nodeName = results.nodeName.substring( 0, lastDot );\n\t\t\t\t\tresults.objectName = objectName;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( results.propertyName === null || results.propertyName.length === 0 ) {\n\n\t\t\t\tthrow new Error( 'PropertyBinding: can not parse propertyName from trackName: ' + trackName );\n\n\t\t\t}\n\n\t\t\treturn results;\n\n\t\t},\n\n\t\tfindNode: function ( root, nodeName ) {\n\n\t\t\tif ( ! nodeName || nodeName === \"\" || nodeName === \"root\" || nodeName === \".\" || nodeName === - 1 || nodeName === root.name || nodeName === root.uuid ) {\n\n\t\t\t\treturn root;\n\n\t\t\t}\n\n\t\t\t// search into skeleton bones.\n\t\t\tif ( root.skeleton ) {\n\n\t\t\t\tvar bone = root.skeleton.getBoneByName( nodeName );\n\n\t\t\t\tif ( bone !== undefined ) {\n\n\t\t\t\t\treturn bone;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// search into node subtree.\n\t\t\tif ( root.children ) {\n\n\t\t\t\tvar searchNodeSubtree = function ( children ) {\n\n\t\t\t\t\tfor ( var i = 0; i < children.length; i ++ ) {\n\n\t\t\t\t\t\tvar childNode = children[ i ];\n\n\t\t\t\t\t\tif ( childNode.name === nodeName || childNode.uuid === nodeName ) {\n\n\t\t\t\t\t\t\treturn childNode;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar result = searchNodeSubtree( childNode.children );\n\n\t\t\t\t\t\tif ( result ) { return result; }\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t};\n\n\t\t\t\tvar subTreeNode = searchNodeSubtree( root.children );\n\n\t\t\t\tif ( subTreeNode ) {\n\n\t\t\t\t\treturn subTreeNode;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( PropertyBinding.prototype, { // prototype, continued\n\n\t\t// these are used to \"bind\" a nonexistent property\n\t\t_getValue_unavailable: function () {},\n\t\t_setValue_unavailable: function () {},\n\n\t\tBindingType: {\n\t\t\tDirect: 0,\n\t\t\tEntireArray: 1,\n\t\t\tArrayElement: 2,\n\t\t\tHasFromToArray: 3\n\t\t},\n\n\t\tVersioning: {\n\t\t\tNone: 0,\n\t\t\tNeedsUpdate: 1,\n\t\t\tMatrixWorldNeedsUpdate: 2\n\t\t},\n\n\t\tGetterByBindingType: [\n\n\t\t\tfunction getValue_direct( buffer, offset ) {\n\n\t\t\t\tbuffer[ offset ] = this.node[ this.propertyName ];\n\n\t\t\t},\n\n\t\t\tfunction getValue_array( buffer, offset ) {\n\n\t\t\t\tvar source = this.resolvedProperty;\n\n\t\t\t\tfor ( var i = 0, n = source.length; i !== n; ++ i ) {\n\n\t\t\t\t\tbuffer[ offset ++ ] = source[ i ];\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tfunction getValue_arrayElement( buffer, offset ) {\n\n\t\t\t\tbuffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];\n\n\t\t\t},\n\n\t\t\tfunction getValue_toArray( buffer, offset ) {\n\n\t\t\t\tthis.resolvedProperty.toArray( buffer, offset );\n\n\t\t\t}\n\n\t\t],\n\n\t\tSetterByBindingTypeAndVersioning: [\n\n\t\t\t[\n\t\t\t\t// Direct\n\n\t\t\t\tfunction setValue_direct( buffer, offset ) {\n\n\t\t\t\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_direct_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t], [\n\n\t\t\t\t// EntireArray\n\n\t\t\t\tfunction setValue_array( buffer, offset ) {\n\n\t\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_array_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t], [\n\n\t\t\t\t// ArrayElement\n\n\t\t\t\tfunction setValue_arrayElement( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_arrayElement_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t], [\n\n\t\t\t\t// HasToFromArray\n\n\t\t\t\tfunction setValue_fromArray( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_fromArray_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t]\n\n\t\t],\n\n\t\tgetValue: function getValue_unbound( targetArray, offset ) {\n\n\t\t\tthis.bind();\n\t\t\tthis.getValue( targetArray, offset );\n\n\t\t\t// Note: This class uses a State pattern on a per-method basis:\n\t\t\t// 'bind' sets 'this.getValue' / 'setValue' and shadows the\n\t\t\t// prototype version of these methods with one that represents\n\t\t\t// the bound state. When the property is not found, the methods\n\t\t\t// become no-ops.\n\n\t\t},\n\n\t\tsetValue: function getValue_unbound( sourceArray, offset ) {\n\n\t\t\tthis.bind();\n\t\t\tthis.setValue( sourceArray, offset );\n\n\t\t},\n\n\t\t// create getter / setter pair for a property in the scene graph\n\t\tbind: function () {\n\n\t\t\tvar targetObject = this.node,\n\t\t\t\tparsedPath = this.parsedPath,\n\n\t\t\t\tobjectName = parsedPath.objectName,\n\t\t\t\tpropertyName = parsedPath.propertyName,\n\t\t\t\tpropertyIndex = parsedPath.propertyIndex;\n\n\t\t\tif ( ! targetObject ) {\n\n\t\t\t\ttargetObject = PropertyBinding.findNode( this.rootNode, parsedPath.nodeName ) || this.rootNode;\n\n\t\t\t\tthis.node = targetObject;\n\n\t\t\t}\n\n\t\t\t// set fail state so we can just 'return' on error\n\t\t\tthis.getValue = this._getValue_unavailable;\n\t\t\tthis.setValue = this._setValue_unavailable;\n\n\t\t\t// ensure there is a value node\n\t\t\tif ( ! targetObject ) {\n\n\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\\'t found.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( objectName ) {\n\n\t\t\t\tvar objectIndex = parsedPath.objectIndex;\n\n\t\t\t\t// special cases were we need to reach deeper into the hierarchy to get the face materials....\n\t\t\t\tswitch ( objectName ) {\n\n\t\t\t\t\tcase 'materials':\n\n\t\t\t\t\t\tif ( ! targetObject.material ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material as node does not have a material.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( ! targetObject.material.materials ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttargetObject = targetObject.material.materials;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'bones':\n\n\t\t\t\t\t\tif ( ! targetObject.skeleton ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// potential future optimization: skip this if propertyIndex is already an integer\n\t\t\t\t\t\t// and convert the integer string to a true integer.\n\n\t\t\t\t\t\ttargetObject = targetObject.skeleton.bones;\n\n\t\t\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\t\t\tfor ( var i = 0; i < targetObject.length; i ++ ) {\n\n\t\t\t\t\t\t\tif ( targetObject[ i ].name === objectIndex ) {\n\n\t\t\t\t\t\t\t\tobjectIndex = i;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tif ( targetObject[ objectName ] === undefined ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to objectName of node undefined.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttargetObject = targetObject[ objectName ];\n\n\t\t\t\t}\n\n\n\t\t\t\tif ( objectIndex !== undefined ) {\n\n\t\t\t\t\tif ( targetObject[ objectIndex ] === undefined ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject[ objectIndex ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// resolve property\n\t\t\tvar nodeProperty = targetObject[ propertyName ];\n\n\t\t\tif ( nodeProperty === undefined ) {\n\n\t\t\t\tvar nodeName = parsedPath.nodeName;\n\n\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to update property for track: ' + nodeName +\n\t\t\t\t\t'.' + propertyName + ' but it wasn\\'t found.', targetObject );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t// determine versioning scheme\n\t\t\tvar versioning = this.Versioning.None;\n\n\t\t\tthis.targetObject = targetObject;\n\n\t\t\tif ( targetObject.needsUpdate !== undefined ) { // material\n\n\t\t\t\tversioning = this.Versioning.NeedsUpdate;\n\n\t\t\t} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform\n\n\t\t\t\tversioning = this.Versioning.MatrixWorldNeedsUpdate;\n\n\t\t\t}\n\n\t\t\t// determine how the property gets bound\n\t\t\tvar bindingType = this.BindingType.Direct;\n\n\t\t\tif ( propertyIndex !== undefined ) {\n\n\t\t\t\t// access a sub element of the property array (only primitives are supported right now)\n\n\t\t\t\tif ( propertyName === \"morphTargetInfluences\" ) {\n\n\t\t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n\n\t\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\t\tif ( ! targetObject.geometry ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( targetObject.geometry.isBufferGeometry ) {\n\n\t\t\t\t\t\tif ( ! targetObject.geometry.morphAttributes ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor ( var i = 0; i < this.node.geometry.morphAttributes.position.length; i ++ ) {\n\n\t\t\t\t\t\t\tif ( targetObject.geometry.morphAttributes.position[ i ].name === propertyIndex ) {\n\n\t\t\t\t\t\t\t\tpropertyIndex = i;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( ! targetObject.geometry.morphTargets ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {\n\n\t\t\t\t\t\t\tif ( targetObject.geometry.morphTargets[ i ].name === propertyIndex ) {\n\n\t\t\t\t\t\t\t\tpropertyIndex = i;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tbindingType = this.BindingType.ArrayElement;\n\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\t\tthis.propertyIndex = propertyIndex;\n\n\t\t\t} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {\n\n\t\t\t\t// must use copy for Object3D.Euler/Quaternion\n\n\t\t\t\tbindingType = this.BindingType.HasFromToArray;\n\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\n\t\t\t} else if ( Array.isArray( nodeProperty ) ) {\n\n\t\t\t\tbindingType = this.BindingType.EntireArray;\n\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\n\t\t\t} else {\n\n\t\t\t\tthis.propertyName = propertyName;\n\n\t\t\t}\n\n\t\t\t// select getter / setter\n\t\t\tthis.getValue = this.GetterByBindingType[ bindingType ];\n\t\t\tthis.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];\n\n\t\t},\n\n\t\tunbind: function () {\n\n\t\t\tthis.node = null;\n\n\t\t\t// back to the prototype version of getValue / setValue\n\t\t\t// note: avoiding to mutate the shape of 'this' via 'delete'\n\t\t\tthis.getValue = this._getValue_unbound;\n\t\t\tthis.setValue = this._setValue_unbound;\n\n\t\t}\n\n\t} );\n\n\t//!\\ DECLARE ALIAS AFTER assign prototype !\n\tObject.assign( PropertyBinding.prototype, {\n\n\t\t// initial state of these methods that calls 'bind'\n\t\t_getValue_unbound: PropertyBinding.prototype.getValue,\n\t\t_setValue_unbound: PropertyBinding.prototype.setValue,\n\n\t} );\n\n\t/**\n\t *\n\t * A group of objects that receives a shared animation state.\n\t *\n\t * Usage:\n\t *\n\t *  - Add objects you would otherwise pass as 'root' to the\n\t *    constructor or the .clipAction method of AnimationMixer.\n\t *\n\t *  - Instead pass this object as 'root'.\n\t *\n\t *  - You can also add and remove objects later when the mixer\n\t *    is running.\n\t *\n\t * Note:\n\t *\n\t *    Objects of this class appear as one object to the mixer,\n\t *    so cache control of the individual objects must be done\n\t *    on the group.\n\t *\n\t * Limitation:\n\t *\n\t *  - The animated properties must be compatible among the\n\t *    all objects in the group.\n\t *\n\t *  - A single property can either be controlled through a\n\t *    target group or directly, but not both.\n\t *\n\t * @author tschw\n\t */\n\n\tfunction AnimationObjectGroup() {\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\t// cached objects followed by the active ones\n\t\tthis._objects = Array.prototype.slice.call( arguments );\n\n\t\tthis.nCachedObjects_ = 0; // threshold\n\t\t// note: read by PropertyBinding.Composite\n\n\t\tvar indices = {};\n\t\tthis._indicesByUUID = indices; // for bookkeeping\n\n\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tindices[ arguments[ i ].uuid ] = i;\n\n\t\t}\n\n\t\tthis._paths = []; // inside: string\n\t\tthis._parsedPaths = []; // inside: { we don't care, here }\n\t\tthis._bindings = []; // inside: Array< PropertyBinding >\n\t\tthis._bindingsIndicesByPath = {}; // inside: indices in these arrays\n\n\t\tvar scope = this;\n\n\t\tthis.stats = {\n\n\t\t\tobjects: {\n\t\t\t\tget total() {\n\n\t\t\t\t\treturn scope._objects.length;\n\n\t\t\t\t},\n\t\t\t\tget inUse() {\n\n\t\t\t\t\treturn this.total - scope.nCachedObjects_;\n\n\t\t\t\t}\n\t\t\t},\n\t\t\tget bindingsPerObject() {\n\n\t\t\t\treturn scope._bindings.length;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\tObject.assign( AnimationObjectGroup.prototype, {\n\n\t\tisAnimationObjectGroup: true,\n\n\t\tadd: function () {\n\n\t\t\tvar objects = this._objects,\n\t\t\t\tnObjects = objects.length,\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\tpaths = this._paths,\n\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tnBindings = bindings.length,\n\t\t\t\tknownObject = undefined;\n\n\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\t\tvar object = arguments[ i ],\n\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\t\tif ( index === undefined ) {\n\n\t\t\t\t\t// unknown object -> add it to the ACTIVE region\n\n\t\t\t\t\tindex = nObjects ++;\n\t\t\t\t\tindicesByUUID[ uuid ] = index;\n\t\t\t\t\tobjects.push( object );\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tbindings[ j ].push( new PropertyBinding( object, paths[ j ], parsedPaths[ j ] ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( index < nCachedObjects ) {\n\n\t\t\t\t\tknownObject = objects[ index ];\n\n\t\t\t\t\t// move existing object to the ACTIVE region\n\n\t\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ];\n\n\t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\t\tobjects[ index ] = lastCachedObject;\n\n\t\t\t\t\tindicesByUUID[ uuid ] = firstActiveIndex;\n\t\t\t\t\tobjects[ firstActiveIndex ] = object;\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n\t\t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\n\t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\n\t\t\t\t\t\tif ( binding === undefined ) {\n\n\t\t\t\t\t\t\t// since we do not bother to create new bindings\n\t\t\t\t\t\t\t// for objects that are cached, the binding may\n\t\t\t\t\t\t\t// or may not exist\n\n\t\t\t\t\t\t\tbinding = new PropertyBinding( object, paths[ j ], parsedPaths[ j ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = binding;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( objects[ index ] !== knownObject ) {\n\n\t\t\t\t\tconsole.error( 'THREE.AnimationObjectGroup: Different objects with the same UUID ' +\n\t\t\t\t\t\t'detected. Clean the caches or recreate your infrastructure when reloading scenes.' );\n\n\t\t\t\t} // else the object is already where we want it to be\n\n\t\t\t} // for arguments\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t\t},\n\n\t\tremove: function () {\n\n\t\t\tvar objects = this._objects,\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tnBindings = bindings.length;\n\n\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\t\tvar object = arguments[ i ],\n\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\t\tif ( index !== undefined && index >= nCachedObjects ) {\n\n\t\t\t\t\t// move existing object into the CACHED region\n\n\t\t\t\t\tvar lastCachedIndex = nCachedObjects ++,\n\t\t\t\t\t\tfirstActiveObject = objects[ lastCachedIndex ];\n\n\t\t\t\t\tindicesByUUID[ firstActiveObject.uuid ] = index;\n\t\t\t\t\tobjects[ index ] = firstActiveObject;\n\n\t\t\t\t\tindicesByUUID[ uuid ] = lastCachedIndex;\n\t\t\t\t\tobjects[ lastCachedIndex ] = object;\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\tfirstActive = bindingsForPath[ lastCachedIndex ],\n\t\t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\n\t\t\t\t\t\tbindingsForPath[ index ] = firstActive;\n\t\t\t\t\t\tbindingsForPath[ lastCachedIndex ] = binding;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} // for arguments\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t\t},\n\n\t\t// remove & forget\n\t\tuncache: function () {\n\n\t\t\tvar objects = this._objects,\n\t\t\t\tnObjects = objects.length,\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tnBindings = bindings.length;\n\n\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\t\tvar object = arguments[ i ],\n\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\t\tif ( index !== undefined ) {\n\n\t\t\t\t\tdelete indicesByUUID[ uuid ];\n\n\t\t\t\t\tif ( index < nCachedObjects ) {\n\n\t\t\t\t\t\t// object is cached, shrink the CACHED region\n\n\t\t\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ],\n\t\t\t\t\t\t\tlastIndex = -- nObjects,\n\t\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n\t\t\t\t\t\t// last cached object takes this object's place\n\t\t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\t\t\tobjects[ index ] = lastCachedObject;\n\n\t\t\t\t\t\t// last object goes to the activated slot and pop\n\t\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = firstActiveIndex;\n\t\t\t\t\t\tobjects[ firstActiveIndex ] = lastObject;\n\t\t\t\t\t\tobjects.pop();\n\n\t\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n\t\t\t\t\t\t\t\tlast = bindingsForPath[ lastIndex ];\n\n\t\t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\t\t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = last;\n\t\t\t\t\t\t\tbindingsForPath.pop();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// object is active, just swap with the last and pop\n\n\t\t\t\t\t\tvar lastIndex = -- nObjects,\n\t\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n\t\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = index;\n\t\t\t\t\t\tobjects[ index ] = lastObject;\n\t\t\t\t\t\tobjects.pop();\n\n\t\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\t\tvar bindingsForPath = bindings[ j ];\n\n\t\t\t\t\t\t\tbindingsForPath[ index ] = bindingsForPath[ lastIndex ];\n\t\t\t\t\t\t\tbindingsForPath.pop();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} // cached or active\n\n\t\t\t\t} // if object is known\n\n\t\t\t} // for arguments\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t\t},\n\n\t\t// Internal interface used by befriended PropertyBinding.Composite:\n\n\t\tsubscribe_: function ( path, parsedPath ) {\n\n\t\t\t// returns an array of bindings for the given path that is changed\n\t\t\t// according to the contained objects in the group\n\n\t\t\tvar indicesByPath = this._bindingsIndicesByPath,\n\t\t\t\tindex = indicesByPath[ path ],\n\t\t\t\tbindings = this._bindings;\n\n\t\t\tif ( index !== undefined ) { return bindings[ index ]; }\n\n\t\t\tvar paths = this._paths,\n\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\tobjects = this._objects,\n\t\t\t\tnObjects = objects.length,\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\tbindingsForPath = new Array( nObjects );\n\n\t\t\tindex = bindings.length;\n\n\t\t\tindicesByPath[ path ] = index;\n\n\t\t\tpaths.push( path );\n\t\t\tparsedPaths.push( parsedPath );\n\t\t\tbindings.push( bindingsForPath );\n\n\t\t\tfor ( var i = nCachedObjects, n = objects.length; i !== n; ++ i ) {\n\n\t\t\t\tvar object = objects[ i ];\n\t\t\t\tbindingsForPath[ i ] = new PropertyBinding( object, path, parsedPath );\n\n\t\t\t}\n\n\t\t\treturn bindingsForPath;\n\n\t\t},\n\n\t\tunsubscribe_: function ( path ) {\n\n\t\t\t// tells the group to forget about a property path and no longer\n\t\t\t// update the array previously obtained with 'subscribe_'\n\n\t\t\tvar indicesByPath = this._bindingsIndicesByPath,\n\t\t\t\tindex = indicesByPath[ path ];\n\n\t\t\tif ( index !== undefined ) {\n\n\t\t\t\tvar paths = this._paths,\n\t\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\tlastBindingsIndex = bindings.length - 1,\n\t\t\t\t\tlastBindings = bindings[ lastBindingsIndex ],\n\t\t\t\t\tlastBindingsPath = path[ lastBindingsIndex ];\n\n\t\t\t\tindicesByPath[ lastBindingsPath ] = index;\n\n\t\t\t\tbindings[ index ] = lastBindings;\n\t\t\t\tbindings.pop();\n\n\t\t\t\tparsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];\n\t\t\t\tparsedPaths.pop();\n\n\t\t\t\tpaths[ index ] = paths[ lastBindingsIndex ];\n\t\t\t\tpaths.pop();\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * Action provided by AnimationMixer for scheduling clip playback on specific\n\t * objects.\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t *\n\t */\n\n\tfunction AnimationAction( mixer, clip, localRoot ) {\n\n\t\tthis._mixer = mixer;\n\t\tthis._clip = clip;\n\t\tthis._localRoot = localRoot || null;\n\n\t\tvar tracks = clip.tracks,\n\t\t\tnTracks = tracks.length,\n\t\t\tinterpolants = new Array( nTracks );\n\n\t\tvar interpolantSettings = {\n\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\tendingEnd: ZeroCurvatureEnding\n\t\t};\n\n\t\tfor ( var i = 0; i !== nTracks; ++ i ) {\n\n\t\t\tvar interpolant = tracks[ i ].createInterpolant( null );\n\t\t\tinterpolants[ i ] = interpolant;\n\t\t\tinterpolant.settings = interpolantSettings;\n\n\t\t}\n\n\t\tthis._interpolantSettings = interpolantSettings;\n\n\t\tthis._interpolants = interpolants; // bound by the mixer\n\n\t\t// inside: PropertyMixer (managed by the mixer)\n\t\tthis._propertyBindings = new Array( nTracks );\n\n\t\tthis._cacheIndex = null; // for the memory manager\n\t\tthis._byClipCacheIndex = null; // for the memory manager\n\n\t\tthis._timeScaleInterpolant = null;\n\t\tthis._weightInterpolant = null;\n\n\t\tthis.loop = LoopRepeat;\n\t\tthis._loopCount = - 1;\n\n\t\t// global mixer time when the action is to be started\n\t\t// it's set back to 'null' upon start of the action\n\t\tthis._startTime = null;\n\n\t\t// scaled local time of the action\n\t\t// gets clamped or wrapped to 0..clip.duration according to loop\n\t\tthis.time = 0;\n\n\t\tthis.timeScale = 1;\n\t\tthis._effectiveTimeScale = 1;\n\n\t\tthis.weight = 1;\n\t\tthis._effectiveWeight = 1;\n\n\t\tthis.repetitions = Infinity; // no. of repetitions when looping\n\n\t\tthis.paused = false; // true -> zero effective time scale\n\t\tthis.enabled = true; // false -> zero effective weight\n\n\t\tthis.clampWhenFinished = false;// keep feeding the last frame?\n\n\t\tthis.zeroSlopeAtStart = true;// for smooth interpolation w/o separate\n\t\tthis.zeroSlopeAtEnd = true;// clips for start, loop and end\n\n\t}\n\n\tObject.assign( AnimationAction.prototype, {\n\n\t\t// State & Scheduling\n\n\t\tplay: function () {\n\n\t\t\tthis._mixer._activateAction( this );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tstop: function () {\n\n\t\t\tthis._mixer._deactivateAction( this );\n\n\t\t\treturn this.reset();\n\n\t\t},\n\n\t\treset: function () {\n\n\t\t\tthis.paused = false;\n\t\t\tthis.enabled = true;\n\n\t\t\tthis.time = 0; // restart clip\n\t\t\tthis._loopCount = - 1;// forget previous loops\n\t\t\tthis._startTime = null;// forget scheduling\n\n\t\t\treturn this.stopFading().stopWarping();\n\n\t\t},\n\n\t\tisRunning: function () {\n\n\t\t\treturn this.enabled && ! this.paused && this.timeScale !== 0 &&\n\t\t\t\tthis._startTime === null && this._mixer._isActiveAction( this );\n\n\t\t},\n\n\t\t// return true when play has been called\n\t\tisScheduled: function () {\n\n\t\t\treturn this._mixer._isActiveAction( this );\n\n\t\t},\n\n\t\tstartAt: function ( time ) {\n\n\t\t\tthis._startTime = time;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetLoop: function ( mode, repetitions ) {\n\n\t\t\tthis.loop = mode;\n\t\t\tthis.repetitions = repetitions;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Weight\n\n\t\t// set the weight stopping any scheduled fading\n\t\t// although .enabled = false yields an effective weight of zero, this\n\t\t// method does *not* change .enabled, because it would be confusing\n\t\tsetEffectiveWeight: function ( weight ) {\n\n\t\t\tthis.weight = weight;\n\n\t\t\t// note: same logic as when updated at runtime\n\t\t\tthis._effectiveWeight = this.enabled ? weight : 0;\n\n\t\t\treturn this.stopFading();\n\n\t\t},\n\n\t\t// return the weight considering fading and .enabled\n\t\tgetEffectiveWeight: function () {\n\n\t\t\treturn this._effectiveWeight;\n\n\t\t},\n\n\t\tfadeIn: function ( duration ) {\n\n\t\t\treturn this._scheduleFading( duration, 0, 1 );\n\n\t\t},\n\n\t\tfadeOut: function ( duration ) {\n\n\t\t\treturn this._scheduleFading( duration, 1, 0 );\n\n\t\t},\n\n\t\tcrossFadeFrom: function ( fadeOutAction, duration, warp ) {\n\n\t\t\tfadeOutAction.fadeOut( duration );\n\t\t\tthis.fadeIn( duration );\n\n\t\t\tif ( warp ) {\n\n\t\t\t\tvar fadeInDuration = this._clip.duration,\n\t\t\t\t\tfadeOutDuration = fadeOutAction._clip.duration,\n\n\t\t\t\t\tstartEndRatio = fadeOutDuration / fadeInDuration,\n\t\t\t\t\tendStartRatio = fadeInDuration / fadeOutDuration;\n\n\t\t\t\tfadeOutAction.warp( 1.0, startEndRatio, duration );\n\t\t\t\tthis.warp( endStartRatio, 1.0, duration );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcrossFadeTo: function ( fadeInAction, duration, warp ) {\n\n\t\t\treturn fadeInAction.crossFadeFrom( this, duration, warp );\n\n\t\t},\n\n\t\tstopFading: function () {\n\n\t\t\tvar weightInterpolant = this._weightInterpolant;\n\n\t\t\tif ( weightInterpolant !== null ) {\n\n\t\t\t\tthis._weightInterpolant = null;\n\t\t\t\tthis._mixer._takeBackControlInterpolant( weightInterpolant );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Time Scale Control\n\n\t\t// set the time scale stopping any scheduled warping\n\t\t// although .paused = true yields an effective time scale of zero, this\n\t\t// method does *not* change .paused, because it would be confusing\n\t\tsetEffectiveTimeScale: function ( timeScale ) {\n\n\t\t\tthis.timeScale = timeScale;\n\t\t\tthis._effectiveTimeScale = this.paused ? 0 : timeScale;\n\n\t\t\treturn this.stopWarping();\n\n\t\t},\n\n\t\t// return the time scale considering warping and .paused\n\t\tgetEffectiveTimeScale: function () {\n\n\t\t\treturn this._effectiveTimeScale;\n\n\t\t},\n\n\t\tsetDuration: function ( duration ) {\n\n\t\t\tthis.timeScale = this._clip.duration / duration;\n\n\t\t\treturn this.stopWarping();\n\n\t\t},\n\n\t\tsyncWith: function ( action ) {\n\n\t\t\tthis.time = action.time;\n\t\t\tthis.timeScale = action.timeScale;\n\n\t\t\treturn this.stopWarping();\n\n\t\t},\n\n\t\thalt: function ( duration ) {\n\n\t\t\treturn this.warp( this._effectiveTimeScale, 0, duration );\n\n\t\t},\n\n\t\twarp: function ( startTimeScale, endTimeScale, duration ) {\n\n\t\t\tvar mixer = this._mixer, now = mixer.time,\n\t\t\t\tinterpolant = this._timeScaleInterpolant,\n\n\t\t\t\ttimeScale = this.timeScale;\n\n\t\t\tif ( interpolant === null ) {\n\n\t\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\t\tthis._timeScaleInterpolant = interpolant;\n\n\t\t\t}\n\n\t\t\tvar times = interpolant.parameterPositions,\n\t\t\t\tvalues = interpolant.sampleValues;\n\n\t\t\ttimes[ 0 ] = now;\n\t\t\ttimes[ 1 ] = now + duration;\n\n\t\t\tvalues[ 0 ] = startTimeScale / timeScale;\n\t\t\tvalues[ 1 ] = endTimeScale / timeScale;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tstopWarping: function () {\n\n\t\t\tvar timeScaleInterpolant = this._timeScaleInterpolant;\n\n\t\t\tif ( timeScaleInterpolant !== null ) {\n\n\t\t\t\tthis._timeScaleInterpolant = null;\n\t\t\t\tthis._mixer._takeBackControlInterpolant( timeScaleInterpolant );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Object Accessors\n\n\t\tgetMixer: function () {\n\n\t\t\treturn this._mixer;\n\n\t\t},\n\n\t\tgetClip: function () {\n\n\t\t\treturn this._clip;\n\n\t\t},\n\n\t\tgetRoot: function () {\n\n\t\t\treturn this._localRoot || this._mixer._root;\n\n\t\t},\n\n\t\t// Interna\n\n\t\t_update: function ( time, deltaTime, timeDirection, accuIndex ) {\n\n\t\t\t// called by the mixer\n\n\t\t\tif ( ! this.enabled ) {\n\n\t\t\t\t// call ._updateWeight() to update ._effectiveWeight\n\n\t\t\t\tthis._updateWeight( time );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar startTime = this._startTime;\n\n\t\t\tif ( startTime !== null ) {\n\n\t\t\t\t// check for scheduled start of action\n\n\t\t\t\tvar timeRunning = ( time - startTime ) * timeDirection;\n\t\t\t\tif ( timeRunning < 0 || timeDirection === 0 ) {\n\n\t\t\t\t\treturn; // yet to come / don't decide when delta = 0\n\n\t\t\t\t}\n\n\t\t\t\t// start\n\n\t\t\t\tthis._startTime = null; // unschedule\n\t\t\t\tdeltaTime = timeDirection * timeRunning;\n\n\t\t\t}\n\n\t\t\t// apply time scale and advance time\n\n\t\t\tdeltaTime *= this._updateTimeScale( time );\n\t\t\tvar clipTime = this._updateTime( deltaTime );\n\n\t\t\t// note: _updateTime may disable the action resulting in\n\t\t\t// an effective weight of 0\n\n\t\t\tvar weight = this._updateWeight( time );\n\n\t\t\tif ( weight > 0 ) {\n\n\t\t\t\tvar interpolants = this._interpolants;\n\t\t\t\tvar propertyMixers = this._propertyBindings;\n\n\t\t\t\tfor ( var j = 0, m = interpolants.length; j !== m; ++ j ) {\n\n\t\t\t\t\tinterpolants[ j ].evaluate( clipTime );\n\t\t\t\t\tpropertyMixers[ j ].accumulate( accuIndex, weight );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t_updateWeight: function ( time ) {\n\n\t\t\tvar weight = 0;\n\n\t\t\tif ( this.enabled ) {\n\n\t\t\t\tweight = this.weight;\n\t\t\t\tvar interpolant = this._weightInterpolant;\n\n\t\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\t\tweight *= interpolantValue;\n\n\t\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\t\tthis.stopFading();\n\n\t\t\t\t\t\tif ( interpolantValue === 0 ) {\n\n\t\t\t\t\t\t\t// faded out, disable\n\t\t\t\t\t\t\tthis.enabled = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._effectiveWeight = weight;\n\t\t\treturn weight;\n\n\t\t},\n\n\t\t_updateTimeScale: function ( time ) {\n\n\t\t\tvar timeScale = 0;\n\n\t\t\tif ( ! this.paused ) {\n\n\t\t\t\ttimeScale = this.timeScale;\n\n\t\t\t\tvar interpolant = this._timeScaleInterpolant;\n\n\t\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\t\ttimeScale *= interpolantValue;\n\n\t\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\t\tthis.stopWarping();\n\n\t\t\t\t\t\tif ( timeScale === 0 ) {\n\n\t\t\t\t\t\t\t// motion has halted, pause\n\t\t\t\t\t\t\tthis.paused = true;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// warp done - apply final time scale\n\t\t\t\t\t\t\tthis.timeScale = timeScale;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._effectiveTimeScale = timeScale;\n\t\t\treturn timeScale;\n\n\t\t},\n\n\t\t_updateTime: function ( deltaTime ) {\n\n\t\t\tvar time = this.time + deltaTime;\n\t\t\tvar duration = this._clip.duration;\n\t\t\tvar loop = this.loop;\n\t\t\tvar loopCount = this._loopCount;\n\n\t\t\tvar pingPong = ( loop === LoopPingPong );\n\n\t\t\tif ( deltaTime === 0 ) {\n\n\t\t\t\tif ( loopCount === - 1 ) { return time; }\n\n\t\t\t\treturn ( pingPong && ( loopCount & 1 ) === 1 ) ? duration - time : time;\n\n\t\t\t}\n\n\t\t\tif ( loop === LoopOnce ) {\n\n\t\t\t\tif ( loopCount === - 1 ) {\n\n\t\t\t\t\t// just started\n\n\t\t\t\t\tthis._loopCount = 0;\n\t\t\t\t\tthis._setEndings( true, true, false );\n\n\t\t\t\t}\n\n\t\t\t\thandle_stop: {\n\n\t\t\t\t\tif ( time >= duration ) {\n\n\t\t\t\t\t\ttime = duration;\n\n\t\t\t\t\t} else if ( time < 0 ) {\n\n\t\t\t\t\t\ttime = 0;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\t\tbreak handle_stop;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this.clampWhenFinished ) { this.paused = true; }\n\t\t\t\t\telse { this.enabled = false; }\n\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\t\tdirection: deltaTime < 0 ? - 1 : 1\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t} else { // repetitive Repeat or PingPong\n\n\t\t\t\tif ( loopCount === - 1 ) {\n\n\t\t\t\t\t// just started\n\n\t\t\t\t\tif ( deltaTime >= 0 ) {\n\n\t\t\t\t\t\tloopCount = 0;\n\n\t\t\t\t\t\tthis._setEndings( true, this.repetitions === 0, pingPong );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// when looping in reverse direction, the initial\n\t\t\t\t\t\t// transition through zero counts as a repetition,\n\t\t\t\t\t\t// so leave loopCount at -1\n\n\t\t\t\t\t\tthis._setEndings( this.repetitions === 0, true, pingPong );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( time >= duration || time < 0 ) {\n\n\t\t\t\t\t// wrap around\n\n\t\t\t\t\tvar loopDelta = Math.floor( time / duration ); // signed\n\t\t\t\t\ttime -= duration * loopDelta;\n\n\t\t\t\t\tloopCount += Math.abs( loopDelta );\n\n\t\t\t\t\tvar pending = this.repetitions - loopCount;\n\n\t\t\t\t\tif ( pending <= 0 ) {\n\n\t\t\t\t\t\t// have to stop (switch state, clamp time, fire event)\n\n\t\t\t\t\t\tif ( this.clampWhenFinished ) { this.paused = true; }\n\t\t\t\t\t\telse { this.enabled = false; }\n\n\t\t\t\t\t\ttime = deltaTime > 0 ? duration : 0;\n\n\t\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\t\t\tdirection: deltaTime > 0 ? 1 : - 1\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// keep running\n\n\t\t\t\t\t\tif ( pending === 1 ) {\n\n\t\t\t\t\t\t\t// entering the last round\n\n\t\t\t\t\t\t\tvar atStart = deltaTime < 0;\n\t\t\t\t\t\t\tthis._setEndings( atStart, ! atStart, pingPong );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tthis._setEndings( false, false, pingPong );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis._loopCount = loopCount;\n\n\t\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\t\ttype: 'loop', action: this, loopDelta: loopDelta\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t}\n\n\t\t\t\tif ( pingPong && ( loopCount & 1 ) === 1 ) {\n\n\t\t\t\t\t// invert time for the \"pong round\"\n\n\t\t\t\t\treturn duration - time;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn time;\n\n\t\t},\n\n\t\t_setEndings: function ( atStart, atEnd, pingPong ) {\n\n\t\t\tvar settings = this._interpolantSettings;\n\n\t\t\tif ( pingPong ) {\n\n\t\t\t\tsettings.endingStart = ZeroSlopeEnding;\n\t\t\t\tsettings.endingEnd = ZeroSlopeEnding;\n\n\t\t\t} else {\n\n\t\t\t\t// assuming for LoopOnce atStart == atEnd == true\n\n\t\t\t\tif ( atStart ) {\n\n\t\t\t\t\tsettings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tsettings.endingStart = WrapAroundEnding;\n\n\t\t\t\t}\n\n\t\t\t\tif ( atEnd ) {\n\n\t\t\t\t\tsettings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tsettings.endingEnd \t = WrapAroundEnding;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t_scheduleFading: function ( duration, weightNow, weightThen ) {\n\n\t\t\tvar mixer = this._mixer, now = mixer.time,\n\t\t\t\tinterpolant = this._weightInterpolant;\n\n\t\t\tif ( interpolant === null ) {\n\n\t\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\t\tthis._weightInterpolant = interpolant;\n\n\t\t\t}\n\n\t\t\tvar times = interpolant.parameterPositions,\n\t\t\t\tvalues = interpolant.sampleValues;\n\n\t\t\ttimes[ 0 ] = now;\n\t\t\tvalues[ 0 ] = weightNow;\n\t\t\ttimes[ 1 ] = now + duration;\n\t\t\tvalues[ 1 ] = weightThen;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * Player for AnimationClips.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction AnimationMixer( root ) {\n\n\t\tthis._root = root;\n\t\tthis._initMemoryManager();\n\t\tthis._accuIndex = 0;\n\n\t\tthis.time = 0;\n\n\t\tthis.timeScale = 1.0;\n\n\t}\n\n\tAnimationMixer.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: AnimationMixer,\n\n\t\t_bindAction: function ( action, prototypeAction ) {\n\n\t\t\tvar root = action._localRoot || this._root,\n\t\t\t\ttracks = action._clip.tracks,\n\t\t\t\tnTracks = tracks.length,\n\t\t\t\tbindings = action._propertyBindings,\n\t\t\t\tinterpolants = action._interpolants,\n\t\t\t\trootUuid = root.uuid,\n\t\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\tbindingsByName = bindingsByRoot[ rootUuid ];\n\n\t\t\tif ( bindingsByName === undefined ) {\n\n\t\t\t\tbindingsByName = {};\n\t\t\t\tbindingsByRoot[ rootUuid ] = bindingsByName;\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i !== nTracks; ++ i ) {\n\n\t\t\t\tvar track = tracks[ i ],\n\t\t\t\t\ttrackName = track.name,\n\t\t\t\t\tbinding = bindingsByName[ trackName ];\n\n\t\t\t\tif ( binding !== undefined ) {\n\n\t\t\t\t\tbindings[ i ] = binding;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbinding = bindings[ i ];\n\n\t\t\t\t\tif ( binding !== undefined ) {\n\n\t\t\t\t\t\t// existing binding, make sure the cache knows\n\n\t\t\t\t\t\tif ( binding._cacheIndex === null ) {\n\n\t\t\t\t\t\t\t++ binding.referenceCount;\n\t\t\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar path = prototypeAction && prototypeAction.\n\t\t\t\t\t\t_propertyBindings[ i ].binding.parsedPath;\n\n\t\t\t\t\tbinding = new PropertyMixer(\n\t\t\t\t\t\tPropertyBinding.create( root, trackName, path ),\n\t\t\t\t\t\ttrack.ValueTypeName, track.getValueSize() );\n\n\t\t\t\t\t++ binding.referenceCount;\n\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n\t\t\t\t\tbindings[ i ] = binding;\n\n\t\t\t\t}\n\n\t\t\t\tinterpolants[ i ].resultBuffer = binding.buffer;\n\n\t\t\t}\n\n\t\t},\n\n\t\t_activateAction: function ( action ) {\n\n\t\t\tif ( ! this._isActiveAction( action ) ) {\n\n\t\t\t\tif ( action._cacheIndex === null ) {\n\n\t\t\t\t\t// this action has been forgotten by the cache, but the user\n\t\t\t\t\t// appears to be still using it -> rebind\n\n\t\t\t\t\tvar rootUuid = ( action._localRoot || this._root ).uuid,\n\t\t\t\t\t\tclipUuid = action._clip.uuid,\n\t\t\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n\t\t\t\t\tthis._bindAction( action,\n\t\t\t\t\t\tactionsForClip && actionsForClip.knownActions[ 0 ] );\n\n\t\t\t\t\tthis._addInactiveAction( action, clipUuid, rootUuid );\n\n\t\t\t\t}\n\n\t\t\t\tvar bindings = action._propertyBindings;\n\n\t\t\t\t// increment reference counts / sort out state\n\t\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar binding = bindings[ i ];\n\n\t\t\t\t\tif ( binding.useCount ++ === 0 ) {\n\n\t\t\t\t\t\tthis._lendBinding( binding );\n\t\t\t\t\t\tbinding.saveOriginalState();\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis._lendAction( action );\n\n\t\t\t}\n\n\t\t},\n\n\t\t_deactivateAction: function ( action ) {\n\n\t\t\tif ( this._isActiveAction( action ) ) {\n\n\t\t\t\tvar bindings = action._propertyBindings;\n\n\t\t\t\t// decrement reference counts / sort out state\n\t\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar binding = bindings[ i ];\n\n\t\t\t\t\tif ( -- binding.useCount === 0 ) {\n\n\t\t\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\t\t\tthis._takeBackBinding( binding );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis._takeBackAction( action );\n\n\t\t\t}\n\n\t\t},\n\n\t\t// Memory manager\n\n\t\t_initMemoryManager: function () {\n\n\t\t\tthis._actions = []; // 'nActiveActions' followed by inactive ones\n\t\t\tthis._nActiveActions = 0;\n\n\t\t\tthis._actionsByClip = {};\n\t\t\t// inside:\n\t\t\t// {\n\t\t\t// \tknownActions: Array< AnimationAction > - used as prototypes\n\t\t\t// \tactionByRoot: AnimationAction - lookup\n\t\t\t// }\n\n\n\t\t\tthis._bindings = []; // 'nActiveBindings' followed by inactive ones\n\t\t\tthis._nActiveBindings = 0;\n\n\t\t\tthis._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\n\n\n\t\t\tthis._controlInterpolants = []; // same game as above\n\t\t\tthis._nActiveControlInterpolants = 0;\n\n\t\t\tvar scope = this;\n\n\t\t\tthis.stats = {\n\n\t\t\t\tactions: {\n\t\t\t\t\tget total() {\n\n\t\t\t\t\t\treturn scope._actions.length;\n\n\t\t\t\t\t},\n\t\t\t\t\tget inUse() {\n\n\t\t\t\t\t\treturn scope._nActiveActions;\n\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tbindings: {\n\t\t\t\t\tget total() {\n\n\t\t\t\t\t\treturn scope._bindings.length;\n\n\t\t\t\t\t},\n\t\t\t\t\tget inUse() {\n\n\t\t\t\t\t\treturn scope._nActiveBindings;\n\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tcontrolInterpolants: {\n\t\t\t\t\tget total() {\n\n\t\t\t\t\t\treturn scope._controlInterpolants.length;\n\n\t\t\t\t\t},\n\t\t\t\t\tget inUse() {\n\n\t\t\t\t\t\treturn scope._nActiveControlInterpolants;\n\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t},\n\n\t\t// Memory management for AnimationAction objects\n\n\t\t_isActiveAction: function ( action ) {\n\n\t\t\tvar index = action._cacheIndex;\n\t\t\treturn index !== null && index < this._nActiveActions;\n\n\t\t},\n\n\t\t_addInactiveAction: function ( action, clipUuid, rootUuid ) {\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\n\t\t\tif ( actionsForClip === undefined ) {\n\n\t\t\t\tactionsForClip = {\n\n\t\t\t\t\tknownActions: [ action ],\n\t\t\t\t\tactionByRoot: {}\n\n\t\t\t\t};\n\n\t\t\t\taction._byClipCacheIndex = 0;\n\n\t\t\t\tactionsByClip[ clipUuid ] = actionsForClip;\n\n\t\t\t} else {\n\n\t\t\t\tvar knownActions = actionsForClip.knownActions;\n\n\t\t\t\taction._byClipCacheIndex = knownActions.length;\n\t\t\t\tknownActions.push( action );\n\n\t\t\t}\n\n\t\t\taction._cacheIndex = actions.length;\n\t\t\tactions.push( action );\n\n\t\t\tactionsForClip.actionByRoot[ rootUuid ] = action;\n\n\t\t},\n\n\t\t_removeInactiveAction: function ( action ) {\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ],\n\t\t\t\tcacheIndex = action._cacheIndex;\n\n\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\t\tactions.pop();\n\n\t\t\taction._cacheIndex = null;\n\n\n\t\t\tvar clipUuid = action._clip.uuid,\n\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\tactionsForClip = actionsByClip[ clipUuid ],\n\t\t\t\tknownActionsForClip = actionsForClip.knownActions,\n\n\t\t\t\tlastKnownAction =\n\t\t\t\t\tknownActionsForClip[ knownActionsForClip.length - 1 ],\n\n\t\t\t\tbyClipCacheIndex = action._byClipCacheIndex;\n\n\t\t\tlastKnownAction._byClipCacheIndex = byClipCacheIndex;\n\t\t\tknownActionsForClip[ byClipCacheIndex ] = lastKnownAction;\n\t\t\tknownActionsForClip.pop();\n\n\t\t\taction._byClipCacheIndex = null;\n\n\n\t\t\tvar actionByRoot = actionsForClip.actionByRoot,\n\t\t\t\trootUuid = ( action._localRoot || this._root ).uuid;\n\n\t\t\tdelete actionByRoot[ rootUuid ];\n\n\t\t\tif ( knownActionsForClip.length === 0 ) {\n\n\t\t\t\tdelete actionsByClip[ clipUuid ];\n\n\t\t\t}\n\n\t\t\tthis._removeInactiveBindingsForAction( action );\n\n\t\t},\n\n\t\t_removeInactiveBindingsForAction: function ( action ) {\n\n\t\t\tvar bindings = action._propertyBindings;\n\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tvar binding = bindings[ i ];\n\n\t\t\t\tif ( -- binding.referenceCount === 0 ) {\n\n\t\t\t\t\tthis._removeInactiveBinding( binding );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t_lendAction: function ( action ) {\n\n\t\t\t// [ active actions |  inactive actions  ]\n\t\t\t// [  active actions >| inactive actions ]\n\t\t\t//                 s        a\n\t\t\t//                  <-swap->\n\t\t\t//                 a        s\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tprevIndex = action._cacheIndex,\n\n\t\t\t\tlastActiveIndex = this._nActiveActions ++,\n\n\t\t\t\tfirstInactiveAction = actions[ lastActiveIndex ];\n\n\t\t\taction._cacheIndex = lastActiveIndex;\n\t\t\tactions[ lastActiveIndex ] = action;\n\n\t\t\tfirstInactiveAction._cacheIndex = prevIndex;\n\t\t\tactions[ prevIndex ] = firstInactiveAction;\n\n\t\t},\n\n\t\t_takeBackAction: function ( action ) {\n\n\t\t\t// [  active actions  | inactive actions ]\n\t\t\t// [ active actions |< inactive actions  ]\n\t\t\t//        a        s\n\t\t\t//         <-swap->\n\t\t\t//        s        a\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tprevIndex = action._cacheIndex,\n\n\t\t\t\tfirstInactiveIndex = -- this._nActiveActions,\n\n\t\t\t\tlastActiveAction = actions[ firstInactiveIndex ];\n\n\t\t\taction._cacheIndex = firstInactiveIndex;\n\t\t\tactions[ firstInactiveIndex ] = action;\n\n\t\t\tlastActiveAction._cacheIndex = prevIndex;\n\t\t\tactions[ prevIndex ] = lastActiveAction;\n\n\t\t},\n\n\t\t// Memory management for PropertyMixer objects\n\n\t\t_addInactiveBinding: function ( binding, rootUuid, trackName ) {\n\n\t\t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\n\t\t\t\tbindings = this._bindings;\n\n\t\t\tif ( bindingByName === undefined ) {\n\n\t\t\t\tbindingByName = {};\n\t\t\t\tbindingsByRoot[ rootUuid ] = bindingByName;\n\n\t\t\t}\n\n\t\t\tbindingByName[ trackName ] = binding;\n\n\t\t\tbinding._cacheIndex = bindings.length;\n\t\t\tbindings.push( binding );\n\n\t\t},\n\n\t\t_removeInactiveBinding: function ( binding ) {\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tpropBinding = binding.binding,\n\t\t\t\trootUuid = propBinding.rootNode.uuid,\n\t\t\t\ttrackName = propBinding.path,\n\t\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\n\t\t\t\tlastInactiveBinding = bindings[ bindings.length - 1 ],\n\t\t\t\tcacheIndex = binding._cacheIndex;\n\n\t\t\tlastInactiveBinding._cacheIndex = cacheIndex;\n\t\t\tbindings[ cacheIndex ] = lastInactiveBinding;\n\t\t\tbindings.pop();\n\n\t\t\tdelete bindingByName[ trackName ];\n\n\t\t\tif ( Object.keys( bindingByName ).length === 0 ) {\n\n\t\t\t\tdelete bindingsByRoot[ rootUuid ];\n\n\t\t\t}\n\n\t\t},\n\n\t\t_lendBinding: function ( binding ) {\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tprevIndex = binding._cacheIndex,\n\n\t\t\t\tlastActiveIndex = this._nActiveBindings ++,\n\n\t\t\t\tfirstInactiveBinding = bindings[ lastActiveIndex ];\n\n\t\t\tbinding._cacheIndex = lastActiveIndex;\n\t\t\tbindings[ lastActiveIndex ] = binding;\n\n\t\t\tfirstInactiveBinding._cacheIndex = prevIndex;\n\t\t\tbindings[ prevIndex ] = firstInactiveBinding;\n\n\t\t},\n\n\t\t_takeBackBinding: function ( binding ) {\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tprevIndex = binding._cacheIndex,\n\n\t\t\t\tfirstInactiveIndex = -- this._nActiveBindings,\n\n\t\t\t\tlastActiveBinding = bindings[ firstInactiveIndex ];\n\n\t\t\tbinding._cacheIndex = firstInactiveIndex;\n\t\t\tbindings[ firstInactiveIndex ] = binding;\n\n\t\t\tlastActiveBinding._cacheIndex = prevIndex;\n\t\t\tbindings[ prevIndex ] = lastActiveBinding;\n\n\t\t},\n\n\n\t\t// Memory management of Interpolants for weight and time scale\n\n\t\t_lendControlInterpolant: function () {\n\n\t\t\tvar interpolants = this._controlInterpolants,\n\t\t\t\tlastActiveIndex = this._nActiveControlInterpolants ++,\n\t\t\t\tinterpolant = interpolants[ lastActiveIndex ];\n\n\t\t\tif ( interpolant === undefined ) {\n\n\t\t\t\tinterpolant = new LinearInterpolant(\n\t\t\t\t\tnew Float32Array( 2 ), new Float32Array( 2 ),\n\t\t\t\t\t1, this._controlInterpolantsResultBuffer );\n\n\t\t\t\tinterpolant.__cacheIndex = lastActiveIndex;\n\t\t\t\tinterpolants[ lastActiveIndex ] = interpolant;\n\n\t\t\t}\n\n\t\t\treturn interpolant;\n\n\t\t},\n\n\t\t_takeBackControlInterpolant: function ( interpolant ) {\n\n\t\t\tvar interpolants = this._controlInterpolants,\n\t\t\t\tprevIndex = interpolant.__cacheIndex,\n\n\t\t\t\tfirstInactiveIndex = -- this._nActiveControlInterpolants,\n\n\t\t\t\tlastActiveInterpolant = interpolants[ firstInactiveIndex ];\n\n\t\t\tinterpolant.__cacheIndex = firstInactiveIndex;\n\t\t\tinterpolants[ firstInactiveIndex ] = interpolant;\n\n\t\t\tlastActiveInterpolant.__cacheIndex = prevIndex;\n\t\t\tinterpolants[ prevIndex ] = lastActiveInterpolant;\n\n\t\t},\n\n\t\t_controlInterpolantsResultBuffer: new Float32Array( 1 ),\n\n\t\t// return an action for a clip optionally using a custom root target\n\t\t// object (this method allocates a lot of dynamic memory in case a\n\t\t// previously unknown clip/root combination is specified)\n\t\tclipAction: function ( clip, optionalRoot ) {\n\n\t\t\tvar root = optionalRoot || this._root,\n\t\t\t\trootUuid = root.uuid,\n\n\t\t\t\tclipObject = typeof clip === 'string' ?\n\t\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\n\n\t\t\t\tclipUuid = clipObject !== null ? clipObject.uuid : clip,\n\n\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ],\n\t\t\t\tprototypeAction = null;\n\n\t\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\t\tvar existingAction =\n\t\t\t\t\t\tactionsForClip.actionByRoot[ rootUuid ];\n\n\t\t\t\tif ( existingAction !== undefined ) {\n\n\t\t\t\t\treturn existingAction;\n\n\t\t\t\t}\n\n\t\t\t\t// we know the clip, so we don't have to parse all\n\t\t\t\t// the bindings again but can just copy\n\t\t\t\tprototypeAction = actionsForClip.knownActions[ 0 ];\n\n\t\t\t\t// also, take the clip from the prototype action\n\t\t\t\tif ( clipObject === null )\n\t\t\t\t\t{ clipObject = prototypeAction._clip; }\n\n\t\t\t}\n\n\t\t\t// clip must be known when specified via string\n\t\t\tif ( clipObject === null ) { return null; }\n\n\t\t\t// allocate all resources required to run it\n\t\t\tvar newAction = new AnimationAction( this, clipObject, optionalRoot );\n\n\t\t\tthis._bindAction( newAction, prototypeAction );\n\n\t\t\t// and make the action known to the memory manager\n\t\t\tthis._addInactiveAction( newAction, clipUuid, rootUuid );\n\n\t\t\treturn newAction;\n\n\t\t},\n\n\t\t// get an existing action\n\t\texistingAction: function ( clip, optionalRoot ) {\n\n\t\t\tvar root = optionalRoot || this._root,\n\t\t\t\trootUuid = root.uuid,\n\n\t\t\t\tclipObject = typeof clip === 'string' ?\n\t\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\n\n\t\t\t\tclipUuid = clipObject ? clipObject.uuid : clip,\n\n\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n\t\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\t\treturn actionsForClip.actionByRoot[ rootUuid ] || null;\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t},\n\n\t\t// deactivates all previously scheduled actions\n\t\tstopAllAction: function () {\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tnActions = this._nActiveActions,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tnBindings = this._nActiveBindings;\n\n\t\t\tthis._nActiveActions = 0;\n\t\t\tthis._nActiveBindings = 0;\n\n\t\t\tfor ( var i = 0; i !== nActions; ++ i ) {\n\n\t\t\t\tactions[ i ].reset();\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i !== nBindings; ++ i ) {\n\n\t\t\t\tbindings[ i ].useCount = 0;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// advance the time and update apply the animation\n\t\tupdate: function ( deltaTime ) {\n\n\t\t\tdeltaTime *= this.timeScale;\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tnActions = this._nActiveActions,\n\n\t\t\t\ttime = this.time += deltaTime,\n\t\t\t\ttimeDirection = Math.sign( deltaTime ),\n\n\t\t\t\taccuIndex = this._accuIndex ^= 1;\n\n\t\t\t// run active actions\n\n\t\t\tfor ( var i = 0; i !== nActions; ++ i ) {\n\n\t\t\t\tvar action = actions[ i ];\n\n\t\t\t\taction._update( time, deltaTime, timeDirection, accuIndex );\n\n\t\t\t}\n\n\t\t\t// update scene graph\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tnBindings = this._nActiveBindings;\n\n\t\t\tfor ( var i = 0; i !== nBindings; ++ i ) {\n\n\t\t\t\tbindings[ i ].apply( accuIndex );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Allows you to seek to a specific time in an animation.\n\t\tsetTime: function ( timeInSeconds ) {\n\n\t\t\tthis.time = 0; // Zero out time attribute for AnimationMixer object;\n\t\t\tfor ( var i = 0; i < this._actions.length; i ++ ) {\n\n\t\t\t\tthis._actions[ i ].time = 0; // Zero out time attribute for all associated AnimationAction objects.\n\n\t\t\t}\n\n\t\t\treturn this.update( timeInSeconds ); // Update used to set exact time. Returns \"this\" AnimationMixer object.\n\n\t\t},\n\n\t\t// return this mixer's root target object\n\t\tgetRoot: function () {\n\n\t\t\treturn this._root;\n\n\t\t},\n\n\t\t// free all resources specific to a particular clip\n\t\tuncacheClip: function ( clip ) {\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tclipUuid = clip.uuid,\n\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\n\t\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\t\t// note: just calling _removeInactiveAction would mess up the\n\t\t\t\t// iteration state and also require updating the state we can\n\t\t\t\t// just throw away\n\n\t\t\t\tvar actionsToRemove = actionsForClip.knownActions;\n\n\t\t\t\tfor ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar action = actionsToRemove[ i ];\n\n\t\t\t\t\tthis._deactivateAction( action );\n\n\t\t\t\t\tvar cacheIndex = action._cacheIndex,\n\t\t\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ];\n\n\t\t\t\t\taction._cacheIndex = null;\n\t\t\t\t\taction._byClipCacheIndex = null;\n\n\t\t\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\t\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\t\t\t\tactions.pop();\n\n\t\t\t\t\tthis._removeInactiveBindingsForAction( action );\n\n\t\t\t\t}\n\n\t\t\t\tdelete actionsByClip[ clipUuid ];\n\n\t\t\t}\n\n\t\t},\n\n\t\t// free all resources specific to a particular root target object\n\t\tuncacheRoot: function ( root ) {\n\n\t\t\tvar rootUuid = root.uuid,\n\t\t\t\tactionsByClip = this._actionsByClip;\n\n\t\t\tfor ( var clipUuid in actionsByClip ) {\n\n\t\t\t\tvar actionByRoot = actionsByClip[ clipUuid ].actionByRoot,\n\t\t\t\t\taction = actionByRoot[ rootUuid ];\n\n\t\t\t\tif ( action !== undefined ) {\n\n\t\t\t\t\tthis._deactivateAction( action );\n\t\t\t\t\tthis._removeInactiveAction( action );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\tbindingByName = bindingsByRoot[ rootUuid ];\n\n\t\t\tif ( bindingByName !== undefined ) {\n\n\t\t\t\tfor ( var trackName in bindingByName ) {\n\n\t\t\t\t\tvar binding = bindingByName[ trackName ];\n\t\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\t\tthis._removeInactiveBinding( binding );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t// remove a targeted clip from the cache\n\t\tuncacheAction: function ( clip, optionalRoot ) {\n\n\t\t\tvar action = this.existingAction( clip, optionalRoot );\n\n\t\t\tif ( action !== null ) {\n\n\t\t\t\tthis._deactivateAction( action );\n\t\t\t\tthis._removeInactiveAction( action );\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Uniform( value ) {\n\n\t\tif ( typeof value === 'string' ) {\n\n\t\t\tconsole.warn( 'THREE.Uniform: Type parameter is no longer needed.' );\n\t\t\tvalue = arguments[ 1 ];\n\n\t\t}\n\n\t\tthis.value = value;\n\n\t}\n\n\tUniform.prototype.clone = function () {\n\n\t\treturn new Uniform( this.value.clone === undefined ? this.value : this.value.clone() );\n\n\t};\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tfunction InstancedInterleavedBuffer( array, stride, meshPerAttribute ) {\n\n\t\tInterleavedBuffer.call( this, array, stride );\n\n\t\tthis.meshPerAttribute = meshPerAttribute || 1;\n\n\t}\n\n\tInstancedInterleavedBuffer.prototype = Object.assign( Object.create( InterleavedBuffer.prototype ), {\n\n\t\tconstructor: InstancedInterleavedBuffer,\n\n\t\tisInstancedInterleavedBuffer: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tInterleavedBuffer.prototype.copy.call( this, source );\n\n\t\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author bhouston / http://clara.io/\n\t * @author stephomi / http://stephaneginier.com/\n\t */\n\n\tfunction Raycaster( origin, direction, near, far ) {\n\n\t\tthis.ray = new Ray( origin, direction );\n\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\tthis.near = near || 0;\n\t\tthis.far = far || Infinity;\n\t\tthis.camera = null;\n\n\t\tthis.params = {\n\t\t\tMesh: {},\n\t\t\tLine: {},\n\t\t\tLOD: {},\n\t\t\tPoints: { threshold: 1 },\n\t\t\tSprite: {}\n\t\t};\n\n\t\tObject.defineProperties( this.params, {\n\t\t\tPointCloud: {\n\t\t\t\tget: function () {\n\n\t\t\t\t\tconsole.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );\n\t\t\t\t\treturn this.Points;\n\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\n\t}\n\n\tfunction ascSort( a, b ) {\n\n\t\treturn a.distance - b.distance;\n\n\t}\n\n\tfunction intersectObject( object, raycaster, intersects, recursive ) {\n\n\t\tif ( object.visible === false ) { return; }\n\n\t\tobject.raycast( raycaster, intersects );\n\n\t\tif ( recursive === true ) {\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tintersectObject( children[ i ], raycaster, intersects, true );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tObject.assign( Raycaster.prototype, {\n\n\t\tlinePrecision: 1,\n\n\t\tset: function ( origin, direction ) {\n\n\t\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\t\tthis.ray.set( origin, direction );\n\n\t\t},\n\n\t\tsetFromCamera: function ( coords, camera ) {\n\n\t\t\tif ( ( camera && camera.isPerspectiveCamera ) ) {\n\n\t\t\t\tthis.ray.origin.setFromMatrixPosition( camera.matrixWorld );\n\t\t\t\tthis.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();\n\t\t\t\tthis.camera = camera;\n\n\t\t\t} else if ( ( camera && camera.isOrthographicCamera ) ) {\n\n\t\t\t\tthis.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera\n\t\t\t\tthis.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );\n\t\t\t\tthis.camera = camera;\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( 'THREE.Raycaster: Unsupported camera type.' );\n\n\t\t\t}\n\n\t\t},\n\n\t\tintersectObject: function ( object, recursive, optionalTarget ) {\n\n\t\t\tvar intersects = optionalTarget || [];\n\n\t\t\tintersectObject( object, this, intersects, recursive );\n\n\t\t\tintersects.sort( ascSort );\n\n\t\t\treturn intersects;\n\n\t\t},\n\n\t\tintersectObjects: function ( objects, recursive, optionalTarget ) {\n\n\t\t\tvar intersects = optionalTarget || [];\n\n\t\t\tif ( Array.isArray( objects ) === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );\n\t\t\t\treturn intersects;\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0, l = objects.length; i < l; i ++ ) {\n\n\t\t\t\tintersectObject( objects[ i ], this, intersects, recursive );\n\n\t\t\t}\n\n\t\t\tintersects.sort( ascSort );\n\n\t\t\treturn intersects;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n\t *\n\t * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.\n\t * The azimuthal angle (theta) is measured from the positive z-axis.\n\t */\n\n\tfunction Spherical( radius, phi, theta ) {\n\n\t\tthis.radius = ( radius !== undefined ) ? radius : 1.0;\n\t\tthis.phi = ( phi !== undefined ) ? phi : 0; // polar angle\n\t\tthis.theta = ( theta !== undefined ) ? theta : 0; // azimuthal angle\n\n\t\treturn this;\n\n\t}\n\n\tObject.assign( Spherical.prototype, {\n\n\t\tset: function ( radius, phi, theta ) {\n\n\t\t\tthis.radius = radius;\n\t\t\tthis.phi = phi;\n\t\t\tthis.theta = theta;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( other ) {\n\n\t\t\tthis.radius = other.radius;\n\t\t\tthis.phi = other.phi;\n\t\t\tthis.theta = other.theta;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// restrict phi to be betwee EPS and PI-EPS\n\t\tmakeSafe: function () {\n\n\t\t\tvar EPS = 0.000001;\n\t\t\tthis.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromVector3: function ( v ) {\n\n\t\t\treturn this.setFromCartesianCoords( v.x, v.y, v.z );\n\n\t\t},\n\n\t\tsetFromCartesianCoords: function ( x, y, z ) {\n\n\t\t\tthis.radius = Math.sqrt( x * x + y * y + z * z );\n\n\t\t\tif ( this.radius === 0 ) {\n\n\t\t\t\tthis.theta = 0;\n\t\t\t\tthis.phi = 0;\n\n\t\t\t} else {\n\n\t\t\t\tthis.theta = Math.atan2( x, z );\n\t\t\t\tthis.phi = Math.acos( MathUtils.clamp( y / this.radius, - 1, 1 ) );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system\n\t *\n\t */\n\n\tfunction Cylindrical( radius, theta, y ) {\n\n\t\tthis.radius = ( radius !== undefined ) ? radius : 1.0; // distance from the origin to a point in the x-z plane\n\t\tthis.theta = ( theta !== undefined ) ? theta : 0; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis\n\t\tthis.y = ( y !== undefined ) ? y : 0; // height above the x-z plane\n\n\t\treturn this;\n\n\t}\n\n\tObject.assign( Cylindrical.prototype, {\n\n\t\tset: function ( radius, theta, y ) {\n\n\t\t\tthis.radius = radius;\n\t\t\tthis.theta = theta;\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( other ) {\n\n\t\t\tthis.radius = other.radius;\n\t\t\tthis.theta = other.theta;\n\t\t\tthis.y = other.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromVector3: function ( v ) {\n\n\t\t\treturn this.setFromCartesianCoords( v.x, v.y, v.z );\n\n\t\t},\n\n\t\tsetFromCartesianCoords: function ( x, y, z ) {\n\n\t\t\tthis.radius = Math.sqrt( x * x + z * z );\n\t\t\tthis.theta = Math.atan2( x, z );\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t */\n\n\tvar _vector$7 = new Vector2();\n\n\tfunction Box2( min, max ) {\n\n\t\tthis.min = ( min !== undefined ) ? min : new Vector2( + Infinity, + Infinity );\n\t\tthis.max = ( max !== undefined ) ? max : new Vector2( - Infinity, - Infinity );\n\n\t}\n\n\tObject.assign( Box2.prototype, {\n\n\t\tset: function ( min, max ) {\n\n\t\t\tthis.min.copy( min );\n\t\t\tthis.max.copy( max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tthis.makeEmpty();\n\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromCenterAndSize: function ( center, size ) {\n\n\t\t\tvar halfSize = _vector$7.copy( size ).multiplyScalar( 0.5 );\n\t\t\tthis.min.copy( center ).sub( halfSize );\n\t\t\tthis.max.copy( center ).add( halfSize );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( box ) {\n\n\t\t\tthis.min.copy( box.min );\n\t\t\tthis.max.copy( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeEmpty: function () {\n\n\t\t\tthis.min.x = this.min.y = + Infinity;\n\t\t\tthis.max.x = this.max.y = - Infinity;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tisEmpty: function () {\n\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );\n\n\t\t},\n\n\t\tgetCenter: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box2: .getCenter() target is now required' );\n\t\t\t\ttarget = new Vector2();\n\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set( 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t\t},\n\n\t\tgetSize: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box2: .getSize() target is now required' );\n\t\t\t\ttarget = new Vector2();\n\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set( 0, 0 ) : target.subVectors( this.max, this.min );\n\n\t\t},\n\n\t\texpandByPoint: function ( point ) {\n\n\t\t\tthis.min.min( point );\n\t\t\tthis.max.max( point );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByVector: function ( vector ) {\n\n\t\t\tthis.min.sub( vector );\n\t\t\tthis.max.add( vector );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByScalar: function ( scalar ) {\n\n\t\t\tthis.min.addScalar( - scalar );\n\t\t\tthis.max.addScalar( scalar );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\treturn point.x < this.min.x || point.x > this.max.x ||\n\t\t\t\tpoint.y < this.min.y || point.y > this.max.y ? false : true;\n\n\t\t},\n\n\t\tcontainsBox: function ( box ) {\n\n\t\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\n\t\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y;\n\n\t\t},\n\n\t\tgetParameter: function ( point, target ) {\n\n\t\t\t// This can potentially have a divide by zero if the box\n\t\t\t// has a size dimension of 0.\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box2: .getParameter() target is now required' );\n\t\t\t\ttarget = new Vector2();\n\n\t\t\t}\n\n\t\t\treturn target.set(\n\t\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y )\n\t\t\t);\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\t// using 4 splitting planes to rule out intersections\n\n\t\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ? false : true;\n\n\t\t},\n\n\t\tclampPoint: function ( point, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box2: .clampPoint() target is now required' );\n\t\t\t\ttarget = new Vector2();\n\n\t\t\t}\n\n\t\t\treturn target.copy( point ).clamp( this.min, this.max );\n\n\t\t},\n\n\t\tdistanceToPoint: function ( point ) {\n\n\t\t\tvar clampedPoint = _vector$7.copy( point ).clamp( this.min, this.max );\n\t\t\treturn clampedPoint.sub( point ).length();\n\n\t\t},\n\n\t\tintersect: function ( box ) {\n\n\t\t\tthis.min.max( box.min );\n\t\t\tthis.max.min( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tunion: function ( box ) {\n\n\t\t\tthis.min.min( box.min );\n\t\t\tthis.max.max( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( offset ) {\n\n\t\t\tthis.min.add( offset );\n\t\t\tthis.max.add( offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( box ) {\n\n\t\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t */\n\n\tvar _startP = new Vector3();\n\tvar _startEnd = new Vector3();\n\n\tfunction Line3( start, end ) {\n\n\t\tthis.start = ( start !== undefined ) ? start : new Vector3();\n\t\tthis.end = ( end !== undefined ) ? end : new Vector3();\n\n\t}\n\n\tObject.assign( Line3.prototype, {\n\n\t\tset: function ( start, end ) {\n\n\t\t\tthis.start.copy( start );\n\t\t\tthis.end.copy( end );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( line ) {\n\n\t\t\tthis.start.copy( line.start );\n\t\t\tthis.end.copy( line.end );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetCenter: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Line3: .getCenter() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.addVectors( this.start, this.end ).multiplyScalar( 0.5 );\n\n\t\t},\n\n\t\tdelta: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Line3: .delta() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.subVectors( this.end, this.start );\n\n\t\t},\n\n\t\tdistanceSq: function () {\n\n\t\t\treturn this.start.distanceToSquared( this.end );\n\n\t\t},\n\n\t\tdistance: function () {\n\n\t\t\treturn this.start.distanceTo( this.end );\n\n\t\t},\n\n\t\tat: function ( t, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Line3: .at() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn this.delta( target ).multiplyScalar( t ).add( this.start );\n\n\t\t},\n\n\t\tclosestPointToPointParameter: function ( point, clampToLine ) {\n\n\t\t\t_startP.subVectors( point, this.start );\n\t\t\t_startEnd.subVectors( this.end, this.start );\n\n\t\t\tvar startEnd2 = _startEnd.dot( _startEnd );\n\t\t\tvar startEnd_startP = _startEnd.dot( _startP );\n\n\t\t\tvar t = startEnd_startP / startEnd2;\n\n\t\t\tif ( clampToLine ) {\n\n\t\t\t\tt = MathUtils.clamp( t, 0, 1 );\n\n\t\t\t}\n\n\t\t\treturn t;\n\n\t\t},\n\n\t\tclosestPointToPoint: function ( point, clampToLine, target ) {\n\n\t\t\tvar t = this.closestPointToPointParameter( point, clampToLine );\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Line3: .closestPointToPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn this.delta( target ).multiplyScalar( t ).add( this.start );\n\n\t\t},\n\n\t\tapplyMatrix4: function ( matrix ) {\n\n\t\t\tthis.start.applyMatrix4( matrix );\n\t\t\tthis.end.applyMatrix4( matrix );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( line ) {\n\n\t\t\treturn line.start.equals( this.start ) && line.end.equals( this.end );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction ImmediateRenderObject( material ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.material = material;\n\t\tthis.render = function ( /* renderCallback */ ) {};\n\n\t}\n\n\tImmediateRenderObject.prototype = Object.create( Object3D.prototype );\n\tImmediateRenderObject.prototype.constructor = ImmediateRenderObject;\n\n\tImmediateRenderObject.prototype.isImmediateRenderObject = true;\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tvar _vector$8 = new Vector3();\n\n\tfunction SpotLightHelper( light, color ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.color = color;\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tvar positions = [\n\t\t\t0, 0, 0, \t0, 0, 1,\n\t\t\t0, 0, 0, \t1, 0, 1,\n\t\t\t0, 0, 0,\t- 1, 0, 1,\n\t\t\t0, 0, 0, \t0, 1, 1,\n\t\t\t0, 0, 0, \t0, - 1, 1\n\t\t];\n\n\t\tfor ( var i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {\n\n\t\t\tvar p1 = ( i / l ) * Math.PI * 2;\n\t\t\tvar p2 = ( j / l ) * Math.PI * 2;\n\n\t\t\tpositions.push(\n\t\t\t\tMath.cos( p1 ), Math.sin( p1 ), 1,\n\t\t\t\tMath.cos( p2 ), Math.sin( p2 ), 1\n\t\t\t);\n\n\t\t}\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { fog: false } );\n\n\t\tthis.cone = new LineSegments( geometry, material );\n\t\tthis.add( this.cone );\n\n\t\tthis.update();\n\n\t}\n\n\tSpotLightHelper.prototype = Object.create( Object3D.prototype );\n\tSpotLightHelper.prototype.constructor = SpotLightHelper;\n\n\tSpotLightHelper.prototype.dispose = function () {\n\n\t\tthis.cone.geometry.dispose();\n\t\tthis.cone.material.dispose();\n\n\t};\n\n\tSpotLightHelper.prototype.update = function () {\n\n\t\tthis.light.updateMatrixWorld();\n\n\t\tvar coneLength = this.light.distance ? this.light.distance : 1000;\n\t\tvar coneWidth = coneLength * Math.tan( this.light.angle );\n\n\t\tthis.cone.scale.set( coneWidth, coneWidth, coneLength );\n\n\t\t_vector$8.setFromMatrixPosition( this.light.target.matrixWorld );\n\n\t\tthis.cone.lookAt( _vector$8 );\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.cone.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.cone.material.color.copy( this.light.color );\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author Sean Griffin / http://twitter.com/sgrif\n\t * @author Michael Guerrero / http://realitymeltdown.com\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author ikerr / http://verold.com\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tvar _vector$9 = new Vector3();\n\tvar _boneMatrix = new Matrix4();\n\tvar _matrixWorldInv = new Matrix4();\n\n\tfunction getBoneList( object ) {\n\n\t\tvar boneList = [];\n\n\t\tif ( object && object.isBone ) {\n\n\t\t\tboneList.push( object );\n\n\t\t}\n\n\t\tfor ( var i = 0; i < object.children.length; i ++ ) {\n\n\t\t\tboneList.push.apply( boneList, getBoneList( object.children[ i ] ) );\n\n\t\t}\n\n\t\treturn boneList;\n\n\t}\n\n\tfunction SkeletonHelper( object ) {\n\n\t\tvar bones = getBoneList( object );\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tvar vertices = [];\n\t\tvar colors = [];\n\n\t\tvar color1 = new Color( 0, 0, 1 );\n\t\tvar color2 = new Color( 0, 1, 0 );\n\n\t\tfor ( var i = 0; i < bones.length; i ++ ) {\n\n\t\t\tvar bone = bones[ i ];\n\n\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\tvertices.push( 0, 0, 0 );\n\t\t\t\tvertices.push( 0, 0, 0 );\n\t\t\t\tcolors.push( color1.r, color1.g, color1.b );\n\t\t\t\tcolors.push( color2.r, color2.g, color2.b );\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { vertexColors: VertexColors, depthTest: false, depthWrite: false, transparent: true } );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t\tthis.root = object;\n\t\tthis.bones = bones;\n\n\t\tthis.matrix = object.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t}\n\n\tSkeletonHelper.prototype = Object.create( LineSegments.prototype );\n\tSkeletonHelper.prototype.constructor = SkeletonHelper;\n\n\tSkeletonHelper.prototype.updateMatrixWorld = function ( force ) {\n\n\t\tvar bones = this.bones;\n\n\t\tvar geometry = this.geometry;\n\t\tvar position = geometry.getAttribute( 'position' );\n\n\t\t_matrixWorldInv.getInverse( this.root.matrixWorld );\n\n\t\tfor ( var i = 0, j = 0; i < bones.length; i ++ ) {\n\n\t\t\tvar bone = bones[ i ];\n\n\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\t_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.matrixWorld );\n\t\t\t\t_vector$9.setFromMatrixPosition( _boneMatrix );\n\t\t\t\tposition.setXYZ( j, _vector$9.x, _vector$9.y, _vector$9.z );\n\n\t\t\t\t_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.parent.matrixWorld );\n\t\t\t\t_vector$9.setFromMatrixPosition( _boneMatrix );\n\t\t\t\tposition.setXYZ( j + 1, _vector$9.x, _vector$9.y, _vector$9.z );\n\n\t\t\t\tj += 2;\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeometry.getAttribute( 'position' ).needsUpdate = true;\n\n\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction PointLightHelper( light, sphereSize, color ) {\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.color = color;\n\n\t\tvar geometry = new SphereBufferGeometry( sphereSize, 4, 2 );\n\t\tvar material = new MeshBasicMaterial( { wireframe: true, fog: false } );\n\n\t\tMesh.call( this, geometry, material );\n\n\t\tthis.matrix = this.light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.update();\n\n\n\t\t/*\n\t\tvar distanceGeometry = new THREE.IcosahedronBufferGeometry( 1, 2 );\n\t\tvar distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n\n\t\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n\t\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n\n\t\tvar d = light.distance;\n\n\t\tif ( d === 0.0 ) {\n\n\t\t\tthis.lightDistance.visible = false;\n\n\t\t} else {\n\n\t\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t\t}\n\n\t\tthis.add( this.lightDistance );\n\t\t*/\n\n\t}\n\n\tPointLightHelper.prototype = Object.create( Mesh.prototype );\n\tPointLightHelper.prototype.constructor = PointLightHelper;\n\n\tPointLightHelper.prototype.dispose = function () {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t};\n\n\tPointLightHelper.prototype.update = function () {\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.material.color.copy( this.light.color );\n\n\t\t}\n\n\t\t/*\n\t\tvar d = this.light.distance;\n\n\t\tif ( d === 0.0 ) {\n\n\t\t\tthis.lightDistance.visible = false;\n\n\t\t} else {\n\n\t\t\tthis.lightDistance.visible = true;\n\t\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t\t}\n\t\t*/\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tvar _vector$a = new Vector3();\n\tvar _color1 = new Color();\n\tvar _color2 = new Color();\n\n\tfunction HemisphereLightHelper( light, size, color ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.color = color;\n\n\t\tvar geometry = new OctahedronBufferGeometry( size );\n\t\tgeometry.rotateY( Math.PI * 0.5 );\n\n\t\tthis.material = new MeshBasicMaterial( { wireframe: true, fog: false } );\n\t\tif ( this.color === undefined ) { this.material.vertexColors = VertexColors; }\n\n\t\tvar position = geometry.getAttribute( 'position' );\n\t\tvar colors = new Float32Array( position.count * 3 );\n\n\t\tgeometry.setAttribute( 'color', new BufferAttribute( colors, 3 ) );\n\n\t\tthis.add( new Mesh( geometry, this.material ) );\n\n\t\tthis.update();\n\n\t}\n\n\tHemisphereLightHelper.prototype = Object.create( Object3D.prototype );\n\tHemisphereLightHelper.prototype.constructor = HemisphereLightHelper;\n\n\tHemisphereLightHelper.prototype.dispose = function () {\n\n\t\tthis.children[ 0 ].geometry.dispose();\n\t\tthis.children[ 0 ].material.dispose();\n\n\t};\n\n\tHemisphereLightHelper.prototype.update = function () {\n\n\t\tvar mesh = this.children[ 0 ];\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tvar colors = mesh.geometry.getAttribute( 'color' );\n\n\t\t\t_color1.copy( this.light.color );\n\t\t\t_color2.copy( this.light.groundColor );\n\n\t\t\tfor ( var i = 0, l = colors.count; i < l; i ++ ) {\n\n\t\t\t\tvar color = ( i < ( l / 2 ) ) ? _color1 : _color2;\n\n\t\t\t\tcolors.setXYZ( i, color.r, color.g, color.b );\n\n\t\t\t}\n\n\t\t\tcolors.needsUpdate = true;\n\n\t\t}\n\n\t\tmesh.lookAt( _vector$a.setFromMatrixPosition( this.light.matrixWorld ).negate() );\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction GridHelper( size, divisions, color1, color2 ) {\n\n\t\tsize = size || 10;\n\t\tdivisions = divisions || 10;\n\t\tcolor1 = new Color( color1 !== undefined ? color1 : 0x444444 );\n\t\tcolor2 = new Color( color2 !== undefined ? color2 : 0x888888 );\n\n\t\tvar center = divisions / 2;\n\t\tvar step = size / divisions;\n\t\tvar halfSize = size / 2;\n\n\t\tvar vertices = [], colors = [];\n\n\t\tfor ( var i = 0, j = 0, k = - halfSize; i <= divisions; i ++, k += step ) {\n\n\t\t\tvertices.push( - halfSize, 0, k, halfSize, 0, k );\n\t\t\tvertices.push( k, 0, - halfSize, k, 0, halfSize );\n\n\t\t\tvar color = i === center ? color1 : color2;\n\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\n\t\t}\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t}\n\n\tGridHelper.prototype = Object.assign( Object.create( LineSegments.prototype ), {\n\n\t\tconstructor: GridHelper,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLineSegments.prototype.copy.call( this, source );\n\n\t\t\tthis.geometry.copy( source.geometry );\n\t\t\tthis.material.copy( source.material );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / http://github.com/Mugen87\n\t * @author Hectate / http://www.github.com/Hectate\n\t */\n\n\tfunction PolarGridHelper( radius, radials, circles, divisions, color1, color2 ) {\n\n\t\tradius = radius || 10;\n\t\tradials = radials || 16;\n\t\tcircles = circles || 8;\n\t\tdivisions = divisions || 64;\n\t\tcolor1 = new Color( color1 !== undefined ? color1 : 0x444444 );\n\t\tcolor2 = new Color( color2 !== undefined ? color2 : 0x888888 );\n\n\t\tvar vertices = [];\n\t\tvar colors = [];\n\n\t\tvar x, z;\n\t\tvar v, i, j, r, color;\n\n\t\t// create the radials\n\n\t\tfor ( i = 0; i <= radials; i ++ ) {\n\n\t\t\tv = ( i / radials ) * ( Math.PI * 2 );\n\n\t\t\tx = Math.sin( v ) * radius;\n\t\t\tz = Math.cos( v ) * radius;\n\n\t\t\tvertices.push( 0, 0, 0 );\n\t\t\tvertices.push( x, 0, z );\n\n\t\t\tcolor = ( i & 1 ) ? color1 : color2;\n\n\t\t\tcolors.push( color.r, color.g, color.b );\n\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t}\n\n\t\t// create the circles\n\n\t\tfor ( i = 0; i <= circles; i ++ ) {\n\n\t\t\tcolor = ( i & 1 ) ? color1 : color2;\n\n\t\t\tr = radius - ( radius / circles * i );\n\n\t\t\tfor ( j = 0; j < divisions; j ++ ) {\n\n\t\t\t\t// first vertex\n\n\t\t\t\tv = ( j / divisions ) * ( Math.PI * 2 );\n\n\t\t\t\tx = Math.sin( v ) * r;\n\t\t\t\tz = Math.cos( v ) * r;\n\n\t\t\t\tvertices.push( x, 0, z );\n\t\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\t\t// second vertex\n\n\t\t\t\tv = ( ( j + 1 ) / divisions ) * ( Math.PI * 2 );\n\n\t\t\t\tx = Math.sin( v ) * r;\n\t\t\t\tz = Math.cos( v ) * r;\n\n\t\t\t\tvertices.push( x, 0, z );\n\t\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t}\n\n\tPolarGridHelper.prototype = Object.create( LineSegments.prototype );\n\tPolarGridHelper.prototype.constructor = PolarGridHelper;\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tvar _v1$5 = new Vector3();\n\tvar _v2$3 = new Vector3();\n\tvar _v3$1 = new Vector3();\n\n\tfunction DirectionalLightHelper( light, size, color ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.color = color;\n\n\t\tif ( size === undefined ) { size = 1; }\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( [\n\t\t\t- size, size, 0,\n\t\t\tsize, size, 0,\n\t\t\tsize, - size, 0,\n\t\t\t- size, - size, 0,\n\t\t\t- size, size, 0\n\t\t], 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { fog: false } );\n\n\t\tthis.lightPlane = new Line( geometry, material );\n\t\tthis.add( this.lightPlane );\n\n\t\tgeometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );\n\n\t\tthis.targetLine = new Line( geometry, material );\n\t\tthis.add( this.targetLine );\n\n\t\tthis.update();\n\n\t}\n\n\tDirectionalLightHelper.prototype = Object.create( Object3D.prototype );\n\tDirectionalLightHelper.prototype.constructor = DirectionalLightHelper;\n\n\tDirectionalLightHelper.prototype.dispose = function () {\n\n\t\tthis.lightPlane.geometry.dispose();\n\t\tthis.lightPlane.material.dispose();\n\t\tthis.targetLine.geometry.dispose();\n\t\tthis.targetLine.material.dispose();\n\n\t};\n\n\tDirectionalLightHelper.prototype.update = function () {\n\n\t\t_v1$5.setFromMatrixPosition( this.light.matrixWorld );\n\t\t_v2$3.setFromMatrixPosition( this.light.target.matrixWorld );\n\t\t_v3$1.subVectors( _v2$3, _v1$5 );\n\n\t\tthis.lightPlane.lookAt( _v2$3 );\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.lightPlane.material.color.set( this.color );\n\t\t\tthis.targetLine.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.lightPlane.material.color.copy( this.light.color );\n\t\t\tthis.targetLine.material.color.copy( this.light.color );\n\n\t\t}\n\n\t\tthis.targetLine.lookAt( _v2$3 );\n\t\tthis.targetLine.scale.z = _v3$1.length();\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t *\t- shows frustum, line of sight and up of the camera\n\t *\t- suitable for fast updates\n\t * \t- based on frustum visualization in lightgl.js shadowmap example\n\t *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\n\t */\n\n\tvar _vector$b = new Vector3();\n\tvar _camera = new Camera();\n\n\tfunction CameraHelper( camera ) {\n\n\t\tvar geometry = new BufferGeometry();\n\t\tvar material = new LineBasicMaterial( { color: 0xffffff, vertexColors: FaceColors } );\n\n\t\tvar vertices = [];\n\t\tvar colors = [];\n\n\t\tvar pointMap = {};\n\n\t\t// colors\n\n\t\tvar colorFrustum = new Color( 0xffaa00 );\n\t\tvar colorCone = new Color( 0xff0000 );\n\t\tvar colorUp = new Color( 0x00aaff );\n\t\tvar colorTarget = new Color( 0xffffff );\n\t\tvar colorCross = new Color( 0x333333 );\n\n\t\t// near\n\n\t\taddLine( 'n1', 'n2', colorFrustum );\n\t\taddLine( 'n2', 'n4', colorFrustum );\n\t\taddLine( 'n4', 'n3', colorFrustum );\n\t\taddLine( 'n3', 'n1', colorFrustum );\n\n\t\t// far\n\n\t\taddLine( 'f1', 'f2', colorFrustum );\n\t\taddLine( 'f2', 'f4', colorFrustum );\n\t\taddLine( 'f4', 'f3', colorFrustum );\n\t\taddLine( 'f3', 'f1', colorFrustum );\n\n\t\t// sides\n\n\t\taddLine( 'n1', 'f1', colorFrustum );\n\t\taddLine( 'n2', 'f2', colorFrustum );\n\t\taddLine( 'n3', 'f3', colorFrustum );\n\t\taddLine( 'n4', 'f4', colorFrustum );\n\n\t\t// cone\n\n\t\taddLine( 'p', 'n1', colorCone );\n\t\taddLine( 'p', 'n2', colorCone );\n\t\taddLine( 'p', 'n3', colorCone );\n\t\taddLine( 'p', 'n4', colorCone );\n\n\t\t// up\n\n\t\taddLine( 'u1', 'u2', colorUp );\n\t\taddLine( 'u2', 'u3', colorUp );\n\t\taddLine( 'u3', 'u1', colorUp );\n\n\t\t// target\n\n\t\taddLine( 'c', 't', colorTarget );\n\t\taddLine( 'p', 'c', colorCross );\n\n\t\t// cross\n\n\t\taddLine( 'cn1', 'cn2', colorCross );\n\t\taddLine( 'cn3', 'cn4', colorCross );\n\n\t\taddLine( 'cf1', 'cf2', colorCross );\n\t\taddLine( 'cf3', 'cf4', colorCross );\n\n\t\tfunction addLine( a, b, color ) {\n\n\t\t\taddPoint( a, color );\n\t\t\taddPoint( b, color );\n\n\t\t}\n\n\t\tfunction addPoint( id, color ) {\n\n\t\t\tvertices.push( 0, 0, 0 );\n\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\tif ( pointMap[ id ] === undefined ) {\n\n\t\t\t\tpointMap[ id ] = [];\n\n\t\t\t}\n\n\t\t\tpointMap[ id ].push( ( vertices.length / 3 ) - 1 );\n\n\t\t}\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t\tthis.camera = camera;\n\t\tif ( this.camera.updateProjectionMatrix ) { this.camera.updateProjectionMatrix(); }\n\n\t\tthis.matrix = camera.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.pointMap = pointMap;\n\n\t\tthis.update();\n\n\t}\n\n\tCameraHelper.prototype = Object.create( LineSegments.prototype );\n\tCameraHelper.prototype.constructor = CameraHelper;\n\n\tCameraHelper.prototype.update = function () {\n\n\t\tvar geometry = this.geometry;\n\t\tvar pointMap = this.pointMap;\n\n\t\tvar w = 1, h = 1;\n\n\t\t// we need just camera projection matrix inverse\n\t\t// world matrix must be identity\n\n\t\t_camera.projectionMatrixInverse.copy( this.camera.projectionMatrixInverse );\n\n\t\t// center / target\n\n\t\tsetPoint( 'c', pointMap, geometry, _camera, 0, 0, - 1 );\n\t\tsetPoint( 't', pointMap, geometry, _camera, 0, 0, 1 );\n\n\t\t// near\n\n\t\tsetPoint( 'n1', pointMap, geometry, _camera, - w, - h, - 1 );\n\t\tsetPoint( 'n2', pointMap, geometry, _camera, w, - h, - 1 );\n\t\tsetPoint( 'n3', pointMap, geometry, _camera, - w, h, - 1 );\n\t\tsetPoint( 'n4', pointMap, geometry, _camera, w, h, - 1 );\n\n\t\t// far\n\n\t\tsetPoint( 'f1', pointMap, geometry, _camera, - w, - h, 1 );\n\t\tsetPoint( 'f2', pointMap, geometry, _camera, w, - h, 1 );\n\t\tsetPoint( 'f3', pointMap, geometry, _camera, - w, h, 1 );\n\t\tsetPoint( 'f4', pointMap, geometry, _camera, w, h, 1 );\n\n\t\t// up\n\n\t\tsetPoint( 'u1', pointMap, geometry, _camera, w * 0.7, h * 1.1, - 1 );\n\t\tsetPoint( 'u2', pointMap, geometry, _camera, - w * 0.7, h * 1.1, - 1 );\n\t\tsetPoint( 'u3', pointMap, geometry, _camera, 0, h * 2, - 1 );\n\n\t\t// cross\n\n\t\tsetPoint( 'cf1', pointMap, geometry, _camera, - w, 0, 1 );\n\t\tsetPoint( 'cf2', pointMap, geometry, _camera, w, 0, 1 );\n\t\tsetPoint( 'cf3', pointMap, geometry, _camera, 0, - h, 1 );\n\t\tsetPoint( 'cf4', pointMap, geometry, _camera, 0, h, 1 );\n\n\t\tsetPoint( 'cn1', pointMap, geometry, _camera, - w, 0, - 1 );\n\t\tsetPoint( 'cn2', pointMap, geometry, _camera, w, 0, - 1 );\n\t\tsetPoint( 'cn3', pointMap, geometry, _camera, 0, - h, - 1 );\n\t\tsetPoint( 'cn4', pointMap, geometry, _camera, 0, h, - 1 );\n\n\t\tgeometry.getAttribute( 'position' ).needsUpdate = true;\n\n\t};\n\n\tfunction setPoint( point, pointMap, geometry, camera, x, y, z ) {\n\n\t\t_vector$b.set( x, y, z ).unproject( camera );\n\n\t\tvar points = pointMap[ point ];\n\n\t\tif ( points !== undefined ) {\n\n\t\t\tvar position = geometry.getAttribute( 'position' );\n\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tposition.setXYZ( points[ i ], _vector$b.x, _vector$b.y, _vector$b.z );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / http://github.com/Mugen87\n\t */\n\n\tvar _box$3 = new Box3();\n\n\tfunction BoxHelper( object, color ) {\n\n\t\tthis.object = object;\n\n\t\tif ( color === undefined ) { color = 0xffff00; }\n\n\t\tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\t\tvar positions = new Float32Array( 8 * 3 );\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\n\t\tgeometry.setAttribute( 'position', new BufferAttribute( positions, 3 ) );\n\n\t\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );\n\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.update();\n\n\t}\n\n\tBoxHelper.prototype = Object.create( LineSegments.prototype );\n\tBoxHelper.prototype.constructor = BoxHelper;\n\n\tBoxHelper.prototype.update = function ( object ) {\n\n\t\tif ( object !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.BoxHelper: .update() has no longer arguments.' );\n\n\t\t}\n\n\t\tif ( this.object !== undefined ) {\n\n\t\t\t_box$3.setFromObject( this.object );\n\n\t\t}\n\n\t\tif ( _box$3.isEmpty() ) { return; }\n\n\t\tvar min = _box$3.min;\n\t\tvar max = _box$3.max;\n\n\t\t/*\n\t\t  5____4\n\t\t1/___0/|\n\t\t| 6__|_7\n\t\t2/___3/\n\n\t\t0: max.x, max.y, max.z\n\t\t1: min.x, max.y, max.z\n\t\t2: min.x, min.y, max.z\n\t\t3: max.x, min.y, max.z\n\t\t4: max.x, max.y, min.z\n\t\t5: min.x, max.y, min.z\n\t\t6: min.x, min.y, min.z\n\t\t7: max.x, min.y, min.z\n\t\t*/\n\n\t\tvar position = this.geometry.attributes.position;\n\t\tvar array = position.array;\n\n\t\tarray[ 0 ] = max.x; array[ 1 ] = max.y; array[ 2 ] = max.z;\n\t\tarray[ 3 ] = min.x; array[ 4 ] = max.y; array[ 5 ] = max.z;\n\t\tarray[ 6 ] = min.x; array[ 7 ] = min.y; array[ 8 ] = max.z;\n\t\tarray[ 9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;\n\t\tarray[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;\n\t\tarray[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;\n\t\tarray[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;\n\t\tarray[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;\n\n\t\tposition.needsUpdate = true;\n\n\t\tthis.geometry.computeBoundingSphere();\n\n\n\t};\n\n\tBoxHelper.prototype.setFromObject = function ( object ) {\n\n\t\tthis.object = object;\n\t\tthis.update();\n\n\t\treturn this;\n\n\t};\n\n\tBoxHelper.prototype.copy = function ( source ) {\n\n\t\tLineSegments.prototype.copy.call( this, source );\n\n\t\tthis.object = source.object;\n\n\t\treturn this;\n\n\t};\n\n\tBoxHelper.prototype.clone = function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction Box3Helper( box, color ) {\n\n\t\tthis.type = 'Box3Helper';\n\n\t\tthis.box = box;\n\n\t\tcolor = color || 0xffff00;\n\n\t\tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\n\t\tvar positions = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, - 1, - 1, 1, - 1, - 1, - 1, - 1, 1, - 1, - 1 ];\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\n\t\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );\n\n\t\tthis.geometry.computeBoundingSphere();\n\n\t}\n\n\tBox3Helper.prototype = Object.create( LineSegments.prototype );\n\tBox3Helper.prototype.constructor = Box3Helper;\n\n\tBox3Helper.prototype.updateMatrixWorld = function ( force ) {\n\n\t\tvar box = this.box;\n\n\t\tif ( box.isEmpty() ) { return; }\n\n\t\tbox.getCenter( this.position );\n\n\t\tbox.getSize( this.scale );\n\n\t\tthis.scale.multiplyScalar( 0.5 );\n\n\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction PlaneHelper( plane, size, hex ) {\n\n\t\tthis.type = 'PlaneHelper';\n\n\t\tthis.plane = plane;\n\n\t\tthis.size = ( size === undefined ) ? 1 : size;\n\n\t\tvar color = ( hex !== undefined ) ? hex : 0xffff00;\n\n\t\tvar positions = [ 1, - 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0 ];\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\t\tgeometry.computeBoundingSphere();\n\n\t\tLine.call( this, geometry, new LineBasicMaterial( { color: color } ) );\n\n\t\t//\n\n\t\tvar positions2 = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, - 1, 1, 1, - 1, 1 ];\n\n\t\tvar geometry2 = new BufferGeometry();\n\t\tgeometry2.setAttribute( 'position', new Float32BufferAttribute( positions2, 3 ) );\n\t\tgeometry2.computeBoundingSphere();\n\n\t\tthis.add( new Mesh( geometry2, new MeshBasicMaterial( { color: color, opacity: 0.2, transparent: true, depthWrite: false } ) ) );\n\n\t}\n\n\tPlaneHelper.prototype = Object.create( Line.prototype );\n\tPlaneHelper.prototype.constructor = PlaneHelper;\n\n\tPlaneHelper.prototype.updateMatrixWorld = function ( force ) {\n\n\t\tvar scale = - this.plane.constant;\n\n\t\tif ( Math.abs( scale ) < 1e-8 ) { scale = 1e-8; } // sign does not matter\n\n\t\tthis.scale.set( 0.5 * this.size, 0.5 * this.size, scale );\n\n\t\tthis.children[ 0 ].material.side = ( scale < 0 ) ? BackSide : FrontSide; // renderer flips side when determinant < 0; flipping not wanted here\n\n\t\tthis.lookAt( this.plane.normal );\n\n\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author zz85 / http://github.com/zz85\n\t * @author bhouston / http://clara.io\n\t *\n\t * Creates an arrow for visualizing directions\n\t *\n\t * Parameters:\n\t *  dir - Vector3\n\t *  origin - Vector3\n\t *  length - Number\n\t *  color - color in hex value\n\t *  headLength - Number\n\t *  headWidth - Number\n\t */\n\n\tvar _axis = new Vector3();\n\tvar _lineGeometry, _coneGeometry;\n\n\tfunction ArrowHelper( dir, origin, length, color, headLength, headWidth ) {\n\n\t\t// dir is assumed to be normalized\n\n\t\tObject3D.call( this );\n\n\t\tif ( dir === undefined ) { dir = new Vector3( 0, 0, 1 ); }\n\t\tif ( origin === undefined ) { origin = new Vector3( 0, 0, 0 ); }\n\t\tif ( length === undefined ) { length = 1; }\n\t\tif ( color === undefined ) { color = 0xffff00; }\n\t\tif ( headLength === undefined ) { headLength = 0.2 * length; }\n\t\tif ( headWidth === undefined ) { headWidth = 0.2 * headLength; }\n\n\t\tif ( _lineGeometry === undefined ) {\n\n\t\t\t_lineGeometry = new BufferGeometry();\n\t\t\t_lineGeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );\n\n\t\t\t_coneGeometry = new CylinderBufferGeometry( 0, 0.5, 1, 5, 1 );\n\t\t\t_coneGeometry.translate( 0, - 0.5, 0 );\n\n\t\t}\n\n\t\tthis.position.copy( origin );\n\n\t\tthis.line = new Line( _lineGeometry, new LineBasicMaterial( { color: color } ) );\n\t\tthis.line.matrixAutoUpdate = false;\n\t\tthis.add( this.line );\n\n\t\tthis.cone = new Mesh( _coneGeometry, new MeshBasicMaterial( { color: color } ) );\n\t\tthis.cone.matrixAutoUpdate = false;\n\t\tthis.add( this.cone );\n\n\t\tthis.setDirection( dir );\n\t\tthis.setLength( length, headLength, headWidth );\n\n\t}\n\n\tArrowHelper.prototype = Object.create( Object3D.prototype );\n\tArrowHelper.prototype.constructor = ArrowHelper;\n\n\tArrowHelper.prototype.setDirection = function ( dir ) {\n\n\t\t// dir is assumed to be normalized\n\n\t\tif ( dir.y > 0.99999 ) {\n\n\t\t\tthis.quaternion.set( 0, 0, 0, 1 );\n\n\t\t} else if ( dir.y < - 0.99999 ) {\n\n\t\t\tthis.quaternion.set( 1, 0, 0, 0 );\n\n\t\t} else {\n\n\t\t\t_axis.set( dir.z, 0, - dir.x ).normalize();\n\n\t\t\tvar radians = Math.acos( dir.y );\n\n\t\t\tthis.quaternion.setFromAxisAngle( _axis, radians );\n\n\t\t}\n\n\t};\n\n\tArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {\n\n\t\tif ( headLength === undefined ) { headLength = 0.2 * length; }\n\t\tif ( headWidth === undefined ) { headWidth = 0.2 * headLength; }\n\n\t\tthis.line.scale.set( 1, Math.max( 0.0001, length - headLength ), 1 ); // see #17458\n\t\tthis.line.updateMatrix();\n\n\t\tthis.cone.scale.set( headWidth, headLength, headWidth );\n\t\tthis.cone.position.y = length;\n\t\tthis.cone.updateMatrix();\n\n\t};\n\n\tArrowHelper.prototype.setColor = function ( color ) {\n\n\t\tthis.line.material.color.set( color );\n\t\tthis.cone.material.color.set( color );\n\n\t};\n\n\tArrowHelper.prototype.copy = function ( source ) {\n\n\t\tObject3D.prototype.copy.call( this, source, false );\n\n\t\tthis.line.copy( source.line );\n\t\tthis.cone.copy( source.cone );\n\n\t\treturn this;\n\n\t};\n\n\tArrowHelper.prototype.clone = function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t};\n\n\t/**\n\t * @author sroucheray / http://sroucheray.org/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction AxesHelper( size ) {\n\n\t\tsize = size || 1;\n\n\t\tvar vertices = [\n\t\t\t0, 0, 0,\tsize, 0, 0,\n\t\t\t0, 0, 0,\t0, size, 0,\n\t\t\t0, 0, 0,\t0, 0, size\n\t\t];\n\n\t\tvar colors = [\n\t\t\t1, 0, 0,\t1, 0.6, 0,\n\t\t\t0, 1, 0,\t0.6, 1, 0,\n\t\t\t0, 0, 1,\t0, 0.6, 1\n\t\t];\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t}\n\n\tAxesHelper.prototype = Object.create( LineSegments.prototype );\n\tAxesHelper.prototype.constructor = AxesHelper;\n\n\t/**\n\t * @author Emmett Lalish / elalish\n\t *\n\t * This class generates a Prefiltered, Mipmapped Radiance Environment Map\n\t * (PMREM) from a cubeMap environment texture. This allows different levels of\n\t * blur to be quickly accessed based on material roughness. It is packed into a\n\t * special CubeUV format that allows us to perform custom interpolation so that\n\t * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap\n\t * chain, it only goes down to the LOD_MIN level (above), and then creates extra\n\t * even more filtered 'mips' at the same LOD_MIN resolution, associated with\n\t * higher roughness levels. In this way we maintain resolution to smoothly\n\t * interpolate diffuse lighting while limiting sampling computation.\n\t */\n\n\tvar LOD_MIN = 4;\n\tvar LOD_MAX = 8;\n\tvar SIZE_MAX = Math.pow( 2, LOD_MAX );\n\t// The standard deviations (radians) associated with the extra mips. These are\n\t// chosen to approximate a Trowbridge-Reitz distribution function times the\n\t// geometric shadowing function. These sigma values squared must match the\n\t// variance #defines in cube_uv_reflection_fragment.glsl.js.\n\tvar EXTRA_LOD_SIGMA = [ 0.125, 0.215, 0.35, 0.446, 0.526, 0.582 ];\n\tvar TOTAL_LODS = LOD_MAX - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length;\n\t// The maximum length of the blur for loop. Smaller sigmas will use fewer\n\t// samples and exit early, but not recompile the shader.\n\tvar MAX_SAMPLES = 20;\n\tvar ENCODINGS = {};\n\tENCODINGS[ LinearEncoding ] = 0;\n\tENCODINGS[ sRGBEncoding ] = 1;\n\tENCODINGS[ RGBEEncoding ] = 2;\n\tENCODINGS[ RGBM7Encoding ] = 3;\n\tENCODINGS[ RGBM16Encoding ] = 4;\n\tENCODINGS[ RGBDEncoding ] = 5;\n\tENCODINGS[ GammaEncoding ] = 6;\n\n\tvar _flatCamera = new OrthographicCamera();\n\tvar _blurMaterial = _getBlurShader( MAX_SAMPLES );\n\tvar _equirectShader = null;\n\tvar _cubemapShader = null;\n\n\tvar ref = _createPlanes();\n\tvar _lodPlanes = ref._lodPlanes;\n\tvar _sizeLods = ref._sizeLods;\n\tvar _sigmas = ref._sigmas;\n\tvar _pingPongRenderTarget = null;\n\tvar _renderer = null;\n\n\tvar _oldTarget = null;\n\n\t// Golden Ratio\n\tvar PHI = ( 1 + Math.sqrt( 5 ) ) / 2;\n\tvar INV_PHI = 1 / PHI;\n\t// Vertices of a dodecahedron (except the opposites, which represent the\n\t// same axis), used as axis directions evenly spread on a sphere.\n\tvar _axisDirections = [\n\t\tnew Vector3( 1, 1, 1 ),\n\t\tnew Vector3( - 1, 1, 1 ),\n\t\tnew Vector3( 1, 1, - 1 ),\n\t\tnew Vector3( - 1, 1, - 1 ),\n\t\tnew Vector3( 0, PHI, INV_PHI ),\n\t\tnew Vector3( 0, PHI, - INV_PHI ),\n\t\tnew Vector3( INV_PHI, 0, PHI ),\n\t\tnew Vector3( - INV_PHI, 0, PHI ),\n\t\tnew Vector3( PHI, INV_PHI, 0 ),\n\t\tnew Vector3( - PHI, INV_PHI, 0 ) ];\n\n\tfunction PMREMGenerator( renderer ) {\n\n\t\t_renderer = renderer;\n\t\t_compileMaterial( _blurMaterial );\n\n\t}\n\n\tPMREMGenerator.prototype = {\n\n\t\tconstructor: PMREMGenerator,\n\n\t\t/**\n\t\t * Generates a PMREM from a supplied Scene, which can be faster than using an\n\t\t * image if networking bandwidth is low. Optional sigma specifies a blur radius\n\t\t * in radians to be applied to the scene before PMREM generation. Optional near\n\t\t * and far planes ensure the scene is rendered in its entirety (the cubeCamera\n\t\t * is placed at the origin).\n\t\t */\n\t\tfromScene: function ( scene, sigma, near, far ) {\n\t\t\tif ( sigma === void 0 ) sigma = 0;\n\t\t\tif ( near === void 0 ) near = 0.1;\n\t\t\tif ( far === void 0 ) far = 100;\n\n\n\t\t\t_oldTarget = _renderer.getRenderTarget();\n\t\t\tvar cubeUVRenderTarget = _allocateTargets();\n\t\t\t_sceneToCubeUV( scene, near, far, cubeUVRenderTarget );\n\t\t\tif ( sigma > 0 ) {\n\n\t\t\t\t_blur( cubeUVRenderTarget, 0, 0, sigma );\n\n\t\t\t}\n\t\t\t_applyPMREM( cubeUVRenderTarget );\n\t\t\t_cleanup( cubeUVRenderTarget );\n\n\t\t\treturn cubeUVRenderTarget;\n\n\t\t},\n\n\t\t/**\n\t\t * Generates a PMREM from an equirectangular texture, which can be either LDR\n\t\t * (RGBFormat) or HDR (RGBEFormat). The ideal input image size is 1k (1024 x 512),\n\t\t * as this matches best with the 256 x 256 cubemap output.\n\t\t */\n\t\tfromEquirectangular: function ( equirectangular ) {\n\n\t\t\tequirectangular.magFilter = NearestFilter;\n\t\t\tequirectangular.minFilter = NearestFilter;\n\t\t\tequirectangular.generateMipmaps = false;\n\n\t\t\treturn this.fromCubemap( equirectangular );\n\n\t\t},\n\n\t\t/**\n\t\t * Generates a PMREM from an cubemap texture, which can be either LDR\n\t\t * (RGBFormat) or HDR (RGBEFormat). The ideal input cube size is 256 x 256,\n\t\t * as this matches best with the 256 x 256 cubemap output.\n\t\t */\n\t\tfromCubemap: function ( cubemap ) {\n\n\t\t\t_oldTarget = _renderer.getRenderTarget();\n\t\t\tvar cubeUVRenderTarget = _allocateTargets( cubemap );\n\t\t\t_textureToCubeUV( cubemap, cubeUVRenderTarget );\n\t\t\t_applyPMREM( cubeUVRenderTarget );\n\t\t\t_cleanup( cubeUVRenderTarget );\n\n\t\t\treturn cubeUVRenderTarget;\n\n\t\t},\n\n\t\t/**\n\t\t * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during\n\t\t * your texture's network fetch for increased concurrency.\n\t\t */\n\t\tcompileCubemapShader: function () {\n\n\t\t\tif ( _cubemapShader == null ) {\n\n\t\t\t\t_cubemapShader = _getCubemapShader();\n\t\t\t\t_compileMaterial( _cubemapShader );\n\n\t\t\t}\n\n\t\t},\n\n\t\t/**\n\t\t * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during\n\t\t * your texture's network fetch for increased concurrency.\n\t\t */\n\t\tcompileEquirectangularShader: function () {\n\n\t\t\tif ( _equirectShader == null ) {\n\n\t\t\t\t_equirectShader = _getEquirectShader();\n\t\t\t\t_compileMaterial( _equirectShader );\n\n\t\t\t}\n\n\t\t},\n\n\t\t/**\n\t\t * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,\n\t\t * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on\n\t\t * one of them will cause any others to also become unusable.\n\t\t */\n\t\tdispose: function () {\n\n\t\t\t_blurMaterial.dispose();\n\n\t\t\tif ( _cubemapShader != null ) { _cubemapShader.dispose(); }\n\t\t\tif ( _equirectShader != null ) { _equirectShader.dispose(); }\n\n\t\t\tfor ( var i = 0; i < _lodPlanes.length; i ++ ) {\n\n\t\t\t\t_lodPlanes[ i ].dispose();\n\n\t\t\t}\n\n\t\t},\n\n\t};\n\n\tfunction _createPlanes() {\n\n\t\tvar _lodPlanes = [];\n\t\tvar _sizeLods = [];\n\t\tvar _sigmas = [];\n\n\t\tvar lod = LOD_MAX;\n\t\tfor ( var i = 0; i < TOTAL_LODS; i ++ ) {\n\n\t\t\tvar sizeLod = Math.pow( 2, lod );\n\t\t\t_sizeLods.push( sizeLod );\n\t\t\tvar sigma = 1.0 / sizeLod;\n\t\t\tif ( i > LOD_MAX - LOD_MIN ) {\n\n\t\t\t\tsigma = EXTRA_LOD_SIGMA[ i - LOD_MAX + LOD_MIN - 1 ];\n\n\t\t\t} else if ( i == 0 ) {\n\n\t\t\t\tsigma = 0;\n\n\t\t\t}\n\t\t\t_sigmas.push( sigma );\n\n\t\t\tvar texelSize = 1.0 / ( sizeLod - 1 );\n\t\t\tvar min = - texelSize / 2;\n\t\t\tvar max = 1 + texelSize / 2;\n\t\t\tvar uv1 = [ min, min, max, min, max, max, min, min, max, max, min, max ];\n\n\t\t\tvar cubeFaces = 6;\n\t\t\tvar vertices = 6;\n\t\t\tvar positionSize = 3;\n\t\t\tvar uvSize = 2;\n\t\t\tvar faceIndexSize = 1;\n\n\t\t\tvar position = new Float32Array( positionSize * vertices * cubeFaces );\n\t\t\tvar uv = new Float32Array( uvSize * vertices * cubeFaces );\n\t\t\tvar faceIndex = new Float32Array( faceIndexSize * vertices * cubeFaces );\n\n\t\t\tfor ( var face = 0; face < cubeFaces; face ++ ) {\n\n\t\t\t\tvar x = ( face % 3 ) * 2 / 3 - 1;\n\t\t\t\tvar y = face > 2 ? 0 : - 1;\n\t\t\t\tvar coordinates = [\n\t\t\t\t\tx, y, 0,\n\t\t\t\t\tx + 2 / 3, y, 0,\n\t\t\t\t\tx + 2 / 3, y + 1, 0,\n\t\t\t\t\tx, y, 0,\n\t\t\t\t\tx + 2 / 3, y + 1, 0,\n\t\t\t\t\tx, y + 1, 0\n\t\t\t\t];\n\t\t\t\tposition.set( coordinates, positionSize * vertices * face );\n\t\t\t\tuv.set( uv1, uvSize * vertices * face );\n\t\t\t\tvar fill = [ face, face, face, face, face, face ];\n\t\t\t\tfaceIndex.set( fill, faceIndexSize * vertices * face );\n\n\t\t\t}\n\t\t\tvar planes = new BufferGeometry();\n\t\t\tplanes.setAttribute( 'position', new BufferAttribute( position, positionSize ) );\n\t\t\tplanes.setAttribute( 'uv', new BufferAttribute( uv, uvSize ) );\n\t\t\tplanes.setAttribute( 'faceIndex', new BufferAttribute( faceIndex, faceIndexSize ) );\n\t\t\t_lodPlanes.push( planes );\n\n\t\t\tif ( lod > LOD_MIN ) {\n\n\t\t\t\tlod --;\n\n\t\t\t}\n\n\t\t}\n\t\treturn { _lodPlanes: _lodPlanes, _sizeLods: _sizeLods, _sigmas: _sigmas };\n\n\t}\n\n\tfunction _allocateTargets( equirectangular ) {\n\n\t\tvar params = {\n\t\t\tmagFilter: NearestFilter,\n\t\t\tminFilter: NearestFilter,\n\t\t\tgenerateMipmaps: false,\n\t\t\ttype: equirectangular ? equirectangular.type : UnsignedByteType,\n\t\t\tformat: equirectangular ? equirectangular.format : RGBEFormat,\n\t\t\tencoding: equirectangular ? equirectangular.encoding : RGBEEncoding,\n\t\t\tdepthBuffer: false,\n\t\t\tstencilBuffer: false\n\t\t};\n\t\tvar cubeUVRenderTarget = _createRenderTarget( params );\n\t\tcubeUVRenderTarget.depthBuffer = equirectangular ? false : true;\n\t\t_pingPongRenderTarget = _createRenderTarget( params );\n\t\treturn cubeUVRenderTarget;\n\n\t}\n\n\tfunction _cleanup( outputTarget ) {\n\n\t\t_pingPongRenderTarget.dispose();\n\t\t_renderer.setRenderTarget( _oldTarget );\n\t\toutputTarget.scissorTest = false;\n\t\t// reset viewport and scissor\n\t\toutputTarget.setSize( outputTarget.width, outputTarget.height );\n\n\t}\n\n\tfunction _sceneToCubeUV( scene, near, far, cubeUVRenderTarget ) {\n\n\t\tvar fov = 90;\n\t\tvar aspect = 1;\n\t\tvar cubeCamera = new PerspectiveCamera( fov, aspect, near, far );\n\t\tvar upSign = [ 1, 1, 1, 1, - 1, 1 ];\n\t\tvar forwardSign = [ 1, 1, - 1, - 1, - 1, 1 ];\n\n\t\tvar outputEncoding = _renderer.outputEncoding;\n\t\tvar toneMapping = _renderer.toneMapping;\n\t\tvar toneMappingExposure = _renderer.toneMappingExposure;\n\t\tvar clearColor = _renderer.getClearColor();\n\t\tvar clearAlpha = _renderer.getClearAlpha();\n\n\t\t_renderer.toneMapping = LinearToneMapping;\n\t\t_renderer.toneMappingExposure = 1.0;\n\t\t_renderer.outputEncoding = LinearEncoding;\n\t\tscene.scale.z *= - 1;\n\n\t\tvar background = scene.background;\n\t\tif ( background && background.isColor ) {\n\n\t\t\tbackground.convertSRGBToLinear();\n\t\t\t// Convert linear to RGBE\n\t\t\tvar maxComponent = Math.max( background.r, background.g, background.b );\n\t\t\tvar fExp = Math.min( Math.max( Math.ceil( Math.log2( maxComponent ) ), - 128.0 ), 127.0 );\n\t\t\tbackground = background.multiplyScalar( Math.pow( 2.0, - fExp ) );\n\t\t\tvar alpha = ( fExp + 128.0 ) / 255.0;\n\t\t\t_renderer.setClearColor( background, alpha );\n\t\t\tscene.background = null;\n\n\t\t}\n\n\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\tvar col = i % 3;\n\t\t\tif ( col == 0 ) {\n\n\t\t\t\tcubeCamera.up.set( 0, upSign[ i ], 0 );\n\t\t\t\tcubeCamera.lookAt( forwardSign[ i ], 0, 0 );\n\n\t\t\t} else if ( col == 1 ) {\n\n\t\t\t\tcubeCamera.up.set( 0, 0, upSign[ i ] );\n\t\t\t\tcubeCamera.lookAt( 0, forwardSign[ i ], 0 );\n\n\t\t\t} else {\n\n\t\t\t\tcubeCamera.up.set( 0, upSign[ i ], 0 );\n\t\t\t\tcubeCamera.lookAt( 0, 0, forwardSign[ i ] );\n\n\t\t\t}\n\t\t\t_setViewport( cubeUVRenderTarget,\n\t\t\t\tcol * SIZE_MAX, i > 2 ? SIZE_MAX : 0, SIZE_MAX, SIZE_MAX );\n\t\t\t_renderer.setRenderTarget( cubeUVRenderTarget );\n\t\t\t_renderer.render( scene, cubeCamera );\n\n\t\t}\n\n\t\t_renderer.toneMapping = toneMapping;\n\t\t_renderer.toneMappingExposure = toneMappingExposure;\n\t\t_renderer.outputEncoding = outputEncoding;\n\t\t_renderer.setClearColor( clearColor, clearAlpha );\n\t\tscene.scale.z *= - 1;\n\n\t}\n\n\tfunction _textureToCubeUV( texture, cubeUVRenderTarget ) {\n\n\t\tvar scene = new Scene();\n\t\tif ( texture.isCubeTexture ) {\n\n\t\t\tif ( _cubemapShader == null ) {\n\n\t\t\t\t_cubemapShader = _getCubemapShader();\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( _equirectShader == null ) {\n\n\t\t\t\t_equirectShader = _getEquirectShader();\n\n\t\t\t}\n\n\t\t}\n\t\tvar material = texture.isCubeTexture ? _cubemapShader : _equirectShader;\n\t\tscene.add( new Mesh( _lodPlanes[ 0 ], material ) );\n\t\tvar uniforms = material.uniforms;\n\n\t\tuniforms[ 'envMap' ].value = texture;\n\t\tif ( ! texture.isCubeTexture ) {\n\n\t\t\tuniforms[ 'texelSize' ].value.set( 1.0 / texture.image.width, 1.0 / texture.image.height );\n\n\t\t}\n\t\tuniforms[ 'inputEncoding' ].value = ENCODINGS[ texture.encoding ];\n\t\tuniforms[ 'outputEncoding' ].value = ENCODINGS[ texture.encoding ];\n\n\t\t_setViewport( cubeUVRenderTarget, 0, 0, 3 * SIZE_MAX, 2 * SIZE_MAX );\n\t\t_renderer.setRenderTarget( cubeUVRenderTarget );\n\t\t_renderer.render( scene, _flatCamera );\n\n\t}\n\n\tfunction _compileMaterial( material ) {\n\n\t\tvar tmpScene = new Scene();\n\t\ttmpScene.add( new Mesh( _lodPlanes[ 0 ], material ) );\n\t\t_renderer.compile( tmpScene, _flatCamera );\n\n\t}\n\n\tfunction _createRenderTarget( params ) {\n\n\t\tvar cubeUVRenderTarget = new WebGLRenderTarget( 3 * SIZE_MAX, 3 * SIZE_MAX, params );\n\t\tcubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;\n\t\tcubeUVRenderTarget.texture.name = 'PMREM.cubeUv';\n\t\tcubeUVRenderTarget.scissorTest = true;\n\t\treturn cubeUVRenderTarget;\n\n\t}\n\n\tfunction _setViewport( target, x, y, width, height ) {\n\n\t\ttarget.viewport.set( x, y, width, height );\n\t\ttarget.scissor.set( x, y, width, height );\n\n\t}\n\n\tfunction _applyPMREM( cubeUVRenderTarget ) {\n\n\t\tvar autoClear = _renderer.autoClear;\n\t\t_renderer.autoClear = false;\n\n\t\tfor ( var i = 1; i < TOTAL_LODS; i ++ ) {\n\n\t\t\tvar sigma = Math.sqrt(\n\t\t\t\t_sigmas[ i ] * _sigmas[ i ] -\n\t\t\t_sigmas[ i - 1 ] * _sigmas[ i - 1 ] );\n\t\t\tvar poleAxis =\n\t\t\t_axisDirections[ ( i - 1 ) % _axisDirections.length ];\n\t\t\t_blur( cubeUVRenderTarget, i - 1, i, sigma, poleAxis );\n\n\t\t}\n\n\t\t_renderer.autoClear = autoClear;\n\n\t}\n\n\t/**\n\t * This is a two-pass Gaussian blur for a cubemap. Normally this is done\n\t * vertically and horizontally, but this breaks down on a cube. Here we apply\n\t * the blur latitudinally (around the poles), and then longitudinally (towards\n\t * the poles) to approximate the orthogonally-separable blur. It is least\n\t * accurate at the poles, but still does a decent job.\n\t */\n\tfunction _blur( cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis ) {\n\n\t\t_halfBlur(\n\t\t\tcubeUVRenderTarget,\n\t\t\t_pingPongRenderTarget,\n\t\t\tlodIn,\n\t\t\tlodOut,\n\t\t\tsigma,\n\t\t\t'latitudinal',\n\t\t\tpoleAxis );\n\n\t\t_halfBlur(\n\t\t\t_pingPongRenderTarget,\n\t\t\tcubeUVRenderTarget,\n\t\t\tlodOut,\n\t\t\tlodOut,\n\t\t\tsigma,\n\t\t\t'longitudinal',\n\t\t\tpoleAxis );\n\n\t}\n\n\tfunction _halfBlur( targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis ) {\n\n\t\tif ( direction !== 'latitudinal' && direction !== 'longitudinal' ) {\n\n\t\t\tconsole.error(\n\t\t\t\t'blur direction must be either latitudinal or longitudinal!' );\n\n\t\t}\n\n\t\t// Number of standard deviations at which to cut off the discrete approximation.\n\t\tvar STANDARD_DEVIATIONS = 3;\n\n\t\tvar blurScene = new Scene();\n\t\tblurScene.add( new Mesh( _lodPlanes[ lodOut ], _blurMaterial ) );\n\t\tvar blurUniforms = _blurMaterial.uniforms;\n\n\t\tvar pixels = _sizeLods[ lodIn ] - 1;\n\t\tvar radiansPerPixel = isFinite( sigmaRadians ) ? Math.PI / ( 2 * pixels ) : 2 * Math.PI / ( 2 * MAX_SAMPLES - 1 );\n\t\tvar sigmaPixels = sigmaRadians / radiansPerPixel;\n\t\tvar samples = isFinite( sigmaRadians ) ? 1 + Math.floor( STANDARD_DEVIATIONS * sigmaPixels ) : MAX_SAMPLES;\n\n\t\tif ( samples > MAX_SAMPLES ) {\n\n\t\t\tconsole.warn( (\"sigmaRadians, \" + sigmaRadians + \", is too large and will clip, as it requested \" + samples + \" samples when the maximum is set to \" + MAX_SAMPLES) );\n\n\t\t}\n\n\t\tvar weights = [];\n\t\tvar sum = 0;\n\n\t\tfor ( var i = 0; i < MAX_SAMPLES; ++ i ) {\n\n\t\t\tvar x = i / sigmaPixels;\n\t\t\tvar weight = Math.exp( - x * x / 2 );\n\t\t\tweights.push( weight );\n\n\t\t\tif ( i == 0 ) {\n\n\t\t\t\tsum += weight;\n\n\t\t\t} else if ( i < samples ) {\n\n\t\t\t\tsum += 2 * weight;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( var i = 0; i < weights.length; i ++ ) {\n\n\t\t\tweights[ i ] = weights[ i ] / sum;\n\n\t\t}\n\n\t\tblurUniforms[ 'envMap' ].value = targetIn.texture;\n\t\tblurUniforms[ 'samples' ].value = samples;\n\t\tblurUniforms[ 'weights' ].value = weights;\n\t\tblurUniforms[ 'latitudinal' ].value = direction === 'latitudinal';\n\t\tif ( poleAxis ) {\n\n\t\t\tblurUniforms[ 'poleAxis' ].value = poleAxis;\n\n\t\t}\n\t\tblurUniforms[ 'dTheta' ].value = radiansPerPixel;\n\t\tblurUniforms[ 'mipInt' ].value = LOD_MAX - lodIn;\n\t\tblurUniforms[ 'inputEncoding' ].value = ENCODINGS[ targetIn.texture.encoding ];\n\t\tblurUniforms[ 'outputEncoding' ].value = ENCODINGS[ targetIn.texture.encoding ];\n\n\t\tvar outputSize = _sizeLods[ lodOut ];\n\t\tvar x = 3 * Math.max( 0, SIZE_MAX - 2 * outputSize );\n\t\tvar y = ( lodOut === 0 ? 0 : 2 * SIZE_MAX ) +\n\t\t2 * outputSize *\n\t\t\t( lodOut > LOD_MAX - LOD_MIN ? lodOut - LOD_MAX + LOD_MIN : 0 );\n\n\t\t_setViewport( targetOut, x, y, 3 * outputSize, 2 * outputSize );\n\t\t_renderer.setRenderTarget( targetOut );\n\t\t_renderer.render( blurScene, _flatCamera );\n\n\t}\n\n\tfunction _getBlurShader( maxSamples ) {\n\n\t\tvar weights = new Float32Array( maxSamples );\n\t\tvar poleAxis = new Vector3( 0, 1, 0 );\n\t\tvar shaderMaterial = new RawShaderMaterial( {\n\n\t\t\tdefines: { 'n': maxSamples },\n\n\t\t\tuniforms: {\n\t\t\t\t'envMap': { value: null },\n\t\t\t\t'samples': { value: 1 },\n\t\t\t\t'weights': { value: weights },\n\t\t\t\t'latitudinal': { value: false },\n\t\t\t\t'dTheta': { value: 0 },\n\t\t\t\t'mipInt': { value: 0 },\n\t\t\t\t'poleAxis': { value: poleAxis },\n\t\t\t\t'inputEncoding': { value: ENCODINGS[ LinearEncoding ] },\n\t\t\t\t'outputEncoding': { value: ENCODINGS[ LinearEncoding ] }\n\t\t\t},\n\n\t\t\tvertexShader: _getCommonVertexShader(),\n\n\t\t\tfragmentShader: (\"\\nprecision mediump float;\\nprecision mediump int;\\nvarying vec3 vOutputDirection;\\nuniform sampler2D envMap;\\nuniform int samples;\\nuniform float weights[n];\\nuniform bool latitudinal;\\nuniform float dTheta;\\nuniform float mipInt;\\nuniform vec3 poleAxis;\\n\\n\" + (_getEncodings()) + \"\\n\\n#define ENVMAP_TYPE_CUBE_UV\\n#include <cube_uv_reflection_fragment>\\n\\nvoid main() {\\n\\tgl_FragColor = vec4(0.0);\\n\\tfor (int i = 0; i < n; i++) {\\n\\t\\tif (i >= samples)\\n\\t\\t\\tbreak;\\n\\t\\tfor (int dir = -1; dir < 2; dir += 2) {\\n\\t\\t\\tif (i == 0 && dir == 1)\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\tvec3 axis = latitudinal ? poleAxis : cross(poleAxis, vOutputDirection);\\n\\t\\t\\tif (all(equal(axis, vec3(0.0))))\\n\\t\\t\\t\\taxis = cross(vec3(0.0, 1.0, 0.0), vOutputDirection);\\n\\t\\t\\taxis = normalize(axis);\\n\\t\\t\\tfloat theta = dTheta * float(dir * i);\\n\\t\\t\\tfloat cosTheta = cos(theta);\\n\\t\\t\\t// Rodrigues' axis-angle rotation\\n\\t\\t\\tvec3 sampleDirection = vOutputDirection * cosTheta\\n\\t\\t\\t\\t\\t+ cross(axis, vOutputDirection) * sin(theta)\\n\\t\\t\\t\\t\\t+ axis * dot(axis, vOutputDirection) * (1.0 - cosTheta);\\n\\t\\t\\tgl_FragColor.rgb +=\\n\\t\\t\\t\\t\\tweights[i] * bilinearCubeUV(envMap, sampleDirection, mipInt);\\n\\t\\t}\\n\\t}\\n\\tgl_FragColor = linearToOutputTexel(gl_FragColor);\\n}\\n\\t\\t\"),\n\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false\n\n\t\t} );\n\n\t\tshaderMaterial.type = 'SphericalGaussianBlur';\n\n\t\treturn shaderMaterial;\n\n\t}\n\n\tfunction _getEquirectShader() {\n\n\t\tvar texelSize = new Vector2( 1, 1 );\n\t\tvar shaderMaterial = new RawShaderMaterial( {\n\n\t\t\tuniforms: {\n\t\t\t\t'envMap': { value: null },\n\t\t\t\t'texelSize': { value: texelSize },\n\t\t\t\t'inputEncoding': { value: ENCODINGS[ LinearEncoding ] },\n\t\t\t\t'outputEncoding': { value: ENCODINGS[ LinearEncoding ] }\n\t\t\t},\n\n\t\t\tvertexShader: _getCommonVertexShader(),\n\n\t\t\tfragmentShader: (\"\\nprecision mediump float;\\nprecision mediump int;\\nvarying vec3 vOutputDirection;\\nuniform sampler2D envMap;\\nuniform vec2 texelSize;\\n\\n\" + (_getEncodings()) + \"\\n\\n#define RECIPROCAL_PI 0.31830988618\\n#define RECIPROCAL_PI2 0.15915494\\n\\nvoid main() {\\n\\tgl_FragColor = vec4(0.0);\\n\\tvec3 outputDirection = normalize(vOutputDirection);\\n\\tvec2 uv;\\n\\tuv.y = asin(clamp(outputDirection.y, -1.0, 1.0)) * RECIPROCAL_PI + 0.5;\\n\\tuv.x = atan(outputDirection.z, outputDirection.x) * RECIPROCAL_PI2 + 0.5;\\n\\tvec2 f = fract(uv / texelSize - 0.5);\\n\\tuv -= f * texelSize;\\n\\tvec3 tl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\\n\\tuv.x += texelSize.x;\\n\\tvec3 tr = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\\n\\tuv.y += texelSize.y;\\n\\tvec3 br = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\\n\\tuv.x -= texelSize.x;\\n\\tvec3 bl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\\n\\tvec3 tm = mix(tl, tr, f.x);\\n\\tvec3 bm = mix(bl, br, f.x);\\n\\tgl_FragColor.rgb = mix(tm, bm, f.y);\\n\\tgl_FragColor = linearToOutputTexel(gl_FragColor);\\n}\\n\\t\\t\"),\n\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false\n\n\t\t} );\n\n\t\tshaderMaterial.type = 'EquirectangularToCubeUV';\n\n\t\treturn shaderMaterial;\n\n\t}\n\n\tfunction _getCubemapShader() {\n\n\t\tvar shaderMaterial = new RawShaderMaterial( {\n\n\t\t\tuniforms: {\n\t\t\t\t'envMap': { value: null },\n\t\t\t\t'inputEncoding': { value: ENCODINGS[ LinearEncoding ] },\n\t\t\t\t'outputEncoding': { value: ENCODINGS[ LinearEncoding ] }\n\t\t\t},\n\n\t\t\tvertexShader: _getCommonVertexShader(),\n\n\t\t\tfragmentShader: (\"\\nprecision mediump float;\\nprecision mediump int;\\nvarying vec3 vOutputDirection;\\nuniform samplerCube envMap;\\n\\n\" + (_getEncodings()) + \"\\n\\nvoid main() {\\n\\tgl_FragColor = vec4(0.0);\\n\\tgl_FragColor.rgb = envMapTexelToLinear(textureCube(envMap, vec3( - vOutputDirection.x, vOutputDirection.yz ))).rgb;\\n\\tgl_FragColor = linearToOutputTexel(gl_FragColor);\\n}\\n\\t\\t\"),\n\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false\n\n\t\t} );\n\n\t\tshaderMaterial.type = 'CubemapToCubeUV';\n\n\t\treturn shaderMaterial;\n\n\t}\n\n\tfunction _getCommonVertexShader() {\n\n\t\treturn \"\\nprecision mediump float;\\nprecision mediump int;\\nattribute vec3 position;\\nattribute vec2 uv;\\nattribute float faceIndex;\\nvarying vec3 vOutputDirection;\\nvec3 getDirection(vec2 uv, float face) {\\n\\tuv = 2.0 * uv - 1.0;\\n\\tvec3 direction = vec3(uv, 1.0);\\n\\tif (face == 0.0) {\\n\\t\\tdirection = direction.zyx;\\n\\t\\tdirection.z *= -1.0;\\n\\t} else if (face == 1.0) {\\n\\t\\tdirection = direction.xzy;\\n\\t\\tdirection.z *= -1.0;\\n\\t} else if (face == 3.0) {\\n\\t\\tdirection = direction.zyx;\\n\\t\\tdirection.x *= -1.0;\\n\\t} else if (face == 4.0) {\\n\\t\\tdirection = direction.xzy;\\n\\t\\tdirection.y *= -1.0;\\n\\t} else if (face == 5.0) {\\n\\t\\tdirection.xz *= -1.0;\\n\\t}\\n\\treturn direction;\\n}\\nvoid main() {\\n\\tvOutputDirection = getDirection(uv, faceIndex);\\n\\tgl_Position = vec4( position, 1.0 );\\n}\\n\\t\";\n\n\t}\n\n\tfunction _getEncodings() {\n\n\t\treturn \"\\nuniform int inputEncoding;\\nuniform int outputEncoding;\\n\\n#include <encodings_pars_fragment>\\n\\nvec4 inputTexelToLinear(vec4 value){\\n\\tif(inputEncoding == 0){\\n\\t\\treturn value;\\n\\t}else if(inputEncoding == 1){\\n\\t\\treturn sRGBToLinear(value);\\n\\t}else if(inputEncoding == 2){\\n\\t\\treturn RGBEToLinear(value);\\n\\t}else if(inputEncoding == 3){\\n\\t\\treturn RGBMToLinear(value, 7.0);\\n\\t}else if(inputEncoding == 4){\\n\\t\\treturn RGBMToLinear(value, 16.0);\\n\\t}else if(inputEncoding == 5){\\n\\t\\treturn RGBDToLinear(value, 256.0);\\n\\t}else{\\n\\t\\treturn GammaToLinear(value, 2.2);\\n\\t}\\n}\\n\\nvec4 linearToOutputTexel(vec4 value){\\n\\tif(outputEncoding == 0){\\n\\t\\treturn value;\\n\\t}else if(outputEncoding == 1){\\n\\t\\treturn LinearTosRGB(value);\\n\\t}else if(outputEncoding == 2){\\n\\t\\treturn LinearToRGBE(value);\\n\\t}else if(outputEncoding == 3){\\n\\t\\treturn LinearToRGBM(value, 7.0);\\n\\t}else if(outputEncoding == 4){\\n\\t\\treturn LinearToRGBM(value, 16.0);\\n\\t}else if(outputEncoding == 5){\\n\\t\\treturn LinearToRGBD(value, 256.0);\\n\\t}else{\\n\\t\\treturn LinearToGamma(value, 2.2);\\n\\t}\\n}\\n\\nvec4 envMapTexelToLinear(vec4 color) {\\n\\treturn inputTexelToLinear(color);\\n}\\n\\t\";\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Face4( a, b, c, d, normal, color, materialIndex ) {\n\n\t\tconsole.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' );\n\t\treturn new Face3( a, b, c, normal, color, materialIndex );\n\n\t}\n\n\tvar LineStrip = 0;\n\n\tvar LinePieces = 1;\n\n\tfunction MeshFaceMaterial( materials ) {\n\n\t\tconsole.warn( 'THREE.MeshFaceMaterial has been removed. Use an Array instead.' );\n\t\treturn materials;\n\n\t}\n\n\tfunction MultiMaterial( materials ) {\n\n\t\tif ( materials === undefined ) { materials = []; }\n\n\t\tconsole.warn( 'THREE.MultiMaterial has been removed. Use an Array instead.' );\n\t\tmaterials.isMultiMaterial = true;\n\t\tmaterials.materials = materials;\n\t\tmaterials.clone = function () {\n\n\t\t\treturn materials.slice();\n\n\t\t};\n\t\treturn materials;\n\n\t}\n\n\tfunction PointCloud( geometry, material ) {\n\n\t\tconsole.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );\n\t\treturn new Points( geometry, material );\n\n\t}\n\n\tfunction Particle( material ) {\n\n\t\tconsole.warn( 'THREE.Particle has been renamed to THREE.Sprite.' );\n\t\treturn new Sprite( material );\n\n\t}\n\n\tfunction ParticleSystem( geometry, material ) {\n\n\t\tconsole.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );\n\t\treturn new Points( geometry, material );\n\n\t}\n\n\tfunction PointCloudMaterial( parameters ) {\n\n\t\tconsole.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );\n\t\treturn new PointsMaterial( parameters );\n\n\t}\n\n\tfunction ParticleBasicMaterial( parameters ) {\n\n\t\tconsole.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );\n\t\treturn new PointsMaterial( parameters );\n\n\t}\n\n\tfunction ParticleSystemMaterial( parameters ) {\n\n\t\tconsole.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );\n\t\treturn new PointsMaterial( parameters );\n\n\t}\n\n\tfunction Vertex( x, y, z ) {\n\n\t\tconsole.warn( 'THREE.Vertex has been removed. Use THREE.Vector3 instead.' );\n\t\treturn new Vector3( x, y, z );\n\n\t}\n\n\t//\n\n\tfunction DynamicBufferAttribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setUsage( THREE.DynamicDrawUsage ) instead.' );\n\t\treturn new BufferAttribute( array, itemSize ).setUsage( DynamicDrawUsage );\n\n\t}\n\n\tfunction Int8Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.' );\n\t\treturn new Int8BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Uint8Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.' );\n\t\treturn new Uint8BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Uint8ClampedAttribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.' );\n\t\treturn new Uint8ClampedBufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Int16Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.' );\n\t\treturn new Int16BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Uint16Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.' );\n\t\treturn new Uint16BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Int32Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.' );\n\t\treturn new Int32BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Uint32Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.' );\n\t\treturn new Uint32BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Float32Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.' );\n\t\treturn new Float32BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Float64Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.' );\n\t\treturn new Float64BufferAttribute( array, itemSize );\n\n\t}\n\n\t//\n\n\tCurve.create = function ( construct, getPoint ) {\n\n\t\tconsole.log( 'THREE.Curve.create() has been deprecated' );\n\n\t\tconstruct.prototype = Object.create( Curve.prototype );\n\t\tconstruct.prototype.constructor = construct;\n\t\tconstruct.prototype.getPoint = getPoint;\n\n\t\treturn construct;\n\n\t};\n\n\t//\n\n\tObject.assign( CurvePath.prototype, {\n\n\t\tcreatePointsGeometry: function ( divisions ) {\n\n\t\t\tconsole.warn( 'THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );\n\n\t\t\t// generate geometry from path points (for Line or Points objects)\n\n\t\t\tvar pts = this.getPoints( divisions );\n\t\t\treturn this.createGeometry( pts );\n\n\t\t},\n\n\t\tcreateSpacedPointsGeometry: function ( divisions ) {\n\n\t\t\tconsole.warn( 'THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );\n\n\t\t\t// generate geometry from equidistant sampling along the path\n\n\t\t\tvar pts = this.getSpacedPoints( divisions );\n\t\t\treturn this.createGeometry( pts );\n\n\t\t},\n\n\t\tcreateGeometry: function ( points ) {\n\n\t\t\tconsole.warn( 'THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );\n\n\t\t\tvar geometry = new Geometry();\n\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tvar point = points[ i ];\n\t\t\t\tgeometry.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );\n\n\t\t\t}\n\n\t\t\treturn geometry;\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.assign( Path.prototype, {\n\n\t\tfromPoints: function ( points ) {\n\n\t\t\tconsole.warn( 'THREE.Path: .fromPoints() has been renamed to .setFromPoints().' );\n\t\t\treturn this.setFromPoints( points );\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tfunction ClosedSplineCurve3( points ) {\n\n\t\tconsole.warn( 'THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );\n\n\t\tCatmullRomCurve3.call( this, points );\n\t\tthis.type = 'catmullrom';\n\t\tthis.closed = true;\n\n\t}\n\n\tClosedSplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );\n\n\t//\n\n\tfunction SplineCurve3( points ) {\n\n\t\tconsole.warn( 'THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );\n\n\t\tCatmullRomCurve3.call( this, points );\n\t\tthis.type = 'catmullrom';\n\n\t}\n\n\tSplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );\n\n\t//\n\n\tfunction Spline( points ) {\n\n\t\tconsole.warn( 'THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.' );\n\n\t\tCatmullRomCurve3.call( this, points );\n\t\tthis.type = 'catmullrom';\n\n\t}\n\n\tSpline.prototype = Object.create( CatmullRomCurve3.prototype );\n\n\tObject.assign( Spline.prototype, {\n\n\t\tinitFromArray: function ( /* a */ ) {\n\n\t\t\tconsole.error( 'THREE.Spline: .initFromArray() has been removed.' );\n\n\t\t},\n\t\tgetControlPointsArray: function ( /* optionalTarget */ ) {\n\n\t\t\tconsole.error( 'THREE.Spline: .getControlPointsArray() has been removed.' );\n\n\t\t},\n\t\treparametrizeByArcLength: function ( /* samplingCoef */ ) {\n\n\t\t\tconsole.error( 'THREE.Spline: .reparametrizeByArcLength() has been removed.' );\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tfunction AxisHelper( size ) {\n\n\t\tconsole.warn( 'THREE.AxisHelper has been renamed to THREE.AxesHelper.' );\n\t\treturn new AxesHelper( size );\n\n\t}\n\n\tfunction BoundingBoxHelper( object, color ) {\n\n\t\tconsole.warn( 'THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.' );\n\t\treturn new BoxHelper( object, color );\n\n\t}\n\n\tfunction EdgesHelper( object, hex ) {\n\n\t\tconsole.warn( 'THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.' );\n\t\treturn new LineSegments( new EdgesGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\n\n\t}\n\n\tGridHelper.prototype.setColors = function () {\n\n\t\tconsole.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );\n\n\t};\n\n\tSkeletonHelper.prototype.update = function () {\n\n\t\tconsole.error( 'THREE.SkeletonHelper: update() no longer needs to be called.' );\n\n\t};\n\n\tfunction WireframeHelper( object, hex ) {\n\n\t\tconsole.warn( 'THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.' );\n\t\treturn new LineSegments( new WireframeGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\n\n\t}\n\n\t//\n\n\tObject.assign( Loader.prototype, {\n\n\t\textractUrlBase: function ( url ) {\n\n\t\t\tconsole.warn( 'THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.' );\n\t\t\treturn LoaderUtils.extractUrlBase( url );\n\n\t\t}\n\n\t} );\n\n\tLoader.Handlers = {\n\n\t\tadd: function ( /* regex, loader */ ) {\n\n\t\t\tconsole.error( 'THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.' );\n\n\t\t},\n\n\t\tget: function ( /* file */ ) {\n\n\t\t\tconsole.error( 'THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.' );\n\n\t\t}\n\n\t};\n\n\tfunction XHRLoader( manager ) {\n\n\t\tconsole.warn( 'THREE.XHRLoader has been renamed to THREE.FileLoader.' );\n\t\treturn new FileLoader( manager );\n\n\t}\n\n\tfunction BinaryTextureLoader( manager ) {\n\n\t\tconsole.warn( 'THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.' );\n\t\treturn new DataTextureLoader( manager );\n\n\t}\n\n\tObject.assign( ObjectLoader.prototype, {\n\n\t\tsetTexturePath: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().' );\n\t\t\treturn this.setResourcePath( value );\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.assign( Box2.prototype, {\n\n\t\tcenter: function ( optionalTarget ) {\n\n\t\t\tconsole.warn( 'THREE.Box2: .center() has been renamed to .getCenter().' );\n\t\t\treturn this.getCenter( optionalTarget );\n\n\t\t},\n\t\tempty: function () {\n\n\t\t\tconsole.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );\n\t\t\treturn this.isEmpty();\n\n\t\t},\n\t\tisIntersectionBox: function ( box ) {\n\n\t\t\tconsole.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\t\treturn this.intersectsBox( box );\n\n\t\t},\n\t\tsize: function ( optionalTarget ) {\n\n\t\t\tconsole.warn( 'THREE.Box2: .size() has been renamed to .getSize().' );\n\t\t\treturn this.getSize( optionalTarget );\n\n\t\t}\n\t} );\n\n\tObject.assign( Box3.prototype, {\n\n\t\tcenter: function ( optionalTarget ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .center() has been renamed to .getCenter().' );\n\t\t\treturn this.getCenter( optionalTarget );\n\n\t\t},\n\t\tempty: function () {\n\n\t\t\tconsole.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );\n\t\t\treturn this.isEmpty();\n\n\t\t},\n\t\tisIntersectionBox: function ( box ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\t\treturn this.intersectsBox( box );\n\n\t\t},\n\t\tisIntersectionSphere: function ( sphere ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n\t\t\treturn this.intersectsSphere( sphere );\n\n\t\t},\n\t\tsize: function ( optionalTarget ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .size() has been renamed to .getSize().' );\n\t\t\treturn this.getSize( optionalTarget );\n\n\t\t}\n\t} );\n\n\tFrustum.prototype.setFromMatrix = function ( m ) {\n\n\t\tconsole.warn( 'THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix().' );\n\t\treturn this.setFromProjectionMatrix( m );\n\n\t};\n\n\tLine3.prototype.center = function ( optionalTarget ) {\n\n\t\tconsole.warn( 'THREE.Line3: .center() has been renamed to .getCenter().' );\n\t\treturn this.getCenter( optionalTarget );\n\n\t};\n\n\tObject.assign( MathUtils, {\n\n\t\trandom16: function () {\n\n\t\t\tconsole.warn( 'THREE.Math: .random16() has been deprecated. Use Math.random() instead.' );\n\t\t\treturn Math.random();\n\n\t\t},\n\n\t\tnearestPowerOfTwo: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().' );\n\t\t\treturn MathUtils.floorPowerOfTwo( value );\n\n\t\t},\n\n\t\tnextPowerOfTwo: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().' );\n\t\t\treturn MathUtils.ceilPowerOfTwo( value );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Matrix3.prototype, {\n\n\t\tflattenToArrayOffset: function ( array, offset ) {\n\n\t\t\tconsole.warn( \"THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.\" );\n\t\t\treturn this.toArray( array, offset );\n\n\t\t},\n\t\tmultiplyVector3: function ( vector ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );\n\t\t\treturn vector.applyMatrix3( this );\n\n\t\t},\n\t\tmultiplyVector3Array: function ( /* a */ ) {\n\n\t\t\tconsole.error( 'THREE.Matrix3: .multiplyVector3Array() has been removed.' );\n\n\t\t},\n\t\tapplyToBufferAttribute: function ( attribute ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead.' );\n\t\t\treturn attribute.applyMatrix3( this );\n\n\t\t},\n\t\tapplyToVector3Array: function ( /* array, offset, length */ ) {\n\n\t\t\tconsole.error( 'THREE.Matrix3: .applyToVector3Array() has been removed.' );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Matrix4.prototype, {\n\n\t\textractPosition: function ( m ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );\n\t\t\treturn this.copyPosition( m );\n\n\t\t},\n\t\tflattenToArrayOffset: function ( array, offset ) {\n\n\t\t\tconsole.warn( \"THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.\" );\n\t\t\treturn this.toArray( array, offset );\n\n\t\t},\n\t\tgetPosition: function () {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );\n\t\t\treturn new Vector3().setFromMatrixColumn( this, 3 );\n\n\t\t},\n\t\tsetRotationFromQuaternion: function ( q ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );\n\t\t\treturn this.makeRotationFromQuaternion( q );\n\n\t\t},\n\t\tmultiplyToArray: function () {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyToArray() has been removed.' );\n\n\t\t},\n\t\tmultiplyVector3: function ( vector ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\t\treturn vector.applyMatrix4( this );\n\n\t\t},\n\t\tmultiplyVector4: function ( vector ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\t\treturn vector.applyMatrix4( this );\n\n\t\t},\n\t\tmultiplyVector3Array: function ( /* a */ ) {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .multiplyVector3Array() has been removed.' );\n\n\t\t},\n\t\trotateAxis: function ( v ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );\n\t\t\tv.transformDirection( this );\n\n\t\t},\n\t\tcrossVector: function ( vector ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\t\treturn vector.applyMatrix4( this );\n\n\t\t},\n\t\ttranslate: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .translate() has been removed.' );\n\n\t\t},\n\t\trotateX: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateX() has been removed.' );\n\n\t\t},\n\t\trotateY: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateY() has been removed.' );\n\n\t\t},\n\t\trotateZ: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateZ() has been removed.' );\n\n\t\t},\n\t\trotateByAxis: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );\n\n\t\t},\n\t\tapplyToBufferAttribute: function ( attribute ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead.' );\n\t\t\treturn attribute.applyMatrix4( this );\n\n\t\t},\n\t\tapplyToVector3Array: function ( /* array, offset, length */ ) {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .applyToVector3Array() has been removed.' );\n\n\t\t},\n\t\tmakeFrustum: function ( left, right, bottom, top, near, far ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.' );\n\t\t\treturn this.makePerspective( left, right, top, bottom, near, far );\n\n\t\t}\n\n\t} );\n\n\tPlane.prototype.isIntersectionLine = function ( line ) {\n\n\t\tconsole.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );\n\t\treturn this.intersectsLine( line );\n\n\t};\n\n\tQuaternion.prototype.multiplyVector3 = function ( vector ) {\n\n\t\tconsole.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );\n\t\treturn vector.applyQuaternion( this );\n\n\t};\n\n\tObject.assign( Ray.prototype, {\n\n\t\tisIntersectionBox: function ( box ) {\n\n\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\t\treturn this.intersectsBox( box );\n\n\t\t},\n\t\tisIntersectionPlane: function ( plane ) {\n\n\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );\n\t\t\treturn this.intersectsPlane( plane );\n\n\t\t},\n\t\tisIntersectionSphere: function ( sphere ) {\n\n\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n\t\t\treturn this.intersectsSphere( sphere );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Triangle.prototype, {\n\n\t\tarea: function () {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .area() has been renamed to .getArea().' );\n\t\t\treturn this.getArea();\n\n\t\t},\n\t\tbarycoordFromPoint: function ( point, target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );\n\t\t\treturn this.getBarycoord( point, target );\n\n\t\t},\n\t\tmidpoint: function ( target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .midpoint() has been renamed to .getMidpoint().' );\n\t\t\treturn this.getMidpoint( target );\n\n\t\t},\n\t\tnormal: function ( target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );\n\t\t\treturn this.getNormal( target );\n\n\t\t},\n\t\tplane: function ( target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .plane() has been renamed to .getPlane().' );\n\t\t\treturn this.getPlane( target );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Triangle, {\n\n\t\tbarycoordFromPoint: function ( point, a, b, c, target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );\n\t\t\treturn Triangle.getBarycoord( point, a, b, c, target );\n\n\t\t},\n\t\tnormal: function ( a, b, c, target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );\n\t\t\treturn Triangle.getNormal( a, b, c, target );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Shape.prototype, {\n\n\t\textractAllPoints: function ( divisions ) {\n\n\t\t\tconsole.warn( 'THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.' );\n\t\t\treturn this.extractPoints( divisions );\n\n\t\t},\n\t\textrude: function ( options ) {\n\n\t\t\tconsole.warn( 'THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.' );\n\t\t\treturn new ExtrudeGeometry( this, options );\n\n\t\t},\n\t\tmakeGeometry: function ( options ) {\n\n\t\t\tconsole.warn( 'THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.' );\n\t\t\treturn new ShapeGeometry( this, options );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Vector2.prototype, {\n\n\t\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n\t\t\treturn this.fromBufferAttribute( attribute, index, offset );\n\n\t\t},\n\t\tdistanceToManhattan: function ( v ) {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );\n\t\t\treturn this.manhattanDistanceTo( v );\n\n\t\t},\n\t\tlengthManhattan: function () {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().' );\n\t\t\treturn this.manhattanLength();\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Vector3.prototype, {\n\n\t\tsetEulerFromRotationMatrix: function () {\n\n\t\t\tconsole.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );\n\n\t\t},\n\t\tsetEulerFromQuaternion: function () {\n\n\t\t\tconsole.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );\n\n\t\t},\n\t\tgetPositionFromMatrix: function ( m ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );\n\t\t\treturn this.setFromMatrixPosition( m );\n\n\t\t},\n\t\tgetScaleFromMatrix: function ( m ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );\n\t\t\treturn this.setFromMatrixScale( m );\n\n\t\t},\n\t\tgetColumnFromMatrix: function ( index, matrix ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );\n\t\t\treturn this.setFromMatrixColumn( matrix, index );\n\n\t\t},\n\t\tapplyProjection: function ( m ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.' );\n\t\t\treturn this.applyMatrix4( m );\n\n\t\t},\n\t\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n\t\t\treturn this.fromBufferAttribute( attribute, index, offset );\n\n\t\t},\n\t\tdistanceToManhattan: function ( v ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );\n\t\t\treturn this.manhattanDistanceTo( v );\n\n\t\t},\n\t\tlengthManhattan: function () {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().' );\n\t\t\treturn this.manhattanLength();\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Vector4.prototype, {\n\n\t\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\t\tconsole.warn( 'THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n\t\t\treturn this.fromBufferAttribute( attribute, index, offset );\n\n\t\t},\n\t\tlengthManhattan: function () {\n\n\t\t\tconsole.warn( 'THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().' );\n\t\t\treturn this.manhattanLength();\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.assign( Geometry.prototype, {\n\n\t\tcomputeTangents: function () {\n\n\t\t\tconsole.error( 'THREE.Geometry: .computeTangents() has been removed.' );\n\n\t\t},\n\t\tcomputeLineDistances: function () {\n\n\t\t\tconsole.error( 'THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.' );\n\n\t\t},\n\t\tapplyMatrix: function ( matrix ) {\n\n\t\t\tconsole.warn( 'THREE.Geometry: .applyMatrix() has been renamed to .applyMatrix4().' );\n\t\t\treturn this.applyMatrix4( matrix );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Object3D.prototype, {\n\n\t\tgetChildByName: function ( name ) {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );\n\t\t\treturn this.getObjectByName( name );\n\n\t\t},\n\t\trenderDepth: function () {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );\n\n\t\t},\n\t\ttranslate: function ( distance, axis ) {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );\n\t\t\treturn this.translateOnAxis( axis, distance );\n\n\t\t},\n\t\tgetWorldRotation: function () {\n\n\t\t\tconsole.error( 'THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.' );\n\n\t\t},\n\t\tapplyMatrix: function ( matrix ) {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4().' );\n\t\t\treturn this.applyMatrix4( matrix );\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( Object3D.prototype, {\n\n\t\teulerOrder: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\t\t\t\treturn this.rotation.order;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\t\t\t\tthis.rotation.order = value;\n\n\t\t\t}\n\t\t},\n\t\tuseQuaternion: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.assign( Mesh.prototype, {\n\n\t\tsetDrawMode: function () {\n\n\t\t\tconsole.error( 'THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.' );\n\n\t\t},\n\n\t} );\n\n\tObject.defineProperties( Mesh.prototype, {\n\n\t\tdrawMode: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.error( 'THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode.' );\n\t\t\t\treturn TrianglesDrawMode;\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.error( 'THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.' );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( LOD.prototype, {\n\n\t\tobjects: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.LOD: .objects has been renamed to .levels.' );\n\t\t\t\treturn this.levels;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperty( Skeleton.prototype, 'useVertexTexture', {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );\n\n\t\t}\n\n\t} );\n\n\tSkinnedMesh.prototype.initBones = function () {\n\n\t\tconsole.error( 'THREE.SkinnedMesh: initBones() has been removed.' );\n\n\t};\n\n\tObject.defineProperty( Curve.prototype, '__arcLengthDivisions', {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );\n\t\t\treturn this.arcLengthDivisions;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );\n\t\t\tthis.arcLengthDivisions = value;\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tPerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {\n\n\t\tconsole.warn( \"THREE.PerspectiveCamera.setLens is deprecated. \" +\n\t\t\t\t\"Use .setFocalLength and .filmGauge for a photographic setup.\" );\n\n\t\tif ( filmGauge !== undefined ) { this.filmGauge = filmGauge; }\n\t\tthis.setFocalLength( focalLength );\n\n\t};\n\n\t//\n\n\tObject.defineProperties( Light.prototype, {\n\t\tonlyShadow: {\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .onlyShadow has been removed.' );\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraFov: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );\n\t\t\t\tthis.shadow.camera.fov = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraLeft: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );\n\t\t\t\tthis.shadow.camera.left = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraRight: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );\n\t\t\t\tthis.shadow.camera.right = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraTop: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );\n\t\t\t\tthis.shadow.camera.top = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraBottom: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );\n\t\t\t\tthis.shadow.camera.bottom = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraNear: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );\n\t\t\t\tthis.shadow.camera.near = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraFar: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );\n\t\t\t\tthis.shadow.camera.far = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraVisible: {\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );\n\n\t\t\t}\n\t\t},\n\t\tshadowBias: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );\n\t\t\t\tthis.shadow.bias = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowDarkness: {\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowDarkness has been removed.' );\n\n\t\t\t}\n\t\t},\n\t\tshadowMapWidth: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );\n\t\t\t\tthis.shadow.mapSize.width = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowMapHeight: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );\n\t\t\t\tthis.shadow.mapSize.height = value;\n\n\t\t\t}\n\t\t}\n\t} );\n\n\t//\n\n\tObject.defineProperties( BufferAttribute.prototype, {\n\n\t\tlength: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute: .length has been deprecated. Use .count instead.' );\n\t\t\t\treturn this.array.length;\n\n\t\t\t}\n\t\t},\n\t\tdynamic: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.' );\n\t\t\t\treturn this.usage === DynamicDrawUsage;\n\n\t\t\t},\n\t\t\tset: function ( /* value */ ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.' );\n\t\t\t\tthis.setUsage( DynamicDrawUsage );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.assign( BufferAttribute.prototype, {\n\t\tsetDynamic: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead.' );\n\t\t\tthis.setUsage( value === true ? DynamicDrawUsage : StaticDrawUsage );\n\t\t\treturn this;\n\n\t\t},\n\t\tcopyIndicesArray: function ( /* indices */ ) {\n\n\t\t\tconsole.error( 'THREE.BufferAttribute: .copyIndicesArray() has been removed.' );\n\n\t\t},\n\t\tsetArray: function ( /* array */ ) {\n\n\t\t\tconsole.error( 'THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers' );\n\n\t\t}\n\t} );\n\n\tObject.assign( BufferGeometry.prototype, {\n\n\t\taddIndex: function ( index ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );\n\t\t\tthis.setIndex( index );\n\n\t\t},\n\t\taddAttribute: function ( name, attribute ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute().' );\n\n\t\t\tif ( ! ( attribute && attribute.isBufferAttribute ) && ! ( attribute && attribute.isInterleavedBufferAttribute ) ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );\n\n\t\t\t\treturn this.setAttribute( name, new BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );\n\n\t\t\t}\n\n\t\t\tif ( name === 'index' ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );\n\t\t\t\tthis.setIndex( attribute );\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\treturn this.setAttribute( name, attribute );\n\n\t\t},\n\t\taddDrawCall: function ( start, count, indexOffset ) {\n\n\t\t\tif ( indexOffset !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );\n\n\t\t\t}\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );\n\t\t\tthis.addGroup( start, count );\n\n\t\t},\n\t\tclearDrawCalls: function () {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );\n\t\t\tthis.clearGroups();\n\n\t\t},\n\t\tcomputeTangents: function () {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );\n\n\t\t},\n\t\tcomputeOffsets: function () {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );\n\n\t\t},\n\t\tremoveAttribute: function ( name ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute().' );\n\n\t\t\treturn this.deleteAttribute( name );\n\n\t\t},\n\t\tapplyMatrix: function ( matrix ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4().' );\n\t\t\treturn this.applyMatrix4( matrix );\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( BufferGeometry.prototype, {\n\n\t\tdrawcalls: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );\n\t\t\t\treturn this.groups;\n\n\t\t\t}\n\t\t},\n\t\toffsets: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );\n\t\t\t\treturn this.groups;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( InterleavedBuffer.prototype, {\n\n\t\tdynamic: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.' );\n\t\t\t\treturn this.usage === DynamicDrawUsage;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.' );\n\t\t\t\tthis.setUsage( value );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.assign( InterleavedBuffer.prototype, {\n\t\tsetDynamic: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead.' );\n\t\t\tthis.setUsage( value === true ? DynamicDrawUsage : StaticDrawUsage );\n\t\t\treturn this;\n\n\t\t},\n\t\tsetArray: function ( /* array */ ) {\n\n\t\t\tconsole.error( 'THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers' );\n\n\t\t}\n\t} );\n\n\t//\n\n\tObject.assign( ExtrudeBufferGeometry.prototype, {\n\n\t\tgetArrays: function () {\n\n\t\t\tconsole.error( 'THREE.ExtrudeBufferGeometry: .getArrays() has been removed.' );\n\n\t\t},\n\n\t\taddShapeList: function () {\n\n\t\t\tconsole.error( 'THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.' );\n\n\t\t},\n\n\t\taddShape: function () {\n\n\t\t\tconsole.error( 'THREE.ExtrudeBufferGeometry: .addShape() has been removed.' );\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.defineProperties( Uniform.prototype, {\n\n\t\tdynamic: {\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.' );\n\n\t\t\t}\n\t\t},\n\t\tonUpdate: {\n\t\t\tvalue: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.' );\n\t\t\t\treturn this;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.defineProperties( Material.prototype, {\n\n\t\twrapAround: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Material: .wrapAround has been removed.' );\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Material: .wrapAround has been removed.' );\n\n\t\t\t}\n\t\t},\n\n\t\toverdraw: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Material: .overdraw has been removed.' );\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Material: .overdraw has been removed.' );\n\n\t\t\t}\n\t\t},\n\n\t\twrapRGB: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Material: .wrapRGB has been removed.' );\n\t\t\t\treturn new Color();\n\n\t\t\t}\n\t\t},\n\n\t\tshading: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.error( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\n\t\t\t\tthis.flatShading = ( value === FlatShading );\n\n\t\t\t}\n\t\t},\n\n\t\tstencilMask: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.' );\n\t\t\t\treturn this.stencilFuncMask;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.' );\n\t\t\t\tthis.stencilFuncMask = value;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( MeshPhongMaterial.prototype, {\n\n\t\tmetal: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );\n\t\t\t\treturn false;\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( ShaderMaterial.prototype, {\n\n\t\tderivatives: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n\t\t\t\treturn this.extensions.derivatives;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n\t\t\t\tthis.extensions.derivatives = value;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.assign( WebGLRenderer.prototype, {\n\n\t\tclearTarget: function ( renderTarget, color, depth, stencil ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.' );\n\t\t\tthis.setRenderTarget( renderTarget );\n\t\t\tthis.clear( color, depth, stencil );\n\n\t\t},\n\t\tanimate: function ( callback ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .animate() is now .setAnimationLoop().' );\n\t\t\tthis.setAnimationLoop( callback );\n\n\t\t},\n\t\tgetCurrentRenderTarget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().' );\n\t\t\treturn this.getRenderTarget();\n\n\t\t},\n\t\tgetMaxAnisotropy: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().' );\n\t\t\treturn this.capabilities.getMaxAnisotropy();\n\n\t\t},\n\t\tgetPrecision: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.' );\n\t\t\treturn this.capabilities.precision;\n\n\t\t},\n\t\tresetGLState: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .resetGLState() is now .state.reset().' );\n\t\t\treturn this.state.reset();\n\n\t\t},\n\t\tsupportsFloatTextures: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\'OES_texture_float\\' ).' );\n\t\t\treturn this.extensions.get( 'OES_texture_float' );\n\n\t\t},\n\t\tsupportsHalfFloatTextures: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\'OES_texture_half_float\\' ).' );\n\t\t\treturn this.extensions.get( 'OES_texture_half_float' );\n\n\t\t},\n\t\tsupportsStandardDerivatives: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\'OES_standard_derivatives\\' ).' );\n\t\t\treturn this.extensions.get( 'OES_standard_derivatives' );\n\n\t\t},\n\t\tsupportsCompressedTextureS3TC: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\'WEBGL_compressed_texture_s3tc\\' ).' );\n\t\t\treturn this.extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\n\t\t},\n\t\tsupportsCompressedTexturePVRTC: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\'WEBGL_compressed_texture_pvrtc\\' ).' );\n\t\t\treturn this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\n\t\t},\n\t\tsupportsBlendMinMax: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\'EXT_blend_minmax\\' ).' );\n\t\t\treturn this.extensions.get( 'EXT_blend_minmax' );\n\n\t\t},\n\t\tsupportsVertexTextures: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.' );\n\t\t\treturn this.capabilities.vertexTextures;\n\n\t\t},\n\t\tsupportsInstancedArrays: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\'ANGLE_instanced_arrays\\' ).' );\n\t\t\treturn this.extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t},\n\t\tenableScissorTest: function ( boolean ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );\n\t\t\tthis.setScissorTest( boolean );\n\n\t\t},\n\t\tinitMaterial: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );\n\n\t\t},\n\t\taddPrePlugin: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );\n\n\t\t},\n\t\taddPostPlugin: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );\n\n\t\t},\n\t\tupdateShadowMap: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );\n\n\t\t},\n\t\tsetFaceCulling: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .setFaceCulling() has been removed.' );\n\n\t\t},\n\t\tallocTextureUnit: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .allocTextureUnit() has been removed.' );\n\n\t\t},\n\t\tsetTexture: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .setTexture() has been removed.' );\n\n\t\t},\n\t\tsetTexture2D: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .setTexture2D() has been removed.' );\n\n\t\t},\n\t\tsetTextureCube: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .setTextureCube() has been removed.' );\n\n\t\t},\n\t\tgetActiveMipMapLevel: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel().' );\n\t\t\treturn this.getActiveMipmapLevel();\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( WebGLRenderer.prototype, {\n\n\t\tshadowMapEnabled: {\n\t\t\tget: function () {\n\n\t\t\t\treturn this.shadowMap.enabled;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );\n\t\t\t\tthis.shadowMap.enabled = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowMapType: {\n\t\t\tget: function () {\n\n\t\t\t\treturn this.shadowMap.type;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );\n\t\t\t\tthis.shadowMap.type = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowMapCullFace: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );\n\t\t\t\treturn undefined;\n\n\t\t\t},\n\t\t\tset: function ( /* value */ ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );\n\n\t\t\t}\n\t\t},\n\t\tcontext: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .context has been removed. Use .getContext() instead.' );\n\t\t\t\treturn this.getContext();\n\n\t\t\t}\n\t\t},\n\t\tvr: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .vr has been renamed to .xr' );\n\t\t\t\treturn this.xr;\n\n\t\t\t}\n\t\t},\n\t\tgammaInput: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.' );\n\t\t\t\treturn false;\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.' );\n\n\t\t\t}\n\t\t},\n\t\tgammaOutput: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.' );\n\t\t\t\treturn false;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.' );\n\t\t\t\tthis.outputEncoding = ( value === true ) ? sRGBEncoding : LinearEncoding;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( WebGLShadowMap.prototype, {\n\n\t\tcullFace: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );\n\t\t\t\treturn undefined;\n\n\t\t\t},\n\t\t\tset: function ( /* cullFace */ ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );\n\n\t\t\t}\n\t\t},\n\t\trenderReverseSided: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );\n\t\t\t\treturn undefined;\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );\n\n\t\t\t}\n\t\t},\n\t\trenderSingleSided: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );\n\t\t\t\treturn undefined;\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tfunction WebGLRenderTargetCube( width, height, options ) {\n\n\t\tconsole.warn( 'THREE.WebGLRenderTargetCube( width, height, options ) is now WebGLCubeRenderTarget( size, options ).' );\n\t\treturn new WebGLCubeRenderTarget( width, options );\n\n\t}\n\n\t//\n\n\tObject.defineProperties( WebGLRenderTarget.prototype, {\n\n\t\twrapS: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\t\t\t\treturn this.texture.wrapS;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\t\t\t\tthis.texture.wrapS = value;\n\n\t\t\t}\n\t\t},\n\t\twrapT: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\t\t\t\treturn this.texture.wrapT;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\t\t\t\tthis.texture.wrapT = value;\n\n\t\t\t}\n\t\t},\n\t\tmagFilter: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\t\t\t\treturn this.texture.magFilter;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\t\t\t\tthis.texture.magFilter = value;\n\n\t\t\t}\n\t\t},\n\t\tminFilter: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\t\t\t\treturn this.texture.minFilter;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\t\t\t\tthis.texture.minFilter = value;\n\n\t\t\t}\n\t\t},\n\t\tanisotropy: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\t\t\t\treturn this.texture.anisotropy;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\t\t\t\tthis.texture.anisotropy = value;\n\n\t\t\t}\n\t\t},\n\t\toffset: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\t\t\t\treturn this.texture.offset;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\t\t\t\tthis.texture.offset = value;\n\n\t\t\t}\n\t\t},\n\t\trepeat: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\t\t\t\treturn this.texture.repeat;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\t\t\t\tthis.texture.repeat = value;\n\n\t\t\t}\n\t\t},\n\t\tformat: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\t\t\t\treturn this.texture.format;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\t\t\t\tthis.texture.format = value;\n\n\t\t\t}\n\t\t},\n\t\ttype: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\t\t\t\treturn this.texture.type;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\t\t\t\tthis.texture.type = value;\n\n\t\t\t}\n\t\t},\n\t\tgenerateMipmaps: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\t\t\t\treturn this.texture.generateMipmaps;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\t\t\t\tthis.texture.generateMipmaps = value;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.defineProperties( Audio.prototype, {\n\n\t\tload: {\n\t\t\tvalue: function ( file ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.' );\n\t\t\t\tvar scope = this;\n\t\t\t\tvar audioLoader = new AudioLoader();\n\t\t\t\taudioLoader.load( file, function ( buffer ) {\n\n\t\t\t\t\tscope.setBuffer( buffer );\n\n\t\t\t\t} );\n\t\t\t\treturn this;\n\n\t\t\t}\n\t\t},\n\t\tstartTime: {\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: .startTime is now .play( delay ).' );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tAudioAnalyser.prototype.getData = function () {\n\n\t\tconsole.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );\n\t\treturn this.getFrequencyData();\n\n\t};\n\n\t//\n\n\tCubeCamera.prototype.updateCubeMap = function ( renderer, scene ) {\n\n\t\tconsole.warn( 'THREE.CubeCamera: .updateCubeMap() is now .update().' );\n\t\treturn this.update( renderer, scene );\n\n\t};\n\n\t//\n\n\tvar GeometryUtils = {\n\n\t\tmerge: function ( geometry1, geometry2, materialIndexOffset ) {\n\n\t\t\tconsole.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );\n\t\t\tvar matrix;\n\n\t\t\tif ( geometry2.isMesh ) {\n\n\t\t\t\tgeometry2.matrixAutoUpdate && geometry2.updateMatrix();\n\n\t\t\t\tmatrix = geometry2.matrix;\n\t\t\t\tgeometry2 = geometry2.geometry;\n\n\t\t\t}\n\n\t\t\tgeometry1.merge( geometry2, matrix, materialIndexOffset );\n\n\t\t},\n\n\t\tcenter: function ( geometry ) {\n\n\t\t\tconsole.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );\n\t\t\treturn geometry.center();\n\n\t\t}\n\n\t};\n\n\tImageUtils.crossOrigin = undefined;\n\n\tImageUtils.loadTexture = function ( url, mapping, onLoad, onError ) {\n\n\t\tconsole.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );\n\n\t\tvar loader = new TextureLoader();\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\tvar texture = loader.load( url, onLoad, undefined, onError );\n\n\t\tif ( mapping ) { texture.mapping = mapping; }\n\n\t\treturn texture;\n\n\t};\n\n\tImageUtils.loadTextureCube = function ( urls, mapping, onLoad, onError ) {\n\n\t\tconsole.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );\n\n\t\tvar loader = new CubeTextureLoader();\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\tvar texture = loader.load( urls, onLoad, undefined, onError );\n\n\t\tif ( mapping ) { texture.mapping = mapping; }\n\n\t\treturn texture;\n\n\t};\n\n\tImageUtils.loadCompressedTexture = function () {\n\n\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );\n\n\t};\n\n\tImageUtils.loadCompressedTextureCube = function () {\n\n\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );\n\n\t};\n\n\t//\n\n\tfunction CanvasRenderer() {\n\n\t\tconsole.error( 'THREE.CanvasRenderer has been removed' );\n\n\t}\n\n\t//\n\n\tfunction JSONLoader() {\n\n\t\tconsole.error( 'THREE.JSONLoader has been removed.' );\n\n\t}\n\n\t//\n\n\tvar SceneUtils = {\n\n\t\tcreateMultiMaterialObject: function ( /* geometry, materials */ ) {\n\n\t\t\tconsole.error( 'THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js' );\n\n\t\t},\n\n\t\tdetach: function ( /* child, parent, scene */ ) {\n\n\t\t\tconsole.error( 'THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js' );\n\n\t\t},\n\n\t\tattach: function ( /* child, scene, parent */ ) {\n\n\t\t\tconsole.error( 'THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js' );\n\n\t\t}\n\n\t};\n\n\t//\n\n\tfunction LensFlare() {\n\n\t\tconsole.error( 'THREE.LensFlare has been moved to /examples/js/objects/Lensflare.js' );\n\n\t}\n\n\tif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n\n\t\t/* eslint-disable no-undef */\n\t\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'register', { detail: {\n\t\t\trevision: REVISION,\n\t\t} } ) );\n\t\t/* eslint-enable no-undef */\n\n\t}\n\n\texports.ACESFilmicToneMapping = ACESFilmicToneMapping;\n\texports.AddEquation = AddEquation;\n\texports.AddOperation = AddOperation;\n\texports.AdditiveBlending = AdditiveBlending;\n\texports.AlphaFormat = AlphaFormat;\n\texports.AlwaysDepth = AlwaysDepth;\n\texports.AlwaysStencilFunc = AlwaysStencilFunc;\n\texports.AmbientLight = AmbientLight;\n\texports.AmbientLightProbe = AmbientLightProbe;\n\texports.AnimationClip = AnimationClip;\n\texports.AnimationLoader = AnimationLoader;\n\texports.AnimationMixer = AnimationMixer;\n\texports.AnimationObjectGroup = AnimationObjectGroup;\n\texports.AnimationUtils = AnimationUtils;\n\texports.ArcCurve = ArcCurve;\n\texports.ArrayCamera = ArrayCamera;\n\texports.ArrowHelper = ArrowHelper;\n\texports.Audio = Audio;\n\texports.AudioAnalyser = AudioAnalyser;\n\texports.AudioContext = AudioContext;\n\texports.AudioListener = AudioListener;\n\texports.AudioLoader = AudioLoader;\n\texports.AxesHelper = AxesHelper;\n\texports.AxisHelper = AxisHelper;\n\texports.BackSide = BackSide;\n\texports.BasicDepthPacking = BasicDepthPacking;\n\texports.BasicShadowMap = BasicShadowMap;\n\texports.BinaryTextureLoader = BinaryTextureLoader;\n\texports.Bone = Bone;\n\texports.BooleanKeyframeTrack = BooleanKeyframeTrack;\n\texports.BoundingBoxHelper = BoundingBoxHelper;\n\texports.Box2 = Box2;\n\texports.Box3 = Box3;\n\texports.Box3Helper = Box3Helper;\n\texports.BoxBufferGeometry = BoxBufferGeometry;\n\texports.BoxGeometry = BoxGeometry;\n\texports.BoxHelper = BoxHelper;\n\texports.BufferAttribute = BufferAttribute;\n\texports.BufferGeometry = BufferGeometry;\n\texports.BufferGeometryLoader = BufferGeometryLoader;\n\texports.ByteType = ByteType;\n\texports.Cache = Cache;\n\texports.Camera = Camera;\n\texports.CameraHelper = CameraHelper;\n\texports.CanvasRenderer = CanvasRenderer;\n\texports.CanvasTexture = CanvasTexture;\n\texports.CatmullRomCurve3 = CatmullRomCurve3;\n\texports.CineonToneMapping = CineonToneMapping;\n\texports.CircleBufferGeometry = CircleBufferGeometry;\n\texports.CircleGeometry = CircleGeometry;\n\texports.ClampToEdgeWrapping = ClampToEdgeWrapping;\n\texports.Clock = Clock;\n\texports.ClosedSplineCurve3 = ClosedSplineCurve3;\n\texports.Color = Color;\n\texports.ColorKeyframeTrack = ColorKeyframeTrack;\n\texports.CompressedTexture = CompressedTexture;\n\texports.CompressedTextureLoader = CompressedTextureLoader;\n\texports.ConeBufferGeometry = ConeBufferGeometry;\n\texports.ConeGeometry = ConeGeometry;\n\texports.CubeCamera = CubeCamera;\n\texports.CubeGeometry = BoxGeometry;\n\texports.CubeReflectionMapping = CubeReflectionMapping;\n\texports.CubeRefractionMapping = CubeRefractionMapping;\n\texports.CubeTexture = CubeTexture;\n\texports.CubeTextureLoader = CubeTextureLoader;\n\texports.CubeUVReflectionMapping = CubeUVReflectionMapping;\n\texports.CubeUVRefractionMapping = CubeUVRefractionMapping;\n\texports.CubicBezierCurve = CubicBezierCurve;\n\texports.CubicBezierCurve3 = CubicBezierCurve3;\n\texports.CubicInterpolant = CubicInterpolant;\n\texports.CullFaceBack = CullFaceBack;\n\texports.CullFaceFront = CullFaceFront;\n\texports.CullFaceFrontBack = CullFaceFrontBack;\n\texports.CullFaceNone = CullFaceNone;\n\texports.Curve = Curve;\n\texports.CurvePath = CurvePath;\n\texports.CustomBlending = CustomBlending;\n\texports.CylinderBufferGeometry = CylinderBufferGeometry;\n\texports.CylinderGeometry = CylinderGeometry;\n\texports.Cylindrical = Cylindrical;\n\texports.DataTexture = DataTexture;\n\texports.DataTexture2DArray = DataTexture2DArray;\n\texports.DataTexture3D = DataTexture3D;\n\texports.DataTextureLoader = DataTextureLoader;\n\texports.DecrementStencilOp = DecrementStencilOp;\n\texports.DecrementWrapStencilOp = DecrementWrapStencilOp;\n\texports.DefaultLoadingManager = DefaultLoadingManager;\n\texports.DepthFormat = DepthFormat;\n\texports.DepthStencilFormat = DepthStencilFormat;\n\texports.DepthTexture = DepthTexture;\n\texports.DirectionalLight = DirectionalLight;\n\texports.DirectionalLightHelper = DirectionalLightHelper;\n\texports.DirectionalLightShadow = DirectionalLightShadow;\n\texports.DiscreteInterpolant = DiscreteInterpolant;\n\texports.DodecahedronBufferGeometry = DodecahedronBufferGeometry;\n\texports.DodecahedronGeometry = DodecahedronGeometry;\n\texports.DoubleSide = DoubleSide;\n\texports.DstAlphaFactor = DstAlphaFactor;\n\texports.DstColorFactor = DstColorFactor;\n\texports.DynamicBufferAttribute = DynamicBufferAttribute;\n\texports.DynamicCopyUsage = DynamicCopyUsage;\n\texports.DynamicDrawUsage = DynamicDrawUsage;\n\texports.DynamicReadUsage = DynamicReadUsage;\n\texports.EdgesGeometry = EdgesGeometry;\n\texports.EdgesHelper = EdgesHelper;\n\texports.EllipseCurve = EllipseCurve;\n\texports.EqualDepth = EqualDepth;\n\texports.EqualStencilFunc = EqualStencilFunc;\n\texports.EquirectangularReflectionMapping = EquirectangularReflectionMapping;\n\texports.EquirectangularRefractionMapping = EquirectangularRefractionMapping;\n\texports.Euler = Euler;\n\texports.EventDispatcher = EventDispatcher;\n\texports.ExtrudeBufferGeometry = ExtrudeBufferGeometry;\n\texports.ExtrudeGeometry = ExtrudeGeometry;\n\texports.Face3 = Face3;\n\texports.Face4 = Face4;\n\texports.FaceColors = FaceColors;\n\texports.FileLoader = FileLoader;\n\texports.FlatShading = FlatShading;\n\texports.Float32Attribute = Float32Attribute;\n\texports.Float32BufferAttribute = Float32BufferAttribute;\n\texports.Float64Attribute = Float64Attribute;\n\texports.Float64BufferAttribute = Float64BufferAttribute;\n\texports.FloatType = FloatType;\n\texports.Fog = Fog;\n\texports.FogExp2 = FogExp2;\n\texports.Font = Font;\n\texports.FontLoader = FontLoader;\n\texports.FrontFaceDirectionCCW = FrontFaceDirectionCCW;\n\texports.FrontFaceDirectionCW = FrontFaceDirectionCW;\n\texports.FrontSide = FrontSide;\n\texports.Frustum = Frustum;\n\texports.GammaEncoding = GammaEncoding;\n\texports.Geometry = Geometry;\n\texports.GeometryUtils = GeometryUtils;\n\texports.GreaterDepth = GreaterDepth;\n\texports.GreaterEqualDepth = GreaterEqualDepth;\n\texports.GreaterEqualStencilFunc = GreaterEqualStencilFunc;\n\texports.GreaterStencilFunc = GreaterStencilFunc;\n\texports.GridHelper = GridHelper;\n\texports.Group = Group;\n\texports.HalfFloatType = HalfFloatType;\n\texports.HemisphereLight = HemisphereLight;\n\texports.HemisphereLightHelper = HemisphereLightHelper;\n\texports.HemisphereLightProbe = HemisphereLightProbe;\n\texports.IcosahedronBufferGeometry = IcosahedronBufferGeometry;\n\texports.IcosahedronGeometry = IcosahedronGeometry;\n\texports.ImageBitmapLoader = ImageBitmapLoader;\n\texports.ImageLoader = ImageLoader;\n\texports.ImageUtils = ImageUtils;\n\texports.ImmediateRenderObject = ImmediateRenderObject;\n\texports.IncrementStencilOp = IncrementStencilOp;\n\texports.IncrementWrapStencilOp = IncrementWrapStencilOp;\n\texports.InstancedBufferAttribute = InstancedBufferAttribute;\n\texports.InstancedBufferGeometry = InstancedBufferGeometry;\n\texports.InstancedInterleavedBuffer = InstancedInterleavedBuffer;\n\texports.InstancedMesh = InstancedMesh;\n\texports.Int16Attribute = Int16Attribute;\n\texports.Int16BufferAttribute = Int16BufferAttribute;\n\texports.Int32Attribute = Int32Attribute;\n\texports.Int32BufferAttribute = Int32BufferAttribute;\n\texports.Int8Attribute = Int8Attribute;\n\texports.Int8BufferAttribute = Int8BufferAttribute;\n\texports.IntType = IntType;\n\texports.InterleavedBuffer = InterleavedBuffer;\n\texports.InterleavedBufferAttribute = InterleavedBufferAttribute;\n\texports.Interpolant = Interpolant;\n\texports.InterpolateDiscrete = InterpolateDiscrete;\n\texports.InterpolateLinear = InterpolateLinear;\n\texports.InterpolateSmooth = InterpolateSmooth;\n\texports.InvertStencilOp = InvertStencilOp;\n\texports.JSONLoader = JSONLoader;\n\texports.KeepStencilOp = KeepStencilOp;\n\texports.KeyframeTrack = KeyframeTrack;\n\texports.LOD = LOD;\n\texports.LatheBufferGeometry = LatheBufferGeometry;\n\texports.LatheGeometry = LatheGeometry;\n\texports.Layers = Layers;\n\texports.LensFlare = LensFlare;\n\texports.LessDepth = LessDepth;\n\texports.LessEqualDepth = LessEqualDepth;\n\texports.LessEqualStencilFunc = LessEqualStencilFunc;\n\texports.LessStencilFunc = LessStencilFunc;\n\texports.Light = Light;\n\texports.LightProbe = LightProbe;\n\texports.LightShadow = LightShadow;\n\texports.Line = Line;\n\texports.Line3 = Line3;\n\texports.LineBasicMaterial = LineBasicMaterial;\n\texports.LineCurve = LineCurve;\n\texports.LineCurve3 = LineCurve3;\n\texports.LineDashedMaterial = LineDashedMaterial;\n\texports.LineLoop = LineLoop;\n\texports.LinePieces = LinePieces;\n\texports.LineSegments = LineSegments;\n\texports.LineStrip = LineStrip;\n\texports.LinearEncoding = LinearEncoding;\n\texports.LinearFilter = LinearFilter;\n\texports.LinearInterpolant = LinearInterpolant;\n\texports.LinearMipMapLinearFilter = LinearMipMapLinearFilter;\n\texports.LinearMipMapNearestFilter = LinearMipMapNearestFilter;\n\texports.LinearMipmapLinearFilter = LinearMipmapLinearFilter;\n\texports.LinearMipmapNearestFilter = LinearMipmapNearestFilter;\n\texports.LinearToneMapping = LinearToneMapping;\n\texports.Loader = Loader;\n\texports.LoaderUtils = LoaderUtils;\n\texports.LoadingManager = LoadingManager;\n\texports.LogLuvEncoding = LogLuvEncoding;\n\texports.LoopOnce = LoopOnce;\n\texports.LoopPingPong = LoopPingPong;\n\texports.LoopRepeat = LoopRepeat;\n\texports.LuminanceAlphaFormat = LuminanceAlphaFormat;\n\texports.LuminanceFormat = LuminanceFormat;\n\texports.MOUSE = MOUSE;\n\texports.Material = Material;\n\texports.MaterialLoader = MaterialLoader;\n\texports.Math = MathUtils;\n\texports.MathUtils = MathUtils;\n\texports.Matrix3 = Matrix3;\n\texports.Matrix4 = Matrix4;\n\texports.MaxEquation = MaxEquation;\n\texports.Mesh = Mesh;\n\texports.MeshBasicMaterial = MeshBasicMaterial;\n\texports.MeshDepthMaterial = MeshDepthMaterial;\n\texports.MeshDistanceMaterial = MeshDistanceMaterial;\n\texports.MeshFaceMaterial = MeshFaceMaterial;\n\texports.MeshLambertMaterial = MeshLambertMaterial;\n\texports.MeshMatcapMaterial = MeshMatcapMaterial;\n\texports.MeshNormalMaterial = MeshNormalMaterial;\n\texports.MeshPhongMaterial = MeshPhongMaterial;\n\texports.MeshPhysicalMaterial = MeshPhysicalMaterial;\n\texports.MeshStandardMaterial = MeshStandardMaterial;\n\texports.MeshToonMaterial = MeshToonMaterial;\n\texports.MinEquation = MinEquation;\n\texports.MirroredRepeatWrapping = MirroredRepeatWrapping;\n\texports.MixOperation = MixOperation;\n\texports.MultiMaterial = MultiMaterial;\n\texports.MultiplyBlending = MultiplyBlending;\n\texports.MultiplyOperation = MultiplyOperation;\n\texports.NearestFilter = NearestFilter;\n\texports.NearestMipMapLinearFilter = NearestMipMapLinearFilter;\n\texports.NearestMipMapNearestFilter = NearestMipMapNearestFilter;\n\texports.NearestMipmapLinearFilter = NearestMipmapLinearFilter;\n\texports.NearestMipmapNearestFilter = NearestMipmapNearestFilter;\n\texports.NeverDepth = NeverDepth;\n\texports.NeverStencilFunc = NeverStencilFunc;\n\texports.NoBlending = NoBlending;\n\texports.NoColors = NoColors;\n\texports.NoToneMapping = NoToneMapping;\n\texports.NormalBlending = NormalBlending;\n\texports.NotEqualDepth = NotEqualDepth;\n\texports.NotEqualStencilFunc = NotEqualStencilFunc;\n\texports.NumberKeyframeTrack = NumberKeyframeTrack;\n\texports.Object3D = Object3D;\n\texports.ObjectLoader = ObjectLoader;\n\texports.ObjectSpaceNormalMap = ObjectSpaceNormalMap;\n\texports.OctahedronBufferGeometry = OctahedronBufferGeometry;\n\texports.OctahedronGeometry = OctahedronGeometry;\n\texports.OneFactor = OneFactor;\n\texports.OneMinusDstAlphaFactor = OneMinusDstAlphaFactor;\n\texports.OneMinusDstColorFactor = OneMinusDstColorFactor;\n\texports.OneMinusSrcAlphaFactor = OneMinusSrcAlphaFactor;\n\texports.OneMinusSrcColorFactor = OneMinusSrcColorFactor;\n\texports.OrthographicCamera = OrthographicCamera;\n\texports.PCFShadowMap = PCFShadowMap;\n\texports.PCFSoftShadowMap = PCFSoftShadowMap;\n\texports.PMREMGenerator = PMREMGenerator;\n\texports.ParametricBufferGeometry = ParametricBufferGeometry;\n\texports.ParametricGeometry = ParametricGeometry;\n\texports.Particle = Particle;\n\texports.ParticleBasicMaterial = ParticleBasicMaterial;\n\texports.ParticleSystem = ParticleSystem;\n\texports.ParticleSystemMaterial = ParticleSystemMaterial;\n\texports.Path = Path;\n\texports.PerspectiveCamera = PerspectiveCamera;\n\texports.Plane = Plane;\n\texports.PlaneBufferGeometry = PlaneBufferGeometry;\n\texports.PlaneGeometry = PlaneGeometry;\n\texports.PlaneHelper = PlaneHelper;\n\texports.PointCloud = PointCloud;\n\texports.PointCloudMaterial = PointCloudMaterial;\n\texports.PointLight = PointLight;\n\texports.PointLightHelper = PointLightHelper;\n\texports.Points = Points;\n\texports.PointsMaterial = PointsMaterial;\n\texports.PolarGridHelper = PolarGridHelper;\n\texports.PolyhedronBufferGeometry = PolyhedronBufferGeometry;\n\texports.PolyhedronGeometry = PolyhedronGeometry;\n\texports.PositionalAudio = PositionalAudio;\n\texports.PropertyBinding = PropertyBinding;\n\texports.PropertyMixer = PropertyMixer;\n\texports.QuadraticBezierCurve = QuadraticBezierCurve;\n\texports.QuadraticBezierCurve3 = QuadraticBezierCurve3;\n\texports.Quaternion = Quaternion;\n\texports.QuaternionKeyframeTrack = QuaternionKeyframeTrack;\n\texports.QuaternionLinearInterpolant = QuaternionLinearInterpolant;\n\texports.REVISION = REVISION;\n\texports.RGBADepthPacking = RGBADepthPacking;\n\texports.RGBAFormat = RGBAFormat;\n\texports.RGBAIntegerFormat = RGBAIntegerFormat;\n\texports.RGBA_ASTC_10x10_Format = RGBA_ASTC_10x10_Format;\n\texports.RGBA_ASTC_10x5_Format = RGBA_ASTC_10x5_Format;\n\texports.RGBA_ASTC_10x6_Format = RGBA_ASTC_10x6_Format;\n\texports.RGBA_ASTC_10x8_Format = RGBA_ASTC_10x8_Format;\n\texports.RGBA_ASTC_12x10_Format = RGBA_ASTC_12x10_Format;\n\texports.RGBA_ASTC_12x12_Format = RGBA_ASTC_12x12_Format;\n\texports.RGBA_ASTC_4x4_Format = RGBA_ASTC_4x4_Format;\n\texports.RGBA_ASTC_5x4_Format = RGBA_ASTC_5x4_Format;\n\texports.RGBA_ASTC_5x5_Format = RGBA_ASTC_5x5_Format;\n\texports.RGBA_ASTC_6x5_Format = RGBA_ASTC_6x5_Format;\n\texports.RGBA_ASTC_6x6_Format = RGBA_ASTC_6x6_Format;\n\texports.RGBA_ASTC_8x5_Format = RGBA_ASTC_8x5_Format;\n\texports.RGBA_ASTC_8x6_Format = RGBA_ASTC_8x6_Format;\n\texports.RGBA_ASTC_8x8_Format = RGBA_ASTC_8x8_Format;\n\texports.RGBA_PVRTC_2BPPV1_Format = RGBA_PVRTC_2BPPV1_Format;\n\texports.RGBA_PVRTC_4BPPV1_Format = RGBA_PVRTC_4BPPV1_Format;\n\texports.RGBA_S3TC_DXT1_Format = RGBA_S3TC_DXT1_Format;\n\texports.RGBA_S3TC_DXT3_Format = RGBA_S3TC_DXT3_Format;\n\texports.RGBA_S3TC_DXT5_Format = RGBA_S3TC_DXT5_Format;\n\texports.RGBDEncoding = RGBDEncoding;\n\texports.RGBEEncoding = RGBEEncoding;\n\texports.RGBEFormat = RGBEFormat;\n\texports.RGBFormat = RGBFormat;\n\texports.RGBIntegerFormat = RGBIntegerFormat;\n\texports.RGBM16Encoding = RGBM16Encoding;\n\texports.RGBM7Encoding = RGBM7Encoding;\n\texports.RGB_ETC1_Format = RGB_ETC1_Format;\n\texports.RGB_PVRTC_2BPPV1_Format = RGB_PVRTC_2BPPV1_Format;\n\texports.RGB_PVRTC_4BPPV1_Format = RGB_PVRTC_4BPPV1_Format;\n\texports.RGB_S3TC_DXT1_Format = RGB_S3TC_DXT1_Format;\n\texports.RGFormat = RGFormat;\n\texports.RGIntegerFormat = RGIntegerFormat;\n\texports.RawShaderMaterial = RawShaderMaterial;\n\texports.Ray = Ray;\n\texports.Raycaster = Raycaster;\n\texports.RectAreaLight = RectAreaLight;\n\texports.RedFormat = RedFormat;\n\texports.RedIntegerFormat = RedIntegerFormat;\n\texports.ReinhardToneMapping = ReinhardToneMapping;\n\texports.RepeatWrapping = RepeatWrapping;\n\texports.ReplaceStencilOp = ReplaceStencilOp;\n\texports.ReverseSubtractEquation = ReverseSubtractEquation;\n\texports.RingBufferGeometry = RingBufferGeometry;\n\texports.RingGeometry = RingGeometry;\n\texports.Scene = Scene;\n\texports.SceneUtils = SceneUtils;\n\texports.ShaderChunk = ShaderChunk;\n\texports.ShaderLib = ShaderLib;\n\texports.ShaderMaterial = ShaderMaterial;\n\texports.ShadowMaterial = ShadowMaterial;\n\texports.Shape = Shape;\n\texports.ShapeBufferGeometry = ShapeBufferGeometry;\n\texports.ShapeGeometry = ShapeGeometry;\n\texports.ShapePath = ShapePath;\n\texports.ShapeUtils = ShapeUtils;\n\texports.ShortType = ShortType;\n\texports.Skeleton = Skeleton;\n\texports.SkeletonHelper = SkeletonHelper;\n\texports.SkinnedMesh = SkinnedMesh;\n\texports.SmoothShading = SmoothShading;\n\texports.Sphere = Sphere;\n\texports.SphereBufferGeometry = SphereBufferGeometry;\n\texports.SphereGeometry = SphereGeometry;\n\texports.Spherical = Spherical;\n\texports.SphericalHarmonics3 = SphericalHarmonics3;\n\texports.SphericalReflectionMapping = SphericalReflectionMapping;\n\texports.Spline = Spline;\n\texports.SplineCurve = SplineCurve;\n\texports.SplineCurve3 = SplineCurve3;\n\texports.SpotLight = SpotLight;\n\texports.SpotLightHelper = SpotLightHelper;\n\texports.SpotLightShadow = SpotLightShadow;\n\texports.Sprite = Sprite;\n\texports.SpriteMaterial = SpriteMaterial;\n\texports.SrcAlphaFactor = SrcAlphaFactor;\n\texports.SrcAlphaSaturateFactor = SrcAlphaSaturateFactor;\n\texports.SrcColorFactor = SrcColorFactor;\n\texports.StaticCopyUsage = StaticCopyUsage;\n\texports.StaticDrawUsage = StaticDrawUsage;\n\texports.StaticReadUsage = StaticReadUsage;\n\texports.StereoCamera = StereoCamera;\n\texports.StreamCopyUsage = StreamCopyUsage;\n\texports.StreamDrawUsage = StreamDrawUsage;\n\texports.StreamReadUsage = StreamReadUsage;\n\texports.StringKeyframeTrack = StringKeyframeTrack;\n\texports.SubtractEquation = SubtractEquation;\n\texports.SubtractiveBlending = SubtractiveBlending;\n\texports.TOUCH = TOUCH;\n\texports.TangentSpaceNormalMap = TangentSpaceNormalMap;\n\texports.TetrahedronBufferGeometry = TetrahedronBufferGeometry;\n\texports.TetrahedronGeometry = TetrahedronGeometry;\n\texports.TextBufferGeometry = TextBufferGeometry;\n\texports.TextGeometry = TextGeometry;\n\texports.Texture = Texture;\n\texports.TextureLoader = TextureLoader;\n\texports.TorusBufferGeometry = TorusBufferGeometry;\n\texports.TorusGeometry = TorusGeometry;\n\texports.TorusKnotBufferGeometry = TorusKnotBufferGeometry;\n\texports.TorusKnotGeometry = TorusKnotGeometry;\n\texports.Triangle = Triangle;\n\texports.TriangleFanDrawMode = TriangleFanDrawMode;\n\texports.TriangleStripDrawMode = TriangleStripDrawMode;\n\texports.TrianglesDrawMode = TrianglesDrawMode;\n\texports.TubeBufferGeometry = TubeBufferGeometry;\n\texports.TubeGeometry = TubeGeometry;\n\texports.UVMapping = UVMapping;\n\texports.Uint16Attribute = Uint16Attribute;\n\texports.Uint16BufferAttribute = Uint16BufferAttribute;\n\texports.Uint32Attribute = Uint32Attribute;\n\texports.Uint32BufferAttribute = Uint32BufferAttribute;\n\texports.Uint8Attribute = Uint8Attribute;\n\texports.Uint8BufferAttribute = Uint8BufferAttribute;\n\texports.Uint8ClampedAttribute = Uint8ClampedAttribute;\n\texports.Uint8ClampedBufferAttribute = Uint8ClampedBufferAttribute;\n\texports.Uncharted2ToneMapping = Uncharted2ToneMapping;\n\texports.Uniform = Uniform;\n\texports.UniformsLib = UniformsLib;\n\texports.UniformsUtils = UniformsUtils;\n\texports.UnsignedByteType = UnsignedByteType;\n\texports.UnsignedInt248Type = UnsignedInt248Type;\n\texports.UnsignedIntType = UnsignedIntType;\n\texports.UnsignedShort4444Type = UnsignedShort4444Type;\n\texports.UnsignedShort5551Type = UnsignedShort5551Type;\n\texports.UnsignedShort565Type = UnsignedShort565Type;\n\texports.UnsignedShortType = UnsignedShortType;\n\texports.VSMShadowMap = VSMShadowMap;\n\texports.Vector2 = Vector2;\n\texports.Vector3 = Vector3;\n\texports.Vector4 = Vector4;\n\texports.VectorKeyframeTrack = VectorKeyframeTrack;\n\texports.Vertex = Vertex;\n\texports.VertexColors = VertexColors;\n\texports.VideoTexture = VideoTexture;\n\texports.WebGLCubeRenderTarget = WebGLCubeRenderTarget;\n\texports.WebGLMultisampleRenderTarget = WebGLMultisampleRenderTarget;\n\texports.WebGLRenderTarget = WebGLRenderTarget;\n\texports.WebGLRenderTargetCube = WebGLRenderTargetCube;\n\texports.WebGLRenderer = WebGLRenderer;\n\texports.WebGLUtils = WebGLUtils;\n\texports.WireframeGeometry = WireframeGeometry;\n\texports.WireframeHelper = WireframeHelper;\n\texports.WrapAroundEnding = WrapAroundEnding;\n\texports.XHRLoader = XHRLoader;\n\texports.ZeroCurvatureEnding = ZeroCurvatureEnding;\n\texports.ZeroFactor = ZeroFactor;\n\texports.ZeroSlopeEnding = ZeroSlopeEnding;\n\texports.ZeroStencilOp = ZeroStencilOp;\n\texports.sRGBEncoding = sRGBEncoding;\n\n\tObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n","// Keep past deltas for FPS calculation.\n// Higher REMEMBER numbers will be slower but more stable.\nconst REMEMBER = 30;\n\nexport default class Time {\n  constructor() {\n    this.startTime = 0;\n    this.pastTimes = new Array(REMEMBER);\n  }\n\n  getNewTime() {\n    return performance.now();\n  }\n\n  getCurrentTime() {\n    return this.pastTimes[0] || this.startTime;\n  }\n\n  getLastTime() {\n    return this.pastTimes[1] || this.startTime;\n  }\n\n  getAverageFPS() {\n    const deltas = new Array(REMEMBER - 1);\n    for (let i = 0; i < REMEMBER - 1; i++) {\n      deltas[i] = this.pastTimes[i] - this.pastTimes[i + 1];\n    }\n    return 1000 / deltas.reduce((accum, delta) => (\n      accum + delta / (REMEMBER - 1)\n    ), 0)\n  }\n\n  start() {\n    this.startTime = this.getNewTime();\n    this.pastTimes[0] = this.startTime;\n  }\n\n  // Shift the times back and add the current one.\n  updatePastTimes() {\n    for (let i = REMEMBER - 1; i > 0; i--) {\n      this.pastTimes[i] = this.pastTimes[i - 1];\n    }\n\n    this.pastTimes[0] = this.getNewTime();\n  }\n\n  getDeltaSinceLastTick() {\n    return this.getCurrentTime() - this.getLastTime();\n  }\n\n  tick() {\n    this.updatePastTimes();\n    return this.getDeltaSinceLastTick();\n  }\n}\n","const INPUT_THRESHOLD = 40;\nconst SECONDARY_INPUT_THRESHOLD = INPUT_THRESHOLD * 1.4;\nconst TAP_THRESHOLD = 120; // milliseconds\n\nconst BOX_THRESHOLD = Math.round(window.innerWidth / 7);\nconst BOX_Y_POSITION = Math.round(2 * window.innerHeight / 3);\nconst BOX_X_POSITION = Math.round(window.innerWidth / 3);\n\n\nexport default class Input {\n  constructor() {\n    this.held = false;\n    this.lastX = 0;\n    this.lastY = 0;\n    this.lastPressTime = null;\n\n    this.onUp = null;\n    this.onDown = null;\n    this.onLeft = null;\n    this.onRight = null;\n    this.handleKeydown = this.handleKeydown.bind(this);\n    this.handleKeyup = this.handleKeyup.bind(this);\n    this.handleStart = this.handleStart.bind(this);\n    this.handleEnd = this.handleEnd.bind(this);\n    this.handleCancel = this.handleCancel.bind(this);\n    this.handleMove = this.handleMove.bind(this);\n\n    const el = document.body;\n    el.addEventListener(\"touchstart\", this.handleStart, false);\n    el.addEventListener(\"touchend\", this.handleEnd, false);\n    el.addEventListener(\"touchcancel\", this.handleCancel, false);\n    el.addEventListener(\"touchmove\", this.handleMove, false);\n\n    document.addEventListener('keydown', this.handleKeydown);\n    document.addEventListener('keyup', this.handleKeyup);\n  }\n\n  press() {\n    this.lastPressTime = performance.now();\n    this.held = true;\n  }\n\n  release() {\n    this.held = false;\n    this.onRelease && this.onRelease();\n    if (performance.now() - this.lastPressTime < TAP_THRESHOLD) {\n      this.tap();\n    }\n    this.lastPressTime = null;\n  }\n\n  tap() {\n    // Check where tap took place and dispatch move event if needed.\n    if (this.lastY < BOX_Y_POSITION - BOX_THRESHOLD) {\n      this.onUp && this.onUp();\n    } else if (this.lastY > BOX_Y_POSITION + BOX_THRESHOLD) {\n      this.onDown && this.onDown();\n    } else if (this.lastX < BOX_X_POSITION) {\n      this.onLeft && this.onLeft();\n    } else if (this.lastX > BOX_X_POSITION + BOX_THRESHOLD) {\n      this.onRight && this.onRight();\n    }\n  }\n\n  isHolding() {\n    return this.held;\n  }\n\n  handleStart(e) {\n    this.press();\n    const touch = e.changedTouches[0];\n    this.lastX = touch.clientX;\n    this.lastY = touch.clientY;\n  }\n\n  handleEnd(e) {\n    this.release();\n    this.lastX = 0;\n    this.lastY = 0;\n  }\n\n  handleCancel(e) {\n    this.handleEnd(e);\n  }\n\n  handleMove(e) {\n    const touch = e.changedTouches[0];\n    const deltaX = touch.clientX - this.lastX;\n    const deltaY = touch.clientY - this.lastY;\n    if (Math.abs(deltaX) > INPUT_THRESHOLD) {\n      deltaX > 0 ? this.onRight() : this.onLeft();\n      this.lastX = touch.clientX;\n    } else if (Math.abs(deltaY) > INPUT_THRESHOLD) {\n      deltaY > 0 ? this.onDown() : this.onUp();\n      this.lastY = touch.clientY;\n    }\n  }\n\n  handleKeyup(e) {\n    this.release();\n  }\n\n  handleKeydown(e) {\n    if (e.repeat) {\n      return;\n    }\n\n    this.press();\n\n    switch(e.key) {\n      case 'ArrowUp':\n        this.onUp && this.onUp();\n        break;\n\n      case 'ArrowDown':\n        this.onDown && this.onDown();\n        break;\n\n      case 'ArrowLeft':\n        this.onLeft && this.onLeft();\n        break;\n\n      case 'ArrowRight':\n        this.onRight && this.onRight();\n        break;\n    }\n  }\n}\n","import * as THREE from 'three';\nimport { BOARD_WIDTH, BOX_SIZE, HALF_BOX } from '/js/game/constants';\nimport {\n  getMesh,\n  getPivot,\n  getMixer,\n  getActions,\n  getPivotOffset,\n} from './static-helpers';\n\n\nexport default class Cube {\n  constructor(model) {\n    this.model = model;\n\n    // Populate scene.\n    this.mesh = getMesh();\n    this.pivot = getPivot(this.mesh);\n    this.mixer = getMixer(this.pivot, this.moveFinish.bind(this));\n    this.actions = getActions(this.mixer);\n\n    this.updateMeshFromModel();\n\n    this.lastDirection = null;\n  }\n\n  updateMeshFromModel() {\n    // Reposition the mesh over the square dictated by model.\n    const position = this.model.getCubePosition();\n    const x = ( position.x - Math.floor(BOARD_WIDTH / 2) ) * BOX_SIZE;\n    const z = -position.y * BOX_SIZE;\n    this.mesh.position.set(x, HALF_BOX, z);\n\n    // Use our pre-generated list of 24 static quaternions\n    // to orient our cube properly with the grid.\n    this.mesh.setRotationFromQuaternion(this.model.getCubeStaticQaternion());\n  }\n\n  // Returns a boolean if succeeded.\n  move(direction) {\n\n    if (this.lastDirection && this.actions[this.lastDirection].isRunning()) {\n      return false;\n    }\n\n    if ( !this.model.canMove(direction) ) {\n      return false;\n    }\n\n    this.lastDirection = direction;\n\n    // Set up the rotation pivot point.\n    this.pivot.position.add(getPivotOffset(direction));\n    this.pivot.attach(this.mesh);\n    this.mesh.position.sub(getPivotOffset(direction));\n\n    // Start the animation.\n    this.actions[direction].play();\n\n    return true;\n  }\n\n  moveFinish(e) {\n    const direction = this.lastDirection;\n    this.lastDirection = null;\n\n    // Update our model of the cube, so we can use to correct\n    // rotation rounding errors.\n    this.model.updateCube(direction);\n\n    this.pivot.remove(this.mesh);\n    this.updateMeshFromModel();\n\n    this.actions[direction].stop();\n\n    // Put the pivot back at the center bottom of cube.\n    this.pivot.position.copy(this.mesh.position);\n    this.pivot.position.setY(0);\n    this.pivot.attach(this.mesh);\n    this.onMoveFinish && this.onMoveFinish(direction);\n  }\n\n  getObject3D() {\n    return this.pivot;\n  }\n\n  update(delta) {\n    this.mixer.update(delta);\n  }\n}\n","import * as THREE from 'three';\n\nexport const DEBUG = true;\n\n// Number of pixels in the screen.\nexport const PIXEL_WIDTH = 500;\n\n// Not sure if these should be constants or not.\nexport const ASPECT_RATIO = window.innerWidth / window.innerHeight;\nexport const SCREEN_WIDTH = PIXEL_WIDTH;\nexport const SCREEN_HEIGHT = SCREEN_WIDTH / ASPECT_RATIO;\nexport const ORTHO_DEPTH = 1000;\n\n// Board constants.\nexport const BOARD_DEPTH = 101;\nexport const BOARD_WIDTH = 5\nexport const LINE_COLOR = 'white';\n\n// Cube constants.\nexport const BOX_SIZE = 50;\nexport const HALF_BOX = Math.round(BOX_SIZE / 2); // For convenience.\nexport const FLIP_DURATION = 325;\n\nexport const SIDE_TOP = 'TOP';\nexport const SIDE_FRONT = 'FRONT';\nexport const SIDE_RIGHT = 'RIGHT';\nexport const SIDE_LEFT = 'LEFT';\nexport const SIDE_BACK = 'BACK';\nexport const SIDE_BOTTOM = 'BOTTOM';\n\nexport const SIDE_ONE = 1;\nexport const SIDE_TWO = 2;\nexport const SIDE_THREE = 3;\nexport const SIDE_FOUR = 4;\nexport const SIDE_FIVE = 5;\nexport const SIDE_SIX = 6;\n\nexport const COLOR_BLACK = 'black';\nexport const COLOR_RED = '#F23C54';\nexport const COLOR_BLUE = '#1B62A0';\nexport const COLOR_GREEN = 'green';\nexport const COLOR_YELLOW = '#FFF64C'\nexport const COLOR_PURPLE = 'violet';\n\nexport const DIR_AHEAD = 'AHEAD';\nexport const DIR_LEFT = 'LEFT';\nexport const DIR_RIGHT = 'RIGHT';\nexport const DIR_BACK = 'BACK';\n\nexport const SIDE_COLORS = {\n  1: COLOR_YELLOW,\n  2: COLOR_RED,\n  3: COLOR_BLUE,\n  4: COLOR_BLUE,\n  5: COLOR_RED,\n  6: COLOR_YELLOW,\n}\n\nexport const STARTING_ORIENTATION = {\n  TOP: SIDE_ONE,\n  FRONT: SIDE_FOUR,\n  RIGHT: SIDE_FIVE,\n  LEFT: SIDE_TWO,\n  BACK: SIDE_THREE,\n  BOTTOM: SIDE_SIX,\n}\n\nexport const DIRECTIONS = [\n  DIR_AHEAD, DIR_LEFT, DIR_RIGHT, DIR_BACK\n];\n","import * as THREE from 'three';\nimport {\n  BOX_SIZE,\n  HALF_BOX,\n  FLIP_DURATION,\n  SIDE_COLORS,\n  SIDE_ONE,\n  SIDE_TWO,\n  SIDE_THREE,\n  SIDE_FOUR,\n  SIDE_FIVE,\n  SIDE_SIX,\n  DIRECTIONS,\n} from '/js/game/constants';\n\n\nconst PI_OVER_TWO = Math.PI / 2;\n\nconst PIVOTS = {\n  AHEAD: new THREE.Vector3(0, 0, -HALF_BOX),\n  LEFT:  new THREE.Vector3(-HALF_BOX, 0, 0),\n  RIGHT: new THREE.Vector3(HALF_BOX, 0, 0),\n  BACK:  new THREE.Vector3(0, 0, HALF_BOX),\n};\n\nconst MOVES_XY = {\n  AHEAD: new THREE.Vector2(0, 1),\n  LEFT: new THREE.Vector2(-1, 0),\n  RIGHT: new THREE.Vector2(1, 0),\n  BACK: new THREE.Vector2(0, -1),\n};\n\nconst AXES = {\n  AHEAD_BACK: new THREE.Vector3(1, 0, 0),\n  RIGHT_LEFT: new THREE.Vector3(0, 0, 1),\n}\n\nconst CLIPS = {\n  AHEAD: createCubeMoveAnimation(\n    'ahead.quaternion',\n    FLIP_DURATION,\n    AXES.AHEAD_BACK\n  ),\n  LEFT: createCubeMoveAnimation(\n    'left.quaternion',\n    FLIP_DURATION,\n    AXES.RIGHT_LEFT,\n    true\n  ),\n  RIGHT: createCubeMoveAnimation(\n    'right.quaternion',\n    FLIP_DURATION,\n    AXES.RIGHT_LEFT,\n  ),\n  BACK: createCubeMoveAnimation(\n    'back.quaternion',\n    FLIP_DURATION,\n    AXES.AHEAD_BACK,\n    true\n  ),\n}\n\nconst CACHED_COLORS = Object.keys(SIDE_COLORS).reduce((accum, side) => {\n  accum[side] = new THREE.Color(SIDE_COLORS[side]);\n  return accum;\n}, {});\n\nexport function getMesh() {\n  const geometry = new THREE.BoxGeometry(BOX_SIZE, BOX_SIZE, BOX_SIZE);\n  geometry.name = 'CubeGeo';\n  const material = new THREE.MeshBasicMaterial( {\n    color: 0xffffff,\n    vertexColors: THREE.FaceColors,\n  });\n\n  // Right side.\n  geometry.faces[ 0 ].color.setStyle( SIDE_COLORS[SIDE_FIVE] );\n  geometry.faces[ 1 ].color.setStyle( SIDE_COLORS[SIDE_FIVE] );\n\n  // Left side.\n  geometry.faces[ 2 ].color.setStyle( SIDE_COLORS[SIDE_TWO] );\n  geometry.faces[ 3 ].color.setStyle( SIDE_COLORS[SIDE_TWO] );\n\n  // Top side.\n  geometry.faces[ 4 ].color.setStyle( SIDE_COLORS[SIDE_ONE] );\n  geometry.faces[ 5 ].color.setStyle( SIDE_COLORS[SIDE_ONE] );\n\n  // Bottom side.\n  geometry.faces[ 6 ].color.setStyle( SIDE_COLORS[SIDE_SIX] );\n  geometry.faces[ 7 ].color.setStyle( SIDE_COLORS[SIDE_SIX] );\n\n  // Back side.\n  geometry.faces[ 8 ].color.setStyle( SIDE_COLORS[SIDE_THREE] );\n  geometry.faces[ 9 ].color.setStyle( SIDE_COLORS[SIDE_THREE] );\n\n  // Front side.\n  geometry.faces[ 10 ].color.setStyle( SIDE_COLORS[SIDE_FOUR] );\n  geometry.faces[ 11 ].color.setStyle( SIDE_COLORS[SIDE_FOUR] );\n\n  // Make sure to position box above z-x plane.\n  const mesh = new THREE.Mesh( geometry, material );\n  mesh.name = 'CubeMesh';\n  return mesh;\n}\n\nexport function getPivot(mesh) {\n  const pivot = new THREE.Group();\n  pivot.attach(mesh);\n  return pivot;\n}\n\nexport function getMixer(root, finishHandler) {\n  const mixer = new THREE.AnimationMixer(root);\n  finishHandler && mixer.addEventListener('finished', finishHandler);\n  return mixer;\n}\n\nexport function getAllQuaternionsForCube() {\n  const newQuat = () => new THREE.Quaternion();\n  const degToRad = deg => deg * Math.PI / 180;\n  let axis = new THREE.Vector3();\n\n  // Map keys are format \"(top)_(back)\".\n  let map = {};\n\n  // The following was heaily derived:\n  // https://www.euclideanspace.com/maths/discrete/groups/categorise/finite/cube/index.htm\n\n  // Z axis.\n  axis.set(0, 0, 1);\n  map['1_3'] = newQuat().setFromAxisAngle(axis, 0); // Default position.\n  map['5_3'] = newQuat().setFromAxisAngle(axis, PI_OVER_TWO);\n  map['6_3'] = newQuat().setFromAxisAngle(axis, Math.PI);\n  map['2_3'] = newQuat().setFromAxisAngle(axis, -PI_OVER_TWO);\n\n  // X axis.\n  axis.set(1, 0, 0);\n  map['4_1'] = newQuat().setFromAxisAngle(axis, PI_OVER_TWO);\n  map['6_4'] = newQuat().setFromAxisAngle(axis, Math.PI);\n  map['3_6'] = newQuat().setFromAxisAngle(axis, -PI_OVER_TWO);\n\n  // Y axis.\n  axis.set(0, 1, 0);\n  map['1_2'] = newQuat().setFromAxisAngle(axis, PI_OVER_TWO);\n  map['1_4'] = newQuat().setFromAxisAngle(axis, Math.PI);\n  map['1_5'] = newQuat().setFromAxisAngle(axis, -PI_OVER_TWO);\n\n  // Rotate about opposite vertices.\n  axis.set(1, 1, 1).normalize();\n  map['3_5'] = newQuat().setFromAxisAngle(axis, degToRad(-120));\n  map['5_1'] = newQuat().setFromAxisAngle(axis, degToRad(120));\n\n  axis.set(1, -1, 1).normalize();\n  map['2_6'] = newQuat().setFromAxisAngle(axis, degToRad(-120));\n  map['4_5'] = newQuat().setFromAxisAngle(axis, degToRad(120));\n\n  axis.set(-1, -1, 1).normalize();\n  map['4_2'] = newQuat().setFromAxisAngle(axis, degToRad(-120));\n  map['5_6'] = newQuat().setFromAxisAngle(axis, degToRad(120));\n\n  axis.set(-1, 1, 1).normalize();\n  map['2_1'] = newQuat().setFromAxisAngle(axis, degToRad(-120));\n  map['3_2'] = newQuat().setFromAxisAngle(axis, degToRad(120));\n\n  // Rotate about opposite parallel lines.\n  axis.set(0, 1, 1).normalize();\n  map['3_1'] = newQuat().setFromAxisAngle(axis, Math.PI);\n  axis.set(1, 0, 1).normalize();\n  map['6_5'] = newQuat().setFromAxisAngle(axis, Math.PI);\n  axis.set(0, -1, 1).normalize();\n  map['4_6'] = newQuat().setFromAxisAngle(axis, Math.PI);\n  axis.set(-1, 0, 1).normalize();\n  map['6_2'] = newQuat().setFromAxisAngle(axis, Math.PI);\n  axis.set(1, 1, 0).normalize();\n  map['5_4'] = newQuat().setFromAxisAngle(axis, Math.PI);\n  axis.set(-1, 1, 0).normalize();\n  map['2_4'] = newQuat().setFromAxisAngle(axis, Math.PI);\n\n  return map;\n}\n\nexport function createCubeMoveAnimation( trackName, period, axis, backward ) {\n  const from = new THREE.Quaternion();\n  const to = new THREE.Quaternion();\n  from.setFromAxisAngle( axis, 0 );\n  // HACK: 1.9333 is from eye-balling it, otherwise cube wouldn't rotate enough.\n  to.setFromAxisAngle( axis, ( backward ? 1 : -1 ) * Math.PI / 1.93333 );\n\n  const times = [ 0, period ];\n  const values = [ ...from.toArray(), ...to.toArray() ];\n  const track = new THREE.QuaternionKeyframeTrack( trackName, times, values );\n\n  return new THREE.AnimationClip( null, period, [ track ] );\n};\n\nfunction _getAction(mixer, name) {\n  const action = mixer.clipAction(name).setLoop(THREE.LoopOnce);\n  action.clampWhenFinished = true;\n  return action;\n}\nexport function getActions(mixer) {\n  return {\n    AHEAD: _getAction(mixer, CLIPS.AHEAD),\n    LEFT: _getAction(mixer, CLIPS.LEFT),\n    RIGHT: _getAction(mixer, CLIPS.RIGHT),\n    BACK: _getAction(mixer, CLIPS.BACK),\n  };\n}\n\nexport function getPivotOffset(direction) {\n  return PIVOTS[direction];\n}\n\nexport function getMoveOffset(direction) {\n  return MOVES_XY[direction];\n}\n\nexport function getColorForSide(sideNum) {\n  return CACHED_COLORS[sideNum];\n}\n\nexport function getRandomDirection() {\n  return DIRECTIONS[Math.floor(Math.random() * DIRECTIONS.length)];\n}\n","import * as THREE from 'three';\nimport {\n  BOX_SIZE,\n  HALF_BOX,\n  BOARD_DEPTH,\n  BOARD_WIDTH,\n} from '/js/game/constants';\nimport Squares from './Squares';\nimport Grid from './Grid';\n\nexport default class Board {\n  constructor(model) {\n    this.model = model;\n    this.squares = new Squares(this.model);\n    this.grid = new Grid();\n\n    this.group = new THREE.Group();\n    this.group.name = 'BoardGroup';\n\n    this.group.attach(this.squares.getObject3D());\n    this.group.attach(this.grid.getObject3D());\n\n    // Lift the grid slightly off the ground for effect.\n    this.grid.getObject3D().position.setY(1);\n  }\n\n  resetSquare(x, y) {\n    this.squares.resetSquare(x, y);\n  }\n\n  getObject3D() {\n    return this.group;\n  }\n}\n","import * as THREE from 'three';\nimport { getColorForSide } from '/js/game/objects/Cube/static-helpers';\nimport {\n  BOX_SIZE,\n  HALF_BOX,\n  BOARD_DEPTH,\n  BOARD_WIDTH,\n} from '/js/game/constants';\n\nconst RESET_COLOR = new THREE.Color('black');\n\nconst START_Z = 0;\nconst START_X = Math.round( HALF_BOX + (-BOARD_WIDTH / 2) * BOX_SIZE )\n\n\nexport default class Squares {\n  constructor(model) {\n    this.model = model;\n    // Map of x-y coords to geometry array index\n    this.coordsToBufferIndex = {};\n\n    this.vertices = [];\n    this.colors = [];\n\n    let vi = 0;\n    let ci = 0;\n\n\n    for ( let y = 0; y < BOARD_DEPTH; y++ ) {\n      for ( let x = 0; x < BOARD_WIDTH; x++ ) {\n\n        // Validate value on the board before adding geometry.\n        const sideNum = this.model.getBoardSquareValue(x, y);\n        if (!sideNum) {\n          continue;\n        }\n\n        // Track this square geo and color in case we want to change it later.\n        this.setCoordToIndexMap(x, y, vi, ci);\n\n        const faceColor = getColorForSide(sideNum);\n        ci = this.setColorIndices(faceColor, ci);\n        vi = this.setVertexIndices(x, y, vi);\n      }\n    }\n\n\n    const geometry = new THREE.BufferGeometry();\n    geometry.name = 'SquaresGeo';\n    geometry.setAttribute( 'position', this.getAttribute(this.vertices) );\n    geometry.setAttribute( 'color', this.getAttribute(this.colors, true) );\n\n    const material = new THREE.MeshBasicMaterial({\n      vertexColors: THREE.FaceColors,\n      side: THREE.FrontSide,\n    });\n\n    this.plane = new THREE.Mesh( geometry, material );\n    this.plane.name = 'SquaresMesh';\n  }\n\n  getAttribute(data, dynamic) {\n    const attribute = new THREE.Float32BufferAttribute( data, 3 );\n    dynamic && attribute.setUsage(THREE.DynamicDrawUsage);\n    return attribute;\n  }\n\n  setColorIndices(faceColor, ci, colors = this.colors) {\n    const colorR = faceColor.r;\n    const colorG = faceColor.g;\n    const colorB = faceColor.b;\n\n    // Decrement to allow for using pre-increment.\n    --ci;\n\n    colors[ ++ci ] = colorR;\n    colors[ ++ci ] = colorG;\n    colors[ ++ci ] = colorB;\n\n    colors[ ++ci ] = colorR;\n    colors[ ++ci ] = colorG;\n    colors[ ++ci ] = colorB;\n\n    colors[ ++ci ] = colorR;\n    colors[ ++ci ] = colorG;\n    colors[ ++ci ] = colorB;\n\n    colors[ ++ci ] = colorR;\n    colors[ ++ci ] = colorG;\n    colors[ ++ci ] = colorB;\n\n    colors[ ++ci ] = colorR;\n    colors[ ++ci ] = colorG;\n    colors[ ++ci ] = colorB;\n\n    colors[ ++ci ] = colorR;\n    colors[ ++ci ] = colorG;\n    colors[ ++ci ] = colorB;\n\n    // Correct for using pre-increment.\n    return ci + 1;\n  }\n\n  setVertexIndices(x, y, vi) {\n    const centerZ = START_Z - y * BOX_SIZE;\n    const centerX = START_X + x * BOX_SIZE;\n\n    // Calculate 4 coords surrounding center\n    const farRightX = centerX + HALF_BOX;\n    const farRightZ = centerZ + HALF_BOX;\n\n    const nearRightX = centerX + HALF_BOX;\n    const nearRightZ = centerZ - HALF_BOX;\n\n    const nearLeftX = centerX - HALF_BOX;\n    const nearLeftZ = centerZ - HALF_BOX;\n\n    const farLeftX = centerX - HALF_BOX;\n    const farLeftZ = centerZ + HALF_BOX;\n\n    // Decrement to allow for using pre-increment.\n    --vi;\n\n    // Triangle Face 1.\n    this.vertices[ ++vi ] = farLeftX;\n    this.vertices[ ++vi ] = 0;\n    this.vertices[ ++vi ] = farLeftZ;\n\n    this.vertices[ ++vi ] = farRightX;\n    this.vertices[ ++vi ] = 0;\n    this.vertices[ ++vi ] = farRightZ;\n\n    this.vertices[ ++vi ] = nearLeftX;\n    this.vertices[ ++vi ] = 0\n    this.vertices[ ++vi ] = nearLeftZ;\n\n    // Triangle Fac++e \n    this.vertices[ ++vi ] = farRightX;\n    this.vertices[ ++vi ] = 0;\n    this.vertices[ ++vi ] = farRightZ;\n\n    this.vertices[ ++vi ] = nearRightX\n    this.vertices[ ++vi ] = 0;\n    this.vertices[ ++vi ] = nearRightZ;\n\n    this.vertices[ ++vi ] = nearLeftX;\n    this.vertices[ ++vi ] = 0;\n    this.vertices[ ++vi ] = nearLeftZ;\n\n    return vi + 1;\n  }\n\n  setCoordToIndexMap(x, y, vertexIndex, colorIndex) {\n    this.coordsToBufferIndex[`${x}-${y}`] = { vertexIndex, colorIndex };\n  }\n\n  setColor(color, x, y) {\n    const ci = this.getColorIndex(x, y);\n    this.setColorIndices(color, ci, this.getColorArray());\n\n    // Tell three.js that the colors need updating.\n    this.plane.geometry.attributes.color.needsUpdate = true;\n  }\n\n  getColorArray() {\n    return this.plane.geometry.attributes.color.array;\n  }\n\n  getColorIndex(x, y) {\n    return this.coordsToBufferIndex[`${x}-${y}`].colorIndex;\n  }\n\n  getVertexIndex(x, y) {\n    return this.coordsToBufferIndex[`${x}-${y}`].vertexIndex;\n  }\n\n  resetSquare(x, y) {\n    this.setColor(RESET_COLOR, x, y)\n  }\n\n  getObject3D() {\n    return this.plane;\n  }\n}\n","import * as THREE from 'three';\nimport {\n  BOX_SIZE,\n  HALF_BOX,\n  BOARD_DEPTH,\n  BOARD_WIDTH,\n  LINE_COLOR,\n} from '/js/game/constants';\n\nexport default class Grid {\n  constructor() {\n    const pixelWidth = BOARD_WIDTH * BOX_SIZE;\n    const pixelDepth = BOARD_DEPTH * BOX_SIZE;\n    const color =  new THREE.Color(LINE_COLOR);\n\n    const halfWidth = Math.round(pixelWidth / 2);\n\n    let j = 0\n    let vertices = [], colors = [];\n\n    for ( var i = 0, k = HALF_BOX; i <= BOARD_DEPTH; i ++, k -= BOX_SIZE ) {\n      vertices.push( -halfWidth, 0, k, halfWidth, 0, k );\n\n      color.toArray( colors, j ); j += 3;\n      color.toArray( colors, j ); j += 3;\n    }\n\n    for ( let i = 0; i <= BOARD_WIDTH; i++ ) {\n      const x = -halfWidth + (i * BOX_SIZE);\n      vertices.push( x, 0, HALF_BOX, x, 0, - pixelDepth + HALF_BOX );\n\n      color.toArray( colors, j ); j += 3;\n      color.toArray( colors, j ); j += 3;\n    }\n\n    var geometry = new THREE.BufferGeometry();\n    geometry.setAttribute( 'position', new THREE.Float32BufferAttribute( vertices, 3 ) );\n    geometry.setAttribute( 'color', new THREE.Float32BufferAttribute( colors, 3 ) );\n\n    var material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors } );\n\n    this.lines = new THREE.LineSegments( geometry, material );\n    this.lines.name = 'GridLines';\n  }\n\n  getObject3D() {\n    return this.lines;\n  }\n}\n","import * as THREE from 'three';\nimport { BOARD_WIDTH, BOARD_DEPTH } from '/js/game/constants';\nimport { getMoveOffset } from '/js/game/objects/Cube/static-helpers';\nimport BoardModel from './BoardModel';\nimport CubeModel from './CubeModel';\n\n\nexport default class Model {\n  constructor() {\n    this.v2 = new THREE.Vector2();\n\n    this.score = 0;\n\n    this.cube = new CubeModel();\n    this.board = new BoardModel();\n\n    this.cube.setPosition(this.board.getCubeStartingPosition());\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  updateCube(direction) {\n    this.cube.update(direction);\n  }\n\n  getCubePosition() {\n    return this.cube.getPosition();\n  }\n\n  getCubeStaticQaternion() {\n    return this.cube.getStaticQuaternion();\n  }\n\n  getBoardSquareValue(x, y) {\n    return this.board.getSide(x, y);\n  }\n\n  attemptPickup() {\n    return this.pickUpBoardSquare(this.cube.position.x, this.cube.position.y);\n  }\n\n  pickUpBoardSquare(x, y) {\n    const enemy = this.board.getSide(x, y);\n    if (enemy) {\n      this.board.pickUpSquare(x, y);\n      ++this.score;\n      this.onScoreUpdate && this.onScoreUpdate(this.score);\n      return true;\n    }\n    return false;\n  }\n\n  canMove(direction) {\n    this.v2.copy(this.cube.position).add(getMoveOffset(direction));\n\n    const x = this.v2.x;\n    const y = this.v2.y;\n\n    if (x < 0 || x >= BOARD_WIDTH) {\n      return false;\n    }\n\n    if (y < 0 || y >= BOARD_DEPTH) {\n      return false;\n    }\n\n    // If we have a colored tile, we can only move onto that square\n    // if the next top or bottom will match the tile color.\n    const enemySide = this.board.getSide(x, y);\n    if (enemySide) {\n      const nextTop = this.cube.getNextTopSide(direction);\n      const nextBottom = this.cube.getNextBottomSide(direction);\n      return enemySide === nextBottom || enemySide === nextTop;\n    }\n\n    return true;\n  }\n}\n","import * as THREE from 'three';\nimport { BOARD_DEPTH, BOARD_WIDTH } from '/js/game/constants';\n\n// We may not want to include 6 as an enemy side.\nconst SIDE_ENEMIES = [1, 2, 3, 4, 5];\nconst NUM_ENEMY_TYPES = SIDE_ENEMIES.length;\n\nexport default class BoardModel {\n  constructor() {\n    this.squares = [];\n\n    for (let x = 0; x < BOARD_WIDTH; x++) {\n      this.squares[x] = this.squares[x] || [];\n      for (let y = 0; y < BOARD_DEPTH; y++) {\n        this.squares[y] = this.squares[y] || [];\n\n        // Add occassional enemy.\n        if (Math.random() > 0.7) {\n          this.squares[x][y] = this.getRandomEnemySide();\n        }\n      }\n    }\n\n    this.startingPosition = new THREE.Vector2(Math.floor(BOARD_WIDTH / 2), 0);\n  }\n\n  getCubeStartingPosition() {\n    return this.startingPosition;\n  }\n\n  getSide(x, y) {\n    return this.squares[x] && this.squares[x][y];\n  }\n\n  pickUpSquare(x, y) {\n    this.squares[x][y] = undefined;\n  }\n\n  getRandomEnemySide() {\n    return SIDE_ENEMIES[ Math.round(Math.random() * (NUM_ENEMY_TYPES - 1)) ];\n  }\n}\n","import * as THREE from 'three';\nimport {\n  getAllQuaternionsForCube,\n  getMoveOffset,\n} from '/js/game/objects/Cube/static-helpers';\n\nimport {\n  SIDE_TOP,\n  SIDE_FRONT,\n  SIDE_RIGHT,\n  SIDE_LEFT,\n  SIDE_BACK,\n  SIDE_BOTTOM,\n  DIR_AHEAD,\n  DIR_LEFT,\n  DIR_RIGHT,\n  DIR_BACK,\n  STARTING_ORIENTATION,\n} from '/js/game/constants';\n\n\nexport default class CubeModel {\n  constructor() {\n    // Set up position and orientation on the playing surface.\n    this.top = STARTING_ORIENTATION[SIDE_TOP];\n    this.bottom = STARTING_ORIENTATION[SIDE_BOTTOM];\n    this.left = STARTING_ORIENTATION[SIDE_LEFT];\n    this.right = STARTING_ORIENTATION[SIDE_RIGHT];\n    this.front = STARTING_ORIENTATION[SIDE_FRONT];\n    this.back = STARTING_ORIENTATION[SIDE_BACK];\n\n    // Position will be in positive X/Y coordinates that map to X/-Z coords.\n    this.position = new THREE.Vector2();\n\n    // Cache quaternions to represent each of 24 orientations.\n    this.quaternions = getAllQuaternionsForCube();\n  }\n\n  getStaticQuaternion() {\n    return this.quaternions[`${this.top}_${this.back}`];\n  }\n\n  getPosition() {\n    return this.position;\n  }\n\n  setPosition(position) {\n    this.position.copy(position);\n  }\n\n  update(direction) {\n    // Update the rotation of the cube.\n    this.rotate(direction);\n\n    // Update position model.\n    this.position.add(getMoveOffset(direction));\n  }\n\n  getNextTopSide(direction) {\n    let dir = null;\n    switch(direction) {\n      case DIR_AHEAD:\n        dir = this.back;\n        break;\n\n      case DIR_LEFT:\n        dir = this.right;\n        break;\n\n      case DIR_RIGHT:\n        dir = this.left;\n        break;\n\n      case DIR_BACK:\n        dir = this.front;\n        break;\n    }\n\n    return dir;\n  }\n\n  getNextBottomSide(direction) {\n    let dir = null;\n    switch(direction) {\n      case DIR_AHEAD:\n        dir = this.front;\n        break;\n\n      case DIR_LEFT:\n        dir = this.left;\n        break;\n\n      case DIR_RIGHT:\n        dir = this.right;\n        break;\n\n      case DIR_BACK:\n        dir = this.back;\n        break;\n    }\n\n    return dir;\n  }\n\n  rotate(direction) {\n    switch(direction) {\n      case DIR_AHEAD:\n        [\n          this.top, this.front, this.bottom, this.back\n        ] = [\n          this.back, this.top, this.front, this.bottom\n        ];\n        break;\n\n      case DIR_LEFT:\n        [\n          this.top, this.left, this.bottom, this.right\n        ] = [\n          this.right, this.top, this.left, this.bottom\n        ];\n        break;\n\n      case DIR_RIGHT:\n        [\n          this.top, this.left, this.bottom, this.right\n        ] = [\n          this.left, this.bottom, this.right, this.top\n        ];\n        break;\n\n      case DIR_BACK:\n        [\n          this.top, this.front, this.bottom, this.back\n        ] = [\n          this.front, this.bottom, this.back, this.top\n        ];\n        break;\n\n      default:\n        console.log('unrecognized direction', direction);\n        break;\n    }\n  }\n}\n","import * as THREE from 'three';\n\nconst BORDER_SIZE = 2;\nconst FONT_COLOR = '#C1F2C9';\n\nexport default class Text {\n  constructor(height, content, x, y) {\n    this.height = Math.round(height);\n    this.xPos = x;\n    this.yPos = y;\n    this.mesh = this.getMesh(content);\n    this.setPosition();\n  }\n\n  getMesh(content) {\n    const canvas = this.makeTextCanvas(this.height, content);\n    this.width = canvas.width;\n\n    // because our canvas is likely not a power of 2\n    // in both dimensions set the filtering appropriately.\n    const texture = new THREE.CanvasTexture(canvas);\n    texture.minFilter = THREE.LinearFilter;\n    texture.wrapS = THREE.ClampToEdgeWrapping;\n    texture.wrapT = THREE.ClampToEdgeWrapping;\n    texture.needsUpdate = true;\n\n    const material = new THREE.MeshBasicMaterial({\n      map: texture,\n      side: THREE.DoubleSide,\n      transparent: true,\n    });\n\n    const geometry = new THREE.PlaneBufferGeometry(canvas.width, canvas.height);\n    geometry.name = `TextGeo-${content}`;\n\n    const mesh = new THREE.Mesh(geometry, material);\n    mesh.name = `TextMesh-${content}`;\n\n    return mesh;\n  }\n\n  setPosition(x = this.xPos, y = this.yPos) {\n    this.mesh.position.setX(x);\n    this.mesh.position.setY(y);\n  }\n\n  makeTextCanvas(size, content) {\n    const ctx = document.createElement('canvas').getContext('2d');\n    const font =  `${size}px bold sans-serif`;\n    ctx.font = font;\n\n    // measure how long the content will be\n    const doubleBorderSize = BORDER_SIZE * 2;\n    const width = ctx.measureText(content).width + doubleBorderSize;\n    const height = size + doubleBorderSize;\n    ctx.canvas.width = width;\n    ctx.canvas.height = height;\n\n    ctx.font = font;\n    ctx.textBaseline = 'top';\n    ctx.fillStyle = FONT_COLOR;\n    ctx.fillText(content, BORDER_SIZE, BORDER_SIZE);\n\n    return ctx.canvas;\n  }\n\n  update(content) {\n    content = content || '';\n    this.mesh = this.getMesh(content);\n    this.setPosition();\n  }\n\n  getObject3D() {\n    return this.mesh;\n  }\n}\n"]}